import {
  Chi,
  HashMD,
  Maj
} from "./chunk-LHTHZIPF.js";
import {
  BaseError,
  LruMap,
  checksumAddress,
  concat,
  defineFormatter,
  from,
  fromBoolean,
  fromBytes,
  fromNumber,
  fromString,
  fromString2,
  hexToBigInt,
  hexToNumber,
  isHex,
  keccak256,
  keccak_256,
  numberToHex,
  padLeft,
  padRight,
  size,
  size2,
  toHex
} from "./chunk-KPEVJZ4S.js";
import {
  clean,
  createHasher,
  rotl
} from "./chunk-MSJJOEBS.js";
import {
  Chi as Chi2,
  HashMD as HashMD2,
  Maj as Maj2,
  sha256
} from "./chunk-HS4ZJAMQ.js";
import {
  AbiDecodingZeroDataError,
  AtomicReadyWalletRejectedUpgradeError,
  AtomicityNotSupportedError,
  BaseError as BaseError2,
  BaseError2 as BaseError3,
  BundleTooLargeError,
  ChainDisconnectedError,
  ChainMismatchError,
  ChainNotFoundError,
  ContractFunctionExecutionError,
  ContractFunctionRevertedError,
  ContractFunctionZeroDataError,
  DuplicateIdError,
  ExecutionRevertedError,
  FeeCapTooHighError,
  HttpRequestError,
  IntegerOutOfRangeError,
  InternalRpcError,
  InvalidAddressError,
  InvalidChainIdError,
  InvalidInputRpcError,
  InvalidLegacyVError,
  InvalidParamsRpcError,
  InvalidRequestRpcError,
  InvalidSerializableTransactionError,
  InvalidStorageKeySizeError,
  JsonRpcVersionUnsupportedError,
  LimitExceededRpcError,
  LruMap as LruMap2,
  MethodNotFoundRpcError,
  MethodNotSupportedRpcError,
  ParseRpcError,
  ProviderDisconnectedError,
  RawContractError,
  ResourceNotFoundRpcError,
  ResourceUnavailableRpcError,
  RpcRequestError,
  SwitchChainError,
  TimeoutError,
  TipAboveFeeCapError,
  TransactionExecutionError,
  TransactionRejectedRpcError,
  UnauthorizedProviderError,
  UnknownBundleIdError,
  UnknownNodeError,
  UnknownRpcError,
  UnsupportedChainIdError,
  UnsupportedNonOptionalCapabilityError,
  UnsupportedProviderMethodError,
  UserRejectedRequestError,
  aInRange,
  abool,
  abytes,
  assertRequest,
  bitLen,
  bitMask,
  bytesToHex,
  bytesToHex2,
  bytesToNumberBE,
  bytesToNumberLE,
  checksumAddress as checksumAddress2,
  concat as concat2,
  concatBytes,
  concatHex,
  createBatchScheduler,
  createCursor,
  createHmacDrbg,
  defineFormatter as defineFormatter2,
  encodeFunctionData,
  ensureBytes,
  extract,
  formatAbiParameters,
  formatEther,
  formatGwei,
  formatTransactionRequest,
  formatUnits,
  from as from2,
  from2 as from3,
  fromBoolean as fromBoolean2,
  fromBytes as fromBytes2,
  fromHex,
  fromNumber as fromNumber2,
  fromString as fromString3,
  fromString2 as fromString4,
  getNodeError,
  hexToBigInt as hexToBigInt2,
  hexToBytes,
  hexToBytes2,
  hexToNumber as hexToNumber2,
  inRange,
  isAddress,
  isBytes,
  isHex as isHex2,
  keccak256 as keccak2562,
  maxUint256,
  memoized,
  numberToBytesBE,
  numberToBytesLE,
  numberToHex as numberToHex2,
  numberToHexUnpadded,
  padLeft as padLeft2,
  padRight as padRight2,
  parseAbiParameters,
  parseAccount,
  prettyPrint,
  serializeStateOverride,
  size as size3,
  size2 as size4,
  size3 as size5,
  slice,
  slice2,
  slice3,
  stringToHex,
  stringify,
  stringify2,
  toBigInt,
  toBoolean,
  toBytes,
  toHex as toHex2,
  toNumber,
  toNumber2,
  toString,
  trim,
  trimLeft,
  trimLeft2,
  utf8ToBytes,
  validate,
  validate2,
  validateObject
} from "./chunk-GLHT2DAB.js";
import {
  clean as clean2,
  createHasher as createHasher2,
  rotl as rotl2
} from "./chunk-CXAM2IBM.js";
import {
  css,
  unsafeCSS
} from "./chunk-S6EXHY4W.js";
import {
  __commonJS,
  __esm,
  __export,
  __reExport,
  __toCommonJS,
  __toESM
} from "./chunk-J24EG3OZ.js";

// node_modules/events/events.js
var require_events = __commonJS({
  "node_modules/events/events.js"(exports, module) {
    "use strict";
    var R4 = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R4 && typeof R4.apply === "function" ? R4.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R4 && typeof R4.ownKeys === "function") {
      ReflectOwnKeys = R4.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn)
        console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    module.exports = EventEmitter;
    module.exports.once = once;
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = void 0;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n5) {
      if (typeof n5 !== "number" || n5 < 0 || NumberIsNaN(n5)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n5 + ".");
      }
      this._maxListeners = n5;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i4 = 1; i4 < arguments.length; i4++)
        args.push(arguments[i4]);
      var doError = type === "error";
      var events = this._events;
      if (events !== void 0)
        doError = doError && events.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er3;
        if (args.length > 0)
          er3 = args[0];
        if (er3 instanceof Error) {
          throw er3;
        }
        var err = new Error("Unhandled error." + (er3 ? " (" + er3.message + ")" : ""));
        err.context = er3;
        throw err;
      }
      var handler = events[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i4 = 0; i4 < len; ++i4)
          ReflectApply(listeners[i4], this, args);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m4;
      var events;
      var existing;
      checkListener(listener);
      events = target._events;
      if (events === void 0) {
        events = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events.newListener !== void 0) {
          target.emit(
            "newListener",
            type,
            listener.listener ? listener.listener : listener
          );
          events = target._events;
        }
        existing = events[type];
      }
      if (existing === void 0) {
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m4 = _getMaxListeners(target);
        if (m4 > 0 && existing.length > m4 && !existing.warned) {
          existing.warned = true;
          var w5 = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w5.name = "MaxListenersExceededWarning";
          w5.emitter = target;
          w5.type = type;
          w5.count = existing.length;
          ProcessEmitWarning(w5);
        }
      }
      return target;
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state25 = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state25);
      wrapped.listener = listener;
      state25.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter.prototype.once = function once2(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
      var list, events, position, i4, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === void 0)
        return this;
      list = events[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i4 = list.length - 1; i4 >= 0; i4--) {
          if (list[i4] === listener || list[i4].listener === listener) {
            originalListener = list[i4].listener;
            position = i4;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events[type] = list[0];
        if (events.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events, i4;
      events = this._events;
      if (events === void 0)
        return this;
      if (events.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys2 = Object.keys(events);
        var key;
        for (i4 = 0; i4 < keys2.length; ++i4) {
          key = keys2[i4];
          if (key === "removeListener")
            continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i4 = listeners.length - 1; i4 >= 0; i4--) {
          this.removeListener(type, listeners[i4]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap3) {
      var events = target._events;
      if (events === void 0)
        return [];
      var evlistener = events[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap3 ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap3 ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;
      if (events !== void 0) {
        var evlistener = events[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n5) {
      var copy = new Array(n5);
      for (var i4 = 0; i4 < n5; ++i4)
        copy[i4] = arr[i4];
      return copy;
    }
    function spliceOne(list, index2) {
      for (; index2 + 1 < list.length; index2++)
        list[index2] = list[index2 + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i4 = 0; i4 < ret.length; ++i4) {
        ret[i4] = arr[i4].listener || arr[i4];
      }
      return ret;
    }
    function once(emitter, name2) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name2, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name2, resolver, { once: true });
        if (name2 !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name2, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name2, listener);
        } else {
          emitter.on(name2, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name2, function wrapListener(arg) {
          if (flags.once) {
            emitter.removeEventListener(name2, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __read: () => __read,
  __rest: () => __rest,
  __spread: () => __spread,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values
});
function __extends(d5, b5) {
  extendStatics(d5, b5);
  function __() {
    this.constructor = d5;
  }
  d5.prototype = b5 === null ? Object.create(b5) : (__.prototype = b5.prototype, new __());
}
function __rest(s3, e2) {
  var t = {};
  for (var p5 in s3)
    if (Object.prototype.hasOwnProperty.call(s3, p5) && e2.indexOf(p5) < 0)
      t[p5] = s3[p5];
  if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i4 = 0, p5 = Object.getOwnPropertySymbols(s3); i4 < p5.length; i4++) {
      if (e2.indexOf(p5[i4]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p5[i4]))
        t[p5[i4]] = s3[p5[i4]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c7 = arguments.length, r3 = c7 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d5;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r3 = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i4 = decorators.length - 1; i4 >= 0; i4--)
      if (d5 = decorators[i4])
        r3 = (c7 < 3 ? d5(r3) : c7 > 3 ? d5(target, key, r3) : d5(target, key)) || r3;
  return c7 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P6, generator) {
  function adopt(value) {
    return value instanceof P6 ? value : new P6(function(resolve) {
      resolve(value);
    });
  }
  return new (P6 || (P6 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _3 = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f8, y6, t, g4;
  return g4 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g4[Symbol.iterator] = function() {
    return this;
  }), g4;
  function verb(n5) {
    return function(v6) {
      return step([n5, v6]);
    };
  }
  function step(op) {
    if (f8)
      throw new TypeError("Generator is already executing.");
    while (_3)
      try {
        if (f8 = 1, y6 && (t = op[0] & 2 ? y6["return"] : op[0] ? y6["throw"] || ((t = y6["return"]) && t.call(y6), 0) : y6.next) && !(t = t.call(y6, op[1])).done)
          return t;
        if (y6 = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _3.label++;
            return { value: op[1], done: false };
          case 5:
            _3.label++;
            y6 = op[1];
            op = [0];
            continue;
          case 7:
            op = _3.ops.pop();
            _3.trys.pop();
            continue;
          default:
            if (!(t = _3.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _3 = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _3.label = op[1];
              break;
            }
            if (op[0] === 6 && _3.label < t[1]) {
              _3.label = t[1];
              t = op;
              break;
            }
            if (t && _3.label < t[2]) {
              _3.label = t[2];
              _3.ops.push(op);
              break;
            }
            if (t[2])
              _3.ops.pop();
            _3.trys.pop();
            continue;
        }
        op = body.call(thisArg, _3);
      } catch (e2) {
        op = [6, e2];
        y6 = 0;
      } finally {
        f8 = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding(o5, m4, k6, k22) {
  if (k22 === void 0)
    k22 = k6;
  o5[k22] = m4[k6];
}
function __exportStar(m4, exports) {
  for (var p5 in m4)
    if (p5 !== "default" && !exports.hasOwnProperty(p5))
      exports[p5] = m4[p5];
}
function __values(o5) {
  var s3 = typeof Symbol === "function" && Symbol.iterator, m4 = s3 && o5[s3], i4 = 0;
  if (m4)
    return m4.call(o5);
  if (o5 && typeof o5.length === "number")
    return {
      next: function() {
        if (o5 && i4 >= o5.length)
          o5 = void 0;
        return { value: o5 && o5[i4++], done: !o5 };
      }
    };
  throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o5, n5) {
  var m4 = typeof Symbol === "function" && o5[Symbol.iterator];
  if (!m4)
    return o5;
  var i4 = m4.call(o5), r3, ar3 = [], e2;
  try {
    while ((n5 === void 0 || n5-- > 0) && !(r3 = i4.next()).done)
      ar3.push(r3.value);
  } catch (error) {
    e2 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m4 = i4["return"]))
        m4.call(i4);
    } finally {
      if (e2)
        throw e2.error;
    }
  }
  return ar3;
}
function __spread() {
  for (var ar3 = [], i4 = 0; i4 < arguments.length; i4++)
    ar3 = ar3.concat(__read(arguments[i4]));
  return ar3;
}
function __spreadArrays() {
  for (var s3 = 0, i4 = 0, il = arguments.length; i4 < il; i4++)
    s3 += arguments[i4].length;
  for (var r3 = Array(s3), k6 = 0, i4 = 0; i4 < il; i4++)
    for (var a3 = arguments[i4], j5 = 0, jl = a3.length; j5 < jl; j5++, k6++)
      r3[k6] = a3[j5];
  return r3;
}
function __await(v6) {
  return this instanceof __await ? (this.v = v6, this) : new __await(v6);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g4 = generator.apply(thisArg, _arguments || []), i4, q2 = [];
  return i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
    return this;
  }, i4;
  function verb(n5) {
    if (g4[n5])
      i4[n5] = function(v6) {
        return new Promise(function(a3, b5) {
          q2.push([n5, v6, a3, b5]) > 1 || resume(n5, v6);
        });
      };
  }
  function resume(n5, v6) {
    try {
      step(g4[n5](v6));
    } catch (e2) {
      settle(q2[0][3], e2);
    }
  }
  function step(r3) {
    r3.value instanceof __await ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q2[0][2], r3);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f8, v6) {
    if (f8(v6), q2.shift(), q2.length)
      resume(q2[0][0], q2[0][1]);
  }
}
function __asyncDelegator(o5) {
  var i4, p5;
  return i4 = {}, verb("next"), verb("throw", function(e2) {
    throw e2;
  }), verb("return"), i4[Symbol.iterator] = function() {
    return this;
  }, i4;
  function verb(n5, f8) {
    i4[n5] = o5[n5] ? function(v6) {
      return (p5 = !p5) ? { value: __await(o5[n5](v6)), done: n5 === "return" } : f8 ? f8(v6) : v6;
    } : f8;
  }
}
function __asyncValues(o5) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m4 = o5[Symbol.asyncIterator], i4;
  return m4 ? m4.call(o5) : (o5 = typeof __values === "function" ? __values(o5) : o5[Symbol.iterator](), i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
    return this;
  }, i4);
  function verb(n5) {
    i4[n5] = o5[n5] && function(v6) {
      return new Promise(function(resolve, reject) {
        v6 = o5[n5](v6), settle(resolve, reject, v6.done, v6.value);
      });
    };
  }
  function settle(resolve, reject, d5, v6) {
    Promise.resolve(v6).then(function(v7) {
      resolve({ value: v7, done: d5 });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod2) {
  if (mod2 && mod2.__esModule)
    return mod2;
  var result = {};
  if (mod2 != null) {
    for (var k6 in mod2)
      if (Object.hasOwnProperty.call(mod2, k6))
        result[k6] = mod2[k6];
  }
  result.default = mod2;
  return result;
}
function __importDefault(mod2) {
  return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
}
function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics, __assign;
var init_tslib_es6 = __esm({
  "node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js"() {
    extendStatics = function(d5, b5) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d6, b6) {
        d6.__proto__ = b6;
      } || function(d6, b6) {
        for (var p5 in b6)
          if (b6.hasOwnProperty(p5))
            d6[p5] = b6[p5];
      };
      return extendStatics(d5, b5);
    };
    __assign = function() {
      __assign = Object.assign || function __assign3(t) {
        for (var s3, i4 = 1, n5 = arguments.length; i4 < n5; i4++) {
          s3 = arguments[i4];
          for (var p5 in s3)
            if (Object.prototype.hasOwnProperty.call(s3, p5))
              t[p5] = s3[p5];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/delay.js
var require_delay = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/delay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.delay = void 0;
    function delay(timeout) {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve(true);
        }, timeout);
      });
    }
    exports.delay = delay;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/misc.js
var require_misc = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/misc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_THOUSAND = exports.ONE_HUNDRED = void 0;
    exports.ONE_HUNDRED = 100;
    exports.ONE_THOUSAND = 1e3;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/time.js
var require_time = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/time.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_YEAR = exports.FOUR_WEEKS = exports.THREE_WEEKS = exports.TWO_WEEKS = exports.ONE_WEEK = exports.THIRTY_DAYS = exports.SEVEN_DAYS = exports.FIVE_DAYS = exports.THREE_DAYS = exports.ONE_DAY = exports.TWENTY_FOUR_HOURS = exports.TWELVE_HOURS = exports.SIX_HOURS = exports.THREE_HOURS = exports.ONE_HOUR = exports.SIXTY_MINUTES = exports.THIRTY_MINUTES = exports.TEN_MINUTES = exports.FIVE_MINUTES = exports.ONE_MINUTE = exports.SIXTY_SECONDS = exports.THIRTY_SECONDS = exports.TEN_SECONDS = exports.FIVE_SECONDS = exports.ONE_SECOND = void 0;
    exports.ONE_SECOND = 1;
    exports.FIVE_SECONDS = 5;
    exports.TEN_SECONDS = 10;
    exports.THIRTY_SECONDS = 30;
    exports.SIXTY_SECONDS = 60;
    exports.ONE_MINUTE = exports.SIXTY_SECONDS;
    exports.FIVE_MINUTES = exports.ONE_MINUTE * 5;
    exports.TEN_MINUTES = exports.ONE_MINUTE * 10;
    exports.THIRTY_MINUTES = exports.ONE_MINUTE * 30;
    exports.SIXTY_MINUTES = exports.ONE_MINUTE * 60;
    exports.ONE_HOUR = exports.SIXTY_MINUTES;
    exports.THREE_HOURS = exports.ONE_HOUR * 3;
    exports.SIX_HOURS = exports.ONE_HOUR * 6;
    exports.TWELVE_HOURS = exports.ONE_HOUR * 12;
    exports.TWENTY_FOUR_HOURS = exports.ONE_HOUR * 24;
    exports.ONE_DAY = exports.TWENTY_FOUR_HOURS;
    exports.THREE_DAYS = exports.ONE_DAY * 3;
    exports.FIVE_DAYS = exports.ONE_DAY * 5;
    exports.SEVEN_DAYS = exports.ONE_DAY * 7;
    exports.THIRTY_DAYS = exports.ONE_DAY * 30;
    exports.ONE_WEEK = exports.SEVEN_DAYS;
    exports.TWO_WEEKS = exports.ONE_WEEK * 2;
    exports.THREE_WEEKS = exports.ONE_WEEK * 3;
    exports.FOUR_WEEKS = exports.ONE_WEEK * 4;
    exports.ONE_YEAR = exports.ONE_DAY * 365;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/index.js
var require_constants = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_misc(), exports);
    tslib_1.__exportStar(require_time(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/convert.js
var require_convert = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/convert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromMiliseconds = exports.toMiliseconds = void 0;
    var constants_1 = require_constants();
    function toMiliseconds(seconds) {
      return seconds * constants_1.ONE_THOUSAND;
    }
    exports.toMiliseconds = toMiliseconds;
    function fromMiliseconds(miliseconds) {
      return Math.floor(miliseconds / constants_1.ONE_THOUSAND);
    }
    exports.fromMiliseconds = fromMiliseconds;
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/index.js
var require_utils = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_delay(), exports);
    tslib_1.__exportStar(require_convert(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/watch.js
var require_watch = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Watch = void 0;
    var Watch = class {
      constructor() {
        this.timestamps = /* @__PURE__ */ new Map();
      }
      start(label) {
        if (this.timestamps.has(label)) {
          throw new Error(`Watch already started for label: ${label}`);
        }
        this.timestamps.set(label, { started: Date.now() });
      }
      stop(label) {
        const timestamp = this.get(label);
        if (typeof timestamp.elapsed !== "undefined") {
          throw new Error(`Watch already stopped for label: ${label}`);
        }
        const elapsed = Date.now() - timestamp.started;
        this.timestamps.set(label, { started: timestamp.started, elapsed });
      }
      get(label) {
        const timestamp = this.timestamps.get(label);
        if (typeof timestamp === "undefined") {
          throw new Error(`No timestamp found for label: ${label}`);
        }
        return timestamp;
      }
      elapsed(label) {
        const timestamp = this.get(label);
        const elapsed = timestamp.elapsed || Date.now() - timestamp.started;
        return elapsed;
      }
    };
    exports.Watch = Watch;
    exports.default = Watch;
  }
});

// node_modules/@walletconnect/time/dist/cjs/types/watch.js
var require_watch2 = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/types/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IWatch = void 0;
    var IWatch = class {
    };
    exports.IWatch = IWatch;
  }
});

// node_modules/@walletconnect/time/dist/cjs/types/index.js
var require_types = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/types/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_watch2(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_utils(), exports);
    tslib_1.__exportStar(require_watch(), exports);
    tslib_1.__exportStar(require_types(), exports);
    tslib_1.__exportStar(require_constants(), exports);
  }
});

// node_modules/quick-format-unescaped/index.js
var require_quick_format_unescaped = __commonJS({
  "node_modules/quick-format-unescaped/index.js"(exports, module) {
    "use strict";
    function tryStringify(o5) {
      try {
        return JSON.stringify(o5);
      } catch (e2) {
        return '"[Circular]"';
      }
    }
    module.exports = format;
    function format(f8, args, opts) {
      var ss2 = opts && opts.stringify || tryStringify;
      var offset = 1;
      if (typeof f8 === "object" && f8 !== null) {
        var len = args.length + offset;
        if (len === 1)
          return f8;
        var objects = new Array(len);
        objects[0] = ss2(f8);
        for (var index2 = 1; index2 < len; index2++) {
          objects[index2] = ss2(args[index2]);
        }
        return objects.join(" ");
      }
      if (typeof f8 !== "string") {
        return f8;
      }
      var argLen = args.length;
      if (argLen === 0)
        return f8;
      var str = "";
      var a3 = 1 - offset;
      var lastPos = -1;
      var flen = f8 && f8.length || 0;
      for (var i4 = 0; i4 < flen; ) {
        if (f8.charCodeAt(i4) === 37 && i4 + 1 < flen) {
          lastPos = lastPos > -1 ? lastPos : 0;
          switch (f8.charCodeAt(i4 + 1)) {
            case 100:
            case 102:
              if (a3 >= argLen)
                break;
              if (args[a3] == null)
                break;
              if (lastPos < i4)
                str += f8.slice(lastPos, i4);
              str += Number(args[a3]);
              lastPos = i4 + 2;
              i4++;
              break;
            case 105:
              if (a3 >= argLen)
                break;
              if (args[a3] == null)
                break;
              if (lastPos < i4)
                str += f8.slice(lastPos, i4);
              str += Math.floor(Number(args[a3]));
              lastPos = i4 + 2;
              i4++;
              break;
            case 79:
            case 111:
            case 106:
              if (a3 >= argLen)
                break;
              if (args[a3] === void 0)
                break;
              if (lastPos < i4)
                str += f8.slice(lastPos, i4);
              var type = typeof args[a3];
              if (type === "string") {
                str += "'" + args[a3] + "'";
                lastPos = i4 + 2;
                i4++;
                break;
              }
              if (type === "function") {
                str += args[a3].name || "<anonymous>";
                lastPos = i4 + 2;
                i4++;
                break;
              }
              str += ss2(args[a3]);
              lastPos = i4 + 2;
              i4++;
              break;
            case 115:
              if (a3 >= argLen)
                break;
              if (lastPos < i4)
                str += f8.slice(lastPos, i4);
              str += String(args[a3]);
              lastPos = i4 + 2;
              i4++;
              break;
            case 37:
              if (lastPos < i4)
                str += f8.slice(lastPos, i4);
              str += "%";
              lastPos = i4 + 2;
              i4++;
              a3--;
              break;
          }
          ++a3;
        }
        ++i4;
      }
      if (lastPos === -1)
        return f8;
      else if (lastPos < flen) {
        str += f8.slice(lastPos);
      }
      return str;
    }
  }
});

// node_modules/pino/browser.js
var require_browser = __commonJS({
  "node_modules/pino/browser.js"(exports, module) {
    "use strict";
    var format = require_quick_format_unescaped();
    module.exports = pino;
    var _console = pfGlobalThisOrFallback().console || {};
    var stdSerializers = {
      mapHttpRequest: mock,
      mapHttpResponse: mock,
      wrapRequestSerializer: passthrough,
      wrapResponseSerializer: passthrough,
      wrapErrorSerializer: passthrough,
      req: mock,
      res: mock,
      err: asErrValue
    };
    function shouldSerialize(serialize, serializers) {
      if (Array.isArray(serialize)) {
        const hasToFilter = serialize.filter(function(k6) {
          return k6 !== "!stdSerializers.err";
        });
        return hasToFilter;
      } else if (serialize === true) {
        return Object.keys(serializers);
      }
      return false;
    }
    function pino(opts) {
      opts = opts || {};
      opts.browser = opts.browser || {};
      const transmit2 = opts.browser.transmit;
      if (transmit2 && typeof transmit2.send !== "function") {
        throw Error("pino: transmit option must have a send function");
      }
      const proto = opts.browser.write || _console;
      if (opts.browser.write)
        opts.browser.asObject = true;
      const serializers = opts.serializers || {};
      const serialize = shouldSerialize(opts.browser.serialize, serializers);
      let stdErrSerialize = opts.browser.serialize;
      if (Array.isArray(opts.browser.serialize) && opts.browser.serialize.indexOf("!stdSerializers.err") > -1)
        stdErrSerialize = false;
      const levels = ["error", "fatal", "warn", "info", "debug", "trace"];
      if (typeof proto === "function") {
        proto.error = proto.fatal = proto.warn = proto.info = proto.debug = proto.trace = proto;
      }
      if (opts.enabled === false)
        opts.level = "silent";
      const level = opts.level || "info";
      const logger = Object.create(proto);
      if (!logger.log)
        logger.log = noop;
      Object.defineProperty(logger, "levelVal", {
        get: getLevelVal
      });
      Object.defineProperty(logger, "level", {
        get: getLevel,
        set: setLevel
      });
      const setOpts = {
        transmit: transmit2,
        serialize,
        asObject: opts.browser.asObject,
        levels,
        timestamp: getTimeFunction(opts)
      };
      logger.levels = pino.levels;
      logger.level = level;
      logger.setMaxListeners = logger.getMaxListeners = logger.emit = logger.addListener = logger.on = logger.prependListener = logger.once = logger.prependOnceListener = logger.removeListener = logger.removeAllListeners = logger.listeners = logger.listenerCount = logger.eventNames = logger.write = logger.flush = noop;
      logger.serializers = serializers;
      logger._serialize = serialize;
      logger._stdErrSerialize = stdErrSerialize;
      logger.child = child;
      if (transmit2)
        logger._logEvent = createLogEventShape();
      function getLevelVal() {
        return this.level === "silent" ? Infinity : this.levels.values[this.level];
      }
      function getLevel() {
        return this._level;
      }
      function setLevel(level2) {
        if (level2 !== "silent" && !this.levels.values[level2]) {
          throw Error("unknown level " + level2);
        }
        this._level = level2;
        set2(setOpts, logger, "error", "log");
        set2(setOpts, logger, "fatal", "error");
        set2(setOpts, logger, "warn", "error");
        set2(setOpts, logger, "info", "log");
        set2(setOpts, logger, "debug", "log");
        set2(setOpts, logger, "trace", "log");
      }
      function child(bindings, childOptions) {
        if (!bindings) {
          throw new Error("missing bindings for child Pino");
        }
        childOptions = childOptions || {};
        if (serialize && bindings.serializers) {
          childOptions.serializers = bindings.serializers;
        }
        const childOptionsSerializers = childOptions.serializers;
        if (serialize && childOptionsSerializers) {
          var childSerializers = Object.assign({}, serializers, childOptionsSerializers);
          var childSerialize = opts.browser.serialize === true ? Object.keys(childSerializers) : serialize;
          delete bindings.serializers;
          applySerializers([bindings], childSerialize, childSerializers, this._stdErrSerialize);
        }
        function Child(parent) {
          this._childLevel = (parent._childLevel | 0) + 1;
          this.error = bind(parent, bindings, "error");
          this.fatal = bind(parent, bindings, "fatal");
          this.warn = bind(parent, bindings, "warn");
          this.info = bind(parent, bindings, "info");
          this.debug = bind(parent, bindings, "debug");
          this.trace = bind(parent, bindings, "trace");
          if (childSerializers) {
            this.serializers = childSerializers;
            this._serialize = childSerialize;
          }
          if (transmit2) {
            this._logEvent = createLogEventShape(
              [].concat(parent._logEvent.bindings, bindings)
            );
          }
        }
        Child.prototype = this;
        return new Child(this);
      }
      return logger;
    }
    pino.levels = {
      values: {
        fatal: 60,
        error: 50,
        warn: 40,
        info: 30,
        debug: 20,
        trace: 10
      },
      labels: {
        10: "trace",
        20: "debug",
        30: "info",
        40: "warn",
        50: "error",
        60: "fatal"
      }
    };
    pino.stdSerializers = stdSerializers;
    pino.stdTimeFunctions = Object.assign({}, { nullTime, epochTime, unixTime, isoTime });
    function set2(opts, logger, level, fallback3) {
      const proto = Object.getPrototypeOf(logger);
      logger[level] = logger.levelVal > logger.levels.values[level] ? noop : proto[level] ? proto[level] : _console[level] || _console[fallback3] || noop;
      wrap3(opts, logger, level);
    }
    function wrap3(opts, logger, level) {
      if (!opts.transmit && logger[level] === noop)
        return;
      logger[level] = function(write) {
        return function LOG() {
          const ts2 = opts.timestamp();
          const args = new Array(arguments.length);
          const proto = Object.getPrototypeOf && Object.getPrototypeOf(this) === _console ? _console : this;
          for (var i4 = 0; i4 < args.length; i4++)
            args[i4] = arguments[i4];
          if (opts.serialize && !opts.asObject) {
            applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize);
          }
          if (opts.asObject)
            write.call(proto, asObject(this, level, args, ts2));
          else
            write.apply(proto, args);
          if (opts.transmit) {
            const transmitLevel = opts.transmit.level || logger.level;
            const transmitValue = pino.levels.values[transmitLevel];
            const methodValue = pino.levels.values[level];
            if (methodValue < transmitValue)
              return;
            transmit(this, {
              ts: ts2,
              methodLevel: level,
              methodValue,
              transmitLevel,
              transmitValue: pino.levels.values[opts.transmit.level || logger.level],
              send: opts.transmit.send,
              val: logger.levelVal
            }, args);
          }
        };
      }(logger[level]);
    }
    function asObject(logger, level, args, ts2) {
      if (logger._serialize)
        applySerializers(args, logger._serialize, logger.serializers, logger._stdErrSerialize);
      const argsCloned = args.slice();
      let msg = argsCloned[0];
      const o5 = {};
      if (ts2) {
        o5.time = ts2;
      }
      o5.level = pino.levels.values[level];
      let lvl = (logger._childLevel | 0) + 1;
      if (lvl < 1)
        lvl = 1;
      if (msg !== null && typeof msg === "object") {
        while (lvl-- && typeof argsCloned[0] === "object") {
          Object.assign(o5, argsCloned.shift());
        }
        msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : void 0;
      } else if (typeof msg === "string")
        msg = format(argsCloned.shift(), argsCloned);
      if (msg !== void 0)
        o5.msg = msg;
      return o5;
    }
    function applySerializers(args, serialize, serializers, stdErrSerialize) {
      for (const i4 in args) {
        if (stdErrSerialize && args[i4] instanceof Error) {
          args[i4] = pino.stdSerializers.err(args[i4]);
        } else if (typeof args[i4] === "object" && !Array.isArray(args[i4])) {
          for (const k6 in args[i4]) {
            if (serialize && serialize.indexOf(k6) > -1 && k6 in serializers) {
              args[i4][k6] = serializers[k6](args[i4][k6]);
            }
          }
        }
      }
    }
    function bind(parent, bindings, level) {
      return function() {
        const args = new Array(1 + arguments.length);
        args[0] = bindings;
        for (var i4 = 1; i4 < args.length; i4++) {
          args[i4] = arguments[i4 - 1];
        }
        return parent[level].apply(this, args);
      };
    }
    function transmit(logger, opts, args) {
      const send = opts.send;
      const ts2 = opts.ts;
      const methodLevel = opts.methodLevel;
      const methodValue = opts.methodValue;
      const val = opts.val;
      const bindings = logger._logEvent.bindings;
      applySerializers(
        args,
        logger._serialize || Object.keys(logger.serializers),
        logger.serializers,
        logger._stdErrSerialize === void 0 ? true : logger._stdErrSerialize
      );
      logger._logEvent.ts = ts2;
      logger._logEvent.messages = args.filter(function(arg) {
        return bindings.indexOf(arg) === -1;
      });
      logger._logEvent.level.label = methodLevel;
      logger._logEvent.level.value = methodValue;
      send(methodLevel, logger._logEvent, val);
      logger._logEvent = createLogEventShape(bindings);
    }
    function createLogEventShape(bindings) {
      return {
        ts: 0,
        messages: [],
        bindings: bindings || [],
        level: { label: "", value: 0 }
      };
    }
    function asErrValue(err) {
      const obj = {
        type: err.constructor.name,
        msg: err.message,
        stack: err.stack
      };
      for (const key in err) {
        if (obj[key] === void 0) {
          obj[key] = err[key];
        }
      }
      return obj;
    }
    function getTimeFunction(opts) {
      if (typeof opts.timestamp === "function") {
        return opts.timestamp;
      }
      if (opts.timestamp === false) {
        return nullTime;
      }
      return epochTime;
    }
    function mock() {
      return {};
    }
    function passthrough(a3) {
      return a3;
    }
    function noop() {
    }
    function nullTime() {
      return false;
    }
    function epochTime() {
      return Date.now();
    }
    function unixTime() {
      return Math.round(Date.now() / 1e3);
    }
    function isoTime() {
      return new Date(Date.now()).toISOString();
    }
    function pfGlobalThisOrFallback() {
      function defd(o5) {
        return typeof o5 !== "undefined" && o5;
      }
      try {
        if (typeof globalThis !== "undefined")
          return globalThis;
        Object.defineProperty(Object.prototype, "globalThis", {
          get: function() {
            delete Object.prototype.globalThis;
            return this.globalThis = this;
          },
          configurable: true
        });
        return globalThis;
      } catch (e2) {
        return defd(self) || defd(window) || defd(this) || {};
      }
    }
  }
});

// node_modules/@walletconnect/window-getters/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/@walletconnect/window-getters/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
    function getFromWindow(name2) {
      let res = void 0;
      if (typeof window !== "undefined" && typeof window[name2] !== "undefined") {
        res = window[name2];
      }
      return res;
    }
    exports.getFromWindow = getFromWindow;
    function getFromWindowOrThrow(name2) {
      const res = getFromWindow(name2);
      if (!res) {
        throw new Error(`${name2} is not defined in Window`);
      }
      return res;
    }
    exports.getFromWindowOrThrow = getFromWindowOrThrow;
    function getDocumentOrThrow() {
      return getFromWindowOrThrow("document");
    }
    exports.getDocumentOrThrow = getDocumentOrThrow;
    function getDocument() {
      return getFromWindow("document");
    }
    exports.getDocument = getDocument;
    function getNavigatorOrThrow() {
      return getFromWindowOrThrow("navigator");
    }
    exports.getNavigatorOrThrow = getNavigatorOrThrow;
    function getNavigator() {
      return getFromWindow("navigator");
    }
    exports.getNavigator = getNavigator;
    function getLocationOrThrow() {
      return getFromWindowOrThrow("location");
    }
    exports.getLocationOrThrow = getLocationOrThrow;
    function getLocation() {
      return getFromWindow("location");
    }
    exports.getLocation = getLocation;
    function getCryptoOrThrow() {
      return getFromWindowOrThrow("crypto");
    }
    exports.getCryptoOrThrow = getCryptoOrThrow;
    function getCrypto() {
      return getFromWindow("crypto");
    }
    exports.getCrypto = getCrypto;
    function getLocalStorageOrThrow() {
      return getFromWindowOrThrow("localStorage");
    }
    exports.getLocalStorageOrThrow = getLocalStorageOrThrow;
    function getLocalStorage() {
      return getFromWindow("localStorage");
    }
    exports.getLocalStorage = getLocalStorage;
  }
});

// node_modules/@walletconnect/window-metadata/dist/cjs/index.js
var require_cjs3 = __commonJS({
  "node_modules/@walletconnect/window-metadata/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWindowMetadata = void 0;
    var window_getters_1 = require_cjs2();
    function getWindowMetadata() {
      let doc;
      let loc;
      try {
        doc = window_getters_1.getDocumentOrThrow();
        loc = window_getters_1.getLocationOrThrow();
      } catch (e2) {
        return null;
      }
      function getIcons() {
        const links = doc.getElementsByTagName("link");
        const icons2 = [];
        for (let i4 = 0; i4 < links.length; i4++) {
          const link = links[i4];
          const rel = link.getAttribute("rel");
          if (rel) {
            if (rel.toLowerCase().indexOf("icon") > -1) {
              const href = link.getAttribute("href");
              if (href) {
                if (href.toLowerCase().indexOf("https:") === -1 && href.toLowerCase().indexOf("http:") === -1 && href.indexOf("//") !== 0) {
                  let absoluteHref = loc.protocol + "//" + loc.host;
                  if (href.indexOf("/") === 0) {
                    absoluteHref += href;
                  } else {
                    const path = loc.pathname.split("/");
                    path.pop();
                    const finalPath = path.join("/");
                    absoluteHref += finalPath + "/" + href;
                  }
                  icons2.push(absoluteHref);
                } else if (href.indexOf("//") === 0) {
                  const absoluteUrl = loc.protocol + href;
                  icons2.push(absoluteUrl);
                } else {
                  icons2.push(href);
                }
              }
            }
          }
        }
        return icons2;
      }
      function getWindowMetadataOfAny(...args) {
        const metaTags = doc.getElementsByTagName("meta");
        for (let i4 = 0; i4 < metaTags.length; i4++) {
          const tag = metaTags[i4];
          const attributes = ["itemprop", "property", "name"].map((target) => tag.getAttribute(target)).filter((attr) => {
            if (attr) {
              return args.includes(attr);
            }
            return false;
          });
          if (attributes.length && attributes) {
            const content = tag.getAttribute("content");
            if (content) {
              return content;
            }
          }
        }
        return "";
      }
      function getName() {
        let name3 = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
        if (!name3) {
          name3 = doc.title;
        }
        return name3;
      }
      function getDescription() {
        const description2 = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
        return description2;
      }
      const name2 = getName();
      const description = getDescription();
      const url = loc.origin;
      const icons = getIcons();
      const meta = {
        description,
        url,
        icons,
        name: name2
      };
      return meta;
    }
    exports.getWindowMetadata = getWindowMetadata;
  }
});

// node_modules/blakejs/util.js
var require_util = __commonJS({
  "node_modules/blakejs/util.js"(exports, module) {
    var ERROR_MSG_INPUT = "Input must be an string, Buffer or Uint8Array";
    function normalizeInput(input) {
      let ret;
      if (input instanceof Uint8Array) {
        ret = input;
      } else if (typeof input === "string") {
        const encoder = new TextEncoder();
        ret = encoder.encode(input);
      } else {
        throw new Error(ERROR_MSG_INPUT);
      }
      return ret;
    }
    function toHex5(bytes) {
      return Array.prototype.map.call(bytes, function(n5) {
        return (n5 < 16 ? "0" : "") + n5.toString(16);
      }).join("");
    }
    function uint32ToHex(val) {
      return (4294967296 + val).toString(16).substring(1);
    }
    function debugPrint(label, arr, size8) {
      let msg = "\n" + label + " = ";
      for (let i4 = 0; i4 < arr.length; i4 += 2) {
        if (size8 === 32) {
          msg += uint32ToHex(arr[i4]).toUpperCase();
          msg += " ";
          msg += uint32ToHex(arr[i4 + 1]).toUpperCase();
        } else if (size8 === 64) {
          msg += uint32ToHex(arr[i4 + 1]).toUpperCase();
          msg += uint32ToHex(arr[i4]).toUpperCase();
        } else
          throw new Error("Invalid size " + size8);
        if (i4 % 6 === 4) {
          msg += "\n" + new Array(label.length + 4).join(" ");
        } else if (i4 < arr.length - 2) {
          msg += " ";
        }
      }
      console.log(msg);
    }
    function testSpeed(hashFn, N13, M5) {
      let startMs = (/* @__PURE__ */ new Date()).getTime();
      const input = new Uint8Array(N13);
      for (let i4 = 0; i4 < N13; i4++) {
        input[i4] = i4 % 256;
      }
      const genMs = (/* @__PURE__ */ new Date()).getTime();
      console.log("Generated random input in " + (genMs - startMs) + "ms");
      startMs = genMs;
      for (let i4 = 0; i4 < M5; i4++) {
        const hashHex = hashFn(input);
        const hashMs = (/* @__PURE__ */ new Date()).getTime();
        const ms2 = hashMs - startMs;
        startMs = hashMs;
        console.log("Hashed in " + ms2 + "ms: " + hashHex.substring(0, 20) + "...");
        console.log(
          Math.round(N13 / (1 << 20) / (ms2 / 1e3) * 100) / 100 + " MB PER SECOND"
        );
      }
    }
    module.exports = {
      normalizeInput,
      toHex: toHex5,
      debugPrint,
      testSpeed
    };
  }
});

// node_modules/blakejs/blake2b.js
var require_blake2b = __commonJS({
  "node_modules/blakejs/blake2b.js"(exports, module) {
    var util = require_util();
    function ADD64AA(v7, a3, b5) {
      const o0 = v7[a3] + v7[b5];
      let o1 = v7[a3 + 1] + v7[b5 + 1];
      if (o0 >= 4294967296) {
        o1++;
      }
      v7[a3] = o0;
      v7[a3 + 1] = o1;
    }
    function ADD64AC(v7, a3, b0, b1) {
      let o0 = v7[a3] + b0;
      if (b0 < 0) {
        o0 += 4294967296;
      }
      let o1 = v7[a3 + 1] + b1;
      if (o0 >= 4294967296) {
        o1++;
      }
      v7[a3] = o0;
      v7[a3 + 1] = o1;
    }
    function B2B_GET32(arr, i4) {
      return arr[i4] ^ arr[i4 + 1] << 8 ^ arr[i4 + 2] << 16 ^ arr[i4 + 3] << 24;
    }
    function B2B_G(a3, b5, c7, d5, ix, iy) {
      const x0 = m4[ix];
      const x1 = m4[ix + 1];
      const y0 = m4[iy];
      const y1 = m4[iy + 1];
      ADD64AA(v6, a3, b5);
      ADD64AC(v6, a3, x0, x1);
      let xor0 = v6[d5] ^ v6[a3];
      let xor1 = v6[d5 + 1] ^ v6[a3 + 1];
      v6[d5] = xor1;
      v6[d5 + 1] = xor0;
      ADD64AA(v6, c7, d5);
      xor0 = v6[b5] ^ v6[c7];
      xor1 = v6[b5 + 1] ^ v6[c7 + 1];
      v6[b5] = xor0 >>> 24 ^ xor1 << 8;
      v6[b5 + 1] = xor1 >>> 24 ^ xor0 << 8;
      ADD64AA(v6, a3, b5);
      ADD64AC(v6, a3, y0, y1);
      xor0 = v6[d5] ^ v6[a3];
      xor1 = v6[d5 + 1] ^ v6[a3 + 1];
      v6[d5] = xor0 >>> 16 ^ xor1 << 16;
      v6[d5 + 1] = xor1 >>> 16 ^ xor0 << 16;
      ADD64AA(v6, c7, d5);
      xor0 = v6[b5] ^ v6[c7];
      xor1 = v6[b5 + 1] ^ v6[c7 + 1];
      v6[b5] = xor1 >>> 31 ^ xor0 << 1;
      v6[b5 + 1] = xor0 >>> 31 ^ xor1 << 1;
    }
    var BLAKE2B_IV32 = new Uint32Array([
      4089235720,
      1779033703,
      2227873595,
      3144134277,
      4271175723,
      1013904242,
      1595750129,
      2773480762,
      2917565137,
      1359893119,
      725511199,
      2600822924,
      4215389547,
      528734635,
      327033209,
      1541459225
    ]);
    var SIGMA8 = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3
    ];
    var SIGMA82 = new Uint8Array(
      SIGMA8.map(function(x6) {
        return x6 * 2;
      })
    );
    var v6 = new Uint32Array(32);
    var m4 = new Uint32Array(32);
    function blake2bCompress(ctx, last) {
      let i4 = 0;
      for (i4 = 0; i4 < 16; i4++) {
        v6[i4] = ctx.h[i4];
        v6[i4 + 16] = BLAKE2B_IV32[i4];
      }
      v6[24] = v6[24] ^ ctx.t;
      v6[25] = v6[25] ^ ctx.t / 4294967296;
      if (last) {
        v6[28] = ~v6[28];
        v6[29] = ~v6[29];
      }
      for (i4 = 0; i4 < 32; i4++) {
        m4[i4] = B2B_GET32(ctx.b, 4 * i4);
      }
      for (i4 = 0; i4 < 12; i4++) {
        B2B_G(0, 8, 16, 24, SIGMA82[i4 * 16 + 0], SIGMA82[i4 * 16 + 1]);
        B2B_G(2, 10, 18, 26, SIGMA82[i4 * 16 + 2], SIGMA82[i4 * 16 + 3]);
        B2B_G(4, 12, 20, 28, SIGMA82[i4 * 16 + 4], SIGMA82[i4 * 16 + 5]);
        B2B_G(6, 14, 22, 30, SIGMA82[i4 * 16 + 6], SIGMA82[i4 * 16 + 7]);
        B2B_G(0, 10, 20, 30, SIGMA82[i4 * 16 + 8], SIGMA82[i4 * 16 + 9]);
        B2B_G(2, 12, 22, 24, SIGMA82[i4 * 16 + 10], SIGMA82[i4 * 16 + 11]);
        B2B_G(4, 14, 16, 26, SIGMA82[i4 * 16 + 12], SIGMA82[i4 * 16 + 13]);
        B2B_G(6, 8, 18, 28, SIGMA82[i4 * 16 + 14], SIGMA82[i4 * 16 + 15]);
      }
      for (i4 = 0; i4 < 16; i4++) {
        ctx.h[i4] = ctx.h[i4] ^ v6[i4] ^ v6[i4 + 16];
      }
    }
    var parameterBlock = new Uint8Array([
      0,
      0,
      0,
      0,
      //  0: outlen, keylen, fanout, depth
      0,
      0,
      0,
      0,
      //  4: leaf length, sequential mode
      0,
      0,
      0,
      0,
      //  8: node offset
      0,
      0,
      0,
      0,
      // 12: node offset
      0,
      0,
      0,
      0,
      // 16: node depth, inner length, rfu
      0,
      0,
      0,
      0,
      // 20: rfu
      0,
      0,
      0,
      0,
      // 24: rfu
      0,
      0,
      0,
      0,
      // 28: rfu
      0,
      0,
      0,
      0,
      // 32: salt
      0,
      0,
      0,
      0,
      // 36: salt
      0,
      0,
      0,
      0,
      // 40: salt
      0,
      0,
      0,
      0,
      // 44: salt
      0,
      0,
      0,
      0,
      // 48: personal
      0,
      0,
      0,
      0,
      // 52: personal
      0,
      0,
      0,
      0,
      // 56: personal
      0,
      0,
      0,
      0
      // 60: personal
    ]);
    function blake2bInit(outlen, key, salt, personal) {
      if (outlen === 0 || outlen > 64) {
        throw new Error("Illegal output length, expected 0 < length <= 64");
      }
      if (key && key.length > 64) {
        throw new Error("Illegal key, expected Uint8Array with 0 < length <= 64");
      }
      if (salt && salt.length !== 16) {
        throw new Error("Illegal salt, expected Uint8Array with length is 16");
      }
      if (personal && personal.length !== 16) {
        throw new Error("Illegal personal, expected Uint8Array with length is 16");
      }
      const ctx = {
        b: new Uint8Array(128),
        h: new Uint32Array(16),
        t: 0,
        // input count
        c: 0,
        // pointer within buffer
        outlen
        // output length in bytes
      };
      parameterBlock.fill(0);
      parameterBlock[0] = outlen;
      if (key)
        parameterBlock[1] = key.length;
      parameterBlock[2] = 1;
      parameterBlock[3] = 1;
      if (salt)
        parameterBlock.set(salt, 32);
      if (personal)
        parameterBlock.set(personal, 48);
      for (let i4 = 0; i4 < 16; i4++) {
        ctx.h[i4] = BLAKE2B_IV32[i4] ^ B2B_GET32(parameterBlock, i4 * 4);
      }
      if (key) {
        blake2bUpdate(ctx, key);
        ctx.c = 128;
      }
      return ctx;
    }
    function blake2bUpdate(ctx, input) {
      for (let i4 = 0; i4 < input.length; i4++) {
        if (ctx.c === 128) {
          ctx.t += ctx.c;
          blake2bCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i4];
      }
    }
    function blake2bFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 128) {
        ctx.b[ctx.c++] = 0;
      }
      blake2bCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i4 = 0; i4 < ctx.outlen; i4++) {
        out[i4] = ctx.h[i4 >> 2] >> 8 * (i4 & 3);
      }
      return out;
    }
    function blake2b(input, key, outlen, salt, personal) {
      outlen = outlen || 64;
      input = util.normalizeInput(input);
      if (salt) {
        salt = util.normalizeInput(salt);
      }
      if (personal) {
        personal = util.normalizeInput(personal);
      }
      const ctx = blake2bInit(outlen, key, salt, personal);
      blake2bUpdate(ctx, input);
      return blake2bFinal(ctx);
    }
    function blake2bHex(input, key, outlen, salt, personal) {
      const output = blake2b(input, key, outlen, salt, personal);
      return util.toHex(output);
    }
    module.exports = {
      blake2b,
      blake2bHex,
      blake2bInit,
      blake2bUpdate,
      blake2bFinal
    };
  }
});

// node_modules/blakejs/blake2s.js
var require_blake2s = __commonJS({
  "node_modules/blakejs/blake2s.js"(exports, module) {
    var util = require_util();
    function B2S_GET32(v7, i4) {
      return v7[i4] ^ v7[i4 + 1] << 8 ^ v7[i4 + 2] << 16 ^ v7[i4 + 3] << 24;
    }
    function B2S_G(a3, b5, c7, d5, x6, y6) {
      v6[a3] = v6[a3] + v6[b5] + x6;
      v6[d5] = ROTR32(v6[d5] ^ v6[a3], 16);
      v6[c7] = v6[c7] + v6[d5];
      v6[b5] = ROTR32(v6[b5] ^ v6[c7], 12);
      v6[a3] = v6[a3] + v6[b5] + y6;
      v6[d5] = ROTR32(v6[d5] ^ v6[a3], 8);
      v6[c7] = v6[c7] + v6[d5];
      v6[b5] = ROTR32(v6[b5] ^ v6[c7], 7);
    }
    function ROTR32(x6, y6) {
      return x6 >>> y6 ^ x6 << 32 - y6;
    }
    var BLAKE2S_IV = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SIGMA = new Uint8Array([
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0
    ]);
    var v6 = new Uint32Array(16);
    var m4 = new Uint32Array(16);
    function blake2sCompress(ctx, last) {
      let i4 = 0;
      for (i4 = 0; i4 < 8; i4++) {
        v6[i4] = ctx.h[i4];
        v6[i4 + 8] = BLAKE2S_IV[i4];
      }
      v6[12] ^= ctx.t;
      v6[13] ^= ctx.t / 4294967296;
      if (last) {
        v6[14] = ~v6[14];
      }
      for (i4 = 0; i4 < 16; i4++) {
        m4[i4] = B2S_GET32(ctx.b, 4 * i4);
      }
      for (i4 = 0; i4 < 10; i4++) {
        B2S_G(0, 4, 8, 12, m4[SIGMA[i4 * 16 + 0]], m4[SIGMA[i4 * 16 + 1]]);
        B2S_G(1, 5, 9, 13, m4[SIGMA[i4 * 16 + 2]], m4[SIGMA[i4 * 16 + 3]]);
        B2S_G(2, 6, 10, 14, m4[SIGMA[i4 * 16 + 4]], m4[SIGMA[i4 * 16 + 5]]);
        B2S_G(3, 7, 11, 15, m4[SIGMA[i4 * 16 + 6]], m4[SIGMA[i4 * 16 + 7]]);
        B2S_G(0, 5, 10, 15, m4[SIGMA[i4 * 16 + 8]], m4[SIGMA[i4 * 16 + 9]]);
        B2S_G(1, 6, 11, 12, m4[SIGMA[i4 * 16 + 10]], m4[SIGMA[i4 * 16 + 11]]);
        B2S_G(2, 7, 8, 13, m4[SIGMA[i4 * 16 + 12]], m4[SIGMA[i4 * 16 + 13]]);
        B2S_G(3, 4, 9, 14, m4[SIGMA[i4 * 16 + 14]], m4[SIGMA[i4 * 16 + 15]]);
      }
      for (i4 = 0; i4 < 8; i4++) {
        ctx.h[i4] ^= v6[i4] ^ v6[i4 + 8];
      }
    }
    function blake2sInit(outlen, key) {
      if (!(outlen > 0 && outlen <= 32)) {
        throw new Error("Incorrect output length, should be in [1, 32]");
      }
      const keylen = key ? key.length : 0;
      if (key && !(keylen > 0 && keylen <= 32)) {
        throw new Error("Incorrect key length, should be in [1, 32]");
      }
      const ctx = {
        h: new Uint32Array(BLAKE2S_IV),
        // hash state
        b: new Uint8Array(64),
        // input block
        c: 0,
        // pointer within block
        t: 0,
        // input count
        outlen
        // output length in bytes
      };
      ctx.h[0] ^= 16842752 ^ keylen << 8 ^ outlen;
      if (keylen > 0) {
        blake2sUpdate(ctx, key);
        ctx.c = 64;
      }
      return ctx;
    }
    function blake2sUpdate(ctx, input) {
      for (let i4 = 0; i4 < input.length; i4++) {
        if (ctx.c === 64) {
          ctx.t += ctx.c;
          blake2sCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i4];
      }
    }
    function blake2sFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 64) {
        ctx.b[ctx.c++] = 0;
      }
      blake2sCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i4 = 0; i4 < ctx.outlen; i4++) {
        out[i4] = ctx.h[i4 >> 2] >> 8 * (i4 & 3) & 255;
      }
      return out;
    }
    function blake2s(input, key, outlen) {
      outlen = outlen || 32;
      input = util.normalizeInput(input);
      const ctx = blake2sInit(outlen, key);
      blake2sUpdate(ctx, input);
      return blake2sFinal(ctx);
    }
    function blake2sHex(input, key, outlen) {
      const output = blake2s(input, key, outlen);
      return util.toHex(output);
    }
    module.exports = {
      blake2s,
      blake2sHex,
      blake2sInit,
      blake2sUpdate,
      blake2sFinal
    };
  }
});

// node_modules/blakejs/index.js
var require_blakejs = __commonJS({
  "node_modules/blakejs/index.js"(exports, module) {
    var b2b = require_blake2b();
    var b2s = require_blake2s();
    module.exports = {
      blake2b: b2b.blake2b,
      blake2bHex: b2b.blake2bHex,
      blake2bInit: b2b.blake2bInit,
      blake2bUpdate: b2b.blake2bUpdate,
      blake2bFinal: b2b.blake2bFinal,
      blake2s: b2s.blake2s,
      blake2sHex: b2s.blake2sHex,
      blake2sInit: b2s.blake2sInit,
      blake2sUpdate: b2s.blake2sUpdate,
      blake2sFinal: b2s.blake2sFinal
    };
  }
});

// node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js
var tslib_es6_exports2 = {};
__export(tslib_es6_exports2, {
  __assign: () => __assign2,
  __asyncDelegator: () => __asyncDelegator2,
  __asyncGenerator: () => __asyncGenerator2,
  __asyncValues: () => __asyncValues2,
  __await: () => __await2,
  __awaiter: () => __awaiter2,
  __classPrivateFieldGet: () => __classPrivateFieldGet2,
  __classPrivateFieldSet: () => __classPrivateFieldSet2,
  __createBinding: () => __createBinding2,
  __decorate: () => __decorate2,
  __exportStar: () => __exportStar2,
  __extends: () => __extends2,
  __generator: () => __generator2,
  __importDefault: () => __importDefault2,
  __importStar: () => __importStar2,
  __makeTemplateObject: () => __makeTemplateObject2,
  __metadata: () => __metadata2,
  __param: () => __param2,
  __read: () => __read2,
  __rest: () => __rest2,
  __spread: () => __spread2,
  __spreadArrays: () => __spreadArrays2,
  __values: () => __values2
});
function __extends2(d5, b5) {
  extendStatics2(d5, b5);
  function __() {
    this.constructor = d5;
  }
  d5.prototype = b5 === null ? Object.create(b5) : (__.prototype = b5.prototype, new __());
}
function __rest2(s3, e2) {
  var t = {};
  for (var p5 in s3)
    if (Object.prototype.hasOwnProperty.call(s3, p5) && e2.indexOf(p5) < 0)
      t[p5] = s3[p5];
  if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i4 = 0, p5 = Object.getOwnPropertySymbols(s3); i4 < p5.length; i4++) {
      if (e2.indexOf(p5[i4]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p5[i4]))
        t[p5[i4]] = s3[p5[i4]];
    }
  return t;
}
function __decorate2(decorators, target, key, desc) {
  var c7 = arguments.length, r3 = c7 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d5;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r3 = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i4 = decorators.length - 1; i4 >= 0; i4--)
      if (d5 = decorators[i4])
        r3 = (c7 < 3 ? d5(r3) : c7 > 3 ? d5(target, key, r3) : d5(target, key)) || r3;
  return c7 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
}
function __param2(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata2(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter2(thisArg, _arguments, P6, generator) {
  function adopt(value) {
    return value instanceof P6 ? value : new P6(function(resolve) {
      resolve(value);
    });
  }
  return new (P6 || (P6 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator2(thisArg, body) {
  var _3 = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f8, y6, t, g4;
  return g4 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g4[Symbol.iterator] = function() {
    return this;
  }), g4;
  function verb(n5) {
    return function(v6) {
      return step([n5, v6]);
    };
  }
  function step(op) {
    if (f8)
      throw new TypeError("Generator is already executing.");
    while (_3)
      try {
        if (f8 = 1, y6 && (t = op[0] & 2 ? y6["return"] : op[0] ? y6["throw"] || ((t = y6["return"]) && t.call(y6), 0) : y6.next) && !(t = t.call(y6, op[1])).done)
          return t;
        if (y6 = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _3.label++;
            return { value: op[1], done: false };
          case 5:
            _3.label++;
            y6 = op[1];
            op = [0];
            continue;
          case 7:
            op = _3.ops.pop();
            _3.trys.pop();
            continue;
          default:
            if (!(t = _3.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _3 = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _3.label = op[1];
              break;
            }
            if (op[0] === 6 && _3.label < t[1]) {
              _3.label = t[1];
              t = op;
              break;
            }
            if (t && _3.label < t[2]) {
              _3.label = t[2];
              _3.ops.push(op);
              break;
            }
            if (t[2])
              _3.ops.pop();
            _3.trys.pop();
            continue;
        }
        op = body.call(thisArg, _3);
      } catch (e2) {
        op = [6, e2];
        y6 = 0;
      } finally {
        f8 = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding2(o5, m4, k6, k22) {
  if (k22 === void 0)
    k22 = k6;
  o5[k22] = m4[k6];
}
function __exportStar2(m4, exports) {
  for (var p5 in m4)
    if (p5 !== "default" && !exports.hasOwnProperty(p5))
      exports[p5] = m4[p5];
}
function __values2(o5) {
  var s3 = typeof Symbol === "function" && Symbol.iterator, m4 = s3 && o5[s3], i4 = 0;
  if (m4)
    return m4.call(o5);
  if (o5 && typeof o5.length === "number")
    return {
      next: function() {
        if (o5 && i4 >= o5.length)
          o5 = void 0;
        return { value: o5 && o5[i4++], done: !o5 };
      }
    };
  throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read2(o5, n5) {
  var m4 = typeof Symbol === "function" && o5[Symbol.iterator];
  if (!m4)
    return o5;
  var i4 = m4.call(o5), r3, ar3 = [], e2;
  try {
    while ((n5 === void 0 || n5-- > 0) && !(r3 = i4.next()).done)
      ar3.push(r3.value);
  } catch (error) {
    e2 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m4 = i4["return"]))
        m4.call(i4);
    } finally {
      if (e2)
        throw e2.error;
    }
  }
  return ar3;
}
function __spread2() {
  for (var ar3 = [], i4 = 0; i4 < arguments.length; i4++)
    ar3 = ar3.concat(__read2(arguments[i4]));
  return ar3;
}
function __spreadArrays2() {
  for (var s3 = 0, i4 = 0, il = arguments.length; i4 < il; i4++)
    s3 += arguments[i4].length;
  for (var r3 = Array(s3), k6 = 0, i4 = 0; i4 < il; i4++)
    for (var a3 = arguments[i4], j5 = 0, jl = a3.length; j5 < jl; j5++, k6++)
      r3[k6] = a3[j5];
  return r3;
}
function __await2(v6) {
  return this instanceof __await2 ? (this.v = v6, this) : new __await2(v6);
}
function __asyncGenerator2(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g4 = generator.apply(thisArg, _arguments || []), i4, q2 = [];
  return i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
    return this;
  }, i4;
  function verb(n5) {
    if (g4[n5])
      i4[n5] = function(v6) {
        return new Promise(function(a3, b5) {
          q2.push([n5, v6, a3, b5]) > 1 || resume(n5, v6);
        });
      };
  }
  function resume(n5, v6) {
    try {
      step(g4[n5](v6));
    } catch (e2) {
      settle(q2[0][3], e2);
    }
  }
  function step(r3) {
    r3.value instanceof __await2 ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q2[0][2], r3);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f8, v6) {
    if (f8(v6), q2.shift(), q2.length)
      resume(q2[0][0], q2[0][1]);
  }
}
function __asyncDelegator2(o5) {
  var i4, p5;
  return i4 = {}, verb("next"), verb("throw", function(e2) {
    throw e2;
  }), verb("return"), i4[Symbol.iterator] = function() {
    return this;
  }, i4;
  function verb(n5, f8) {
    i4[n5] = o5[n5] ? function(v6) {
      return (p5 = !p5) ? { value: __await2(o5[n5](v6)), done: n5 === "return" } : f8 ? f8(v6) : v6;
    } : f8;
  }
}
function __asyncValues2(o5) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m4 = o5[Symbol.asyncIterator], i4;
  return m4 ? m4.call(o5) : (o5 = typeof __values2 === "function" ? __values2(o5) : o5[Symbol.iterator](), i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
    return this;
  }, i4);
  function verb(n5) {
    i4[n5] = o5[n5] && function(v6) {
      return new Promise(function(resolve, reject) {
        v6 = o5[n5](v6), settle(resolve, reject, v6.done, v6.value);
      });
    };
  }
  function settle(resolve, reject, d5, v6) {
    Promise.resolve(v6).then(function(v7) {
      resolve({ value: v7, done: d5 });
    }, reject);
  }
}
function __makeTemplateObject2(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar2(mod2) {
  if (mod2 && mod2.__esModule)
    return mod2;
  var result = {};
  if (mod2 != null) {
    for (var k6 in mod2)
      if (Object.hasOwnProperty.call(mod2, k6))
        result[k6] = mod2[k6];
  }
  result.default = mod2;
  return result;
}
function __importDefault2(mod2) {
  return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
}
function __classPrivateFieldGet2(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet2(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics2, __assign2;
var init_tslib_es62 = __esm({
  "node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js"() {
    extendStatics2 = function(d5, b5) {
      extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d6, b6) {
        d6.__proto__ = b6;
      } || function(d6, b6) {
        for (var p5 in b6)
          if (b6.hasOwnProperty(p5))
            d6[p5] = b6[p5];
      };
      return extendStatics2(d5, b5);
    };
    __assign2 = function() {
      __assign2 = Object.assign || function __assign3(t) {
        for (var s3, i4 = 1, n5 = arguments.length; i4 < n5; i4++) {
          s3 = arguments[i4];
          for (var p5 in s3)
            if (Object.prototype.hasOwnProperty.call(s3, p5))
              t[p5] = s3[p5];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
  }
});

// node_modules/@walletconnect/environment/dist/cjs/crypto.js
var require_crypto = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;
    function getBrowerCrypto() {
      return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};
    }
    exports.getBrowerCrypto = getBrowerCrypto;
    function getSubtleCrypto() {
      const browserCrypto = getBrowerCrypto();
      return browserCrypto.subtle || browserCrypto.webkitSubtle;
    }
    exports.getSubtleCrypto = getSubtleCrypto;
    function isBrowserCryptoAvailable() {
      return !!getBrowerCrypto() && !!getSubtleCrypto();
    }
    exports.isBrowserCryptoAvailable = isBrowserCryptoAvailable;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/env.js
var require_env = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/env.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowser = exports.isNode = exports.isReactNative = void 0;
    function isReactNative() {
      return typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative";
    }
    exports.isReactNative = isReactNative;
    function isNode2() {
      return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
    }
    exports.isNode = isNode2;
    function isBrowser() {
      return !isReactNative() && !isNode2();
    }
    exports.isBrowser = isBrowser;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/index.js
var require_cjs4 = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es62(), __toCommonJS(tslib_es6_exports2));
    tslib_1.__exportStar(require_crypto(), exports);
    tslib_1.__exportStar(require_env(), exports);
  }
});

// node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/browser.js
var require_browser2 = __commonJS({
  "node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/browser.js"(exports, module) {
    "use strict";
    module.exports = function() {
      throw new Error(
        "ws does not work in the browser. Browser clients must use the native WebSocket object"
      );
    };
  }
});

// node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill = __commonJS({
  "node_modules/cross-fetch/dist/browser-ponyfill.js"(exports, module) {
    var __global__ = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof global !== "undefined" && global;
    var __globalThis__ = function() {
      function F3() {
        this.fetch = false;
        this.DOMException = __global__.DOMException;
      }
      F3.prototype = __global__;
      return new F3();
    }();
    (function(globalThis2) {
      var irrelevant = function(exports2) {
        var g4 = typeof globalThis2 !== "undefined" && globalThis2 || typeof self !== "undefined" && self || // eslint-disable-next-line no-undef
        typeof global !== "undefined" && global || {};
        var support = {
          searchParams: "URLSearchParams" in g4,
          iterable: "Symbol" in g4 && "iterator" in Symbol,
          blob: "FileReader" in g4 && "Blob" in g4 && function() {
            try {
              new Blob();
              return true;
            } catch (e2) {
              return false;
            }
          }(),
          formData: "FormData" in g4,
          arrayBuffer: "ArrayBuffer" in g4
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name2) {
          if (typeof name2 !== "string") {
            name2 = String(name2);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name2) || name2 === "") {
            throw new TypeError('Invalid character in header field name: "' + name2 + '"');
          }
          return name2.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers(headers) {
          this.map = {};
          if (headers instanceof Headers) {
            headers.forEach(function(value, name2) {
              this.append(name2, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              if (header.length != 2) {
                throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
              }
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name2) {
              this.append(name2, headers[name2]);
            }, this);
          }
        }
        Headers.prototype.append = function(name2, value) {
          name2 = normalizeName(name2);
          value = normalizeValue(value);
          var oldValue = this.map[name2];
          this.map[name2] = oldValue ? oldValue + ", " + value : value;
        };
        Headers.prototype["delete"] = function(name2) {
          delete this.map[normalizeName(name2)];
        };
        Headers.prototype.get = function(name2) {
          name2 = normalizeName(name2);
          return this.has(name2) ? this.map[name2] : null;
        };
        Headers.prototype.has = function(name2) {
          return this.map.hasOwnProperty(normalizeName(name2));
        };
        Headers.prototype.set = function(name2, value) {
          this.map[normalizeName(name2)] = normalizeValue(value);
        };
        Headers.prototype.forEach = function(callback, thisArg) {
          for (var name2 in this.map) {
            if (this.map.hasOwnProperty(name2)) {
              callback.call(thisArg, this.map[name2], name2, this);
            }
          }
        };
        Headers.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name2) {
            items.push(name2);
          });
          return iteratorFor(items);
        };
        Headers.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name2) {
            items.push([name2, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        }
        function consumed(body) {
          if (body._noBody)
            return;
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
          var encoding = match ? match[1] : "utf-8";
          reader.readAsText(blob, encoding);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i4 = 0; i4 < view.length; i4++) {
            chars[i4] = String.fromCharCode(view[i4]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
              this._noBody = true;
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
          }
          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              var isConsumed = consumed(this);
              if (isConsumed) {
                return isConsumed;
              } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                return Promise.resolve(
                  this._bodyArrayBuffer.buffer.slice(
                    this._bodyArrayBuffer.byteOffset,
                    this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                  )
                );
              } else {
                return Promise.resolve(this._bodyArrayBuffer);
              }
            } else if (support.blob) {
              return this.blob().then(readBlobAsArrayBuffer);
            } else {
              throw new Error("could not read as ArrayBuffer");
            }
          };
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode9);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request2(input, options) {
          if (!(this instanceof Request2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          options = options || {};
          var body = options.body;
          if (input instanceof Request2) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal || function() {
            if ("AbortController" in g4) {
              var ctrl = new AbortController();
              return ctrl.signal;
            }
          }();
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
          if (this.method === "GET" || this.method === "HEAD") {
            if (options.cache === "no-store" || options.cache === "no-cache") {
              var reParamSearch = /([?&])_=[^&]*/;
              if (reParamSearch.test(this.url)) {
                this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
              } else {
                var reQueryString = /\?/;
                this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
              }
            }
          }
        }
        Request2.prototype.clone = function() {
          return new Request2(this, { body: this._bodyInit });
        };
        function decode9(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split2 = bytes.split("=");
              var name2 = split2.shift().replace(/\+/g, " ");
              var value = split2.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name2), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split("\r").map(function(header) {
            return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
          }).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              try {
                headers.append(key, value);
              } catch (error) {
                console.warn("Response " + error.message);
              }
            }
          });
          return headers;
        }
        Body.call(Request2.prototype);
        function Response2(bodyInit, options) {
          if (!(this instanceof Response2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          if (this.status < 200 || this.status > 599) {
            throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
          }
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
          this.headers = new Headers(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response2.prototype);
        Response2.prototype.clone = function() {
          return new Response2(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
          });
        };
        Response2.error = function() {
          var response = new Response2(null, { status: 200, statusText: "" });
          response.ok = false;
          response.status = 0;
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response2.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response2(null, { status, headers: { location: url } });
        };
        exports2.DOMException = g4.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name2) {
            this.message = message;
            this.name = name2;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request2(input, init);
            if (request.signal && request.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              if (request.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
                options.status = 200;
              } else {
                options.status = xhr.status;
              }
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              setTimeout(function() {
                resolve(new Response2(body, options));
              }, 0);
            };
            xhr.onerror = function() {
              setTimeout(function() {
                reject(new TypeError("Network request failed"));
              }, 0);
            };
            xhr.ontimeout = function() {
              setTimeout(function() {
                reject(new TypeError("Network request timed out"));
              }, 0);
            };
            xhr.onabort = function() {
              setTimeout(function() {
                reject(new exports2.DOMException("Aborted", "AbortError"));
              }, 0);
            };
            function fixUrl(url) {
              try {
                return url === "" && g4.location.href ? g4.location.href : url;
              } catch (e2) {
                return url;
              }
            }
            xhr.open(request.method, fixUrl(request.url), true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr) {
              if (support.blob) {
                xhr.responseType = "blob";
              } else if (support.arrayBuffer) {
                xhr.responseType = "arraybuffer";
              }
            }
            if (init && typeof init.headers === "object" && !(init.headers instanceof Headers || g4.Headers && init.headers instanceof g4.Headers)) {
              var names = [];
              Object.getOwnPropertyNames(init.headers).forEach(function(name2) {
                names.push(normalizeName(name2));
                xhr.setRequestHeader(name2, normalizeValue(init.headers[name2]));
              });
              request.headers.forEach(function(value, name2) {
                if (names.indexOf(name2) === -1) {
                  xhr.setRequestHeader(name2, value);
                }
              });
            } else {
              request.headers.forEach(function(value, name2) {
                xhr.setRequestHeader(name2, value);
              });
            }
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!g4.fetch) {
          g4.fetch = fetch2;
          g4.Headers = Headers;
          g4.Request = Request2;
          g4.Response = Response2;
        }
        exports2.Headers = Headers;
        exports2.Request = Request2;
        exports2.Response = Response2;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(__globalThis__);
    __globalThis__.fetch.ponyfill = true;
    delete __globalThis__.fetch.polyfill;
    var ctx = __global__.fetch ? __global__ : __globalThis__;
    exports = ctx.fetch;
    exports.default = ctx.fetch;
    exports.fetch = ctx.fetch;
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module.exports = exports;
  }
});

// node_modules/dayjs/dayjs.min.js
var require_dayjs_min = __commonJS({
  "node_modules/dayjs/dayjs.min.js"(exports, module) {
    !function(t, e2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e2() : "function" == typeof define && define.amd ? define(e2) : (t = "undefined" != typeof globalThis ? globalThis : t || self).dayjs = e2();
    }(exports, function() {
      "use strict";
      var t = 1e3, e2 = 6e4, n5 = 36e5, r3 = "millisecond", i4 = "second", s3 = "minute", u3 = "hour", a3 = "day", o5 = "week", c7 = "month", f8 = "quarter", h6 = "year", d5 = "date", l8 = "Invalid Date", $4 = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y6 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M5 = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t2) {
        var e3 = ["th", "st", "nd", "rd"], n6 = t2 % 100;
        return "[" + t2 + (e3[(n6 - 20) % 10] || e3[n6] || e3[0]) + "]";
      } }, m4 = function(t2, e3, n6) {
        var r4 = String(t2);
        return !r4 || r4.length >= e3 ? t2 : "" + Array(e3 + 1 - r4.length).join(n6) + t2;
      }, v6 = { s: m4, z: function(t2) {
        var e3 = -t2.utcOffset(), n6 = Math.abs(e3), r4 = Math.floor(n6 / 60), i5 = n6 % 60;
        return (e3 <= 0 ? "+" : "-") + m4(r4, 2, "0") + ":" + m4(i5, 2, "0");
      }, m: function t2(e3, n6) {
        if (e3.date() < n6.date())
          return -t2(n6, e3);
        var r4 = 12 * (n6.year() - e3.year()) + (n6.month() - e3.month()), i5 = e3.clone().add(r4, c7), s4 = n6 - i5 < 0, u4 = e3.clone().add(r4 + (s4 ? -1 : 1), c7);
        return +(-(r4 + (n6 - i5) / (s4 ? i5 - u4 : u4 - i5)) || 0);
      }, a: function(t2) {
        return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
      }, p: function(t2) {
        return { M: c7, y: h6, w: o5, d: a3, D: d5, h: u3, m: s3, s: i4, ms: r3, Q: f8 }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t2) {
        return void 0 === t2;
      } }, g4 = "en", D4 = {};
      D4[g4] = M5;
      var p5 = "$isDayjsObject", S5 = function(t2) {
        return t2 instanceof _3 || !(!t2 || !t2[p5]);
      }, w5 = function t2(e3, n6, r4) {
        var i5;
        if (!e3)
          return g4;
        if ("string" == typeof e3) {
          var s4 = e3.toLowerCase();
          D4[s4] && (i5 = s4), n6 && (D4[s4] = n6, i5 = s4);
          var u4 = e3.split("-");
          if (!i5 && u4.length > 1)
            return t2(u4[0]);
        } else {
          var a4 = e3.name;
          D4[a4] = e3, i5 = a4;
        }
        return !r4 && i5 && (g4 = i5), i5 || !r4 && g4;
      }, O7 = function(t2, e3) {
        if (S5(t2))
          return t2.clone();
        var n6 = "object" == typeof e3 ? e3 : {};
        return n6.date = t2, n6.args = arguments, new _3(n6);
      }, b5 = v6;
      b5.l = w5, b5.i = S5, b5.w = function(t2, e3) {
        return O7(t2, { locale: e3.$L, utc: e3.$u, x: e3.$x, $offset: e3.$offset });
      };
      var _3 = function() {
        function M6(t2) {
          this.$L = w5(t2.locale, null, true), this.parse(t2), this.$x = this.$x || t2.x || {}, this[p5] = true;
        }
        var m5 = M6.prototype;
        return m5.parse = function(t2) {
          this.$d = function(t3) {
            var e3 = t3.date, n6 = t3.utc;
            if (null === e3)
              return /* @__PURE__ */ new Date(NaN);
            if (b5.u(e3))
              return /* @__PURE__ */ new Date();
            if (e3 instanceof Date)
              return new Date(e3);
            if ("string" == typeof e3 && !/Z$/i.test(e3)) {
              var r4 = e3.match($4);
              if (r4) {
                var i5 = r4[2] - 1 || 0, s4 = (r4[7] || "0").substring(0, 3);
                return n6 ? new Date(Date.UTC(r4[1], i5, r4[3] || 1, r4[4] || 0, r4[5] || 0, r4[6] || 0, s4)) : new Date(r4[1], i5, r4[3] || 1, r4[4] || 0, r4[5] || 0, r4[6] || 0, s4);
              }
            }
            return new Date(e3);
          }(t2), this.init();
        }, m5.init = function() {
          var t2 = this.$d;
          this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
        }, m5.$utils = function() {
          return b5;
        }, m5.isValid = function() {
          return !(this.$d.toString() === l8);
        }, m5.isSame = function(t2, e3) {
          var n6 = O7(t2);
          return this.startOf(e3) <= n6 && n6 <= this.endOf(e3);
        }, m5.isAfter = function(t2, e3) {
          return O7(t2) < this.startOf(e3);
        }, m5.isBefore = function(t2, e3) {
          return this.endOf(e3) < O7(t2);
        }, m5.$g = function(t2, e3, n6) {
          return b5.u(t2) ? this[e3] : this.set(n6, t2);
        }, m5.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m5.valueOf = function() {
          return this.$d.getTime();
        }, m5.startOf = function(t2, e3) {
          var n6 = this, r4 = !!b5.u(e3) || e3, f9 = b5.p(t2), l9 = function(t3, e4) {
            var i5 = b5.w(n6.$u ? Date.UTC(n6.$y, e4, t3) : new Date(n6.$y, e4, t3), n6);
            return r4 ? i5 : i5.endOf(a3);
          }, $5 = function(t3, e4) {
            return b5.w(n6.toDate()[t3].apply(n6.toDate("s"), (r4 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e4)), n6);
          }, y7 = this.$W, M7 = this.$M, m6 = this.$D, v7 = "set" + (this.$u ? "UTC" : "");
          switch (f9) {
            case h6:
              return r4 ? l9(1, 0) : l9(31, 11);
            case c7:
              return r4 ? l9(1, M7) : l9(0, M7 + 1);
            case o5:
              var g5 = this.$locale().weekStart || 0, D5 = (y7 < g5 ? y7 + 7 : y7) - g5;
              return l9(r4 ? m6 - D5 : m6 + (6 - D5), M7);
            case a3:
            case d5:
              return $5(v7 + "Hours", 0);
            case u3:
              return $5(v7 + "Minutes", 1);
            case s3:
              return $5(v7 + "Seconds", 2);
            case i4:
              return $5(v7 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m5.endOf = function(t2) {
          return this.startOf(t2, false);
        }, m5.$set = function(t2, e3) {
          var n6, o6 = b5.p(t2), f9 = "set" + (this.$u ? "UTC" : ""), l9 = (n6 = {}, n6[a3] = f9 + "Date", n6[d5] = f9 + "Date", n6[c7] = f9 + "Month", n6[h6] = f9 + "FullYear", n6[u3] = f9 + "Hours", n6[s3] = f9 + "Minutes", n6[i4] = f9 + "Seconds", n6[r3] = f9 + "Milliseconds", n6)[o6], $5 = o6 === a3 ? this.$D + (e3 - this.$W) : e3;
          if (o6 === c7 || o6 === h6) {
            var y7 = this.clone().set(d5, 1);
            y7.$d[l9]($5), y7.init(), this.$d = y7.set(d5, Math.min(this.$D, y7.daysInMonth())).$d;
          } else
            l9 && this.$d[l9]($5);
          return this.init(), this;
        }, m5.set = function(t2, e3) {
          return this.clone().$set(t2, e3);
        }, m5.get = function(t2) {
          return this[b5.p(t2)]();
        }, m5.add = function(r4, f9) {
          var d6, l9 = this;
          r4 = Number(r4);
          var $5 = b5.p(f9), y7 = function(t2) {
            var e3 = O7(l9);
            return b5.w(e3.date(e3.date() + Math.round(t2 * r4)), l9);
          };
          if ($5 === c7)
            return this.set(c7, this.$M + r4);
          if ($5 === h6)
            return this.set(h6, this.$y + r4);
          if ($5 === a3)
            return y7(1);
          if ($5 === o5)
            return y7(7);
          var M7 = (d6 = {}, d6[s3] = e2, d6[u3] = n5, d6[i4] = t, d6)[$5] || 1, m6 = this.$d.getTime() + r4 * M7;
          return b5.w(m6, this);
        }, m5.subtract = function(t2, e3) {
          return this.add(-1 * t2, e3);
        }, m5.format = function(t2) {
          var e3 = this, n6 = this.$locale();
          if (!this.isValid())
            return n6.invalidDate || l8;
          var r4 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i5 = b5.z(this), s4 = this.$H, u4 = this.$m, a4 = this.$M, o6 = n6.weekdays, c8 = n6.months, f9 = n6.meridiem, h7 = function(t3, n7, i6, s5) {
            return t3 && (t3[n7] || t3(e3, r4)) || i6[n7].slice(0, s5);
          }, d6 = function(t3) {
            return b5.s(s4 % 12 || 12, t3, "0");
          }, $5 = f9 || function(t3, e4, n7) {
            var r5 = t3 < 12 ? "AM" : "PM";
            return n7 ? r5.toLowerCase() : r5;
          };
          return r4.replace(y6, function(t3, r5) {
            return r5 || function(t4) {
              switch (t4) {
                case "YY":
                  return String(e3.$y).slice(-2);
                case "YYYY":
                  return b5.s(e3.$y, 4, "0");
                case "M":
                  return a4 + 1;
                case "MM":
                  return b5.s(a4 + 1, 2, "0");
                case "MMM":
                  return h7(n6.monthsShort, a4, c8, 3);
                case "MMMM":
                  return h7(c8, a4);
                case "D":
                  return e3.$D;
                case "DD":
                  return b5.s(e3.$D, 2, "0");
                case "d":
                  return String(e3.$W);
                case "dd":
                  return h7(n6.weekdaysMin, e3.$W, o6, 2);
                case "ddd":
                  return h7(n6.weekdaysShort, e3.$W, o6, 3);
                case "dddd":
                  return o6[e3.$W];
                case "H":
                  return String(s4);
                case "HH":
                  return b5.s(s4, 2, "0");
                case "h":
                  return d6(1);
                case "hh":
                  return d6(2);
                case "a":
                  return $5(s4, u4, true);
                case "A":
                  return $5(s4, u4, false);
                case "m":
                  return String(u4);
                case "mm":
                  return b5.s(u4, 2, "0");
                case "s":
                  return String(e3.$s);
                case "ss":
                  return b5.s(e3.$s, 2, "0");
                case "SSS":
                  return b5.s(e3.$ms, 3, "0");
                case "Z":
                  return i5;
              }
              return null;
            }(t3) || i5.replace(":", "");
          });
        }, m5.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m5.diff = function(r4, d6, l9) {
          var $5, y7 = this, M7 = b5.p(d6), m6 = O7(r4), v7 = (m6.utcOffset() - this.utcOffset()) * e2, g5 = this - m6, D5 = function() {
            return b5.m(y7, m6);
          };
          switch (M7) {
            case h6:
              $5 = D5() / 12;
              break;
            case c7:
              $5 = D5();
              break;
            case f8:
              $5 = D5() / 3;
              break;
            case o5:
              $5 = (g5 - v7) / 6048e5;
              break;
            case a3:
              $5 = (g5 - v7) / 864e5;
              break;
            case u3:
              $5 = g5 / n5;
              break;
            case s3:
              $5 = g5 / e2;
              break;
            case i4:
              $5 = g5 / t;
              break;
            default:
              $5 = g5;
          }
          return l9 ? $5 : b5.a($5);
        }, m5.daysInMonth = function() {
          return this.endOf(c7).$D;
        }, m5.$locale = function() {
          return D4[this.$L];
        }, m5.locale = function(t2, e3) {
          if (!t2)
            return this.$L;
          var n6 = this.clone(), r4 = w5(t2, e3, true);
          return r4 && (n6.$L = r4), n6;
        }, m5.clone = function() {
          return b5.w(this.$d, this);
        }, m5.toDate = function() {
          return new Date(this.valueOf());
        }, m5.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m5.toISOString = function() {
          return this.$d.toISOString();
        }, m5.toString = function() {
          return this.$d.toUTCString();
        }, M6;
      }(), k6 = _3.prototype;
      return O7.prototype = k6, [["$ms", r3], ["$s", i4], ["$m", s3], ["$H", u3], ["$W", a3], ["$M", c7], ["$y", h6], ["$D", d5]].forEach(function(t2) {
        k6[t2[1]] = function(e3) {
          return this.$g(e3, t2[0], t2[1]);
        };
      }), O7.extend = function(t2, e3) {
        return t2.$i || (t2(e3, _3, O7), t2.$i = true), O7;
      }, O7.locale = w5, O7.isDayjs = S5, O7.unix = function(t2) {
        return O7(1e3 * t2);
      }, O7.en = D4[g4], O7.Ls = D4, O7.p = {}, O7;
    });
  }
});

// node_modules/dayjs/locale/en.js
var require_en = __commonJS({
  "node_modules/dayjs/locale/en.js"(exports, module) {
    !function(e2, n5) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n5() : "function" == typeof define && define.amd ? define(n5) : (e2 = "undefined" != typeof globalThis ? globalThis : e2 || self).dayjs_locale_en = n5();
    }(exports, function() {
      "use strict";
      return { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(e2) {
        var n5 = ["th", "st", "nd", "rd"], t = e2 % 100;
        return "[" + e2 + (n5[(t - 20) % 10] || n5[t] || n5[0]) + "]";
      } };
    });
  }
});

// node_modules/dayjs/plugin/relativeTime.js
var require_relativeTime = __commonJS({
  "node_modules/dayjs/plugin/relativeTime.js"(exports, module) {
    !function(r3, e2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e2() : "function" == typeof define && define.amd ? define(e2) : (r3 = "undefined" != typeof globalThis ? globalThis : r3 || self).dayjs_plugin_relativeTime = e2();
    }(exports, function() {
      "use strict";
      return function(r3, e2, t) {
        r3 = r3 || {};
        var n5 = e2.prototype, o5 = { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" };
        function i4(r4, e3, t2, o6) {
          return n5.fromToBase(r4, e3, t2, o6);
        }
        t.en.relativeTime = o5, n5.fromToBase = function(e3, n6, i5, d6, u3) {
          for (var f8, a3, s3, l8 = i5.$locale().relativeTime || o5, h6 = r3.thresholds || [{ l: "s", r: 44, d: "second" }, { l: "m", r: 89 }, { l: "mm", r: 44, d: "minute" }, { l: "h", r: 89 }, { l: "hh", r: 21, d: "hour" }, { l: "d", r: 35 }, { l: "dd", r: 25, d: "day" }, { l: "M", r: 45 }, { l: "MM", r: 10, d: "month" }, { l: "y", r: 17 }, { l: "yy", d: "year" }], m4 = h6.length, c7 = 0; c7 < m4; c7 += 1) {
            var y6 = h6[c7];
            y6.d && (f8 = d6 ? t(e3).diff(i5, y6.d, true) : i5.diff(e3, y6.d, true));
            var p5 = (r3.rounding || Math.round)(Math.abs(f8));
            if (s3 = f8 > 0, p5 <= y6.r || !y6.r) {
              p5 <= 1 && c7 > 0 && (y6 = h6[c7 - 1]);
              var v6 = l8[y6.l];
              u3 && (p5 = u3("" + p5)), a3 = "string" == typeof v6 ? v6.replace("%d", p5) : v6(p5, n6, y6.l, s3);
              break;
            }
          }
          if (n6)
            return a3;
          var M5 = s3 ? l8.future : l8.past;
          return "function" == typeof M5 ? M5(a3) : M5.replace("%s", a3);
        }, n5.to = function(r4, e3) {
          return i4(r4, e3, this, true);
        }, n5.from = function(r4, e3) {
          return i4(r4, e3, this);
        };
        var d5 = function(r4) {
          return r4.$u ? t.utc() : t();
        };
        n5.toNow = function(r4) {
          return this.to(d5(this), r4);
        }, n5.fromNow = function(r4) {
          return this.from(d5(this), r4);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/updateLocale.js
var require_updateLocale = __commonJS({
  "node_modules/dayjs/plugin/updateLocale.js"(exports, module) {
    !function(e2, n5) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n5() : "function" == typeof define && define.amd ? define(n5) : (e2 = "undefined" != typeof globalThis ? globalThis : e2 || self).dayjs_plugin_updateLocale = n5();
    }(exports, function() {
      "use strict";
      return function(e2, n5, t) {
        t.updateLocale = function(e3, n6) {
          var o5 = t.Ls[e3];
          if (o5)
            return (n6 ? Object.keys(n6) : []).forEach(function(e4) {
              o5[e4] = n6[e4];
            }), o5;
        };
      };
    });
  }
});

// node_modules/@scure/base/lib/esm/index.js
function isBytes2(a3) {
  return a3 instanceof Uint8Array || ArrayBuffer.isView(a3) && a3.constructor.name === "Uint8Array";
}
function abytes2(b5, ...lengths) {
  if (!isBytes2(b5))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b5.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b5.length);
}
function isArrayOf(isString, arr) {
  if (!Array.isArray(arr))
    return false;
  if (arr.length === 0)
    return true;
  if (isString) {
    return arr.every((item) => typeof item === "string");
  } else {
    return arr.every((item) => Number.isSafeInteger(item));
  }
}
function afn(input) {
  if (typeof input !== "function")
    throw new Error("function expected");
  return true;
}
function astr(label, input) {
  if (typeof input !== "string")
    throw new Error(`${label}: string expected`);
  return true;
}
function anumber(n5) {
  if (!Number.isSafeInteger(n5))
    throw new Error(`invalid integer: ${n5}`);
}
function aArr(input) {
  if (!Array.isArray(input))
    throw new Error("array expected");
}
function astrArr(label, input) {
  if (!isArrayOf(true, input))
    throw new Error(`${label}: array of strings expected`);
}
function anumArr(label, input) {
  if (!isArrayOf(false, input))
    throw new Error(`${label}: array of numbers expected`);
}
function chain(...args) {
  const id = (a3) => a3;
  const wrap3 = (a3, b5) => (c7) => a3(b5(c7));
  const encode12 = args.map((x6) => x6.encode).reduceRight(wrap3, id);
  const decode9 = args.map((x6) => x6.decode).reduce(wrap3, id);
  return { encode: encode12, decode: decode9 };
}
function alphabet(letters) {
  const lettersA = typeof letters === "string" ? letters.split("") : letters;
  const len = lettersA.length;
  astrArr("alphabet", lettersA);
  const indexes = new Map(lettersA.map((l8, i4) => [l8, i4]));
  return {
    encode: (digits) => {
      aArr(digits);
      return digits.map((i4) => {
        if (!Number.isSafeInteger(i4) || i4 < 0 || i4 >= len)
          throw new Error(`alphabet.encode: digit index outside alphabet "${i4}". Allowed: ${letters}`);
        return lettersA[i4];
      });
    },
    decode: (input) => {
      aArr(input);
      return input.map((letter) => {
        astr("alphabet.decode", letter);
        const i4 = indexes.get(letter);
        if (i4 === void 0)
          throw new Error(`Unknown letter: "${letter}". Allowed: ${letters}`);
        return i4;
      });
    }
  };
}
function join(separator = "") {
  astr("join", separator);
  return {
    encode: (from21) => {
      astrArr("join.decode", from21);
      return from21.join(separator);
    },
    decode: (to4) => {
      astr("join.decode", to4);
      return to4.split(separator);
    }
  };
}
function padding(bits, chr = "=") {
  anumber(bits);
  astr("padding", chr);
  return {
    encode(data) {
      astrArr("padding.encode", data);
      while (data.length * bits % 8)
        data.push(chr);
      return data;
    },
    decode(input) {
      astrArr("padding.decode", input);
      let end = input.length;
      if (end * bits % 8)
        throw new Error("padding: invalid, string should have whole number of bytes");
      for (; end > 0 && input[end - 1] === chr; end--) {
        const last = end - 1;
        const byte = last * bits;
        if (byte % 8 === 0)
          throw new Error("padding: invalid, string has too much padding");
      }
      return input.slice(0, end);
    }
  };
}
function normalize(fn3) {
  afn(fn3);
  return { encode: (from21) => from21, decode: (to4) => fn3(to4) };
}
function convertRadix(data, from21, to4) {
  if (from21 < 2)
    throw new Error(`convertRadix: invalid from=${from21}, base cannot be less than 2`);
  if (to4 < 2)
    throw new Error(`convertRadix: invalid to=${to4}, base cannot be less than 2`);
  aArr(data);
  if (!data.length)
    return [];
  let pos = 0;
  const res = [];
  const digits = Array.from(data, (d5) => {
    anumber(d5);
    if (d5 < 0 || d5 >= from21)
      throw new Error(`invalid integer: ${d5}`);
    return d5;
  });
  const dlen = digits.length;
  while (true) {
    let carry = 0;
    let done = true;
    for (let i4 = pos; i4 < dlen; i4++) {
      const digit = digits[i4];
      const fromCarry = from21 * carry;
      const digitBase = fromCarry + digit;
      if (!Number.isSafeInteger(digitBase) || fromCarry / from21 !== carry || digitBase - digit !== fromCarry) {
        throw new Error("convertRadix: carry overflow");
      }
      const div = digitBase / to4;
      carry = digitBase % to4;
      const rounded = Math.floor(div);
      digits[i4] = rounded;
      if (!Number.isSafeInteger(rounded) || rounded * to4 + carry !== digitBase)
        throw new Error("convertRadix: carry overflow");
      if (!done)
        continue;
      else if (!rounded)
        pos = i4;
      else
        done = false;
    }
    res.push(carry);
    if (done)
      break;
  }
  for (let i4 = 0; i4 < data.length - 1 && data[i4] === 0; i4++)
    res.push(0);
  return res.reverse();
}
var gcd = (a3, b5) => b5 === 0 ? a3 : gcd(b5, a3 % b5);
var radix2carry = (from21, to4) => from21 + (to4 - gcd(from21, to4));
var powers = (() => {
  let res = [];
  for (let i4 = 0; i4 < 40; i4++)
    res.push(2 ** i4);
  return res;
})();
function convertRadix2(data, from21, to4, padding2) {
  aArr(data);
  if (from21 <= 0 || from21 > 32)
    throw new Error(`convertRadix2: wrong from=${from21}`);
  if (to4 <= 0 || to4 > 32)
    throw new Error(`convertRadix2: wrong to=${to4}`);
  if (radix2carry(from21, to4) > 32) {
    throw new Error(`convertRadix2: carry overflow from=${from21} to=${to4} carryBits=${radix2carry(from21, to4)}`);
  }
  let carry = 0;
  let pos = 0;
  const max = powers[from21];
  const mask = powers[to4] - 1;
  const res = [];
  for (const n5 of data) {
    anumber(n5);
    if (n5 >= max)
      throw new Error(`convertRadix2: invalid data word=${n5} from=${from21}`);
    carry = carry << from21 | n5;
    if (pos + from21 > 32)
      throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from21}`);
    pos += from21;
    for (; pos >= to4; pos -= to4)
      res.push((carry >> pos - to4 & mask) >>> 0);
    const pow = powers[pos];
    if (pow === void 0)
      throw new Error("invalid carry");
    carry &= pow - 1;
  }
  carry = carry << to4 - pos & mask;
  if (!padding2 && pos >= from21)
    throw new Error("Excess padding");
  if (!padding2 && carry > 0)
    throw new Error(`Non-zero padding: ${carry}`);
  if (padding2 && pos > 0)
    res.push(carry >>> 0);
  return res;
}
function radix(num2) {
  anumber(num2);
  const _256 = 2 ** 8;
  return {
    encode: (bytes) => {
      if (!isBytes2(bytes))
        throw new Error("radix.encode input should be Uint8Array");
      return convertRadix(Array.from(bytes), _256, num2);
    },
    decode: (digits) => {
      anumArr("radix.decode", digits);
      return Uint8Array.from(convertRadix(digits, num2, _256));
    }
  };
}
function radix2(bits, revPadding = false) {
  anumber(bits);
  if (bits <= 0 || bits > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (bytes) => {
      if (!isBytes2(bytes))
        throw new Error("radix2.encode input should be Uint8Array");
      return convertRadix2(Array.from(bytes), 8, bits, !revPadding);
    },
    decode: (digits) => {
      anumArr("radix2.decode", digits);
      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
    }
  };
}
function unsafeWrapper(fn3) {
  afn(fn3);
  return function(...args) {
    try {
      return fn3.apply(null, args);
    } catch (e2) {
    }
  };
}
var base16 = chain(radix2(4), alphabet("0123456789ABCDEF"), join(""));
var base32 = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding(5), join(""));
var base32nopad = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), join(""));
var base32hex = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding(5), join(""));
var base32hexnopad = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), join(""));
var base32crockford = chain(radix2(5), alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join(""), normalize((s3) => s3.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
var hasBase64Builtin = (() => typeof Uint8Array.from([]).toBase64 === "function" && typeof Uint8Array.fromBase64 === "function")();
var decodeBase64Builtin = (s3, isUrl) => {
  astr("base64", s3);
  const re3 = isUrl ? /^[A-Za-z0-9=_-]+$/ : /^[A-Za-z0-9=+/]+$/;
  const alphabet3 = isUrl ? "base64url" : "base64";
  if (s3.length > 0 && !re3.test(s3))
    throw new Error("invalid base64");
  return Uint8Array.fromBase64(s3, { alphabet: alphabet3, lastChunkHandling: "strict" });
};
var base64 = hasBase64Builtin ? {
  encode(b5) {
    abytes2(b5);
    return b5.toBase64();
  },
  decode(s3) {
    return decodeBase64Builtin(s3, false);
  }
} : chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding(6), join(""));
var base64nopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), join(""));
var base64url = hasBase64Builtin ? {
  encode(b5) {
    abytes2(b5);
    return b5.toBase64({ alphabet: "base64url" });
  },
  decode(s3) {
    return decodeBase64Builtin(s3, true);
  }
} : chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding(6), join(""));
var base64urlnopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), join(""));
var genBase58 = (abc) => chain(radix(58), alphabet(abc), join(""));
var base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
var base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
var base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
var BECH_ALPHABET = chain(alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join(""));
var POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
function bech32Polymod(pre) {
  const b5 = pre >> 25;
  let chk = (pre & 33554431) << 5;
  for (let i4 = 0; i4 < POLYMOD_GENERATORS.length; i4++) {
    if ((b5 >> i4 & 1) === 1)
      chk ^= POLYMOD_GENERATORS[i4];
  }
  return chk;
}
function bechChecksum(prefix, words, encodingConst = 1) {
  const len = prefix.length;
  let chk = 1;
  for (let i4 = 0; i4 < len; i4++) {
    const c7 = prefix.charCodeAt(i4);
    if (c7 < 33 || c7 > 126)
      throw new Error(`Invalid prefix (${prefix})`);
    chk = bech32Polymod(chk) ^ c7 >> 5;
  }
  chk = bech32Polymod(chk);
  for (let i4 = 0; i4 < len; i4++)
    chk = bech32Polymod(chk) ^ prefix.charCodeAt(i4) & 31;
  for (let v6 of words)
    chk = bech32Polymod(chk) ^ v6;
  for (let i4 = 0; i4 < 6; i4++)
    chk = bech32Polymod(chk);
  chk ^= encodingConst;
  return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]], 30, 5, false));
}
function genBech32(encoding) {
  const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
  const _words = radix2(5);
  const fromWords = _words.decode;
  const toWords = _words.encode;
  const fromWordsUnsafe = unsafeWrapper(fromWords);
  function encode12(prefix, words, limit = 90) {
    astr("bech32.encode prefix", prefix);
    if (isBytes2(words))
      words = Array.from(words);
    anumArr("bech32.encode", words);
    const plen = prefix.length;
    if (plen === 0)
      throw new TypeError(`Invalid prefix length ${plen}`);
    const actualLength = plen + 7 + words.length;
    if (limit !== false && actualLength > limit)
      throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
    const lowered = prefix.toLowerCase();
    const sum = bechChecksum(lowered, words, ENCODING_CONST);
    return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
  }
  function decode9(str, limit = 90) {
    astr("bech32.decode input", str);
    const slen = str.length;
    if (slen < 8 || limit !== false && slen > limit)
      throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit})`);
    const lowered = str.toLowerCase();
    if (str !== lowered && str !== str.toUpperCase())
      throw new Error(`String must be lowercase or uppercase`);
    const sepIndex = lowered.lastIndexOf("1");
    if (sepIndex === 0 || sepIndex === -1)
      throw new Error(`Letter "1" must be present between prefix and data only`);
    const prefix = lowered.slice(0, sepIndex);
    const data = lowered.slice(sepIndex + 1);
    if (data.length < 6)
      throw new Error("Data must be at least 6 characters long");
    const words = BECH_ALPHABET.decode(data).slice(0, -6);
    const sum = bechChecksum(prefix, words, ENCODING_CONST);
    if (!data.endsWith(sum))
      throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
    return { prefix, words };
  }
  const decodeUnsafe = unsafeWrapper(decode9);
  function decodeToBytes(str) {
    const { prefix, words } = decode9(str, false);
    return { prefix, words, bytes: fromWords(words) };
  }
  function encodeFromBytes(prefix, bytes) {
    return encode12(prefix, toWords(bytes));
  }
  return {
    encode: encode12,
    decode: decode9,
    encodeFromBytes,
    decodeToBytes,
    decodeUnsafe,
    fromWords,
    fromWordsUnsafe,
    toWords
  };
}
var bech32 = genBech32("bech32");
var bech32m = genBech32("bech32m");
var hasHexBuiltin = (() => typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function")();
var hexBuiltin = {
  encode(data) {
    abytes2(data);
    return data.toHex();
  },
  decode(s3) {
    astr("hex", s3);
    return Uint8Array.fromHex(s3);
  }
};
var hex = hasHexBuiltin ? hexBuiltin : chain(radix2(4), alphabet("0123456789abcdef"), join(""), normalize((s3) => {
  if (typeof s3 !== "string" || s3.length % 2 !== 0)
    throw new TypeError(`hex.decode: expected string, got ${typeof s3} with length ${s3.length}`);
  return s3.toLowerCase();
}));

// node_modules/@walletconnect/core/dist/index.es.js
var import_events7 = __toESM(require_events());

// node_modules/@walletconnect/heartbeat/dist/index.es.js
var import_events = __toESM(require_events());
var import_time = __toESM(require_cjs());

// node_modules/@walletconnect/events/dist/esm/events.js
var IEvents = class {
};

// node_modules/@walletconnect/heartbeat/dist/index.es.js
var n = class extends IEvents {
  constructor(e2) {
    super();
  }
};
var s = import_time.FIVE_SECONDS;
var r = { pulse: "heartbeat_pulse" };
var i = class _i3 extends n {
  constructor(e2) {
    super(e2), this.events = new import_events.EventEmitter(), this.interval = s, this.interval = (e2 == null ? void 0 : e2.interval) || s;
  }
  static async init(e2) {
    const t = new _i3(e2);
    return await t.init(), t;
  }
  async init() {
    await this.initialize();
  }
  stop() {
    clearInterval(this.intervalRef);
  }
  on(e2, t) {
    this.events.on(e2, t);
  }
  once(e2, t) {
    this.events.once(e2, t);
  }
  off(e2, t) {
    this.events.off(e2, t);
  }
  removeListener(e2, t) {
    this.events.removeListener(e2, t);
  }
  async initialize() {
    this.intervalRef = setInterval(() => this.pulse(), (0, import_time.toMiliseconds)(this.interval));
  }
  pulse() {
    this.events.emit(r.pulse);
  }
};

// node_modules/destr/dist/index.mjs
var suspectProtoRx = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/;
var suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
var JsonSigRx = /^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/;
function jsonParseTransform(key, value) {
  if (key === "__proto__" || key === "constructor" && value && typeof value === "object" && "prototype" in value) {
    warnKeyDropped(key);
    return;
  }
  return value;
}
function warnKeyDropped(key) {
  console.warn(`[destr] Dropping "${key}" key to prevent prototype pollution.`);
}
function destr(value, options = {}) {
  if (typeof value !== "string") {
    return value;
  }
  if (value[0] === '"' && value[value.length - 1] === '"' && value.indexOf("\\") === -1) {
    return value.slice(1, -1);
  }
  const _value = value.trim();
  if (_value.length <= 9) {
    switch (_value.toLowerCase()) {
      case "true": {
        return true;
      }
      case "false": {
        return false;
      }
      case "undefined": {
        return void 0;
      }
      case "null": {
        return null;
      }
      case "nan": {
        return Number.NaN;
      }
      case "infinity": {
        return Number.POSITIVE_INFINITY;
      }
      case "-infinity": {
        return Number.NEGATIVE_INFINITY;
      }
    }
  }
  if (!JsonSigRx.test(value)) {
    if (options.strict) {
      throw new SyntaxError("[destr] Invalid JSON");
    }
    return value;
  }
  try {
    if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {
      if (options.strict) {
        throw new Error("[destr] Possible prototype pollution");
      }
      return JSON.parse(value, jsonParseTransform);
    }
    return JSON.parse(value);
  } catch (error) {
    if (options.strict) {
      throw error;
    }
    return value;
  }
}

// node_modules/@walletconnect/core/node_modules/unstorage/dist/shared/unstorage.zVDD2mZo.mjs
function wrapToPromise(value) {
  if (!value || typeof value.then !== "function") {
    return Promise.resolve(value);
  }
  return value;
}
function asyncCall(function_, ...arguments_) {
  try {
    return wrapToPromise(function_(...arguments_));
  } catch (error) {
    return Promise.reject(error);
  }
}
function isPrimitive(value) {
  const type = typeof value;
  return value === null || type !== "object" && type !== "function";
}
function isPureObject(value) {
  const proto = Object.getPrototypeOf(value);
  return !proto || proto.isPrototypeOf(Object);
}
function stringify3(value) {
  if (isPrimitive(value)) {
    return String(value);
  }
  if (isPureObject(value) || Array.isArray(value)) {
    return JSON.stringify(value);
  }
  if (typeof value.toJSON === "function") {
    return stringify3(value.toJSON());
  }
  throw new Error("[unstorage] Cannot stringify value!");
}
var BASE64_PREFIX = "base64:";
function serializeRaw(value) {
  if (typeof value === "string") {
    return value;
  }
  return BASE64_PREFIX + base64Encode(value);
}
function deserializeRaw(value) {
  if (typeof value !== "string") {
    return value;
  }
  if (!value.startsWith(BASE64_PREFIX)) {
    return value;
  }
  return base64Decode(value.slice(BASE64_PREFIX.length));
}
function base64Decode(input) {
  if (globalThis.Buffer) {
    return Buffer.from(input, "base64");
  }
  return Uint8Array.from(
    globalThis.atob(input),
    (c7) => c7.codePointAt(0)
  );
}
function base64Encode(input) {
  if (globalThis.Buffer) {
    return Buffer.from(input).toString("base64");
  }
  return globalThis.btoa(String.fromCodePoint(...input));
}
function normalizeKey(key) {
  var _a2;
  if (!key) {
    return "";
  }
  return ((_a2 = key.split("?")[0]) == null ? void 0 : _a2.replace(/[/\\]/g, ":").replace(/:+/g, ":").replace(/^:|:$/g, "")) || "";
}
function joinKeys(...keys2) {
  return normalizeKey(keys2.join(":"));
}
function normalizeBaseKey(base3) {
  base3 = normalizeKey(base3);
  return base3 ? base3 + ":" : "";
}
function filterKeyByDepth(key, depth) {
  if (depth === void 0) {
    return true;
  }
  let substrCount = 0;
  let index2 = key.indexOf(":");
  while (index2 > -1) {
    substrCount++;
    index2 = key.indexOf(":", index2 + 1);
  }
  return substrCount <= depth;
}
function filterKeyByBase(key, base3) {
  if (base3) {
    return key.startsWith(base3) && key[key.length - 1] !== "$";
  }
  return key[key.length - 1] !== "$";
}

// node_modules/@walletconnect/core/node_modules/unstorage/dist/index.mjs
function defineDriver(factory) {
  return factory;
}
var DRIVER_NAME = "memory";
var memory = defineDriver(() => {
  const data = /* @__PURE__ */ new Map();
  return {
    name: DRIVER_NAME,
    getInstance: () => data,
    hasItem(key) {
      return data.has(key);
    },
    getItem(key) {
      return data.get(key) ?? null;
    },
    getItemRaw(key) {
      return data.get(key) ?? null;
    },
    setItem(key, value) {
      data.set(key, value);
    },
    setItemRaw(key, value) {
      data.set(key, value);
    },
    removeItem(key) {
      data.delete(key);
    },
    getKeys() {
      return [...data.keys()];
    },
    clear() {
      data.clear();
    },
    dispose() {
      data.clear();
    }
  };
});
function createStorage(options = {}) {
  const context = {
    mounts: { "": options.driver || memory() },
    mountpoints: [""],
    watching: false,
    watchListeners: [],
    unwatch: {}
  };
  const getMount = (key) => {
    for (const base3 of context.mountpoints) {
      if (key.startsWith(base3)) {
        return {
          base: base3,
          relativeKey: key.slice(base3.length),
          driver: context.mounts[base3]
        };
      }
    }
    return {
      base: "",
      relativeKey: key,
      driver: context.mounts[""]
    };
  };
  const getMounts = (base3, includeParent) => {
    return context.mountpoints.filter(
      (mountpoint) => mountpoint.startsWith(base3) || includeParent && base3.startsWith(mountpoint)
    ).map((mountpoint) => ({
      relativeBase: base3.length > mountpoint.length ? base3.slice(mountpoint.length) : void 0,
      mountpoint,
      driver: context.mounts[mountpoint]
    }));
  };
  const onChange = (event, key) => {
    if (!context.watching) {
      return;
    }
    key = normalizeKey(key);
    for (const listener of context.watchListeners) {
      listener(event, key);
    }
  };
  const startWatch = async () => {
    if (context.watching) {
      return;
    }
    context.watching = true;
    for (const mountpoint in context.mounts) {
      context.unwatch[mountpoint] = await watch(
        context.mounts[mountpoint],
        onChange,
        mountpoint
      );
    }
  };
  const stopWatch = async () => {
    if (!context.watching) {
      return;
    }
    for (const mountpoint in context.unwatch) {
      await context.unwatch[mountpoint]();
    }
    context.unwatch = {};
    context.watching = false;
  };
  const runBatch = (items, commonOptions, cb) => {
    const batches = /* @__PURE__ */ new Map();
    const getBatch = (mount) => {
      let batch = batches.get(mount.base);
      if (!batch) {
        batch = {
          driver: mount.driver,
          base: mount.base,
          items: []
        };
        batches.set(mount.base, batch);
      }
      return batch;
    };
    for (const item of items) {
      const isStringItem = typeof item === "string";
      const key = normalizeKey(isStringItem ? item : item.key);
      const value = isStringItem ? void 0 : item.value;
      const options2 = isStringItem || !item.options ? commonOptions : { ...commonOptions, ...item.options };
      const mount = getMount(key);
      getBatch(mount).items.push({
        key,
        value,
        relativeKey: mount.relativeKey,
        options: options2
      });
    }
    return Promise.all([...batches.values()].map((batch) => cb(batch))).then(
      (r3) => r3.flat()
    );
  };
  const storage = {
    // Item
    hasItem(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      return asyncCall(driver.hasItem, relativeKey, opts);
    },
    getItem(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => destr(value)
      );
    },
    getItems(items, commonOptions = {}) {
      return runBatch(items, commonOptions, (batch) => {
        if (batch.driver.getItems) {
          return asyncCall(
            batch.driver.getItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              options: item.options
            })),
            commonOptions
          ).then(
            (r3) => r3.map((item) => ({
              key: joinKeys(batch.base, item.key),
              value: destr(item.value)
            }))
          );
        }
        return Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.getItem,
              item.relativeKey,
              item.options
            ).then((value) => ({
              key: item.key,
              value: destr(value)
            }));
          })
        );
      });
    },
    getItemRaw(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (driver.getItemRaw) {
        return asyncCall(driver.getItemRaw, relativeKey, opts);
      }
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => deserializeRaw(value)
      );
    },
    async setItem(key, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key);
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (!driver.setItem) {
        return;
      }
      await asyncCall(driver.setItem, relativeKey, stringify3(value), opts);
      if (!driver.watch) {
        onChange("update", key);
      }
    },
    async setItems(items, commonOptions) {
      await runBatch(items, commonOptions, async (batch) => {
        if (batch.driver.setItems) {
          return asyncCall(
            batch.driver.setItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              value: stringify3(item.value),
              options: item.options
            })),
            commonOptions
          );
        }
        if (!batch.driver.setItem) {
          return;
        }
        await Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.setItem,
              item.relativeKey,
              stringify3(item.value),
              item.options
            );
          })
        );
      });
    },
    async setItemRaw(key, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key, opts);
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (driver.setItemRaw) {
        await asyncCall(driver.setItemRaw, relativeKey, value, opts);
      } else if (driver.setItem) {
        await asyncCall(driver.setItem, relativeKey, serializeRaw(value), opts);
      } else {
        return;
      }
      if (!driver.watch) {
        onChange("update", key);
      }
    },
    async removeItem(key, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { removeMeta: opts };
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (!driver.removeItem) {
        return;
      }
      await asyncCall(driver.removeItem, relativeKey, opts);
      if (opts.removeMeta || opts.removeMata) {
        await asyncCall(driver.removeItem, relativeKey + "$", opts);
      }
      if (!driver.watch) {
        onChange("remove", key);
      }
    },
    // Meta
    async getMeta(key, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { nativeOnly: opts };
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      const meta = /* @__PURE__ */ Object.create(null);
      if (driver.getMeta) {
        Object.assign(meta, await asyncCall(driver.getMeta, relativeKey, opts));
      }
      if (!opts.nativeOnly) {
        const value = await asyncCall(
          driver.getItem,
          relativeKey + "$",
          opts
        ).then((value_) => destr(value_));
        if (value && typeof value === "object") {
          if (typeof value.atime === "string") {
            value.atime = new Date(value.atime);
          }
          if (typeof value.mtime === "string") {
            value.mtime = new Date(value.mtime);
          }
          Object.assign(meta, value);
        }
      }
      return meta;
    },
    setMeta(key, value, opts = {}) {
      return this.setItem(key + "$", value, opts);
    },
    removeMeta(key, opts = {}) {
      return this.removeItem(key + "$", opts);
    },
    // Keys
    async getKeys(base3, opts = {}) {
      var _a2;
      base3 = normalizeBaseKey(base3);
      const mounts = getMounts(base3, true);
      let maskedMounts = [];
      const allKeys = [];
      let allMountsSupportMaxDepth = true;
      for (const mount of mounts) {
        if (!((_a2 = mount.driver.flags) == null ? void 0 : _a2.maxDepth)) {
          allMountsSupportMaxDepth = false;
        }
        const rawKeys = await asyncCall(
          mount.driver.getKeys,
          mount.relativeBase,
          opts
        );
        for (const key of rawKeys) {
          const fullKey = mount.mountpoint + normalizeKey(key);
          if (!maskedMounts.some((p5) => fullKey.startsWith(p5))) {
            allKeys.push(fullKey);
          }
        }
        maskedMounts = [
          mount.mountpoint,
          ...maskedMounts.filter((p5) => !p5.startsWith(mount.mountpoint))
        ];
      }
      const shouldFilterByDepth = opts.maxDepth !== void 0 && !allMountsSupportMaxDepth;
      return allKeys.filter(
        (key) => (!shouldFilterByDepth || filterKeyByDepth(key, opts.maxDepth)) && filterKeyByBase(key, base3)
      );
    },
    // Utils
    async clear(base3, opts = {}) {
      base3 = normalizeBaseKey(base3);
      await Promise.all(
        getMounts(base3, false).map(async (m4) => {
          if (m4.driver.clear) {
            return asyncCall(m4.driver.clear, m4.relativeBase, opts);
          }
          if (m4.driver.removeItem) {
            const keys2 = await m4.driver.getKeys(m4.relativeBase || "", opts);
            return Promise.all(
              keys2.map((key) => m4.driver.removeItem(key, opts))
            );
          }
        })
      );
    },
    async dispose() {
      await Promise.all(
        Object.values(context.mounts).map((driver) => dispose(driver))
      );
    },
    async watch(callback) {
      await startWatch();
      context.watchListeners.push(callback);
      return async () => {
        context.watchListeners = context.watchListeners.filter(
          (listener) => listener !== callback
        );
        if (context.watchListeners.length === 0) {
          await stopWatch();
        }
      };
    },
    async unwatch() {
      context.watchListeners = [];
      await stopWatch();
    },
    // Mount
    mount(base3, driver) {
      base3 = normalizeBaseKey(base3);
      if (base3 && context.mounts[base3]) {
        throw new Error(`already mounted at ${base3}`);
      }
      if (base3) {
        context.mountpoints.push(base3);
        context.mountpoints.sort((a3, b5) => b5.length - a3.length);
      }
      context.mounts[base3] = driver;
      if (context.watching) {
        Promise.resolve(watch(driver, onChange, base3)).then((unwatcher) => {
          context.unwatch[base3] = unwatcher;
        }).catch(console.error);
      }
      return storage;
    },
    async unmount(base3, _dispose = true) {
      var _a2, _b;
      base3 = normalizeBaseKey(base3);
      if (!base3 || !context.mounts[base3]) {
        return;
      }
      if (context.watching && base3 in context.unwatch) {
        (_b = (_a2 = context.unwatch)[base3]) == null ? void 0 : _b.call(_a2);
        delete context.unwatch[base3];
      }
      if (_dispose) {
        await dispose(context.mounts[base3]);
      }
      context.mountpoints = context.mountpoints.filter((key) => key !== base3);
      delete context.mounts[base3];
    },
    getMount(key = "") {
      key = normalizeKey(key) + ":";
      const m4 = getMount(key);
      return {
        driver: m4.driver,
        base: m4.base
      };
    },
    getMounts(base3 = "", opts = {}) {
      base3 = normalizeKey(base3);
      const mounts = getMounts(base3, opts.parents);
      return mounts.map((m4) => ({
        driver: m4.driver,
        base: m4.mountpoint
      }));
    },
    // Aliases
    keys: (base3, opts = {}) => storage.getKeys(base3, opts),
    get: (key, opts = {}) => storage.getItem(key, opts),
    set: (key, value, opts = {}) => storage.setItem(key, value, opts),
    has: (key, opts = {}) => storage.hasItem(key, opts),
    del: (key, opts = {}) => storage.removeItem(key, opts),
    remove: (key, opts = {}) => storage.removeItem(key, opts)
  };
  return storage;
}
function watch(driver, onChange, base3) {
  return driver.watch ? driver.watch((event, key) => onChange(event, base3 + key)) : () => {
  };
}
async function dispose(driver) {
  if (typeof driver.dispose === "function") {
    await asyncCall(driver.dispose);
  }
}

// node_modules/idb-keyval/dist/index.js
function promisifyRequest(request) {
  return new Promise((resolve, reject) => {
    request.oncomplete = request.onsuccess = () => resolve(request.result);
    request.onabort = request.onerror = () => reject(request.error);
  });
}
function createStore(dbName, storeName) {
  let dbp;
  const getDB = () => {
    if (dbp)
      return dbp;
    const request = indexedDB.open(dbName);
    request.onupgradeneeded = () => request.result.createObjectStore(storeName);
    dbp = promisifyRequest(request);
    dbp.then((db) => {
      db.onclose = () => dbp = void 0;
    }, () => {
    });
    return dbp;
  };
  return (txMode, callback) => getDB().then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));
}
var defaultGetStoreFunc;
function defaultGetStore() {
  if (!defaultGetStoreFunc) {
    defaultGetStoreFunc = createStore("keyval-store", "keyval");
  }
  return defaultGetStoreFunc;
}
function get(key, customStore = defaultGetStore()) {
  return customStore("readonly", (store) => promisifyRequest(store.get(key)));
}
function set(key, value, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.put(value, key);
    return promisifyRequest(store.transaction);
  });
}
function del(key, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.delete(key);
    return promisifyRequest(store.transaction);
  });
}
function clear(customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.clear();
    return promisifyRequest(store.transaction);
  });
}
function eachCursor(store, callback) {
  store.openCursor().onsuccess = function() {
    if (!this.result)
      return;
    callback(this.result);
    this.result.continue();
  };
  return promisifyRequest(store.transaction);
}
function keys(customStore = defaultGetStore()) {
  return customStore("readonly", (store) => {
    if (store.getAllKeys) {
      return promisifyRequest(store.getAllKeys());
    }
    const items = [];
    return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);
  });
}

// node_modules/@walletconnect/safe-json/dist/esm/index.js
var JSONStringify = (data) => JSON.stringify(data, (_3, value) => typeof value === "bigint" ? value.toString() + "n" : value);
var JSONParse = (json) => {
  const numbersBiggerThanMaxInt = /([\[:])?(\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\}\]])/g;
  const serializedData = json.replace(numbersBiggerThanMaxInt, '$1"$2n"$3');
  return JSON.parse(serializedData, (_3, value) => {
    const isCustomFormatBigInt = typeof value === "string" && value.match(/^\d+n$/);
    if (isCustomFormatBigInt)
      return BigInt(value.substring(0, value.length - 1));
    return value;
  });
};
function safeJsonParse(value) {
  if (typeof value !== "string") {
    throw new Error(`Cannot safe json parse value of type ${typeof value}`);
  }
  try {
    return JSONParse(value);
  } catch (_a2) {
    return value;
  }
}
function safeJsonStringify(value) {
  return typeof value === "string" ? value : JSONStringify(value) || "";
}

// node_modules/@walletconnect/core/node_modules/@walletconnect/keyvaluestorage/dist/index.es.js
var x = "idb-keyval";
var z = (i4 = {}) => {
  const t = i4.base && i4.base.length > 0 ? `${i4.base}:` : "", e2 = (s3) => t + s3;
  let n5;
  return i4.dbName && i4.storeName && (n5 = createStore(i4.dbName, i4.storeName)), { name: x, options: i4, async hasItem(s3) {
    return !(typeof await get(e2(s3), n5) > "u");
  }, async getItem(s3) {
    return await get(e2(s3), n5) ?? null;
  }, setItem(s3, a3) {
    return set(e2(s3), a3, n5);
  }, removeItem(s3) {
    return del(e2(s3), n5);
  }, getKeys() {
    return keys(n5);
  }, clear() {
    return clear(n5);
  } };
};
var D = "WALLET_CONNECT_V2_INDEXED_DB";
var E = "keyvaluestorage";
var _ = class {
  constructor() {
    this.indexedDb = createStorage({ driver: z({ dbName: D, storeName: E }) });
  }
  async getKeys() {
    return this.indexedDb.getKeys();
  }
  async getEntries() {
    return (await this.indexedDb.getItems(await this.indexedDb.getKeys())).map((t) => [t.key, t.value]);
  }
  async getItem(t) {
    const e2 = await this.indexedDb.getItem(t);
    if (e2 !== null)
      return e2;
  }
  async setItem(t, e2) {
    await this.indexedDb.setItem(t, safeJsonStringify(e2));
  }
  async removeItem(t) {
    await this.indexedDb.removeItem(t);
  }
};
var l2 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
var c = { exports: {} };
(function() {
  let i4;
  function t() {
  }
  i4 = t, i4.prototype.getItem = function(e2) {
    return this.hasOwnProperty(e2) ? String(this[e2]) : null;
  }, i4.prototype.setItem = function(e2, n5) {
    this[e2] = String(n5);
  }, i4.prototype.removeItem = function(e2) {
    delete this[e2];
  }, i4.prototype.clear = function() {
    const e2 = this;
    Object.keys(e2).forEach(function(n5) {
      e2[n5] = void 0, delete e2[n5];
    });
  }, i4.prototype.key = function(e2) {
    return e2 = e2 || 0, Object.keys(this)[e2];
  }, i4.prototype.__defineGetter__("length", function() {
    return Object.keys(this).length;
  }), typeof l2 < "u" && l2.localStorage ? c.exports = l2.localStorage : typeof window < "u" && window.localStorage ? c.exports = window.localStorage : c.exports = new t();
})();
function k(i4) {
  var t;
  return [i4[0], safeJsonParse((t = i4[1]) != null ? t : "")];
}
var K = class {
  constructor() {
    this.localStorage = c.exports;
  }
  async getKeys() {
    return Object.keys(this.localStorage);
  }
  async getEntries() {
    return Object.entries(this.localStorage).map(k);
  }
  async getItem(t) {
    const e2 = this.localStorage.getItem(t);
    if (e2 !== null)
      return safeJsonParse(e2);
  }
  async setItem(t, e2) {
    this.localStorage.setItem(t, safeJsonStringify(e2));
  }
  async removeItem(t) {
    this.localStorage.removeItem(t);
  }
};
var N = "wc_storage_version";
var y = 1;
var O = async (i4, t, e2) => {
  const n5 = N, s3 = await t.getItem(n5);
  if (s3 && s3 >= y) {
    e2(t);
    return;
  }
  const a3 = await i4.getKeys();
  if (!a3.length) {
    e2(t);
    return;
  }
  const m4 = [];
  for (; a3.length; ) {
    const r3 = a3.shift();
    if (!r3)
      continue;
    const o5 = r3.toLowerCase();
    if (o5.includes("wc@") || o5.includes("walletconnect") || o5.includes("wc_") || o5.includes("wallet_connect")) {
      const f8 = await i4.getItem(r3);
      await t.setItem(r3, f8), m4.push(r3);
    }
  }
  await t.setItem(n5, y), e2(t), j(i4, m4);
};
var j = async (i4, t) => {
  t.length && t.forEach(async (e2) => {
    await i4.removeItem(e2);
  });
};
var h = class {
  constructor() {
    this.initialized = false, this.setInitialized = (e2) => {
      this.storage = e2, this.initialized = true;
    };
    const t = new K();
    this.storage = t;
    try {
      const e2 = new _();
      O(t, e2, this.setInitialized);
    } catch {
      this.initialized = true;
    }
  }
  async getKeys() {
    return await this.initialize(), this.storage.getKeys();
  }
  async getEntries() {
    return await this.initialize(), this.storage.getEntries();
  }
  async getItem(t) {
    return await this.initialize(), this.storage.getItem(t);
  }
  async setItem(t, e2) {
    return await this.initialize(), this.storage.setItem(t, e2);
  }
  async removeItem(t) {
    return await this.initialize(), this.storage.removeItem(t);
  }
  async initialize() {
    this.initialized || await new Promise((t) => {
      const e2 = setInterval(() => {
        this.initialized && (clearInterval(e2), t());
      }, 20);
    });
  }
};

// node_modules/@walletconnect/logger/dist/index.es.js
var import_pino = __toESM(require_browser());
var import_pino2 = __toESM(require_browser());
var c2 = { level: "info" };
var n2 = "custom_context";
var l3 = 1e3 * 1024;
var O2 = class {
  constructor(e2) {
    this.nodeValue = e2, this.sizeInBytes = new TextEncoder().encode(this.nodeValue).length, this.next = null;
  }
  get value() {
    return this.nodeValue;
  }
  get size() {
    return this.sizeInBytes;
  }
};
var d = class {
  constructor(e2) {
    this.head = null, this.tail = null, this.lengthInNodes = 0, this.maxSizeInBytes = e2, this.sizeInBytes = 0;
  }
  append(e2) {
    const t = new O2(e2);
    if (t.size > this.maxSizeInBytes)
      throw new Error(`[LinkedList] Value too big to insert into list: ${e2} with size ${t.size}`);
    for (; this.size + t.size > this.maxSizeInBytes; )
      this.shift();
    this.head ? (this.tail && (this.tail.next = t), this.tail = t) : (this.head = t, this.tail = t), this.lengthInNodes++, this.sizeInBytes += t.size;
  }
  shift() {
    if (!this.head)
      return;
    const e2 = this.head;
    this.head = this.head.next, this.head || (this.tail = null), this.lengthInNodes--, this.sizeInBytes -= e2.size;
  }
  toArray() {
    const e2 = [];
    let t = this.head;
    for (; t !== null; )
      e2.push(t.value), t = t.next;
    return e2;
  }
  get length() {
    return this.lengthInNodes;
  }
  get size() {
    return this.sizeInBytes;
  }
  toOrderedArray() {
    return Array.from(this);
  }
  [Symbol.iterator]() {
    let e2 = this.head;
    return { next: () => {
      if (!e2)
        return { done: true, value: null };
      const t = e2.value;
      return e2 = e2.next, { done: false, value: t };
    } };
  }
};
var L = class {
  constructor(e2, t = l3) {
    this.level = e2 ?? "error", this.levelValue = import_pino.levels.values[this.level], this.MAX_LOG_SIZE_IN_BYTES = t, this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);
  }
  forwardToConsole(e2, t) {
    t === import_pino.levels.values.error ? console.error(e2) : t === import_pino.levels.values.warn ? console.warn(e2) : t === import_pino.levels.values.debug ? console.debug(e2) : t === import_pino.levels.values.trace ? console.trace(e2) : console.log(e2);
  }
  appendToLogs(e2) {
    this.logs.append(safeJsonStringify({ timestamp: (/* @__PURE__ */ new Date()).toISOString(), log: e2 }));
    const t = typeof e2 == "string" ? JSON.parse(e2).level : e2.level;
    t >= this.levelValue && this.forwardToConsole(e2, t);
  }
  getLogs() {
    return this.logs;
  }
  clearLogs() {
    this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);
  }
  getLogArray() {
    return Array.from(this.logs);
  }
  logsToBlob(e2) {
    const t = this.getLogArray();
    return t.push(safeJsonStringify({ extraMetadata: e2 })), new Blob(t, { type: "application/json" });
  }
};
var m = class {
  constructor(e2, t = l3) {
    this.baseChunkLogger = new L(e2, t);
  }
  write(e2) {
    this.baseChunkLogger.appendToLogs(e2);
  }
  getLogs() {
    return this.baseChunkLogger.getLogs();
  }
  clearLogs() {
    this.baseChunkLogger.clearLogs();
  }
  getLogArray() {
    return this.baseChunkLogger.getLogArray();
  }
  logsToBlob(e2) {
    return this.baseChunkLogger.logsToBlob(e2);
  }
  downloadLogsBlobInBrowser(e2) {
    const t = URL.createObjectURL(this.logsToBlob(e2)), o5 = document.createElement("a");
    o5.href = t, o5.download = `walletconnect-logs-${(/* @__PURE__ */ new Date()).toISOString()}.txt`, document.body.appendChild(o5), o5.click(), document.body.removeChild(o5), URL.revokeObjectURL(t);
  }
};
var B = class {
  constructor(e2, t = l3) {
    this.baseChunkLogger = new L(e2, t);
  }
  write(e2) {
    this.baseChunkLogger.appendToLogs(e2);
  }
  getLogs() {
    return this.baseChunkLogger.getLogs();
  }
  clearLogs() {
    this.baseChunkLogger.clearLogs();
  }
  getLogArray() {
    return this.baseChunkLogger.getLogArray();
  }
  logsToBlob(e2) {
    return this.baseChunkLogger.logsToBlob(e2);
  }
};
var x2 = Object.defineProperty;
var S = Object.defineProperties;
var _2 = Object.getOwnPropertyDescriptors;
var p = Object.getOwnPropertySymbols;
var T = Object.prototype.hasOwnProperty;
var z2 = Object.prototype.propertyIsEnumerable;
var f = (r3, e2, t) => e2 in r3 ? x2(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var i2 = (r3, e2) => {
  for (var t in e2 || (e2 = {}))
    T.call(e2, t) && f(r3, t, e2[t]);
  if (p)
    for (var t of p(e2))
      z2.call(e2, t) && f(r3, t, e2[t]);
  return r3;
};
var g = (r3, e2) => S(r3, _2(e2));
function k2(r3) {
  return g(i2({}, r3), { level: (r3 == null ? void 0 : r3.level) || c2.level });
}
function v(r3, e2 = n2) {
  return r3[e2] || "";
}
function b(r3, e2, t = n2) {
  return r3[t] = e2, r3;
}
function y2(r3, e2 = n2) {
  let t = "";
  return typeof r3.bindings > "u" ? t = v(r3, e2) : t = r3.bindings().context || "", t;
}
function w(r3, e2, t = n2) {
  const o5 = y2(r3, t);
  return o5.trim() ? `${o5}/${e2}` : e2;
}
function E2(r3, e2, t = n2) {
  const o5 = w(r3, e2, t), a3 = r3.child({ context: o5 });
  return b(a3, o5, t);
}
function C(r3) {
  var e2, t;
  const o5 = new m((e2 = r3.opts) == null ? void 0 : e2.level, r3.maxSizeInBytes);
  return { logger: (0, import_pino.default)(g(i2({}, r3.opts), { level: "trace", browser: g(i2({}, (t = r3.opts) == null ? void 0 : t.browser), { write: (a3) => o5.write(a3) }) })), chunkLoggerController: o5 };
}
function I(r3) {
  var e2;
  const t = new B((e2 = r3.opts) == null ? void 0 : e2.level, r3.maxSizeInBytes);
  return { logger: (0, import_pino.default)(g(i2({}, r3.opts), { level: "trace" }), t), chunkLoggerController: t };
}
function A(r3) {
  return typeof r3.loggerOverride < "u" && typeof r3.loggerOverride != "string" ? { logger: r3.loggerOverride, chunkLoggerController: null } : typeof window < "u" ? C(r3) : I(r3);
}

// node_modules/@walletconnect/types/dist/index.es.js
var import_events4 = __toESM(require_events());
var a2 = Object.defineProperty;
var u = (e2, s3, r3) => s3 in e2 ? a2(e2, s3, { enumerable: true, configurable: true, writable: true, value: r3 }) : e2[s3] = r3;
var c3 = (e2, s3, r3) => u(e2, typeof s3 != "symbol" ? s3 + "" : s3, r3);
var h3 = class extends IEvents {
  constructor(s3) {
    super(), this.opts = s3, c3(this, "protocol", "wc"), c3(this, "version", 2);
  }
};
var p2 = Object.defineProperty;
var b2 = (e2, s3, r3) => s3 in e2 ? p2(e2, s3, { enumerable: true, configurable: true, writable: true, value: r3 }) : e2[s3] = r3;
var v2 = (e2, s3, r3) => b2(e2, typeof s3 != "symbol" ? s3 + "" : s3, r3);
var I2 = class extends IEvents {
  constructor(s3, r3) {
    super(), this.core = s3, this.logger = r3, v2(this, "records", /* @__PURE__ */ new Map());
  }
};
var y3 = class {
  constructor(s3, r3) {
    this.logger = s3, this.core = r3;
  }
};
var m2 = class extends IEvents {
  constructor(s3, r3) {
    super(), this.relayer = s3, this.logger = r3;
  }
};
var d2 = class extends IEvents {
  constructor(s3) {
    super();
  }
};
var f2 = class {
  constructor(s3, r3, t, q2) {
    this.core = s3, this.logger = r3, this.name = t;
  }
};
var P = class extends IEvents {
  constructor(s3, r3) {
    super(), this.relayer = s3, this.logger = r3;
  }
};
var S2 = class extends IEvents {
  constructor(s3, r3) {
    super(), this.core = s3, this.logger = r3;
  }
};
var M = class {
  constructor(s3, r3, t) {
    this.core = s3, this.logger = r3, this.store = t;
  }
};
var O3 = class {
  constructor(s3, r3) {
    this.projectId = s3, this.logger = r3;
  }
};
var R = class {
  constructor(s3, r3, t) {
    this.core = s3, this.logger = r3, this.telemetryEnabled = t;
  }
};
var T2 = Object.defineProperty;
var k3 = (e2, s3, r3) => s3 in e2 ? T2(e2, s3, { enumerable: true, configurable: true, writable: true, value: r3 }) : e2[s3] = r3;
var i3 = (e2, s3, r3) => k3(e2, typeof s3 != "symbol" ? s3 + "" : s3, r3);
var J = class {
  constructor(s3) {
    this.opts = s3, i3(this, "protocol", "wc"), i3(this, "version", 2);
  }
};
var V = class {
  constructor(s3) {
    this.client = s3;
  }
};

// node_modules/@walletconnect/core/dist/index.es.js
var import_time4 = __toESM(require_cjs());

// node_modules/@walletconnect/relay-auth/dist/index.es.js
var import_time2 = __toESM(require_cjs());
function En(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function fe(t, ...e2) {
  if (!En(t))
    throw new Error("Uint8Array expected");
  if (e2.length > 0 && !e2.includes(t.length))
    throw new Error("Uint8Array expected of length " + e2 + ", got length=" + t.length);
}
function De(t, e2 = true) {
  if (t.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e2 && t.finished)
    throw new Error("Hash#digest() has already been called");
}
function gn(t, e2) {
  fe(t);
  const n5 = e2.outputLen;
  if (t.length < n5)
    throw new Error("digestInto() expects output buffer of length at least " + n5);
}
var it = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
var _t = (t) => new DataView(t.buffer, t.byteOffset, t.byteLength);
function yn(t) {
  if (typeof t != "string")
    throw new Error("utf8ToBytes expected string, got " + typeof t);
  return new Uint8Array(new TextEncoder().encode(t));
}
function de(t) {
  return typeof t == "string" && (t = yn(t)), fe(t), t;
}
var xn = class {
  clone() {
    return this._cloneInto();
  }
};
function Bn(t) {
  const e2 = (r3) => t().update(de(r3)).digest(), n5 = t();
  return e2.outputLen = n5.outputLen, e2.blockLen = n5.blockLen, e2.create = () => t(), e2;
}
function he(t = 32) {
  if (it && typeof it.getRandomValues == "function")
    return it.getRandomValues(new Uint8Array(t));
  if (it && typeof it.randomBytes == "function")
    return it.randomBytes(t);
  throw new Error("crypto.getRandomValues must be defined");
}
function Cn(t, e2, n5, r3) {
  if (typeof t.setBigUint64 == "function")
    return t.setBigUint64(e2, n5, r3);
  const o5 = BigInt(32), s3 = BigInt(4294967295), a3 = Number(n5 >> o5 & s3), u3 = Number(n5 & s3), i4 = r3 ? 4 : 0, D4 = r3 ? 0 : 4;
  t.setUint32(e2 + i4, a3, r3), t.setUint32(e2 + D4, u3, r3);
}
var An = class extends xn {
  constructor(e2, n5, r3, o5) {
    super(), this.blockLen = e2, this.outputLen = n5, this.padOffset = r3, this.isLE = o5, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(e2), this.view = _t(this.buffer);
  }
  update(e2) {
    De(this);
    const { view: n5, buffer: r3, blockLen: o5 } = this;
    e2 = de(e2);
    const s3 = e2.length;
    for (let a3 = 0; a3 < s3; ) {
      const u3 = Math.min(o5 - this.pos, s3 - a3);
      if (u3 === o5) {
        const i4 = _t(e2);
        for (; o5 <= s3 - a3; a3 += o5)
          this.process(i4, a3);
        continue;
      }
      r3.set(e2.subarray(a3, a3 + u3), this.pos), this.pos += u3, a3 += u3, this.pos === o5 && (this.process(n5, 0), this.pos = 0);
    }
    return this.length += e2.length, this.roundClean(), this;
  }
  digestInto(e2) {
    De(this), gn(e2, this), this.finished = true;
    const { buffer: n5, view: r3, blockLen: o5, isLE: s3 } = this;
    let { pos: a3 } = this;
    n5[a3++] = 128, this.buffer.subarray(a3).fill(0), this.padOffset > o5 - a3 && (this.process(r3, 0), a3 = 0);
    for (let l8 = a3; l8 < o5; l8++)
      n5[l8] = 0;
    Cn(r3, o5 - 8, BigInt(this.length * 8), s3), this.process(r3, 0);
    const u3 = _t(e2), i4 = this.outputLen;
    if (i4 % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const D4 = i4 / 4, c7 = this.get();
    if (D4 > c7.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l8 = 0; l8 < D4; l8++)
      u3.setUint32(4 * l8, c7[l8], s3);
  }
  digest() {
    const { buffer: e2, outputLen: n5 } = this;
    this.digestInto(e2);
    const r3 = e2.slice(0, n5);
    return this.destroy(), r3;
  }
  _cloneInto(e2) {
    e2 || (e2 = new this.constructor()), e2.set(...this.get());
    const { blockLen: n5, buffer: r3, length: o5, finished: s3, destroyed: a3, pos: u3 } = this;
    return e2.length = o5, e2.pos = u3, e2.finished = s3, e2.destroyed = a3, o5 % n5 && e2.buffer.set(r3), e2;
  }
};
var wt = BigInt(2 ** 32 - 1);
var St = BigInt(32);
function le(t, e2 = false) {
  return e2 ? { h: Number(t & wt), l: Number(t >> St & wt) } : { h: Number(t >> St & wt) | 0, l: Number(t & wt) | 0 };
}
function mn(t, e2 = false) {
  let n5 = new Uint32Array(t.length), r3 = new Uint32Array(t.length);
  for (let o5 = 0; o5 < t.length; o5++) {
    const { h: s3, l: a3 } = le(t[o5], e2);
    [n5[o5], r3[o5]] = [s3, a3];
  }
  return [n5, r3];
}
var _n = (t, e2) => BigInt(t >>> 0) << St | BigInt(e2 >>> 0);
var Sn = (t, e2, n5) => t >>> n5;
var vn = (t, e2, n5) => t << 32 - n5 | e2 >>> n5;
var In = (t, e2, n5) => t >>> n5 | e2 << 32 - n5;
var Un = (t, e2, n5) => t << 32 - n5 | e2 >>> n5;
var Tn = (t, e2, n5) => t << 64 - n5 | e2 >>> n5 - 32;
var Fn = (t, e2, n5) => t >>> n5 - 32 | e2 << 64 - n5;
var Nn = (t, e2) => e2;
var Ln = (t, e2) => t;
var On = (t, e2, n5) => t << n5 | e2 >>> 32 - n5;
var Hn = (t, e2, n5) => e2 << n5 | t >>> 32 - n5;
var zn = (t, e2, n5) => e2 << n5 - 32 | t >>> 64 - n5;
var Mn = (t, e2, n5) => t << n5 - 32 | e2 >>> 64 - n5;
function qn(t, e2, n5, r3) {
  const o5 = (e2 >>> 0) + (r3 >>> 0);
  return { h: t + n5 + (o5 / 2 ** 32 | 0) | 0, l: o5 | 0 };
}
var $n = (t, e2, n5) => (t >>> 0) + (e2 >>> 0) + (n5 >>> 0);
var kn = (t, e2, n5, r3) => e2 + n5 + r3 + (t / 2 ** 32 | 0) | 0;
var Rn = (t, e2, n5, r3) => (t >>> 0) + (e2 >>> 0) + (n5 >>> 0) + (r3 >>> 0);
var jn = (t, e2, n5, r3, o5) => e2 + n5 + r3 + o5 + (t / 2 ** 32 | 0) | 0;
var Zn = (t, e2, n5, r3, o5) => (t >>> 0) + (e2 >>> 0) + (n5 >>> 0) + (r3 >>> 0) + (o5 >>> 0);
var Gn = (t, e2, n5, r3, o5, s3) => e2 + n5 + r3 + o5 + s3 + (t / 2 ** 32 | 0) | 0;
var x3 = { fromBig: le, split: mn, toBig: _n, shrSH: Sn, shrSL: vn, rotrSH: In, rotrSL: Un, rotrBH: Tn, rotrBL: Fn, rotr32H: Nn, rotr32L: Ln, rotlSH: On, rotlSL: Hn, rotlBH: zn, rotlBL: Mn, add: qn, add3L: $n, add3H: kn, add4L: Rn, add4H: jn, add5H: Gn, add5L: Zn };
var [Vn, Yn] = (() => x3.split(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t) => BigInt(t))))();
var P2 = new Uint32Array(80);
var Q = new Uint32Array(80);
var Jn = class extends An {
  constructor() {
    super(128, 64, 16, false), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  get() {
    const { Ah: e2, Al: n5, Bh: r3, Bl: o5, Ch: s3, Cl: a3, Dh: u3, Dl: i4, Eh: D4, El: c7, Fh: l8, Fl: p5, Gh: w5, Gl: h6, Hh: g4, Hl: S5 } = this;
    return [e2, n5, r3, o5, s3, a3, u3, i4, D4, c7, l8, p5, w5, h6, g4, S5];
  }
  set(e2, n5, r3, o5, s3, a3, u3, i4, D4, c7, l8, p5, w5, h6, g4, S5) {
    this.Ah = e2 | 0, this.Al = n5 | 0, this.Bh = r3 | 0, this.Bl = o5 | 0, this.Ch = s3 | 0, this.Cl = a3 | 0, this.Dh = u3 | 0, this.Dl = i4 | 0, this.Eh = D4 | 0, this.El = c7 | 0, this.Fh = l8 | 0, this.Fl = p5 | 0, this.Gh = w5 | 0, this.Gl = h6 | 0, this.Hh = g4 | 0, this.Hl = S5 | 0;
  }
  process(e2, n5) {
    for (let d5 = 0; d5 < 16; d5++, n5 += 4)
      P2[d5] = e2.getUint32(n5), Q[d5] = e2.getUint32(n5 += 4);
    for (let d5 = 16; d5 < 80; d5++) {
      const m4 = P2[d5 - 15] | 0, F3 = Q[d5 - 15] | 0, q2 = x3.rotrSH(m4, F3, 1) ^ x3.rotrSH(m4, F3, 8) ^ x3.shrSH(m4, F3, 7), z4 = x3.rotrSL(m4, F3, 1) ^ x3.rotrSL(m4, F3, 8) ^ x3.shrSL(m4, F3, 7), I5 = P2[d5 - 2] | 0, O7 = Q[d5 - 2] | 0, ot3 = x3.rotrSH(I5, O7, 19) ^ x3.rotrBH(I5, O7, 61) ^ x3.shrSH(I5, O7, 6), tt3 = x3.rotrSL(I5, O7, 19) ^ x3.rotrBL(I5, O7, 61) ^ x3.shrSL(I5, O7, 6), st = x3.add4L(z4, tt3, Q[d5 - 7], Q[d5 - 16]), at3 = x3.add4H(st, q2, ot3, P2[d5 - 7], P2[d5 - 16]);
      P2[d5] = at3 | 0, Q[d5] = st | 0;
    }
    let { Ah: r3, Al: o5, Bh: s3, Bl: a3, Ch: u3, Cl: i4, Dh: D4, Dl: c7, Eh: l8, El: p5, Fh: w5, Fl: h6, Gh: g4, Gl: S5, Hh: v6, Hl: L5 } = this;
    for (let d5 = 0; d5 < 80; d5++) {
      const m4 = x3.rotrSH(l8, p5, 14) ^ x3.rotrSH(l8, p5, 18) ^ x3.rotrBH(l8, p5, 41), F3 = x3.rotrSL(l8, p5, 14) ^ x3.rotrSL(l8, p5, 18) ^ x3.rotrBL(l8, p5, 41), q2 = l8 & w5 ^ ~l8 & g4, z4 = p5 & h6 ^ ~p5 & S5, I5 = x3.add5L(L5, F3, z4, Yn[d5], Q[d5]), O7 = x3.add5H(I5, v6, m4, q2, Vn[d5], P2[d5]), ot3 = I5 | 0, tt3 = x3.rotrSH(r3, o5, 28) ^ x3.rotrBH(r3, o5, 34) ^ x3.rotrBH(r3, o5, 39), st = x3.rotrSL(r3, o5, 28) ^ x3.rotrBL(r3, o5, 34) ^ x3.rotrBL(r3, o5, 39), at3 = r3 & s3 ^ r3 & u3 ^ s3 & u3, Ct4 = o5 & a3 ^ o5 & i4 ^ a3 & i4;
      v6 = g4 | 0, L5 = S5 | 0, g4 = w5 | 0, S5 = h6 | 0, w5 = l8 | 0, h6 = p5 | 0, { h: l8, l: p5 } = x3.add(D4 | 0, c7 | 0, O7 | 0, ot3 | 0), D4 = u3 | 0, c7 = i4 | 0, u3 = s3 | 0, i4 = a3 | 0, s3 = r3 | 0, a3 = o5 | 0;
      const At4 = x3.add3L(ot3, st, Ct4);
      r3 = x3.add3H(At4, O7, tt3, at3), o5 = At4 | 0;
    }
    ({ h: r3, l: o5 } = x3.add(this.Ah | 0, this.Al | 0, r3 | 0, o5 | 0)), { h: s3, l: a3 } = x3.add(this.Bh | 0, this.Bl | 0, s3 | 0, a3 | 0), { h: u3, l: i4 } = x3.add(this.Ch | 0, this.Cl | 0, u3 | 0, i4 | 0), { h: D4, l: c7 } = x3.add(this.Dh | 0, this.Dl | 0, D4 | 0, c7 | 0), { h: l8, l: p5 } = x3.add(this.Eh | 0, this.El | 0, l8 | 0, p5 | 0), { h: w5, l: h6 } = x3.add(this.Fh | 0, this.Fl | 0, w5 | 0, h6 | 0), { h: g4, l: S5 } = x3.add(this.Gh | 0, this.Gl | 0, g4 | 0, S5 | 0), { h: v6, l: L5 } = x3.add(this.Hh | 0, this.Hl | 0, v6 | 0, L5 | 0), this.set(r3, o5, s3, a3, u3, i4, D4, c7, l8, p5, w5, h6, g4, S5, v6, L5);
  }
  roundClean() {
    P2.fill(0), Q.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Kn = Bn(() => new Jn());
var vt = BigInt(0);
var be = BigInt(1);
var Wn = BigInt(2);
function It(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function Ut(t) {
  if (!It(t))
    throw new Error("Uint8Array expected");
}
function Tt(t, e2) {
  if (typeof e2 != "boolean")
    throw new Error(t + " boolean expected, got " + e2);
}
var Xn = Array.from({ length: 256 }, (t, e2) => e2.toString(16).padStart(2, "0"));
function Ft(t) {
  Ut(t);
  let e2 = "";
  for (let n5 = 0; n5 < t.length; n5++)
    e2 += Xn[t[n5]];
  return e2;
}
function pe(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  return t === "" ? vt : BigInt("0x" + t);
}
var K2 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function we(t) {
  if (t >= K2._0 && t <= K2._9)
    return t - K2._0;
  if (t >= K2.A && t <= K2.F)
    return t - (K2.A - 10);
  if (t >= K2.a && t <= K2.f)
    return t - (K2.a - 10);
}
function Ee(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  const e2 = t.length, n5 = e2 / 2;
  if (e2 % 2)
    throw new Error("hex string expected, got unpadded hex of length " + e2);
  const r3 = new Uint8Array(n5);
  for (let o5 = 0, s3 = 0; o5 < n5; o5++, s3 += 2) {
    const a3 = we(t.charCodeAt(s3)), u3 = we(t.charCodeAt(s3 + 1));
    if (a3 === void 0 || u3 === void 0) {
      const i4 = t[s3] + t[s3 + 1];
      throw new Error('hex string expected, got non-hex character "' + i4 + '" at index ' + s3);
    }
    r3[o5] = a3 * 16 + u3;
  }
  return r3;
}
function Pn(t) {
  return pe(Ft(t));
}
function Et(t) {
  return Ut(t), pe(Ft(Uint8Array.from(t).reverse()));
}
function ge(t, e2) {
  return Ee(t.toString(16).padStart(e2 * 2, "0"));
}
function Nt(t, e2) {
  return ge(t, e2).reverse();
}
function W(t, e2, n5) {
  let r3;
  if (typeof e2 == "string")
    try {
      r3 = Ee(e2);
    } catch (s3) {
      throw new Error(t + " must be hex string or Uint8Array, cause: " + s3);
    }
  else if (It(e2))
    r3 = Uint8Array.from(e2);
  else
    throw new Error(t + " must be hex string or Uint8Array");
  const o5 = r3.length;
  if (typeof n5 == "number" && o5 !== n5)
    throw new Error(t + " of length " + n5 + " expected, got " + o5);
  return r3;
}
function ye(...t) {
  let e2 = 0;
  for (let r3 = 0; r3 < t.length; r3++) {
    const o5 = t[r3];
    Ut(o5), e2 += o5.length;
  }
  const n5 = new Uint8Array(e2);
  for (let r3 = 0, o5 = 0; r3 < t.length; r3++) {
    const s3 = t[r3];
    n5.set(s3, o5), o5 += s3.length;
  }
  return n5;
}
var Lt = (t) => typeof t == "bigint" && vt <= t;
function Qn(t, e2, n5) {
  return Lt(t) && Lt(e2) && Lt(n5) && e2 <= t && t < n5;
}
function ft(t, e2, n5, r3) {
  if (!Qn(e2, n5, r3))
    throw new Error("expected valid " + t + ": " + n5 + " <= n < " + r3 + ", got " + e2);
}
function tr(t) {
  let e2;
  for (e2 = 0; t > vt; t >>= be, e2 += 1)
    ;
  return e2;
}
var er = (t) => (Wn << BigInt(t - 1)) - be;
var nr = { bigint: (t) => typeof t == "bigint", function: (t) => typeof t == "function", boolean: (t) => typeof t == "boolean", string: (t) => typeof t == "string", stringOrUint8Array: (t) => typeof t == "string" || It(t), isSafeInteger: (t) => Number.isSafeInteger(t), array: (t) => Array.isArray(t), field: (t, e2) => e2.Fp.isValid(t), hash: (t) => typeof t == "function" && Number.isSafeInteger(t.outputLen) };
function Ot(t, e2, n5 = {}) {
  const r3 = (o5, s3, a3) => {
    const u3 = nr[s3];
    if (typeof u3 != "function")
      throw new Error("invalid validator function");
    const i4 = t[o5];
    if (!(a3 && i4 === void 0) && !u3(i4, t))
      throw new Error("param " + String(o5) + " is invalid. Expected " + s3 + ", got " + i4);
  };
  for (const [o5, s3] of Object.entries(e2))
    r3(o5, s3, false);
  for (const [o5, s3] of Object.entries(n5))
    r3(o5, s3, true);
  return t;
}
function xe(t) {
  const e2 = /* @__PURE__ */ new WeakMap();
  return (n5, ...r3) => {
    const o5 = e2.get(n5);
    if (o5 !== void 0)
      return o5;
    const s3 = t(n5, ...r3);
    return e2.set(n5, s3), s3;
  };
}
var M2 = BigInt(0);
var N2 = BigInt(1);
var nt = BigInt(2);
var rr = BigInt(3);
var Ht = BigInt(4);
var Be = BigInt(5);
var Ce = BigInt(8);
function H(t, e2) {
  const n5 = t % e2;
  return n5 >= M2 ? n5 : e2 + n5;
}
function or(t, e2, n5) {
  if (e2 < M2)
    throw new Error("invalid exponent, negatives unsupported");
  if (n5 <= M2)
    throw new Error("invalid modulus");
  if (n5 === N2)
    return M2;
  let r3 = N2;
  for (; e2 > M2; )
    e2 & N2 && (r3 = r3 * t % n5), t = t * t % n5, e2 >>= N2;
  return r3;
}
function J2(t, e2, n5) {
  let r3 = t;
  for (; e2-- > M2; )
    r3 *= r3, r3 %= n5;
  return r3;
}
function Ae(t, e2) {
  if (t === M2)
    throw new Error("invert: expected non-zero number");
  if (e2 <= M2)
    throw new Error("invert: expected positive modulus, got " + e2);
  let n5 = H(t, e2), r3 = e2, o5 = M2, s3 = N2;
  for (; n5 !== M2; ) {
    const u3 = r3 / n5, i4 = r3 % n5, D4 = o5 - s3 * u3;
    r3 = n5, n5 = i4, o5 = s3, s3 = D4;
  }
  if (r3 !== N2)
    throw new Error("invert: does not exist");
  return H(o5, e2);
}
function sr(t) {
  const e2 = (t - N2) / nt;
  let n5, r3, o5;
  for (n5 = t - N2, r3 = 0; n5 % nt === M2; n5 /= nt, r3++)
    ;
  for (o5 = nt; o5 < t && or(o5, e2, t) !== t - N2; o5++)
    if (o5 > 1e3)
      throw new Error("Cannot find square root: likely non-prime P");
  if (r3 === 1) {
    const a3 = (t + N2) / Ht;
    return function(i4, D4) {
      const c7 = i4.pow(D4, a3);
      if (!i4.eql(i4.sqr(c7), D4))
        throw new Error("Cannot find square root");
      return c7;
    };
  }
  const s3 = (n5 + N2) / nt;
  return function(u3, i4) {
    if (u3.pow(i4, e2) === u3.neg(u3.ONE))
      throw new Error("Cannot find square root");
    let D4 = r3, c7 = u3.pow(u3.mul(u3.ONE, o5), n5), l8 = u3.pow(i4, s3), p5 = u3.pow(i4, n5);
    for (; !u3.eql(p5, u3.ONE); ) {
      if (u3.eql(p5, u3.ZERO))
        return u3.ZERO;
      let w5 = 1;
      for (let g4 = u3.sqr(p5); w5 < D4 && !u3.eql(g4, u3.ONE); w5++)
        g4 = u3.sqr(g4);
      const h6 = u3.pow(c7, N2 << BigInt(D4 - w5 - 1));
      c7 = u3.sqr(h6), l8 = u3.mul(l8, h6), p5 = u3.mul(p5, c7), D4 = w5;
    }
    return l8;
  };
}
function ir(t) {
  if (t % Ht === rr) {
    const e2 = (t + N2) / Ht;
    return function(r3, o5) {
      const s3 = r3.pow(o5, e2);
      if (!r3.eql(r3.sqr(s3), o5))
        throw new Error("Cannot find square root");
      return s3;
    };
  }
  if (t % Ce === Be) {
    const e2 = (t - Be) / Ce;
    return function(r3, o5) {
      const s3 = r3.mul(o5, nt), a3 = r3.pow(s3, e2), u3 = r3.mul(o5, a3), i4 = r3.mul(r3.mul(u3, nt), a3), D4 = r3.mul(u3, r3.sub(i4, r3.ONE));
      if (!r3.eql(r3.sqr(D4), o5))
        throw new Error("Cannot find square root");
      return D4;
    };
  }
  return sr(t);
}
var ur = (t, e2) => (H(t, e2) & N2) === N2;
var cr = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function ar(t) {
  const e2 = { ORDER: "bigint", MASK: "bigint", BYTES: "isSafeInteger", BITS: "isSafeInteger" }, n5 = cr.reduce((r3, o5) => (r3[o5] = "function", r3), e2);
  return Ot(t, n5);
}
function fr(t, e2, n5) {
  if (n5 < M2)
    throw new Error("invalid exponent, negatives unsupported");
  if (n5 === M2)
    return t.ONE;
  if (n5 === N2)
    return e2;
  let r3 = t.ONE, o5 = e2;
  for (; n5 > M2; )
    n5 & N2 && (r3 = t.mul(r3, o5)), o5 = t.sqr(o5), n5 >>= N2;
  return r3;
}
function Dr(t, e2) {
  const n5 = new Array(e2.length), r3 = e2.reduce((s3, a3, u3) => t.is0(a3) ? s3 : (n5[u3] = s3, t.mul(s3, a3)), t.ONE), o5 = t.inv(r3);
  return e2.reduceRight((s3, a3, u3) => t.is0(a3) ? s3 : (n5[u3] = t.mul(s3, n5[u3]), t.mul(s3, a3)), o5), n5;
}
function me(t, e2) {
  const n5 = e2 !== void 0 ? e2 : t.toString(2).length, r3 = Math.ceil(n5 / 8);
  return { nBitLength: n5, nByteLength: r3 };
}
function _e(t, e2, n5 = false, r3 = {}) {
  if (t <= M2)
    throw new Error("invalid field: expected ORDER > 0, got " + t);
  const { nBitLength: o5, nByteLength: s3 } = me(t, e2);
  if (s3 > 2048)
    throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let a3;
  const u3 = Object.freeze({ ORDER: t, isLE: n5, BITS: o5, BYTES: s3, MASK: er(o5), ZERO: M2, ONE: N2, create: (i4) => H(i4, t), isValid: (i4) => {
    if (typeof i4 != "bigint")
      throw new Error("invalid field element: expected bigint, got " + typeof i4);
    return M2 <= i4 && i4 < t;
  }, is0: (i4) => i4 === M2, isOdd: (i4) => (i4 & N2) === N2, neg: (i4) => H(-i4, t), eql: (i4, D4) => i4 === D4, sqr: (i4) => H(i4 * i4, t), add: (i4, D4) => H(i4 + D4, t), sub: (i4, D4) => H(i4 - D4, t), mul: (i4, D4) => H(i4 * D4, t), pow: (i4, D4) => fr(u3, i4, D4), div: (i4, D4) => H(i4 * Ae(D4, t), t), sqrN: (i4) => i4 * i4, addN: (i4, D4) => i4 + D4, subN: (i4, D4) => i4 - D4, mulN: (i4, D4) => i4 * D4, inv: (i4) => Ae(i4, t), sqrt: r3.sqrt || ((i4) => (a3 || (a3 = ir(t)), a3(u3, i4))), invertBatch: (i4) => Dr(u3, i4), cmov: (i4, D4, c7) => c7 ? D4 : i4, toBytes: (i4) => n5 ? Nt(i4, s3) : ge(i4, s3), fromBytes: (i4) => {
    if (i4.length !== s3)
      throw new Error("Field.fromBytes: expected " + s3 + " bytes, got " + i4.length);
    return n5 ? Et(i4) : Pn(i4);
  } });
  return Object.freeze(u3);
}
var Se = BigInt(0);
var gt = BigInt(1);
function zt(t, e2) {
  const n5 = e2.negate();
  return t ? n5 : e2;
}
function ve(t, e2) {
  if (!Number.isSafeInteger(t) || t <= 0 || t > e2)
    throw new Error("invalid window size, expected [1.." + e2 + "], got W=" + t);
}
function Mt(t, e2) {
  ve(t, e2);
  const n5 = Math.ceil(e2 / t) + 1, r3 = 2 ** (t - 1);
  return { windows: n5, windowSize: r3 };
}
function dr(t, e2) {
  if (!Array.isArray(t))
    throw new Error("array expected");
  t.forEach((n5, r3) => {
    if (!(n5 instanceof e2))
      throw new Error("invalid point at index " + r3);
  });
}
function hr(t, e2) {
  if (!Array.isArray(t))
    throw new Error("array of scalars expected");
  t.forEach((n5, r3) => {
    if (!e2.isValid(n5))
      throw new Error("invalid scalar at index " + r3);
  });
}
var qt = /* @__PURE__ */ new WeakMap();
var Ie = /* @__PURE__ */ new WeakMap();
function $t(t) {
  return Ie.get(t) || 1;
}
function lr(t, e2) {
  return { constTimeNegate: zt, hasPrecomputes(n5) {
    return $t(n5) !== 1;
  }, unsafeLadder(n5, r3, o5 = t.ZERO) {
    let s3 = n5;
    for (; r3 > Se; )
      r3 & gt && (o5 = o5.add(s3)), s3 = s3.double(), r3 >>= gt;
    return o5;
  }, precomputeWindow(n5, r3) {
    const { windows: o5, windowSize: s3 } = Mt(r3, e2), a3 = [];
    let u3 = n5, i4 = u3;
    for (let D4 = 0; D4 < o5; D4++) {
      i4 = u3, a3.push(i4);
      for (let c7 = 1; c7 < s3; c7++)
        i4 = i4.add(u3), a3.push(i4);
      u3 = i4.double();
    }
    return a3;
  }, wNAF(n5, r3, o5) {
    const { windows: s3, windowSize: a3 } = Mt(n5, e2);
    let u3 = t.ZERO, i4 = t.BASE;
    const D4 = BigInt(2 ** n5 - 1), c7 = 2 ** n5, l8 = BigInt(n5);
    for (let p5 = 0; p5 < s3; p5++) {
      const w5 = p5 * a3;
      let h6 = Number(o5 & D4);
      o5 >>= l8, h6 > a3 && (h6 -= c7, o5 += gt);
      const g4 = w5, S5 = w5 + Math.abs(h6) - 1, v6 = p5 % 2 !== 0, L5 = h6 < 0;
      h6 === 0 ? i4 = i4.add(zt(v6, r3[g4])) : u3 = u3.add(zt(L5, r3[S5]));
    }
    return { p: u3, f: i4 };
  }, wNAFUnsafe(n5, r3, o5, s3 = t.ZERO) {
    const { windows: a3, windowSize: u3 } = Mt(n5, e2), i4 = BigInt(2 ** n5 - 1), D4 = 2 ** n5, c7 = BigInt(n5);
    for (let l8 = 0; l8 < a3; l8++) {
      const p5 = l8 * u3;
      if (o5 === Se)
        break;
      let w5 = Number(o5 & i4);
      if (o5 >>= c7, w5 > u3 && (w5 -= D4, o5 += gt), w5 === 0)
        continue;
      let h6 = r3[p5 + Math.abs(w5) - 1];
      w5 < 0 && (h6 = h6.negate()), s3 = s3.add(h6);
    }
    return s3;
  }, getPrecomputes(n5, r3, o5) {
    let s3 = qt.get(r3);
    return s3 || (s3 = this.precomputeWindow(r3, n5), n5 !== 1 && qt.set(r3, o5(s3))), s3;
  }, wNAFCached(n5, r3, o5) {
    const s3 = $t(n5);
    return this.wNAF(s3, this.getPrecomputes(s3, n5, o5), r3);
  }, wNAFCachedUnsafe(n5, r3, o5, s3) {
    const a3 = $t(n5);
    return a3 === 1 ? this.unsafeLadder(n5, r3, s3) : this.wNAFUnsafe(a3, this.getPrecomputes(a3, n5, o5), r3, s3);
  }, setWindowSize(n5, r3) {
    ve(r3, e2), Ie.set(n5, r3), qt.delete(n5);
  } };
}
function br(t, e2, n5, r3) {
  if (dr(n5, t), hr(r3, e2), n5.length !== r3.length)
    throw new Error("arrays of points and scalars must have equal length");
  const o5 = t.ZERO, s3 = tr(BigInt(n5.length)), a3 = s3 > 12 ? s3 - 3 : s3 > 4 ? s3 - 2 : s3 ? 2 : 1, u3 = (1 << a3) - 1, i4 = new Array(u3 + 1).fill(o5), D4 = Math.floor((e2.BITS - 1) / a3) * a3;
  let c7 = o5;
  for (let l8 = D4; l8 >= 0; l8 -= a3) {
    i4.fill(o5);
    for (let w5 = 0; w5 < r3.length; w5++) {
      const h6 = r3[w5], g4 = Number(h6 >> BigInt(l8) & BigInt(u3));
      i4[g4] = i4[g4].add(n5[w5]);
    }
    let p5 = o5;
    for (let w5 = i4.length - 1, h6 = o5; w5 > 0; w5--)
      h6 = h6.add(i4[w5]), p5 = p5.add(h6);
    if (c7 = c7.add(p5), l8 !== 0)
      for (let w5 = 0; w5 < a3; w5++)
        c7 = c7.double();
  }
  return c7;
}
function pr(t) {
  return ar(t.Fp), Ot(t, { n: "bigint", h: "bigint", Gx: "field", Gy: "field" }, { nBitLength: "isSafeInteger", nByteLength: "isSafeInteger" }), Object.freeze({ ...me(t.n, t.nBitLength), ...t, p: t.Fp.ORDER });
}
var G = BigInt(0);
var j2 = BigInt(1);
var yt = BigInt(2);
var wr = BigInt(8);
var Er = { zip215: true };
function gr(t) {
  const e2 = pr(t);
  return Ot(t, { hash: "function", a: "bigint", d: "bigint", randomBytes: "function" }, { adjustScalarBytes: "function", domain: "function", uvRatio: "function", mapToCurve: "function" }), Object.freeze({ ...e2 });
}
function yr(t) {
  const e2 = gr(t), { Fp: n5, n: r3, prehash: o5, hash: s3, randomBytes: a3, nByteLength: u3, h: i4 } = e2, D4 = yt << BigInt(u3 * 8) - j2, c7 = n5.create, l8 = _e(e2.n, e2.nBitLength), p5 = e2.uvRatio || ((y6, f8) => {
    try {
      return { isValid: true, value: n5.sqrt(y6 * n5.inv(f8)) };
    } catch {
      return { isValid: false, value: G };
    }
  }), w5 = e2.adjustScalarBytes || ((y6) => y6), h6 = e2.domain || ((y6, f8, b5) => {
    if (Tt("phflag", b5), f8.length || b5)
      throw new Error("Contexts/pre-hash are not supported");
    return y6;
  });
  function g4(y6, f8) {
    ft("coordinate " + y6, f8, G, D4);
  }
  function S5(y6) {
    if (!(y6 instanceof d5))
      throw new Error("ExtendedPoint expected");
  }
  const v6 = xe((y6, f8) => {
    const { ex: b5, ey: E6, ez: B4 } = y6, C5 = y6.is0();
    f8 == null && (f8 = C5 ? wr : n5.inv(B4));
    const A5 = c7(b5 * f8), U4 = c7(E6 * f8), _3 = c7(B4 * f8);
    if (C5)
      return { x: G, y: j2 };
    if (_3 !== j2)
      throw new Error("invZ was invalid");
    return { x: A5, y: U4 };
  }), L5 = xe((y6) => {
    const { a: f8, d: b5 } = e2;
    if (y6.is0())
      throw new Error("bad point: ZERO");
    const { ex: E6, ey: B4, ez: C5, et: A5 } = y6, U4 = c7(E6 * E6), _3 = c7(B4 * B4), T5 = c7(C5 * C5), $4 = c7(T5 * T5), R4 = c7(U4 * f8), V4 = c7(T5 * c7(R4 + _3)), Y4 = c7($4 + c7(b5 * c7(U4 * _3)));
    if (V4 !== Y4)
      throw new Error("bad point: equation left != right (1)");
    const Z3 = c7(E6 * B4), X4 = c7(C5 * A5);
    if (Z3 !== X4)
      throw new Error("bad point: equation left != right (2)");
    return true;
  });
  class d5 {
    constructor(f8, b5, E6, B4) {
      this.ex = f8, this.ey = b5, this.ez = E6, this.et = B4, g4("x", f8), g4("y", b5), g4("z", E6), g4("t", B4), Object.freeze(this);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(f8) {
      if (f8 instanceof d5)
        throw new Error("extended point not allowed");
      const { x: b5, y: E6 } = f8 || {};
      return g4("x", b5), g4("y", E6), new d5(b5, E6, j2, c7(b5 * E6));
    }
    static normalizeZ(f8) {
      const b5 = n5.invertBatch(f8.map((E6) => E6.ez));
      return f8.map((E6, B4) => E6.toAffine(b5[B4])).map(d5.fromAffine);
    }
    static msm(f8, b5) {
      return br(d5, l8, f8, b5);
    }
    _setWindowSize(f8) {
      q2.setWindowSize(this, f8);
    }
    assertValidity() {
      L5(this);
    }
    equals(f8) {
      S5(f8);
      const { ex: b5, ey: E6, ez: B4 } = this, { ex: C5, ey: A5, ez: U4 } = f8, _3 = c7(b5 * U4), T5 = c7(C5 * B4), $4 = c7(E6 * U4), R4 = c7(A5 * B4);
      return _3 === T5 && $4 === R4;
    }
    is0() {
      return this.equals(d5.ZERO);
    }
    negate() {
      return new d5(c7(-this.ex), this.ey, this.ez, c7(-this.et));
    }
    double() {
      const { a: f8 } = e2, { ex: b5, ey: E6, ez: B4 } = this, C5 = c7(b5 * b5), A5 = c7(E6 * E6), U4 = c7(yt * c7(B4 * B4)), _3 = c7(f8 * C5), T5 = b5 + E6, $4 = c7(c7(T5 * T5) - C5 - A5), R4 = _3 + A5, V4 = R4 - U4, Y4 = _3 - A5, Z3 = c7($4 * V4), X4 = c7(R4 * Y4), et = c7($4 * Y4), pt4 = c7(V4 * R4);
      return new d5(Z3, X4, pt4, et);
    }
    add(f8) {
      S5(f8);
      const { a: b5, d: E6 } = e2, { ex: B4, ey: C5, ez: A5, et: U4 } = this, { ex: _3, ey: T5, ez: $4, et: R4 } = f8;
      if (b5 === BigInt(-1)) {
        const re3 = c7((C5 - B4) * (T5 + _3)), oe2 = c7((C5 + B4) * (T5 - _3)), mt4 = c7(oe2 - re3);
        if (mt4 === G)
          return this.double();
        const se4 = c7(A5 * yt * R4), ie4 = c7(U4 * yt * $4), ue4 = ie4 + se4, ce4 = oe2 + re3, ae4 = ie4 - se4, Dn3 = c7(ue4 * mt4), dn3 = c7(ce4 * ae4), hn3 = c7(ue4 * ae4), ln3 = c7(mt4 * ce4);
        return new d5(Dn3, dn3, ln3, hn3);
      }
      const V4 = c7(B4 * _3), Y4 = c7(C5 * T5), Z3 = c7(U4 * E6 * R4), X4 = c7(A5 * $4), et = c7((B4 + C5) * (_3 + T5) - V4 - Y4), pt4 = X4 - Z3, ee4 = X4 + Z3, ne4 = c7(Y4 - b5 * V4), un3 = c7(et * pt4), cn3 = c7(ee4 * ne4), an3 = c7(et * ne4), fn3 = c7(pt4 * ee4);
      return new d5(un3, cn3, fn3, an3);
    }
    subtract(f8) {
      return this.add(f8.negate());
    }
    wNAF(f8) {
      return q2.wNAFCached(this, f8, d5.normalizeZ);
    }
    multiply(f8) {
      const b5 = f8;
      ft("scalar", b5, j2, r3);
      const { p: E6, f: B4 } = this.wNAF(b5);
      return d5.normalizeZ([E6, B4])[0];
    }
    multiplyUnsafe(f8, b5 = d5.ZERO) {
      const E6 = f8;
      return ft("scalar", E6, G, r3), E6 === G ? F3 : this.is0() || E6 === j2 ? this : q2.wNAFCachedUnsafe(this, E6, d5.normalizeZ, b5);
    }
    isSmallOrder() {
      return this.multiplyUnsafe(i4).is0();
    }
    isTorsionFree() {
      return q2.unsafeLadder(this, r3).is0();
    }
    toAffine(f8) {
      return v6(this, f8);
    }
    clearCofactor() {
      const { h: f8 } = e2;
      return f8 === j2 ? this : this.multiplyUnsafe(f8);
    }
    static fromHex(f8, b5 = false) {
      const { d: E6, a: B4 } = e2, C5 = n5.BYTES;
      f8 = W("pointHex", f8, C5), Tt("zip215", b5);
      const A5 = f8.slice(), U4 = f8[C5 - 1];
      A5[C5 - 1] = U4 & -129;
      const _3 = Et(A5), T5 = b5 ? D4 : n5.ORDER;
      ft("pointHex.y", _3, G, T5);
      const $4 = c7(_3 * _3), R4 = c7($4 - j2), V4 = c7(E6 * $4 - B4);
      let { isValid: Y4, value: Z3 } = p5(R4, V4);
      if (!Y4)
        throw new Error("Point.fromHex: invalid y coordinate");
      const X4 = (Z3 & j2) === j2, et = (U4 & 128) !== 0;
      if (!b5 && Z3 === G && et)
        throw new Error("Point.fromHex: x=0 and x_0=1");
      return et !== X4 && (Z3 = c7(-Z3)), d5.fromAffine({ x: Z3, y: _3 });
    }
    static fromPrivateKey(f8) {
      return O7(f8).point;
    }
    toRawBytes() {
      const { x: f8, y: b5 } = this.toAffine(), E6 = Nt(b5, n5.BYTES);
      return E6[E6.length - 1] |= f8 & j2 ? 128 : 0, E6;
    }
    toHex() {
      return Ft(this.toRawBytes());
    }
  }
  d5.BASE = new d5(e2.Gx, e2.Gy, j2, c7(e2.Gx * e2.Gy)), d5.ZERO = new d5(G, j2, j2, G);
  const { BASE: m4, ZERO: F3 } = d5, q2 = lr(d5, u3 * 8);
  function z4(y6) {
    return H(y6, r3);
  }
  function I5(y6) {
    return z4(Et(y6));
  }
  function O7(y6) {
    const f8 = n5.BYTES;
    y6 = W("private key", y6, f8);
    const b5 = W("hashed private key", s3(y6), 2 * f8), E6 = w5(b5.slice(0, f8)), B4 = b5.slice(f8, 2 * f8), C5 = I5(E6), A5 = m4.multiply(C5), U4 = A5.toRawBytes();
    return { head: E6, prefix: B4, scalar: C5, point: A5, pointBytes: U4 };
  }
  function ot3(y6) {
    return O7(y6).pointBytes;
  }
  function tt3(y6 = new Uint8Array(), ...f8) {
    const b5 = ye(...f8);
    return I5(s3(h6(b5, W("context", y6), !!o5)));
  }
  function st(y6, f8, b5 = {}) {
    y6 = W("message", y6), o5 && (y6 = o5(y6));
    const { prefix: E6, scalar: B4, pointBytes: C5 } = O7(f8), A5 = tt3(b5.context, E6, y6), U4 = m4.multiply(A5).toRawBytes(), _3 = tt3(b5.context, U4, C5, y6), T5 = z4(A5 + _3 * B4);
    ft("signature.s", T5, G, r3);
    const $4 = ye(U4, Nt(T5, n5.BYTES));
    return W("result", $4, n5.BYTES * 2);
  }
  const at3 = Er;
  function Ct4(y6, f8, b5, E6 = at3) {
    const { context: B4, zip215: C5 } = E6, A5 = n5.BYTES;
    y6 = W("signature", y6, 2 * A5), f8 = W("message", f8), b5 = W("publicKey", b5, A5), C5 !== void 0 && Tt("zip215", C5), o5 && (f8 = o5(f8));
    const U4 = Et(y6.slice(A5, 2 * A5));
    let _3, T5, $4;
    try {
      _3 = d5.fromHex(b5, C5), T5 = d5.fromHex(y6.slice(0, A5), C5), $4 = m4.multiplyUnsafe(U4);
    } catch {
      return false;
    }
    if (!C5 && _3.isSmallOrder())
      return false;
    const R4 = tt3(B4, T5.toRawBytes(), _3.toRawBytes(), f8);
    return T5.add(_3.multiplyUnsafe(R4)).subtract($4).clearCofactor().equals(d5.ZERO);
  }
  return m4._setWindowSize(8), { CURVE: e2, getPublicKey: ot3, sign: st, verify: Ct4, ExtendedPoint: d5, utils: { getExtendedPublicKey: O7, randomPrivateKey: () => a3(n5.BYTES), precompute(y6 = 8, f8 = d5.BASE) {
    return f8._setWindowSize(y6), f8.multiply(BigInt(3)), f8;
  } } };
}
BigInt(0), BigInt(1);
var kt = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
var Ue = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
BigInt(0);
var xr = BigInt(1);
var Te = BigInt(2);
BigInt(3);
var Br = BigInt(5);
var Cr = BigInt(8);
function Ar(t) {
  const e2 = BigInt(10), n5 = BigInt(20), r3 = BigInt(40), o5 = BigInt(80), s3 = kt, u3 = t * t % s3 * t % s3, i4 = J2(u3, Te, s3) * u3 % s3, D4 = J2(i4, xr, s3) * t % s3, c7 = J2(D4, Br, s3) * D4 % s3, l8 = J2(c7, e2, s3) * c7 % s3, p5 = J2(l8, n5, s3) * l8 % s3, w5 = J2(p5, r3, s3) * p5 % s3, h6 = J2(w5, o5, s3) * w5 % s3, g4 = J2(h6, o5, s3) * w5 % s3, S5 = J2(g4, e2, s3) * c7 % s3;
  return { pow_p_5_8: J2(S5, Te, s3) * t % s3, b2: u3 };
}
function mr(t) {
  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;
}
function _r(t, e2) {
  const n5 = kt, r3 = H(e2 * e2 * e2, n5), o5 = H(r3 * r3 * e2, n5), s3 = Ar(t * o5).pow_p_5_8;
  let a3 = H(t * r3 * s3, n5);
  const u3 = H(e2 * a3 * a3, n5), i4 = a3, D4 = H(a3 * Ue, n5), c7 = u3 === t, l8 = u3 === H(-t, n5), p5 = u3 === H(-t * Ue, n5);
  return c7 && (a3 = i4), (l8 || p5) && (a3 = D4), ur(a3, n5) && (a3 = H(-a3, n5)), { isValid: c7 || l8, value: a3 };
}
var Sr = (() => _e(kt, void 0, true))();
var vr = (() => ({ a: BigInt(-1), d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"), Fp: Sr, n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"), h: Cr, Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"), Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"), hash: Kn, randomBytes: he, adjustScalarBytes: mr, uvRatio: _r }))();
var Rt = (() => yr(vr))();
var jt = "EdDSA";
var Zt = "JWT";
var ut = ".";
var Dt = "base64url";
var Gt = "utf8";
var xt = "utf8";
var Vt = ":";
var Yt = "did";
var Jt = "key";
var dt = "base58btc";
var Kt = "z";
var Wt = "K36";
var Ne = 32;
function Xt(t) {
  return globalThis.Buffer != null ? new Uint8Array(t.buffer, t.byteOffset, t.byteLength) : t;
}
function Le(t = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Xt(globalThis.Buffer.allocUnsafe(t)) : new Uint8Array(t);
}
function Oe(t, e2) {
  e2 || (e2 = t.reduce((o5, s3) => o5 + s3.length, 0));
  const n5 = Le(e2);
  let r3 = 0;
  for (const o5 of t)
    n5.set(o5, r3), r3 += o5.length;
  return Xt(n5);
}
function Ir(t, e2) {
  if (t.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var n5 = new Uint8Array(256), r3 = 0; r3 < n5.length; r3++)
    n5[r3] = 255;
  for (var o5 = 0; o5 < t.length; o5++) {
    var s3 = t.charAt(o5), a3 = s3.charCodeAt(0);
    if (n5[a3] !== 255)
      throw new TypeError(s3 + " is ambiguous");
    n5[a3] = o5;
  }
  var u3 = t.length, i4 = t.charAt(0), D4 = Math.log(u3) / Math.log(256), c7 = Math.log(256) / Math.log(u3);
  function l8(h6) {
    if (h6 instanceof Uint8Array || (ArrayBuffer.isView(h6) ? h6 = new Uint8Array(h6.buffer, h6.byteOffset, h6.byteLength) : Array.isArray(h6) && (h6 = Uint8Array.from(h6))), !(h6 instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (h6.length === 0)
      return "";
    for (var g4 = 0, S5 = 0, v6 = 0, L5 = h6.length; v6 !== L5 && h6[v6] === 0; )
      v6++, g4++;
    for (var d5 = (L5 - v6) * c7 + 1 >>> 0, m4 = new Uint8Array(d5); v6 !== L5; ) {
      for (var F3 = h6[v6], q2 = 0, z4 = d5 - 1; (F3 !== 0 || q2 < S5) && z4 !== -1; z4--, q2++)
        F3 += 256 * m4[z4] >>> 0, m4[z4] = F3 % u3 >>> 0, F3 = F3 / u3 >>> 0;
      if (F3 !== 0)
        throw new Error("Non-zero carry");
      S5 = q2, v6++;
    }
    for (var I5 = d5 - S5; I5 !== d5 && m4[I5] === 0; )
      I5++;
    for (var O7 = i4.repeat(g4); I5 < d5; ++I5)
      O7 += t.charAt(m4[I5]);
    return O7;
  }
  function p5(h6) {
    if (typeof h6 != "string")
      throw new TypeError("Expected String");
    if (h6.length === 0)
      return new Uint8Array();
    var g4 = 0;
    if (h6[g4] !== " ") {
      for (var S5 = 0, v6 = 0; h6[g4] === i4; )
        S5++, g4++;
      for (var L5 = (h6.length - g4) * D4 + 1 >>> 0, d5 = new Uint8Array(L5); h6[g4]; ) {
        var m4 = n5[h6.charCodeAt(g4)];
        if (m4 === 255)
          return;
        for (var F3 = 0, q2 = L5 - 1; (m4 !== 0 || F3 < v6) && q2 !== -1; q2--, F3++)
          m4 += u3 * d5[q2] >>> 0, d5[q2] = m4 % 256 >>> 0, m4 = m4 / 256 >>> 0;
        if (m4 !== 0)
          throw new Error("Non-zero carry");
        v6 = F3, g4++;
      }
      if (h6[g4] !== " ") {
        for (var z4 = L5 - v6; z4 !== L5 && d5[z4] === 0; )
          z4++;
        for (var I5 = new Uint8Array(S5 + (L5 - z4)), O7 = S5; z4 !== L5; )
          I5[O7++] = d5[z4++];
        return I5;
      }
    }
  }
  function w5(h6) {
    var g4 = p5(h6);
    if (g4)
      return g4;
    throw new Error(`Non-${e2} character`);
  }
  return { encode: l8, decodeUnsafe: p5, decode: w5 };
}
var Ur = Ir;
var Tr = Ur;
var He = (t) => {
  if (t instanceof Uint8Array && t.constructor.name === "Uint8Array")
    return t;
  if (t instanceof ArrayBuffer)
    return new Uint8Array(t);
  if (ArrayBuffer.isView(t))
    return new Uint8Array(t.buffer, t.byteOffset, t.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var Fr = (t) => new TextEncoder().encode(t);
var Nr = (t) => new TextDecoder().decode(t);
var Lr = class {
  constructor(e2, n5, r3) {
    this.name = e2, this.prefix = n5, this.baseEncode = r3;
  }
  encode(e2) {
    if (e2 instanceof Uint8Array)
      return `${this.prefix}${this.baseEncode(e2)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var Or = class {
  constructor(e2, n5, r3) {
    if (this.name = e2, this.prefix = n5, n5.codePointAt(0) === void 0)
      throw new Error("Invalid prefix character");
    this.prefixCodePoint = n5.codePointAt(0), this.baseDecode = r3;
  }
  decode(e2) {
    if (typeof e2 == "string") {
      if (e2.codePointAt(0) !== this.prefixCodePoint)
        throw Error(`Unable to decode multibase string ${JSON.stringify(e2)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e2.slice(this.prefix.length));
    } else
      throw Error("Can only multibase decode strings");
  }
  or(e2) {
    return ze(this, e2);
  }
};
var Hr = class {
  constructor(e2) {
    this.decoders = e2;
  }
  or(e2) {
    return ze(this, e2);
  }
  decode(e2) {
    const n5 = e2[0], r3 = this.decoders[n5];
    if (r3)
      return r3.decode(e2);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e2)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ze = (t, e2) => new Hr({ ...t.decoders || { [t.prefix]: t }, ...e2.decoders || { [e2.prefix]: e2 } });
var zr = class {
  constructor(e2, n5, r3, o5) {
    this.name = e2, this.prefix = n5, this.baseEncode = r3, this.baseDecode = o5, this.encoder = new Lr(e2, n5, r3), this.decoder = new Or(e2, n5, o5);
  }
  encode(e2) {
    return this.encoder.encode(e2);
  }
  decode(e2) {
    return this.decoder.decode(e2);
  }
};
var Bt = ({ name: t, prefix: e2, encode: n5, decode: r3 }) => new zr(t, e2, n5, r3);
var ht = ({ prefix: t, name: e2, alphabet: n5 }) => {
  const { encode: r3, decode: o5 } = Tr(n5, e2);
  return Bt({ prefix: t, name: e2, encode: r3, decode: (s3) => He(o5(s3)) });
};
var Mr = (t, e2, n5, r3) => {
  const o5 = {};
  for (let c7 = 0; c7 < e2.length; ++c7)
    o5[e2[c7]] = c7;
  let s3 = t.length;
  for (; t[s3 - 1] === "="; )
    --s3;
  const a3 = new Uint8Array(s3 * n5 / 8 | 0);
  let u3 = 0, i4 = 0, D4 = 0;
  for (let c7 = 0; c7 < s3; ++c7) {
    const l8 = o5[t[c7]];
    if (l8 === void 0)
      throw new SyntaxError(`Non-${r3} character`);
    i4 = i4 << n5 | l8, u3 += n5, u3 >= 8 && (u3 -= 8, a3[D4++] = 255 & i4 >> u3);
  }
  if (u3 >= n5 || 255 & i4 << 8 - u3)
    throw new SyntaxError("Unexpected end of data");
  return a3;
};
var qr = (t, e2, n5) => {
  const r3 = e2[e2.length - 1] === "=", o5 = (1 << n5) - 1;
  let s3 = "", a3 = 0, u3 = 0;
  for (let i4 = 0; i4 < t.length; ++i4)
    for (u3 = u3 << 8 | t[i4], a3 += 8; a3 > n5; )
      a3 -= n5, s3 += e2[o5 & u3 >> a3];
  if (a3 && (s3 += e2[o5 & u3 << n5 - a3]), r3)
    for (; s3.length * n5 & 7; )
      s3 += "=";
  return s3;
};
var k4 = ({ name: t, prefix: e2, bitsPerChar: n5, alphabet: r3 }) => Bt({ prefix: e2, name: t, encode(o5) {
  return qr(o5, r3, n5);
}, decode(o5) {
  return Mr(o5, r3, n5, t);
} });
var $r = Bt({ prefix: "\0", name: "identity", encode: (t) => Nr(t), decode: (t) => Fr(t) });
var kr = Object.freeze({ __proto__: null, identity: $r });
var Rr = k4({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var jr = Object.freeze({ __proto__: null, base2: Rr });
var Zr = k4({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Gr = Object.freeze({ __proto__: null, base8: Zr });
var Vr = ht({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Yr = Object.freeze({ __proto__: null, base10: Vr });
var Jr = k4({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Kr = k4({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Wr = Object.freeze({ __proto__: null, base16: Jr, base16upper: Kr });
var Xr = k4({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Pr = k4({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Qr = k4({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var to = k4({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var eo = k4({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var no = k4({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var ro = k4({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var oo = k4({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var so = k4({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var io = Object.freeze({ __proto__: null, base32: Xr, base32upper: Pr, base32pad: Qr, base32padupper: to, base32hex: eo, base32hexupper: no, base32hexpad: ro, base32hexpadupper: oo, base32z: so });
var uo = ht({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var co = ht({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var ao = Object.freeze({ __proto__: null, base36: uo, base36upper: co });
var fo = ht({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Do = ht({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var ho = Object.freeze({ __proto__: null, base58btc: fo, base58flickr: Do });
var lo = k4({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var bo = k4({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var po = k4({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var wo = k4({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Eo = Object.freeze({ __proto__: null, base64: lo, base64pad: bo, base64url: po, base64urlpad: wo });
var Me = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var go = Me.reduce((t, e2, n5) => (t[n5] = e2, t), []);
var yo = Me.reduce((t, e2, n5) => (t[e2.codePointAt(0)] = n5, t), []);
function xo(t) {
  return t.reduce((e2, n5) => (e2 += go[n5], e2), "");
}
function Bo(t) {
  const e2 = [];
  for (const n5 of t) {
    const r3 = yo[n5.codePointAt(0)];
    if (r3 === void 0)
      throw new Error(`Non-base256emoji character: ${n5}`);
    e2.push(r3);
  }
  return new Uint8Array(e2);
}
var Co = Bt({ prefix: "🚀", name: "base256emoji", encode: xo, decode: Bo });
var Ao = Object.freeze({ __proto__: null, base256emoji: Co });
var mo = $e;
var qe = 128;
var _o = 127;
var So = ~_o;
var vo = Math.pow(2, 31);
function $e(t, e2, n5) {
  e2 = e2 || [], n5 = n5 || 0;
  for (var r3 = n5; t >= vo; )
    e2[n5++] = t & 255 | qe, t /= 128;
  for (; t & So; )
    e2[n5++] = t & 255 | qe, t >>>= 7;
  return e2[n5] = t | 0, $e.bytes = n5 - r3 + 1, e2;
}
var Io = Pt;
var Uo = 128;
var ke = 127;
function Pt(t, r3) {
  var n5 = 0, r3 = r3 || 0, o5 = 0, s3 = r3, a3, u3 = t.length;
  do {
    if (s3 >= u3)
      throw Pt.bytes = 0, new RangeError("Could not decode varint");
    a3 = t[s3++], n5 += o5 < 28 ? (a3 & ke) << o5 : (a3 & ke) * Math.pow(2, o5), o5 += 7;
  } while (a3 >= Uo);
  return Pt.bytes = s3 - r3, n5;
}
var To = Math.pow(2, 7);
var Fo = Math.pow(2, 14);
var No = Math.pow(2, 21);
var Lo = Math.pow(2, 28);
var Oo = Math.pow(2, 35);
var Ho = Math.pow(2, 42);
var zo = Math.pow(2, 49);
var Mo = Math.pow(2, 56);
var qo = Math.pow(2, 63);
var $o = function(t) {
  return t < To ? 1 : t < Fo ? 2 : t < No ? 3 : t < Lo ? 4 : t < Oo ? 5 : t < Ho ? 6 : t < zo ? 7 : t < Mo ? 8 : t < qo ? 9 : 10;
};
var ko = { encode: mo, decode: Io, encodingLength: $o };
var Re = ko;
var je = (t, e2, n5 = 0) => (Re.encode(t, e2, n5), e2);
var Ze = (t) => Re.encodingLength(t);
var Qt = (t, e2) => {
  const n5 = e2.byteLength, r3 = Ze(t), o5 = r3 + Ze(n5), s3 = new Uint8Array(o5 + n5);
  return je(t, s3, 0), je(n5, s3, r3), s3.set(e2, o5), new Ro(t, n5, e2, s3);
};
var Ro = class {
  constructor(e2, n5, r3, o5) {
    this.code = e2, this.size = n5, this.digest = r3, this.bytes = o5;
  }
};
var Ge = ({ name: t, code: e2, encode: n5 }) => new jo(t, e2, n5);
var jo = class {
  constructor(e2, n5, r3) {
    this.name = e2, this.code = n5, this.encode = r3;
  }
  digest(e2) {
    if (e2 instanceof Uint8Array) {
      const n5 = this.encode(e2);
      return n5 instanceof Uint8Array ? Qt(this.code, n5) : n5.then((r3) => Qt(this.code, r3));
    } else
      throw Error("Unknown type, must be binary type");
  }
};
var Ve = (t) => async (e2) => new Uint8Array(await crypto.subtle.digest(t, e2));
var Zo = Ge({ name: "sha2-256", code: 18, encode: Ve("SHA-256") });
var Go = Ge({ name: "sha2-512", code: 19, encode: Ve("SHA-512") });
var Vo = Object.freeze({ __proto__: null, sha256: Zo, sha512: Go });
var Ye = 0;
var Yo = "identity";
var Je = He;
var Jo = (t) => Qt(Ye, Je(t));
var Ko = { code: Ye, name: Yo, encode: Je, digest: Jo };
var Wo = Object.freeze({ __proto__: null, identity: Ko });
new TextEncoder(), new TextDecoder();
var Ke = { ...kr, ...jr, ...Gr, ...Yr, ...Wr, ...io, ...ao, ...ho, ...Eo, ...Ao };
({ ...Vo, ...Wo });
function We(t, e2, n5, r3) {
  return { name: t, prefix: e2, encoder: { name: t, prefix: e2, encode: n5 }, decoder: { decode: r3 } };
}
var Xe = We("utf8", "u", (t) => "u" + new TextDecoder("utf8").decode(t), (t) => new TextEncoder().encode(t.substring(1)));
var te = We("ascii", "a", (t) => {
  let e2 = "a";
  for (let n5 = 0; n5 < t.length; n5++)
    e2 += String.fromCharCode(t[n5]);
  return e2;
}, (t) => {
  t = t.substring(1);
  const e2 = Le(t.length);
  for (let n5 = 0; n5 < t.length; n5++)
    e2[n5] = t.charCodeAt(n5);
  return e2;
});
var Pe = { utf8: Xe, "utf-8": Xe, hex: Ke.base16, latin1: te, ascii: te, binary: te, ...Ke };
function ct(t, e2 = "utf8") {
  const n5 = Pe[e2];
  if (!n5)
    throw new Error(`Unsupported encoding "${e2}"`);
  return (e2 === "utf8" || e2 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(t.buffer, t.byteOffset, t.byteLength).toString("utf8") : n5.encoder.encode(t).substring(1);
}
function rt(t, e2 = "utf8") {
  const n5 = Pe[e2];
  if (!n5)
    throw new Error(`Unsupported encoding "${e2}"`);
  return (e2 === "utf8" || e2 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Xt(globalThis.Buffer.from(t, "utf-8")) : n5.decoder.decode(`${n5.prefix}${t}`);
}
function lt(t) {
  return safeJsonParse(ct(rt(t, Dt), Gt));
}
function bt(t) {
  return ct(rt(safeJsonStringify(t), Gt), Dt);
}
function Qe(t) {
  const e2 = rt(Wt, dt), n5 = Kt + ct(Oe([e2, t]), dt);
  return [Yt, Jt, n5].join(Vt);
}
function en(t) {
  return ct(t, Dt);
}
function nn(t) {
  return rt(t, Dt);
}
function rn(t) {
  return rt([bt(t.header), bt(t.payload)].join(ut), xt);
}
function on(t) {
  return [bt(t.header), bt(t.payload), en(t.signature)].join(ut);
}
function sn(t) {
  const e2 = t.split(ut), n5 = lt(e2[0]), r3 = lt(e2[1]), o5 = nn(e2[2]), s3 = rt(e2.slice(0, 2).join(ut), xt);
  return { header: n5, payload: r3, signature: o5, data: s3 };
}
function Po(t = he(Ne)) {
  const e2 = Rt.getPublicKey(t);
  return { secretKey: Oe([t, e2]), publicKey: e2 };
}
async function Qo(t, e2, n5, r3, o5 = (0, import_time2.fromMiliseconds)(Date.now())) {
  const s3 = { alg: jt, typ: Zt }, a3 = Qe(r3.publicKey), u3 = o5 + n5, i4 = { iss: a3, sub: t, aud: e2, iat: o5, exp: u3 }, D4 = rn({ header: s3, payload: i4 }), c7 = Rt.sign(D4, r3.secretKey.slice(0, 32));
  return on({ header: s3, payload: i4, signature: c7 });
}

// node_modules/detect-browser/es/index.js
var __spreadArray = function(to4, from21, pack) {
  if (pack || arguments.length === 2)
    for (var i4 = 0, l8 = from21.length, ar3; i4 < l8; i4++) {
      if (ar3 || !(i4 in from21)) {
        if (!ar3)
          ar3 = Array.prototype.slice.call(from21, 0, i4);
        ar3[i4] = from21[i4];
      }
    }
  return to4.concat(ar3 || Array.prototype.slice.call(from21));
};
var BrowserInfo = (
  /** @class */
  function() {
    function BrowserInfo2(name2, version2, os2) {
      this.name = name2;
      this.version = version2;
      this.os = os2;
      this.type = "browser";
    }
    return BrowserInfo2;
  }()
);
var NodeInfo = (
  /** @class */
  function() {
    function NodeInfo2(version2) {
      this.version = version2;
      this.type = "node";
      this.name = "node";
      this.os = process.platform;
    }
    return NodeInfo2;
  }()
);
var SearchBotDeviceInfo = (
  /** @class */
  function() {
    function SearchBotDeviceInfo2(name2, version2, os2, bot) {
      this.name = name2;
      this.version = version2;
      this.os = os2;
      this.bot = bot;
      this.type = "bot-device";
    }
    return SearchBotDeviceInfo2;
  }()
);
var BotInfo = (
  /** @class */
  function() {
    function BotInfo2() {
      this.type = "bot";
      this.bot = true;
      this.name = "bot";
      this.version = null;
      this.os = null;
    }
    return BotInfo2;
  }()
);
var ReactNativeInfo = (
  /** @class */
  function() {
    function ReactNativeInfo2() {
      this.type = "react-native";
      this.name = "react-native";
      this.version = null;
      this.os = null;
    }
    return ReactNativeInfo2;
  }()
);
var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
var SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
var REQUIRED_VERSION_PARTS = 3;
var userAgentRules = [
  ["aol", /AOLShield\/([0-9\._]+)/],
  ["edge", /Edge\/([0-9\._]+)/],
  ["edge-ios", /EdgiOS\/([0-9\._]+)/],
  ["yandexbrowser", /YaBrowser\/([0-9\._]+)/],
  ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/],
  ["samsung", /SamsungBrowser\/([0-9\.]+)/],
  ["silk", /\bSilk\/([0-9._-]+)\b/],
  ["miui", /MiuiBrowser\/([0-9\.]+)$/],
  ["beaker", /BeakerBrowser\/([0-9\.]+)/],
  ["edge-chromium", /EdgA?\/([0-9\.]+)/],
  [
    "chromium-webview",
    /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
  ],
  ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
  ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/],
  ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/],
  ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/],
  ["fxios", /FxiOS\/([0-9\.]+)/],
  ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/],
  ["opera", /Opera\/([0-9\.]+)(?:\s|$)/],
  ["opera", /OPR\/([0-9\.]+)(:?\s|$)/],
  ["pie", /^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/],
  ["pie", /^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/],
  ["netfront", /^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/],
  ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
  ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
  ["ie", /MSIE\s(7\.0)/],
  ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/],
  ["android", /Android\s([0-9\.]+)/],
  ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/],
  ["safari", /Version\/([0-9\._]+).*Safari/],
  ["facebook", /FB[AS]V\/([0-9\.]+)/],
  ["instagram", /Instagram\s([0-9\.]+)/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
  ["curl", /^curl\/([0-9\.]+)$/],
  ["searchbot", SEARCHBOX_UA_REGEX]
];
var operatingSystemRules = [
  ["iOS", /iP(hone|od|ad)/],
  ["Android OS", /Android/],
  ["BlackBerry OS", /BlackBerry|BB10/],
  ["Windows Mobile", /IEMobile/],
  ["Amazon OS", /Kindle/],
  ["Windows 3.11", /Win16/],
  ["Windows 95", /(Windows 95)|(Win95)|(Windows_95)/],
  ["Windows 98", /(Windows 98)|(Win98)/],
  ["Windows 2000", /(Windows NT 5.0)|(Windows 2000)/],
  ["Windows XP", /(Windows NT 5.1)|(Windows XP)/],
  ["Windows Server 2003", /(Windows NT 5.2)/],
  ["Windows Vista", /(Windows NT 6.0)/],
  ["Windows 7", /(Windows NT 6.1)/],
  ["Windows 8", /(Windows NT 6.2)/],
  ["Windows 8.1", /(Windows NT 6.3)/],
  ["Windows 10", /(Windows NT 10.0)/],
  ["Windows ME", /Windows ME/],
  ["Windows CE", /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],
  ["Open BSD", /OpenBSD/],
  ["Sun OS", /SunOS/],
  ["Chrome OS", /CrOS/],
  ["Linux", /(Linux)|(X11)/],
  ["Mac OS", /(Mac_PowerPC)|(Macintosh)/],
  ["QNX", /QNX/],
  ["BeOS", /BeOS/],
  ["OS/2", /OS\/2/]
];
function detect(userAgent) {
  if (!!userAgent) {
    return parseUserAgent(userAgent);
  }
  if (typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative") {
    return new ReactNativeInfo();
  }
  if (typeof navigator !== "undefined") {
    return parseUserAgent(navigator.userAgent);
  }
  return getNodeVersion();
}
function matchUserAgent(ua2) {
  return ua2 !== "" && userAgentRules.reduce(function(matched, _a2) {
    var browser = _a2[0], regex = _a2[1];
    if (matched) {
      return matched;
    }
    var uaMatch = regex.exec(ua2);
    return !!uaMatch && [browser, uaMatch];
  }, false);
}
function parseUserAgent(ua2) {
  var matchedRule = matchUserAgent(ua2);
  if (!matchedRule) {
    return null;
  }
  var name2 = matchedRule[0], match = matchedRule[1];
  if (name2 === "searchbot") {
    return new BotInfo();
  }
  var versionParts = match[1] && match[1].split(".").join("_").split("_").slice(0, 3);
  if (versionParts) {
    if (versionParts.length < REQUIRED_VERSION_PARTS) {
      versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);
    }
  } else {
    versionParts = [];
  }
  var version2 = versionParts.join(".");
  var os2 = detectOS(ua2);
  var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua2);
  if (searchBotMatch && searchBotMatch[1]) {
    return new SearchBotDeviceInfo(name2, version2, os2, searchBotMatch[1]);
  }
  return new BrowserInfo(name2, version2, os2);
}
function detectOS(ua2) {
  for (var ii4 = 0, count = operatingSystemRules.length; ii4 < count; ii4++) {
    var _a2 = operatingSystemRules[ii4], os2 = _a2[0], regex = _a2[1];
    var match = regex.exec(ua2);
    if (match) {
      return os2;
    }
  }
  return null;
}
function getNodeVersion() {
  var isNode2 = typeof process !== "undefined" && process.version;
  return isNode2 ? new NodeInfo(process.version.slice(1)) : null;
}
function createVersionParts(count) {
  var output = [];
  for (var ii4 = 0; ii4 < count; ii4++) {
    output.push("0");
  }
  return output;
}

// node_modules/@walletconnect/utils/dist/index.es.js
var import_time3 = __toESM(require_cjs());
var import_window_getters = __toESM(require_cjs2());
var import_window_metadata = __toESM(require_cjs3());

// node_modules/@walletconnect/utils/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js
function publicKeyToAddress(publicKey) {
  const address = keccak256(`0x${publicKey.substring(4)}`).substring(26);
  return checksumAddress(`0x${address}`);
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverPublicKey.js
async function recoverPublicKey({ hash: hash2, signature }) {
  const hashHex = isHex(hash2) ? hash2 : toHex(hash2);
  const { secp256k1: secp256k14 } = await import("./secp256k1-FIC4PFRJ.js");
  const signature_ = (() => {
    if (typeof signature === "object" && "r" in signature && "s" in signature) {
      const { r: r3, s: s3, v: v6, yParity } = signature;
      const yParityOrV2 = Number(yParity ?? v6);
      const recoveryBit2 = toRecoveryBit(yParityOrV2);
      return new secp256k14.Signature(hexToBigInt(r3), hexToBigInt(s3)).addRecoveryBit(recoveryBit2);
    }
    const signatureHex = isHex(signature) ? signature : toHex(signature);
    if (size(signatureHex) !== 65)
      throw new Error("invalid signature length");
    const yParityOrV = hexToNumber(`0x${signatureHex.slice(130)}`);
    const recoveryBit = toRecoveryBit(yParityOrV);
    return secp256k14.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);
  })();
  const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);
  return `0x${publicKey}`;
}
function toRecoveryBit(yParityOrV) {
  if (yParityOrV === 0 || yParityOrV === 1)
    return yParityOrV;
  if (yParityOrV === 27)
    return 0;
  if (yParityOrV === 28)
    return 1;
  throw new Error("Invalid yParityOrV value");
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverAddress.js
async function recoverAddress({ hash: hash2, signature }) {
  return publicKeyToAddress(await recoverPublicKey({ hash: hash2, signature }));
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/transaction.js
var transactionType = {
  "0x0": "legacy",
  "0x1": "eip2930",
  "0x2": "eip1559",
  "0x3": "eip4844",
  "0x4": "eip7702"
};
function formatTransaction(transaction) {
  const transaction_ = {
    ...transaction,
    blockHash: transaction.blockHash ? transaction.blockHash : null,
    blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
    chainId: transaction.chainId ? hexToNumber(transaction.chainId) : void 0,
    gas: transaction.gas ? BigInt(transaction.gas) : void 0,
    gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
    maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
    maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
    nonce: transaction.nonce ? hexToNumber(transaction.nonce) : void 0,
    to: transaction.to ? transaction.to : null,
    transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
    type: transaction.type ? transactionType[transaction.type] : void 0,
    typeHex: transaction.type ? transaction.type : void 0,
    value: transaction.value ? BigInt(transaction.value) : void 0,
    v: transaction.v ? BigInt(transaction.v) : void 0
  };
  if (transaction.authorizationList)
    transaction_.authorizationList = formatAuthorizationList(transaction.authorizationList);
  transaction_.yParity = (() => {
    if (transaction.yParity)
      return Number(transaction.yParity);
    if (typeof transaction_.v === "bigint") {
      if (transaction_.v === 0n || transaction_.v === 27n)
        return 0;
      if (transaction_.v === 1n || transaction_.v === 28n)
        return 1;
      if (transaction_.v >= 35n)
        return transaction_.v % 2n === 0n ? 1 : 0;
    }
    return void 0;
  })();
  if (transaction_.type === "legacy") {
    delete transaction_.accessList;
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
    delete transaction_.yParity;
  }
  if (transaction_.type === "eip2930") {
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
  }
  if (transaction_.type === "eip1559") {
    delete transaction_.maxFeePerBlobGas;
  }
  return transaction_;
}
var defineTransaction = defineFormatter("transaction", formatTransaction);
function formatAuthorizationList(authorizationList) {
  return authorizationList.map((authorization) => ({
    address: authorization.address,
    chainId: Number(authorization.chainId),
    nonce: Number(authorization.nonce),
    r: authorization.r,
    s: authorization.s,
    yParity: Number(authorization.yParity)
  }));
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/block.js
function formatBlock(block) {
  const transactions = (block.transactions ?? []).map((transaction) => {
    if (typeof transaction === "string")
      return transaction;
    return formatTransaction(transaction);
  });
  return {
    ...block,
    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
    difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
    excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
    hash: block.hash ? block.hash : null,
    logsBloom: block.logsBloom ? block.logsBloom : null,
    nonce: block.nonce ? block.nonce : null,
    number: block.number ? BigInt(block.number) : null,
    size: block.size ? BigInt(block.size) : void 0,
    timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
    transactions,
    totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
  };
}
var defineBlock = defineFormatter("block", formatBlock);

// node_modules/@walletconnect/utils/node_modules/viem/_esm/actions/public/getTransactionCount.js
async function getTransactionCount(client, { address, blockTag = "latest", blockNumber }) {
  const count = await client.request({
    method: "eth_getTransactionCount",
    params: [
      address,
      typeof blockNumber === "bigint" ? numberToHex(blockNumber) : blockTag
    ]
  }, {
    dedupe: Boolean(blockNumber)
  });
  return hexToNumber(count);
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/constants/blob.js
var blobsPerTransaction = 6;
var bytesPerFieldElement = 32;
var fieldElementsPerBlob = 4096;
var bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;
var maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * fieldElementsPerBlob * blobsPerTransaction;

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/log.js
function formatLog(log, { args, eventName } = {}) {
  return {
    ...log,
    blockHash: log.blockHash ? log.blockHash : null,
    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
    logIndex: log.logIndex ? Number(log.logIndex) : null,
    transactionHash: log.transactionHash ? log.transactionHash : null,
    transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
    ...eventName ? { args, eventName } : {}
  };
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/actions/wallet/sendTransaction.js
var supportsWalletNamespace = new LruMap(128);

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/transactionReceipt.js
var receiptStatuses = {
  "0x0": "reverted",
  "0x1": "success"
};
function formatTransactionReceipt(transactionReceipt) {
  const receipt = {
    ...transactionReceipt,
    blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
    contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
    effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
    gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
    logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => formatLog(log)) : null,
    to: transactionReceipt.to ? transactionReceipt.to : null,
    transactionIndex: transactionReceipt.transactionIndex ? hexToNumber(transactionReceipt.transactionIndex) : null,
    status: transactionReceipt.status ? receiptStatuses[transactionReceipt.status] : null,
    type: transactionReceipt.type ? transactionType[transactionReceipt.type] || transactionReceipt.type : null
  };
  if (transactionReceipt.blobGasPrice)
    receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
  if (transactionReceipt.blobGasUsed)
    receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
  return receipt;
}
var defineTransactionReceipt = defineFormatter("transactionReceipt", formatTransactionReceipt);

// node_modules/@walletconnect/utils/node_modules/viem/_esm/actions/wallet/sendCalls.js
var fallbackTransactionErrorMagicIdentifier = numberToHex(0, {
  size: 32
});

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/promise/withDedupe.js
var promiseCache = new LruMap(8192);

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/rpc/id.js
function createIdStore() {
  return {
    current: 0,
    take() {
      return this.current++;
    },
    reset() {
      this.current = 0;
    }
  };
}
var idCache = createIdStore();

// node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/legacy.js
var SHA1_IV = Uint32Array.from([
  1732584193,
  4023233417,
  2562383102,
  271733878,
  3285377520
]);
var SHA1_W = new Uint32Array(80);
var SHA1 = class extends HashMD {
  constructor() {
    super(64, 20, 8, false);
    this.A = SHA1_IV[0] | 0;
    this.B = SHA1_IV[1] | 0;
    this.C = SHA1_IV[2] | 0;
    this.D = SHA1_IV[3] | 0;
    this.E = SHA1_IV[4] | 0;
  }
  get() {
    const { A: A5, B: B4, C: C5, D: D4, E: E6 } = this;
    return [A5, B4, C5, D4, E6];
  }
  set(A5, B4, C5, D4, E6) {
    this.A = A5 | 0;
    this.B = B4 | 0;
    this.C = C5 | 0;
    this.D = D4 | 0;
    this.E = E6 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      SHA1_W[i4] = view.getUint32(offset, false);
    for (let i4 = 16; i4 < 80; i4++)
      SHA1_W[i4] = rotl(SHA1_W[i4 - 3] ^ SHA1_W[i4 - 8] ^ SHA1_W[i4 - 14] ^ SHA1_W[i4 - 16], 1);
    let { A: A5, B: B4, C: C5, D: D4, E: E6 } = this;
    for (let i4 = 0; i4 < 80; i4++) {
      let F3, K7;
      if (i4 < 20) {
        F3 = Chi(B4, C5, D4);
        K7 = 1518500249;
      } else if (i4 < 40) {
        F3 = B4 ^ C5 ^ D4;
        K7 = 1859775393;
      } else if (i4 < 60) {
        F3 = Maj(B4, C5, D4);
        K7 = 2400959708;
      } else {
        F3 = B4 ^ C5 ^ D4;
        K7 = 3395469782;
      }
      const T5 = rotl(A5, 5) + F3 + E6 + K7 + SHA1_W[i4] | 0;
      E6 = D4;
      D4 = C5;
      C5 = rotl(B4, 30);
      B4 = A5;
      A5 = T5;
    }
    A5 = A5 + this.A | 0;
    B4 = B4 + this.B | 0;
    C5 = C5 + this.C | 0;
    D4 = D4 + this.D | 0;
    E6 = E6 + this.E | 0;
    this.set(A5, B4, C5, D4, E6);
  }
  roundClean() {
    clean(SHA1_W);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0);
    clean(this.buffer);
  }
};
var sha1 = createHasher(() => new SHA1());
var p32 = Math.pow(2, 32);
var K3 = Array.from({ length: 64 }, (_3, i4) => Math.floor(p32 * Math.abs(Math.sin(i4 + 1))));
var MD5_IV = SHA1_IV.slice(0, 4);
var MD5_W = new Uint32Array(16);
var MD5 = class extends HashMD {
  constructor() {
    super(64, 16, 8, true);
    this.A = MD5_IV[0] | 0;
    this.B = MD5_IV[1] | 0;
    this.C = MD5_IV[2] | 0;
    this.D = MD5_IV[3] | 0;
  }
  get() {
    const { A: A5, B: B4, C: C5, D: D4 } = this;
    return [A5, B4, C5, D4];
  }
  set(A5, B4, C5, D4) {
    this.A = A5 | 0;
    this.B = B4 | 0;
    this.C = C5 | 0;
    this.D = D4 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      MD5_W[i4] = view.getUint32(offset, true);
    let { A: A5, B: B4, C: C5, D: D4 } = this;
    for (let i4 = 0; i4 < 64; i4++) {
      let F3, g4, s3;
      if (i4 < 16) {
        F3 = Chi(B4, C5, D4);
        g4 = i4;
        s3 = [7, 12, 17, 22];
      } else if (i4 < 32) {
        F3 = Chi(D4, B4, C5);
        g4 = (5 * i4 + 1) % 16;
        s3 = [5, 9, 14, 20];
      } else if (i4 < 48) {
        F3 = B4 ^ C5 ^ D4;
        g4 = (3 * i4 + 5) % 16;
        s3 = [4, 11, 16, 23];
      } else {
        F3 = C5 ^ (B4 | ~D4);
        g4 = 7 * i4 % 16;
        s3 = [6, 10, 15, 21];
      }
      F3 = F3 + A5 + K3[i4] + MD5_W[g4];
      A5 = D4;
      D4 = C5;
      C5 = B4;
      B4 = B4 + rotl(F3, s3[i4 % 4]);
    }
    A5 = A5 + this.A | 0;
    B4 = B4 + this.B | 0;
    C5 = C5 + this.C | 0;
    D4 = D4 + this.D | 0;
    this.set(A5, B4, C5, D4);
  }
  roundClean() {
    clean(MD5_W);
  }
  destroy() {
    this.set(0, 0, 0, 0);
    clean(this.buffer);
  }
};
var md5 = createHasher(() => new MD5());
var Rho160 = Uint8Array.from([
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8
]);
var Id160 = (() => Uint8Array.from(new Array(16).fill(0).map((_3, i4) => i4)))();
var Pi160 = (() => Id160.map((i4) => (9 * i4 + 5) % 16))();
var idxLR = (() => {
  const L5 = [Id160];
  const R4 = [Pi160];
  const res = [L5, R4];
  for (let i4 = 0; i4 < 4; i4++)
    for (let j5 of res)
      j5.push(j5[i4].map((k6) => Rho160[k6]));
  return res;
})();
var idxL = (() => idxLR[0])();
var idxR = (() => idxLR[1])();
var shifts160 = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i4) => Uint8Array.from(i4));
var shiftsL160 = idxL.map((idx, i4) => idx.map((j5) => shifts160[i4][j5]));
var shiftsR160 = idxR.map((idx, i4) => idx.map((j5) => shifts160[i4][j5]));
var Kl160 = Uint32Array.from([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr160 = Uint32Array.from([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function ripemd_f(group, x6, y6, z4) {
  if (group === 0)
    return x6 ^ y6 ^ z4;
  if (group === 1)
    return x6 & y6 | ~x6 & z4;
  if (group === 2)
    return (x6 | ~y6) ^ z4;
  if (group === 3)
    return x6 & z4 | y6 & ~z4;
  return x6 ^ (y6 | ~z4);
}
var BUF_160 = new Uint32Array(16);
var RIPEMD160 = class extends HashMD {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4: h42 } = this;
    return [h0, h1, h22, h32, h42];
  }
  set(h0, h1, h22, h32, h42) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h42 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      BUF_160[i4] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar3 = al, bl = this.h1 | 0, br4 = bl, cl = this.h2 | 0, cr4 = cl, dl = this.h3 | 0, dr4 = dl, el = this.h4 | 0, er3 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl160[group], hbr = Kr160[group];
      const rl = idxL[group], rr4 = idxR[group];
      const sl = shiftsL160[group], sr4 = shiftsR160[group];
      for (let i4 = 0; i4 < 16; i4++) {
        const tl = rotl(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i4]] + hbl, sl[i4]) + el | 0;
        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i4 = 0; i4 < 16; i4++) {
        const tr4 = rotl(ar3 + ripemd_f(rGroup, br4, cr4, dr4) + BUF_160[rr4[i4]] + hbr, sr4[i4]) + er3 | 0;
        ar3 = er3, er3 = dr4, dr4 = rotl(cr4, 10) | 0, cr4 = br4, br4 = tr4;
      }
    }
    this.set(this.h1 + cl + dr4 | 0, this.h2 + dl + er3 | 0, this.h3 + el + ar3 | 0, this.h4 + al + br4 | 0, this.h0 + bl + cr4 | 0);
  }
  roundClean() {
    clean(BUF_160);
  }
  destroy() {
    this.destroyed = true;
    clean(this.buffer);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd160 = createHasher(() => new RIPEMD160());

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/nonceManager.js
function createNonceManager(parameters) {
  const { source } = parameters;
  const deltaMap = /* @__PURE__ */ new Map();
  const nonceMap = new LruMap(8192);
  const promiseMap = /* @__PURE__ */ new Map();
  const getKey = ({ address, chainId }) => `${address}.${chainId}`;
  return {
    async consume({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      const promise = this.get({ address, chainId, client });
      this.increment({ address, chainId });
      const nonce = await promise;
      await source.set({ address, chainId }, nonce);
      nonceMap.set(key, nonce);
      return nonce;
    },
    async increment({ address, chainId }) {
      const key = getKey({ address, chainId });
      const delta = deltaMap.get(key) ?? 0;
      deltaMap.set(key, delta + 1);
    },
    async get({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      let promise = promiseMap.get(key);
      if (!promise) {
        promise = (async () => {
          try {
            const nonce = await source.get({ address, chainId, client });
            const previousNonce = nonceMap.get(key) ?? 0;
            if (previousNonce > 0 && nonce <= previousNonce)
              return previousNonce + 1;
            nonceMap.delete(key);
            return nonce;
          } finally {
            this.reset({ address, chainId });
          }
        })();
        promiseMap.set(key, promise);
      }
      const delta = deltaMap.get(key) ?? 0;
      return delta + await promise;
    },
    reset({ address, chainId }) {
      const key = getKey({ address, chainId });
      deltaMap.delete(key);
      promiseMap.delete(key);
    }
  };
}
function jsonRpc() {
  return {
    async get(parameters) {
      const { address, client } = parameters;
      return getTransactionCount(client, {
        address,
        blockTag: "pending"
      });
    },
    set() {
    }
  };
}
var nonceManager = createNonceManager({
  source: jsonRpc()
});

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Hash.js
function keccak2563(value, options = {}) {
  const { as: as2 = typeof value === "string" ? "Hex" : "Bytes" } = options;
  const bytes = keccak_256(from(value));
  if (as2 === "Bytes")
    return bytes;
  return fromBytes(bytes);
}

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/internal/lru.js
var LruMap3 = class extends Map {
  constructor(size8) {
    super();
    Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxSize = size8;
  }
  get(key) {
    const value = super.get(key);
    if (super.has(key) && value !== void 0) {
      this.delete(key);
      super.set(key, value);
    }
    return value;
  }
  set(key, value) {
    super.set(key, value);
    if (this.maxSize && this.size > this.maxSize) {
      const firstKey = this.keys().next().value;
      if (firstKey)
        this.delete(firstKey);
    }
    return this;
  }
};

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Caches.js
var caches = {
  checksum: new LruMap3(8192)
};
var checksum = caches.checksum;

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Address.js
var addressRegex = /^0x[a-fA-F0-9]{40}$/;
function assert(value, options = {}) {
  const { strict = true } = options;
  if (!addressRegex.test(value))
    throw new InvalidAddressError3({
      address: value,
      cause: new InvalidInputError()
    });
  if (strict) {
    if (value.toLowerCase() === value)
      return;
    if (checksum2(value) !== value)
      throw new InvalidAddressError3({
        address: value,
        cause: new InvalidChecksumError()
      });
  }
}
function checksum2(address) {
  if (checksum.has(address))
    return checksum.get(address);
  assert(address, { strict: false });
  const hexAddress = address.substring(2).toLowerCase();
  const hash2 = keccak2563(fromString(hexAddress), { as: "Bytes" });
  const characters = hexAddress.split("");
  for (let i4 = 0; i4 < 40; i4 += 2) {
    if (hash2[i4 >> 1] >> 4 >= 8 && characters[i4]) {
      characters[i4] = characters[i4].toUpperCase();
    }
    if ((hash2[i4 >> 1] & 15) >= 8 && characters[i4 + 1]) {
      characters[i4 + 1] = characters[i4 + 1].toUpperCase();
    }
  }
  const result = `0x${characters.join("")}`;
  checksum.set(address, result);
  return result;
}
var InvalidAddressError3 = class extends BaseError {
  constructor({ address, cause }) {
    super(`Address "${address}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidAddressError"
    });
  }
};
var InvalidInputError = class extends BaseError {
  constructor() {
    super("Address is not a 20 byte (40 hexadecimal character) value.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidInputError"
    });
  }
};
var InvalidChecksumError = class extends BaseError {
  constructor() {
    super("Address does not match its checksum counterpart.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidChecksumError"
    });
  }
};

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Solidity.js
var arrayRegex2 = /^(.*)\[([0-9]*)\]$/;
var bytesRegex2 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex2 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var maxInt8 = 2n ** (8n - 1n) - 1n;
var maxInt16 = 2n ** (16n - 1n) - 1n;
var maxInt24 = 2n ** (24n - 1n) - 1n;
var maxInt32 = 2n ** (32n - 1n) - 1n;
var maxInt40 = 2n ** (40n - 1n) - 1n;
var maxInt48 = 2n ** (48n - 1n) - 1n;
var maxInt56 = 2n ** (56n - 1n) - 1n;
var maxInt64 = 2n ** (64n - 1n) - 1n;
var maxInt72 = 2n ** (72n - 1n) - 1n;
var maxInt80 = 2n ** (80n - 1n) - 1n;
var maxInt88 = 2n ** (88n - 1n) - 1n;
var maxInt96 = 2n ** (96n - 1n) - 1n;
var maxInt104 = 2n ** (104n - 1n) - 1n;
var maxInt112 = 2n ** (112n - 1n) - 1n;
var maxInt120 = 2n ** (120n - 1n) - 1n;
var maxInt128 = 2n ** (128n - 1n) - 1n;
var maxInt136 = 2n ** (136n - 1n) - 1n;
var maxInt144 = 2n ** (144n - 1n) - 1n;
var maxInt152 = 2n ** (152n - 1n) - 1n;
var maxInt160 = 2n ** (160n - 1n) - 1n;
var maxInt168 = 2n ** (168n - 1n) - 1n;
var maxInt176 = 2n ** (176n - 1n) - 1n;
var maxInt184 = 2n ** (184n - 1n) - 1n;
var maxInt192 = 2n ** (192n - 1n) - 1n;
var maxInt200 = 2n ** (200n - 1n) - 1n;
var maxInt208 = 2n ** (208n - 1n) - 1n;
var maxInt216 = 2n ** (216n - 1n) - 1n;
var maxInt224 = 2n ** (224n - 1n) - 1n;
var maxInt232 = 2n ** (232n - 1n) - 1n;
var maxInt240 = 2n ** (240n - 1n) - 1n;
var maxInt248 = 2n ** (248n - 1n) - 1n;
var maxInt256 = 2n ** (256n - 1n) - 1n;
var minInt8 = -(2n ** (8n - 1n));
var minInt16 = -(2n ** (16n - 1n));
var minInt24 = -(2n ** (24n - 1n));
var minInt32 = -(2n ** (32n - 1n));
var minInt40 = -(2n ** (40n - 1n));
var minInt48 = -(2n ** (48n - 1n));
var minInt56 = -(2n ** (56n - 1n));
var minInt64 = -(2n ** (64n - 1n));
var minInt72 = -(2n ** (72n - 1n));
var minInt80 = -(2n ** (80n - 1n));
var minInt88 = -(2n ** (88n - 1n));
var minInt96 = -(2n ** (96n - 1n));
var minInt104 = -(2n ** (104n - 1n));
var minInt112 = -(2n ** (112n - 1n));
var minInt120 = -(2n ** (120n - 1n));
var minInt128 = -(2n ** (128n - 1n));
var minInt136 = -(2n ** (136n - 1n));
var minInt144 = -(2n ** (144n - 1n));
var minInt152 = -(2n ** (152n - 1n));
var minInt160 = -(2n ** (160n - 1n));
var minInt168 = -(2n ** (168n - 1n));
var minInt176 = -(2n ** (176n - 1n));
var minInt184 = -(2n ** (184n - 1n));
var minInt192 = -(2n ** (192n - 1n));
var minInt200 = -(2n ** (200n - 1n));
var minInt208 = -(2n ** (208n - 1n));
var minInt216 = -(2n ** (216n - 1n));
var minInt224 = -(2n ** (224n - 1n));
var minInt232 = -(2n ** (232n - 1n));
var minInt240 = -(2n ** (240n - 1n));
var minInt248 = -(2n ** (248n - 1n));
var minInt256 = -(2n ** (256n - 1n));
var maxUint8 = 2n ** 8n - 1n;
var maxUint16 = 2n ** 16n - 1n;
var maxUint24 = 2n ** 24n - 1n;
var maxUint32 = 2n ** 32n - 1n;
var maxUint40 = 2n ** 40n - 1n;
var maxUint48 = 2n ** 48n - 1n;
var maxUint56 = 2n ** 56n - 1n;
var maxUint64 = 2n ** 64n - 1n;
var maxUint72 = 2n ** 72n - 1n;
var maxUint80 = 2n ** 80n - 1n;
var maxUint88 = 2n ** 88n - 1n;
var maxUint96 = 2n ** 96n - 1n;
var maxUint104 = 2n ** 104n - 1n;
var maxUint112 = 2n ** 112n - 1n;
var maxUint120 = 2n ** 120n - 1n;
var maxUint128 = 2n ** 128n - 1n;
var maxUint136 = 2n ** 136n - 1n;
var maxUint144 = 2n ** 144n - 1n;
var maxUint152 = 2n ** 152n - 1n;
var maxUint160 = 2n ** 160n - 1n;
var maxUint168 = 2n ** 168n - 1n;
var maxUint176 = 2n ** 176n - 1n;
var maxUint184 = 2n ** 184n - 1n;
var maxUint192 = 2n ** 192n - 1n;
var maxUint200 = 2n ** 200n - 1n;
var maxUint208 = 2n ** 208n - 1n;
var maxUint216 = 2n ** 216n - 1n;
var maxUint224 = 2n ** 224n - 1n;
var maxUint232 = 2n ** 232n - 1n;
var maxUint240 = 2n ** 240n - 1n;
var maxUint248 = 2n ** 248n - 1n;
var maxUint2563 = 2n ** 256n - 1n;

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/internal/cursor.js
var staticCursor = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new RecursiveReadLimitExceededError({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(position) {
    if (position < 0 || position > this.bytes.length - 1)
      throw new PositionOutOfBoundsError2({
        length: this.bytes.length,
        position
      });
  },
  decrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position - offset;
    this.assertPosition(position);
    this.position = position;
  },
  getReadCount(position) {
    return this.positionReadCount.get(position || this.position) || 0;
  },
  incrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position + offset;
    this.assertPosition(position);
    this.position = position;
  },
  inspectByte(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectBytes(length2, position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + length2 - 1);
    return this.bytes.subarray(position, position + length2);
  },
  inspectUint8(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectUint16(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 1);
    return this.dataView.getUint16(position);
  },
  inspectUint24(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 2);
    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
  },
  inspectUint32(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 3);
    return this.dataView.getUint32(position);
  },
  pushByte(byte) {
    this.assertPosition(this.position);
    this.bytes[this.position] = byte;
    this.position++;
  },
  pushBytes(bytes) {
    this.assertPosition(this.position + bytes.length - 1);
    this.bytes.set(bytes, this.position);
    this.position += bytes.length;
  },
  pushUint8(value) {
    this.assertPosition(this.position);
    this.bytes[this.position] = value;
    this.position++;
  },
  pushUint16(value) {
    this.assertPosition(this.position + 1);
    this.dataView.setUint16(this.position, value);
    this.position += 2;
  },
  pushUint24(value) {
    this.assertPosition(this.position + 2);
    this.dataView.setUint16(this.position, value >> 8);
    this.dataView.setUint8(this.position + 2, value & ~4294967040);
    this.position += 3;
  },
  pushUint32(value) {
    this.assertPosition(this.position + 3);
    this.dataView.setUint32(this.position, value);
    this.position += 4;
  },
  readByte() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectByte();
    this.position++;
    return value;
  },
  readBytes(length2, size8) {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectBytes(length2);
    this.position += size8 ?? length2;
    return value;
  },
  readUint8() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint8();
    this.position += 1;
    return value;
  },
  readUint16() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint16();
    this.position += 2;
    return value;
  },
  readUint24() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint24();
    this.position += 3;
    return value;
  },
  readUint32() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint32();
    this.position += 4;
    return value;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(position) {
    const oldPosition = this.position;
    this.assertPosition(position);
    this.position = position;
    return () => this.position = oldPosition;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const count = this.getReadCount();
    this.positionReadCount.set(this.position, count + 1);
    if (count > 0)
      this.recursiveReadCount++;
  }
};
var NegativeOffsetError = class extends BaseError {
  constructor({ offset }) {
    super(`Offset \`${offset}\` cannot be negative.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.NegativeOffsetError"
    });
  }
};
var PositionOutOfBoundsError2 = class extends BaseError {
  constructor({ length: length2, position }) {
    super(`Position \`${position}\` is out of bounds (\`0 < position < ${length2}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.PositionOutOfBoundsError"
    });
  }
};
var RecursiveReadLimitExceededError = class extends BaseError {
  constructor({ count, limit }) {
    super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.RecursiveReadLimitExceededError"
    });
  }
};

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/AbiParameters.js
function encodePacked2(types, values) {
  if (types.length !== values.length)
    throw new LengthMismatchError({
      expectedLength: types.length,
      givenLength: values.length
    });
  const data = [];
  for (let i4 = 0; i4 < types.length; i4++) {
    const type = types[i4];
    const value = values[i4];
    data.push(encodePacked2.encode(type, value));
  }
  return concat(...data);
}
(function(encodePacked5) {
  function encode12(type, value, isArray = false) {
    if (type === "address") {
      const address = value;
      assert(address);
      return padLeft(address.toLowerCase(), isArray ? 32 : 0);
    }
    if (type === "string")
      return fromString2(value);
    if (type === "bytes")
      return value;
    if (type === "bool")
      return padLeft(fromBoolean(value), isArray ? 32 : 1);
    const intMatch = type.match(integerRegex2);
    if (intMatch) {
      const [_type, baseType, bits = "256"] = intMatch;
      const size8 = Number.parseInt(bits) / 8;
      return fromNumber(value, {
        size: isArray ? 32 : size8,
        signed: baseType === "int"
      });
    }
    const bytesMatch = type.match(bytesRegex2);
    if (bytesMatch) {
      const [_type, size8] = bytesMatch;
      if (Number.parseInt(size8) !== (value.length - 2) / 2)
        throw new BytesSizeMismatchError2({
          expectedSize: Number.parseInt(size8),
          value
        });
      return padRight(value, isArray ? 32 : 0);
    }
    const arrayMatch = type.match(arrayRegex2);
    if (arrayMatch && Array.isArray(value)) {
      const [_type, childType] = arrayMatch;
      const data = [];
      for (let i4 = 0; i4 < value.length; i4++) {
        data.push(encode12(childType, value[i4], true));
      }
      if (data.length === 0)
        return "0x";
      return concat(...data);
    }
    throw new InvalidTypeError(type);
  }
  encodePacked5.encode = encode12;
})(encodePacked2 || (encodePacked2 = {}));
var BytesSizeMismatchError2 = class extends BaseError {
  constructor({ expectedSize, value }) {
    super(`Size of bytes "${value}" (bytes${size2(value)}) does not match expected size (bytes${expectedSize}).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.BytesSizeMismatchError"
    });
  }
};
var LengthMismatchError = class extends BaseError {
  constructor({ expectedLength, givenLength }) {
    super([
      "ABI encoding parameters/values length mismatch.",
      `Expected length (parameters): ${expectedLength}`,
      `Given length (values): ${givenLength}`
    ].join("\n"));
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.LengthMismatchError"
    });
  }
};
var InvalidTypeError = class extends BaseError {
  constructor(type) {
    super(`Type \`${type}\` is not a valid ABI Type.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.InvalidTypeError"
    });
  }
};

// node_modules/base-x/src/esm/index.js
function base(ALPHABET2) {
  if (ALPHABET2.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  const BASE_MAP = new Uint8Array(256);
  for (let j5 = 0; j5 < BASE_MAP.length; j5++) {
    BASE_MAP[j5] = 255;
  }
  for (let i4 = 0; i4 < ALPHABET2.length; i4++) {
    const x6 = ALPHABET2.charAt(i4);
    const xc2 = x6.charCodeAt(0);
    if (BASE_MAP[xc2] !== 255) {
      throw new TypeError(x6 + " is ambiguous");
    }
    BASE_MAP[xc2] = i4;
  }
  const BASE = ALPHABET2.length;
  const LEADER = ALPHABET2.charAt(0);
  const FACTOR = Math.log(BASE) / Math.log(256);
  const iFACTOR = Math.log(256) / Math.log(BASE);
  function encode12(source) {
    if (source instanceof Uint8Array) {
    } else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    let zeroes = 0;
    let length2 = 0;
    let pbegin = 0;
    const pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    const size8 = (pend - pbegin) * iFACTOR + 1 >>> 0;
    const b58 = new Uint8Array(size8);
    while (pbegin !== pend) {
      let carry = source[pbegin];
      let i4 = 0;
      for (let it1 = size8 - 1; (carry !== 0 || i4 < length2) && it1 !== -1; it1--, i4++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i4;
      pbegin++;
    }
    let it22 = size8 - length2;
    while (it22 !== size8 && b58[it22] === 0) {
      it22++;
    }
    let str = LEADER.repeat(zeroes);
    for (; it22 < size8; ++it22) {
      str += ALPHABET2.charAt(b58[it22]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    let psz = 0;
    let zeroes = 0;
    let length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    const size8 = (source.length - psz) * FACTOR + 1 >>> 0;
    const b256 = new Uint8Array(size8);
    while (psz < source.length) {
      const charCode = source.charCodeAt(psz);
      if (charCode > 255) {
        return;
      }
      let carry = BASE_MAP[charCode];
      if (carry === 255) {
        return;
      }
      let i4 = 0;
      for (let it32 = size8 - 1; (carry !== 0 || i4 < length2) && it32 !== -1; it32--, i4++) {
        carry += BASE * b256[it32] >>> 0;
        b256[it32] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i4;
      psz++;
    }
    let it4 = size8 - length2;
    while (it4 !== size8 && b256[it4] === 0) {
      it4++;
    }
    const vch = new Uint8Array(zeroes + (size8 - it4));
    let j5 = zeroes;
    while (it4 !== size8) {
      vch[j5++] = b256[it4++];
    }
    return vch;
  }
  function decode9(string2) {
    const buffer2 = decodeUnsafe(string2);
    if (buffer2) {
      return buffer2;
    }
    throw new Error("Non-base" + BASE + " character");
  }
  return {
    encode: encode12,
    decodeUnsafe,
    decode: decode9
  };
}
var esm_default = base;

// node_modules/bs58/src/esm/index.js
var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var esm_default2 = esm_default(ALPHABET);

// node_modules/@msgpack/msgpack/dist.esm/utils/utf8.mjs
function utf8Count(str) {
  const strLength = str.length;
  let byteLength = 0;
  let pos = 0;
  while (pos < strLength) {
    let value = str.charCodeAt(pos++);
    if ((value & 4294967168) === 0) {
      byteLength++;
      continue;
    } else if ((value & 4294965248) === 0) {
      byteLength += 2;
    } else {
      if (value >= 55296 && value <= 56319) {
        if (pos < strLength) {
          const extra = str.charCodeAt(pos);
          if ((extra & 64512) === 56320) {
            ++pos;
            value = ((value & 1023) << 10) + (extra & 1023) + 65536;
          }
        }
      }
      if ((value & 4294901760) === 0) {
        byteLength += 3;
      } else {
        byteLength += 4;
      }
    }
  }
  return byteLength;
}
function utf8EncodeJs(str, output, outputOffset) {
  const strLength = str.length;
  let offset = outputOffset;
  let pos = 0;
  while (pos < strLength) {
    let value = str.charCodeAt(pos++);
    if ((value & 4294967168) === 0) {
      output[offset++] = value;
      continue;
    } else if ((value & 4294965248) === 0) {
      output[offset++] = value >> 6 & 31 | 192;
    } else {
      if (value >= 55296 && value <= 56319) {
        if (pos < strLength) {
          const extra = str.charCodeAt(pos);
          if ((extra & 64512) === 56320) {
            ++pos;
            value = ((value & 1023) << 10) + (extra & 1023) + 65536;
          }
        }
      }
      if ((value & 4294901760) === 0) {
        output[offset++] = value >> 12 & 15 | 224;
        output[offset++] = value >> 6 & 63 | 128;
      } else {
        output[offset++] = value >> 18 & 7 | 240;
        output[offset++] = value >> 12 & 63 | 128;
        output[offset++] = value >> 6 & 63 | 128;
      }
    }
    output[offset++] = value & 63 | 128;
  }
}
var sharedTextEncoder = new TextEncoder();
var TEXT_ENCODER_THRESHOLD = 50;
function utf8EncodeTE(str, output, outputOffset) {
  sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));
}
function utf8Encode(str, output, outputOffset) {
  if (str.length > TEXT_ENCODER_THRESHOLD) {
    utf8EncodeTE(str, output, outputOffset);
  } else {
    utf8EncodeJs(str, output, outputOffset);
  }
}
var CHUNK_SIZE = 4096;
function utf8DecodeJs(bytes, inputOffset, byteLength) {
  let offset = inputOffset;
  const end = offset + byteLength;
  const units = [];
  let result = "";
  while (offset < end) {
    const byte1 = bytes[offset++];
    if ((byte1 & 128) === 0) {
      units.push(byte1);
    } else if ((byte1 & 224) === 192) {
      const byte2 = bytes[offset++] & 63;
      units.push((byte1 & 31) << 6 | byte2);
    } else if ((byte1 & 240) === 224) {
      const byte2 = bytes[offset++] & 63;
      const byte3 = bytes[offset++] & 63;
      units.push((byte1 & 31) << 12 | byte2 << 6 | byte3);
    } else if ((byte1 & 248) === 240) {
      const byte2 = bytes[offset++] & 63;
      const byte3 = bytes[offset++] & 63;
      const byte4 = bytes[offset++] & 63;
      let unit = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
      if (unit > 65535) {
        unit -= 65536;
        units.push(unit >>> 10 & 1023 | 55296);
        unit = 56320 | unit & 1023;
      }
      units.push(unit);
    } else {
      units.push(byte1);
    }
    if (units.length >= CHUNK_SIZE) {
      result += String.fromCharCode(...units);
      units.length = 0;
    }
  }
  if (units.length > 0) {
    result += String.fromCharCode(...units);
  }
  return result;
}
var sharedTextDecoder = new TextDecoder();
var TEXT_DECODER_THRESHOLD = 200;
function utf8DecodeTD(bytes, inputOffset, byteLength) {
  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);
  return sharedTextDecoder.decode(stringBytes);
}
function utf8Decode(bytes, inputOffset, byteLength) {
  if (byteLength > TEXT_DECODER_THRESHOLD) {
    return utf8DecodeTD(bytes, inputOffset, byteLength);
  } else {
    return utf8DecodeJs(bytes, inputOffset, byteLength);
  }
}

// node_modules/@msgpack/msgpack/dist.esm/ExtData.mjs
var ExtData = class {
  constructor(type, data) {
    this.type = type;
    this.data = data;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/DecodeError.mjs
var DecodeError = class _DecodeError extends Error {
  constructor(message) {
    super(message);
    const proto = Object.create(_DecodeError.prototype);
    Object.setPrototypeOf(this, proto);
    Object.defineProperty(this, "name", {
      configurable: true,
      enumerable: false,
      value: _DecodeError.name
    });
  }
};

// node_modules/@msgpack/msgpack/dist.esm/utils/int.mjs
var UINT32_MAX = 4294967295;
function setUint64(view, offset, value) {
  const high = value / 4294967296;
  const low = value;
  view.setUint32(offset, high);
  view.setUint32(offset + 4, low);
}
function setInt64(view, offset, value) {
  const high = Math.floor(value / 4294967296);
  const low = value;
  view.setUint32(offset, high);
  view.setUint32(offset + 4, low);
}
function getInt64(view, offset) {
  const high = view.getInt32(offset);
  const low = view.getUint32(offset + 4);
  return high * 4294967296 + low;
}
function getUint64(view, offset) {
  const high = view.getUint32(offset);
  const low = view.getUint32(offset + 4);
  return high * 4294967296 + low;
}

// node_modules/@msgpack/msgpack/dist.esm/timestamp.mjs
var EXT_TIMESTAMP = -1;
var TIMESTAMP32_MAX_SEC = 4294967296 - 1;
var TIMESTAMP64_MAX_SEC = 17179869184 - 1;
function encodeTimeSpecToTimestamp({ sec, nsec }) {
  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {
    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {
      const rv = new Uint8Array(4);
      const view = new DataView(rv.buffer);
      view.setUint32(0, sec);
      return rv;
    } else {
      const secHigh = sec / 4294967296;
      const secLow = sec & 4294967295;
      const rv = new Uint8Array(8);
      const view = new DataView(rv.buffer);
      view.setUint32(0, nsec << 2 | secHigh & 3);
      view.setUint32(4, secLow);
      return rv;
    }
  } else {
    const rv = new Uint8Array(12);
    const view = new DataView(rv.buffer);
    view.setUint32(0, nsec);
    setInt64(view, 4, sec);
    return rv;
  }
}
function encodeDateToTimeSpec(date) {
  const msec = date.getTime();
  const sec = Math.floor(msec / 1e3);
  const nsec = (msec - sec * 1e3) * 1e6;
  const nsecInSec = Math.floor(nsec / 1e9);
  return {
    sec: sec + nsecInSec,
    nsec: nsec - nsecInSec * 1e9
  };
}
function encodeTimestampExtension(object) {
  if (object instanceof Date) {
    const timeSpec = encodeDateToTimeSpec(object);
    return encodeTimeSpecToTimestamp(timeSpec);
  } else {
    return null;
  }
}
function decodeTimestampToTimeSpec(data) {
  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);
  switch (data.byteLength) {
    case 4: {
      const sec = view.getUint32(0);
      const nsec = 0;
      return { sec, nsec };
    }
    case 8: {
      const nsec30AndSecHigh2 = view.getUint32(0);
      const secLow32 = view.getUint32(4);
      const sec = (nsec30AndSecHigh2 & 3) * 4294967296 + secLow32;
      const nsec = nsec30AndSecHigh2 >>> 2;
      return { sec, nsec };
    }
    case 12: {
      const sec = getInt64(view, 4);
      const nsec = view.getUint32(0);
      return { sec, nsec };
    }
    default:
      throw new DecodeError(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${data.length}`);
  }
}
function decodeTimestampExtension(data) {
  const timeSpec = decodeTimestampToTimeSpec(data);
  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);
}
var timestampExtension = {
  type: EXT_TIMESTAMP,
  encode: encodeTimestampExtension,
  decode: decodeTimestampExtension
};

// node_modules/@msgpack/msgpack/dist.esm/ExtensionCodec.mjs
var ExtensionCodec = class {
  constructor() {
    this.builtInEncoders = [];
    this.builtInDecoders = [];
    this.encoders = [];
    this.decoders = [];
    this.register(timestampExtension);
  }
  register({ type, encode: encode12, decode: decode9 }) {
    if (type >= 0) {
      this.encoders[type] = encode12;
      this.decoders[type] = decode9;
    } else {
      const index2 = -1 - type;
      this.builtInEncoders[index2] = encode12;
      this.builtInDecoders[index2] = decode9;
    }
  }
  tryToEncode(object, context) {
    for (let i4 = 0; i4 < this.builtInEncoders.length; i4++) {
      const encodeExt = this.builtInEncoders[i4];
      if (encodeExt != null) {
        const data = encodeExt(object, context);
        if (data != null) {
          const type = -1 - i4;
          return new ExtData(type, data);
        }
      }
    }
    for (let i4 = 0; i4 < this.encoders.length; i4++) {
      const encodeExt = this.encoders[i4];
      if (encodeExt != null) {
        const data = encodeExt(object, context);
        if (data != null) {
          const type = i4;
          return new ExtData(type, data);
        }
      }
    }
    if (object instanceof ExtData) {
      return object;
    }
    return null;
  }
  decode(data, type, context) {
    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];
    if (decodeExt) {
      return decodeExt(data, type, context);
    } else {
      return new ExtData(type, data);
    }
  }
};
ExtensionCodec.defaultCodec = new ExtensionCodec();

// node_modules/@msgpack/msgpack/dist.esm/utils/typedArrays.mjs
function isArrayBufferLike(buffer2) {
  return buffer2 instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && buffer2 instanceof SharedArrayBuffer;
}
function ensureUint8Array(buffer2) {
  if (buffer2 instanceof Uint8Array) {
    return buffer2;
  } else if (ArrayBuffer.isView(buffer2)) {
    return new Uint8Array(buffer2.buffer, buffer2.byteOffset, buffer2.byteLength);
  } else if (isArrayBufferLike(buffer2)) {
    return new Uint8Array(buffer2);
  } else {
    return Uint8Array.from(buffer2);
  }
}

// node_modules/@msgpack/msgpack/dist.esm/Encoder.mjs
var DEFAULT_MAX_DEPTH = 100;
var DEFAULT_INITIAL_BUFFER_SIZE = 2048;
var Encoder = class _Encoder {
  constructor(options) {
    this.entered = false;
    this.extensionCodec = (options == null ? void 0 : options.extensionCodec) ?? ExtensionCodec.defaultCodec;
    this.context = options == null ? void 0 : options.context;
    this.useBigInt64 = (options == null ? void 0 : options.useBigInt64) ?? false;
    this.maxDepth = (options == null ? void 0 : options.maxDepth) ?? DEFAULT_MAX_DEPTH;
    this.initialBufferSize = (options == null ? void 0 : options.initialBufferSize) ?? DEFAULT_INITIAL_BUFFER_SIZE;
    this.sortKeys = (options == null ? void 0 : options.sortKeys) ?? false;
    this.forceFloat32 = (options == null ? void 0 : options.forceFloat32) ?? false;
    this.ignoreUndefined = (options == null ? void 0 : options.ignoreUndefined) ?? false;
    this.forceIntegerToFloat = (options == null ? void 0 : options.forceIntegerToFloat) ?? false;
    this.pos = 0;
    this.view = new DataView(new ArrayBuffer(this.initialBufferSize));
    this.bytes = new Uint8Array(this.view.buffer);
  }
  clone() {
    return new _Encoder({
      extensionCodec: this.extensionCodec,
      context: this.context,
      useBigInt64: this.useBigInt64,
      maxDepth: this.maxDepth,
      initialBufferSize: this.initialBufferSize,
      sortKeys: this.sortKeys,
      forceFloat32: this.forceFloat32,
      ignoreUndefined: this.ignoreUndefined,
      forceIntegerToFloat: this.forceIntegerToFloat
    });
  }
  reinitializeState() {
    this.pos = 0;
  }
  /**
   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.
   *
   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.
   */
  encodeSharedRef(object) {
    if (this.entered) {
      const instance = this.clone();
      return instance.encodeSharedRef(object);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.doEncode(object, 1);
      return this.bytes.subarray(0, this.pos);
    } finally {
      this.entered = false;
    }
  }
  /**
   * @returns Encodes the object and returns a copy of the encoder's internal buffer.
   */
  encode(object) {
    if (this.entered) {
      const instance = this.clone();
      return instance.encode(object);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.doEncode(object, 1);
      return this.bytes.slice(0, this.pos);
    } finally {
      this.entered = false;
    }
  }
  doEncode(object, depth) {
    if (depth > this.maxDepth) {
      throw new Error(`Too deep objects in depth ${depth}`);
    }
    if (object == null) {
      this.encodeNil();
    } else if (typeof object === "boolean") {
      this.encodeBoolean(object);
    } else if (typeof object === "number") {
      if (!this.forceIntegerToFloat) {
        this.encodeNumber(object);
      } else {
        this.encodeNumberAsFloat(object);
      }
    } else if (typeof object === "string") {
      this.encodeString(object);
    } else if (this.useBigInt64 && typeof object === "bigint") {
      this.encodeBigInt64(object);
    } else {
      this.encodeObject(object, depth);
    }
  }
  ensureBufferSizeToWrite(sizeToWrite) {
    const requiredSize = this.pos + sizeToWrite;
    if (this.view.byteLength < requiredSize) {
      this.resizeBuffer(requiredSize * 2);
    }
  }
  resizeBuffer(newSize) {
    const newBuffer = new ArrayBuffer(newSize);
    const newBytes = new Uint8Array(newBuffer);
    const newView = new DataView(newBuffer);
    newBytes.set(this.bytes);
    this.view = newView;
    this.bytes = newBytes;
  }
  encodeNil() {
    this.writeU8(192);
  }
  encodeBoolean(object) {
    if (object === false) {
      this.writeU8(194);
    } else {
      this.writeU8(195);
    }
  }
  encodeNumber(object) {
    if (!this.forceIntegerToFloat && Number.isSafeInteger(object)) {
      if (object >= 0) {
        if (object < 128) {
          this.writeU8(object);
        } else if (object < 256) {
          this.writeU8(204);
          this.writeU8(object);
        } else if (object < 65536) {
          this.writeU8(205);
          this.writeU16(object);
        } else if (object < 4294967296) {
          this.writeU8(206);
          this.writeU32(object);
        } else if (!this.useBigInt64) {
          this.writeU8(207);
          this.writeU64(object);
        } else {
          this.encodeNumberAsFloat(object);
        }
      } else {
        if (object >= -32) {
          this.writeU8(224 | object + 32);
        } else if (object >= -128) {
          this.writeU8(208);
          this.writeI8(object);
        } else if (object >= -32768) {
          this.writeU8(209);
          this.writeI16(object);
        } else if (object >= -2147483648) {
          this.writeU8(210);
          this.writeI32(object);
        } else if (!this.useBigInt64) {
          this.writeU8(211);
          this.writeI64(object);
        } else {
          this.encodeNumberAsFloat(object);
        }
      }
    } else {
      this.encodeNumberAsFloat(object);
    }
  }
  encodeNumberAsFloat(object) {
    if (this.forceFloat32) {
      this.writeU8(202);
      this.writeF32(object);
    } else {
      this.writeU8(203);
      this.writeF64(object);
    }
  }
  encodeBigInt64(object) {
    if (object >= BigInt(0)) {
      this.writeU8(207);
      this.writeBigUint64(object);
    } else {
      this.writeU8(211);
      this.writeBigInt64(object);
    }
  }
  writeStringHeader(byteLength) {
    if (byteLength < 32) {
      this.writeU8(160 + byteLength);
    } else if (byteLength < 256) {
      this.writeU8(217);
      this.writeU8(byteLength);
    } else if (byteLength < 65536) {
      this.writeU8(218);
      this.writeU16(byteLength);
    } else if (byteLength < 4294967296) {
      this.writeU8(219);
      this.writeU32(byteLength);
    } else {
      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);
    }
  }
  encodeString(object) {
    const maxHeaderSize = 1 + 4;
    const byteLength = utf8Count(object);
    this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);
    this.writeStringHeader(byteLength);
    utf8Encode(object, this.bytes, this.pos);
    this.pos += byteLength;
  }
  encodeObject(object, depth) {
    const ext = this.extensionCodec.tryToEncode(object, this.context);
    if (ext != null) {
      this.encodeExtension(ext);
    } else if (Array.isArray(object)) {
      this.encodeArray(object, depth);
    } else if (ArrayBuffer.isView(object)) {
      this.encodeBinary(object);
    } else if (typeof object === "object") {
      this.encodeMap(object, depth);
    } else {
      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);
    }
  }
  encodeBinary(object) {
    const size8 = object.byteLength;
    if (size8 < 256) {
      this.writeU8(196);
      this.writeU8(size8);
    } else if (size8 < 65536) {
      this.writeU8(197);
      this.writeU16(size8);
    } else if (size8 < 4294967296) {
      this.writeU8(198);
      this.writeU32(size8);
    } else {
      throw new Error(`Too large binary: ${size8}`);
    }
    const bytes = ensureUint8Array(object);
    this.writeU8a(bytes);
  }
  encodeArray(object, depth) {
    const size8 = object.length;
    if (size8 < 16) {
      this.writeU8(144 + size8);
    } else if (size8 < 65536) {
      this.writeU8(220);
      this.writeU16(size8);
    } else if (size8 < 4294967296) {
      this.writeU8(221);
      this.writeU32(size8);
    } else {
      throw new Error(`Too large array: ${size8}`);
    }
    for (const item of object) {
      this.doEncode(item, depth + 1);
    }
  }
  countWithoutUndefined(object, keys2) {
    let count = 0;
    for (const key of keys2) {
      if (object[key] !== void 0) {
        count++;
      }
    }
    return count;
  }
  encodeMap(object, depth) {
    const keys2 = Object.keys(object);
    if (this.sortKeys) {
      keys2.sort();
    }
    const size8 = this.ignoreUndefined ? this.countWithoutUndefined(object, keys2) : keys2.length;
    if (size8 < 16) {
      this.writeU8(128 + size8);
    } else if (size8 < 65536) {
      this.writeU8(222);
      this.writeU16(size8);
    } else if (size8 < 4294967296) {
      this.writeU8(223);
      this.writeU32(size8);
    } else {
      throw new Error(`Too large map object: ${size8}`);
    }
    for (const key of keys2) {
      const value = object[key];
      if (!(this.ignoreUndefined && value === void 0)) {
        this.encodeString(key);
        this.doEncode(value, depth + 1);
      }
    }
  }
  encodeExtension(ext) {
    if (typeof ext.data === "function") {
      const data = ext.data(this.pos + 6);
      const size9 = data.length;
      if (size9 >= 4294967296) {
        throw new Error(`Too large extension object: ${size9}`);
      }
      this.writeU8(201);
      this.writeU32(size9);
      this.writeI8(ext.type);
      this.writeU8a(data);
      return;
    }
    const size8 = ext.data.length;
    if (size8 === 1) {
      this.writeU8(212);
    } else if (size8 === 2) {
      this.writeU8(213);
    } else if (size8 === 4) {
      this.writeU8(214);
    } else if (size8 === 8) {
      this.writeU8(215);
    } else if (size8 === 16) {
      this.writeU8(216);
    } else if (size8 < 256) {
      this.writeU8(199);
      this.writeU8(size8);
    } else if (size8 < 65536) {
      this.writeU8(200);
      this.writeU16(size8);
    } else if (size8 < 4294967296) {
      this.writeU8(201);
      this.writeU32(size8);
    } else {
      throw new Error(`Too large extension object: ${size8}`);
    }
    this.writeI8(ext.type);
    this.writeU8a(ext.data);
  }
  writeU8(value) {
    this.ensureBufferSizeToWrite(1);
    this.view.setUint8(this.pos, value);
    this.pos++;
  }
  writeU8a(values) {
    const size8 = values.length;
    this.ensureBufferSizeToWrite(size8);
    this.bytes.set(values, this.pos);
    this.pos += size8;
  }
  writeI8(value) {
    this.ensureBufferSizeToWrite(1);
    this.view.setInt8(this.pos, value);
    this.pos++;
  }
  writeU16(value) {
    this.ensureBufferSizeToWrite(2);
    this.view.setUint16(this.pos, value);
    this.pos += 2;
  }
  writeI16(value) {
    this.ensureBufferSizeToWrite(2);
    this.view.setInt16(this.pos, value);
    this.pos += 2;
  }
  writeU32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setUint32(this.pos, value);
    this.pos += 4;
  }
  writeI32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setInt32(this.pos, value);
    this.pos += 4;
  }
  writeF32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setFloat32(this.pos, value);
    this.pos += 4;
  }
  writeF64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setFloat64(this.pos, value);
    this.pos += 8;
  }
  writeU64(value) {
    this.ensureBufferSizeToWrite(8);
    setUint64(this.view, this.pos, value);
    this.pos += 8;
  }
  writeI64(value) {
    this.ensureBufferSizeToWrite(8);
    setInt64(this.view, this.pos, value);
    this.pos += 8;
  }
  writeBigUint64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setBigUint64(this.pos, value);
    this.pos += 8;
  }
  writeBigInt64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setBigInt64(this.pos, value);
    this.pos += 8;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/encode.mjs
function encode4(value, options) {
  const encoder = new Encoder(options);
  return encoder.encodeSharedRef(value);
}

// node_modules/@msgpack/msgpack/dist.esm/utils/prettyByte.mjs
function prettyByte(byte) {
  return `${byte < 0 ? "-" : ""}0x${Math.abs(byte).toString(16).padStart(2, "0")}`;
}

// node_modules/@msgpack/msgpack/dist.esm/CachedKeyDecoder.mjs
var DEFAULT_MAX_KEY_LENGTH = 16;
var DEFAULT_MAX_LENGTH_PER_KEY = 16;
var CachedKeyDecoder = class {
  constructor(maxKeyLength = DEFAULT_MAX_KEY_LENGTH, maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY) {
    this.hit = 0;
    this.miss = 0;
    this.maxKeyLength = maxKeyLength;
    this.maxLengthPerKey = maxLengthPerKey;
    this.caches = [];
    for (let i4 = 0; i4 < this.maxKeyLength; i4++) {
      this.caches.push([]);
    }
  }
  canBeCached(byteLength) {
    return byteLength > 0 && byteLength <= this.maxKeyLength;
  }
  find(bytes, inputOffset, byteLength) {
    const records = this.caches[byteLength - 1];
    FIND_CHUNK:
      for (const record of records) {
        const recordBytes = record.bytes;
        for (let j5 = 0; j5 < byteLength; j5++) {
          if (recordBytes[j5] !== bytes[inputOffset + j5]) {
            continue FIND_CHUNK;
          }
        }
        return record.str;
      }
    return null;
  }
  store(bytes, value) {
    const records = this.caches[bytes.length - 1];
    const record = { bytes, str: value };
    if (records.length >= this.maxLengthPerKey) {
      records[Math.random() * records.length | 0] = record;
    } else {
      records.push(record);
    }
  }
  decode(bytes, inputOffset, byteLength) {
    const cachedValue = this.find(bytes, inputOffset, byteLength);
    if (cachedValue != null) {
      this.hit++;
      return cachedValue;
    }
    this.miss++;
    const str = utf8DecodeJs(bytes, inputOffset, byteLength);
    const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);
    this.store(slicedCopyOfBytes, str);
    return str;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/Decoder.mjs
var STATE_ARRAY = "array";
var STATE_MAP_KEY = "map_key";
var STATE_MAP_VALUE = "map_value";
var mapKeyConverter = (key) => {
  if (typeof key === "string" || typeof key === "number") {
    return key;
  }
  throw new DecodeError("The type of key must be string or number but " + typeof key);
};
var StackPool = class {
  constructor() {
    this.stack = [];
    this.stackHeadPosition = -1;
  }
  get length() {
    return this.stackHeadPosition + 1;
  }
  top() {
    return this.stack[this.stackHeadPosition];
  }
  pushArrayState(size8) {
    const state25 = this.getUninitializedStateFromPool();
    state25.type = STATE_ARRAY;
    state25.position = 0;
    state25.size = size8;
    state25.array = new Array(size8);
  }
  pushMapState(size8) {
    const state25 = this.getUninitializedStateFromPool();
    state25.type = STATE_MAP_KEY;
    state25.readCount = 0;
    state25.size = size8;
    state25.map = {};
  }
  getUninitializedStateFromPool() {
    this.stackHeadPosition++;
    if (this.stackHeadPosition === this.stack.length) {
      const partialState = {
        type: void 0,
        size: 0,
        array: void 0,
        position: 0,
        readCount: 0,
        map: void 0,
        key: null
      };
      this.stack.push(partialState);
    }
    return this.stack[this.stackHeadPosition];
  }
  release(state25) {
    const topStackState = this.stack[this.stackHeadPosition];
    if (topStackState !== state25) {
      throw new Error("Invalid stack state. Released state is not on top of the stack.");
    }
    if (state25.type === STATE_ARRAY) {
      const partialState = state25;
      partialState.size = 0;
      partialState.array = void 0;
      partialState.position = 0;
      partialState.type = void 0;
    }
    if (state25.type === STATE_MAP_KEY || state25.type === STATE_MAP_VALUE) {
      const partialState = state25;
      partialState.size = 0;
      partialState.map = void 0;
      partialState.readCount = 0;
      partialState.type = void 0;
    }
    this.stackHeadPosition--;
  }
  reset() {
    this.stack.length = 0;
    this.stackHeadPosition = -1;
  }
};
var HEAD_BYTE_REQUIRED = -1;
var EMPTY_VIEW = new DataView(new ArrayBuffer(0));
var EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);
try {
  EMPTY_VIEW.getInt8(0);
} catch (e2) {
  if (!(e2 instanceof RangeError)) {
    throw new Error("This module is not supported in the current JavaScript engine because DataView does not throw RangeError on out-of-bounds access");
  }
}
var MORE_DATA = new RangeError("Insufficient data");
var sharedCachedKeyDecoder = new CachedKeyDecoder();
var Decoder = class _Decoder {
  constructor(options) {
    this.totalPos = 0;
    this.pos = 0;
    this.view = EMPTY_VIEW;
    this.bytes = EMPTY_BYTES;
    this.headByte = HEAD_BYTE_REQUIRED;
    this.stack = new StackPool();
    this.entered = false;
    this.extensionCodec = (options == null ? void 0 : options.extensionCodec) ?? ExtensionCodec.defaultCodec;
    this.context = options == null ? void 0 : options.context;
    this.useBigInt64 = (options == null ? void 0 : options.useBigInt64) ?? false;
    this.rawStrings = (options == null ? void 0 : options.rawStrings) ?? false;
    this.maxStrLength = (options == null ? void 0 : options.maxStrLength) ?? UINT32_MAX;
    this.maxBinLength = (options == null ? void 0 : options.maxBinLength) ?? UINT32_MAX;
    this.maxArrayLength = (options == null ? void 0 : options.maxArrayLength) ?? UINT32_MAX;
    this.maxMapLength = (options == null ? void 0 : options.maxMapLength) ?? UINT32_MAX;
    this.maxExtLength = (options == null ? void 0 : options.maxExtLength) ?? UINT32_MAX;
    this.keyDecoder = (options == null ? void 0 : options.keyDecoder) !== void 0 ? options.keyDecoder : sharedCachedKeyDecoder;
    this.mapKeyConverter = (options == null ? void 0 : options.mapKeyConverter) ?? mapKeyConverter;
  }
  clone() {
    return new _Decoder({
      extensionCodec: this.extensionCodec,
      context: this.context,
      useBigInt64: this.useBigInt64,
      rawStrings: this.rawStrings,
      maxStrLength: this.maxStrLength,
      maxBinLength: this.maxBinLength,
      maxArrayLength: this.maxArrayLength,
      maxMapLength: this.maxMapLength,
      maxExtLength: this.maxExtLength,
      keyDecoder: this.keyDecoder
    });
  }
  reinitializeState() {
    this.totalPos = 0;
    this.headByte = HEAD_BYTE_REQUIRED;
    this.stack.reset();
  }
  setBuffer(buffer2) {
    const bytes = ensureUint8Array(buffer2);
    this.bytes = bytes;
    this.view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    this.pos = 0;
  }
  appendBuffer(buffer2) {
    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {
      this.setBuffer(buffer2);
    } else {
      const remainingData = this.bytes.subarray(this.pos);
      const newData = ensureUint8Array(buffer2);
      const newBuffer = new Uint8Array(remainingData.length + newData.length);
      newBuffer.set(remainingData);
      newBuffer.set(newData, remainingData.length);
      this.setBuffer(newBuffer);
    }
  }
  hasRemaining(size8) {
    return this.view.byteLength - this.pos >= size8;
  }
  createExtraByteError(posToShow) {
    const { view, pos } = this;
    return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);
  }
  /**
   * @throws {@link DecodeError}
   * @throws {@link RangeError}
   */
  decode(buffer2) {
    if (this.entered) {
      const instance = this.clone();
      return instance.decode(buffer2);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.setBuffer(buffer2);
      const object = this.doDecodeSync();
      if (this.hasRemaining(1)) {
        throw this.createExtraByteError(this.pos);
      }
      return object;
    } finally {
      this.entered = false;
    }
  }
  *decodeMulti(buffer2) {
    if (this.entered) {
      const instance = this.clone();
      yield* instance.decodeMulti(buffer2);
      return;
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.setBuffer(buffer2);
      while (this.hasRemaining(1)) {
        yield this.doDecodeSync();
      }
    } finally {
      this.entered = false;
    }
  }
  async decodeAsync(stream) {
    if (this.entered) {
      const instance = this.clone();
      return instance.decodeAsync(stream);
    }
    try {
      this.entered = true;
      let decoded = false;
      let object;
      for await (const buffer2 of stream) {
        if (decoded) {
          this.entered = false;
          throw this.createExtraByteError(this.totalPos);
        }
        this.appendBuffer(buffer2);
        try {
          object = this.doDecodeSync();
          decoded = true;
        } catch (e2) {
          if (!(e2 instanceof RangeError)) {
            throw e2;
          }
        }
        this.totalPos += this.pos;
      }
      if (decoded) {
        if (this.hasRemaining(1)) {
          throw this.createExtraByteError(this.totalPos);
        }
        return object;
      }
      const { headByte, pos, totalPos } = this;
      throw new RangeError(`Insufficient data in parsing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`);
    } finally {
      this.entered = false;
    }
  }
  decodeArrayStream(stream) {
    return this.decodeMultiAsync(stream, true);
  }
  decodeStream(stream) {
    return this.decodeMultiAsync(stream, false);
  }
  async *decodeMultiAsync(stream, isArray) {
    if (this.entered) {
      const instance = this.clone();
      yield* instance.decodeMultiAsync(stream, isArray);
      return;
    }
    try {
      this.entered = true;
      let isArrayHeaderRequired = isArray;
      let arrayItemsLeft = -1;
      for await (const buffer2 of stream) {
        if (isArray && arrayItemsLeft === 0) {
          throw this.createExtraByteError(this.totalPos);
        }
        this.appendBuffer(buffer2);
        if (isArrayHeaderRequired) {
          arrayItemsLeft = this.readArraySize();
          isArrayHeaderRequired = false;
          this.complete();
        }
        try {
          while (true) {
            yield this.doDecodeSync();
            if (--arrayItemsLeft === 0) {
              break;
            }
          }
        } catch (e2) {
          if (!(e2 instanceof RangeError)) {
            throw e2;
          }
        }
        this.totalPos += this.pos;
      }
    } finally {
      this.entered = false;
    }
  }
  doDecodeSync() {
    DECODE:
      while (true) {
        const headByte = this.readHeadByte();
        let object;
        if (headByte >= 224) {
          object = headByte - 256;
        } else if (headByte < 192) {
          if (headByte < 128) {
            object = headByte;
          } else if (headByte < 144) {
            const size8 = headByte - 128;
            if (size8 !== 0) {
              this.pushMapState(size8);
              this.complete();
              continue DECODE;
            } else {
              object = {};
            }
          } else if (headByte < 160) {
            const size8 = headByte - 144;
            if (size8 !== 0) {
              this.pushArrayState(size8);
              this.complete();
              continue DECODE;
            } else {
              object = [];
            }
          } else {
            const byteLength = headByte - 160;
            object = this.decodeString(byteLength, 0);
          }
        } else if (headByte === 192) {
          object = null;
        } else if (headByte === 194) {
          object = false;
        } else if (headByte === 195) {
          object = true;
        } else if (headByte === 202) {
          object = this.readF32();
        } else if (headByte === 203) {
          object = this.readF64();
        } else if (headByte === 204) {
          object = this.readU8();
        } else if (headByte === 205) {
          object = this.readU16();
        } else if (headByte === 206) {
          object = this.readU32();
        } else if (headByte === 207) {
          if (this.useBigInt64) {
            object = this.readU64AsBigInt();
          } else {
            object = this.readU64();
          }
        } else if (headByte === 208) {
          object = this.readI8();
        } else if (headByte === 209) {
          object = this.readI16();
        } else if (headByte === 210) {
          object = this.readI32();
        } else if (headByte === 211) {
          if (this.useBigInt64) {
            object = this.readI64AsBigInt();
          } else {
            object = this.readI64();
          }
        } else if (headByte === 217) {
          const byteLength = this.lookU8();
          object = this.decodeString(byteLength, 1);
        } else if (headByte === 218) {
          const byteLength = this.lookU16();
          object = this.decodeString(byteLength, 2);
        } else if (headByte === 219) {
          const byteLength = this.lookU32();
          object = this.decodeString(byteLength, 4);
        } else if (headByte === 220) {
          const size8 = this.readU16();
          if (size8 !== 0) {
            this.pushArrayState(size8);
            this.complete();
            continue DECODE;
          } else {
            object = [];
          }
        } else if (headByte === 221) {
          const size8 = this.readU32();
          if (size8 !== 0) {
            this.pushArrayState(size8);
            this.complete();
            continue DECODE;
          } else {
            object = [];
          }
        } else if (headByte === 222) {
          const size8 = this.readU16();
          if (size8 !== 0) {
            this.pushMapState(size8);
            this.complete();
            continue DECODE;
          } else {
            object = {};
          }
        } else if (headByte === 223) {
          const size8 = this.readU32();
          if (size8 !== 0) {
            this.pushMapState(size8);
            this.complete();
            continue DECODE;
          } else {
            object = {};
          }
        } else if (headByte === 196) {
          const size8 = this.lookU8();
          object = this.decodeBinary(size8, 1);
        } else if (headByte === 197) {
          const size8 = this.lookU16();
          object = this.decodeBinary(size8, 2);
        } else if (headByte === 198) {
          const size8 = this.lookU32();
          object = this.decodeBinary(size8, 4);
        } else if (headByte === 212) {
          object = this.decodeExtension(1, 0);
        } else if (headByte === 213) {
          object = this.decodeExtension(2, 0);
        } else if (headByte === 214) {
          object = this.decodeExtension(4, 0);
        } else if (headByte === 215) {
          object = this.decodeExtension(8, 0);
        } else if (headByte === 216) {
          object = this.decodeExtension(16, 0);
        } else if (headByte === 199) {
          const size8 = this.lookU8();
          object = this.decodeExtension(size8, 1);
        } else if (headByte === 200) {
          const size8 = this.lookU16();
          object = this.decodeExtension(size8, 2);
        } else if (headByte === 201) {
          const size8 = this.lookU32();
          object = this.decodeExtension(size8, 4);
        } else {
          throw new DecodeError(`Unrecognized type byte: ${prettyByte(headByte)}`);
        }
        this.complete();
        const stack = this.stack;
        while (stack.length > 0) {
          const state25 = stack.top();
          if (state25.type === STATE_ARRAY) {
            state25.array[state25.position] = object;
            state25.position++;
            if (state25.position === state25.size) {
              object = state25.array;
              stack.release(state25);
            } else {
              continue DECODE;
            }
          } else if (state25.type === STATE_MAP_KEY) {
            if (object === "__proto__") {
              throw new DecodeError("The key __proto__ is not allowed");
            }
            state25.key = this.mapKeyConverter(object);
            state25.type = STATE_MAP_VALUE;
            continue DECODE;
          } else {
            state25.map[state25.key] = object;
            state25.readCount++;
            if (state25.readCount === state25.size) {
              object = state25.map;
              stack.release(state25);
            } else {
              state25.key = null;
              state25.type = STATE_MAP_KEY;
              continue DECODE;
            }
          }
        }
        return object;
      }
  }
  readHeadByte() {
    if (this.headByte === HEAD_BYTE_REQUIRED) {
      this.headByte = this.readU8();
    }
    return this.headByte;
  }
  complete() {
    this.headByte = HEAD_BYTE_REQUIRED;
  }
  readArraySize() {
    const headByte = this.readHeadByte();
    switch (headByte) {
      case 220:
        return this.readU16();
      case 221:
        return this.readU32();
      default: {
        if (headByte < 160) {
          return headByte - 144;
        } else {
          throw new DecodeError(`Unrecognized array type byte: ${prettyByte(headByte)}`);
        }
      }
    }
  }
  pushMapState(size8) {
    if (size8 > this.maxMapLength) {
      throw new DecodeError(`Max length exceeded: map length (${size8}) > maxMapLengthLength (${this.maxMapLength})`);
    }
    this.stack.pushMapState(size8);
  }
  pushArrayState(size8) {
    if (size8 > this.maxArrayLength) {
      throw new DecodeError(`Max length exceeded: array length (${size8}) > maxArrayLength (${this.maxArrayLength})`);
    }
    this.stack.pushArrayState(size8);
  }
  decodeString(byteLength, headerOffset) {
    if (!this.rawStrings || this.stateIsMapKey()) {
      return this.decodeUtf8String(byteLength, headerOffset);
    }
    return this.decodeBinary(byteLength, headerOffset);
  }
  /**
   * @throws {@link RangeError}
   */
  decodeUtf8String(byteLength, headerOffset) {
    var _a2;
    if (byteLength > this.maxStrLength) {
      throw new DecodeError(`Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`);
    }
    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {
      throw MORE_DATA;
    }
    const offset = this.pos + headerOffset;
    let object;
    if (this.stateIsMapKey() && ((_a2 = this.keyDecoder) == null ? void 0 : _a2.canBeCached(byteLength))) {
      object = this.keyDecoder.decode(this.bytes, offset, byteLength);
    } else {
      object = utf8Decode(this.bytes, offset, byteLength);
    }
    this.pos += headerOffset + byteLength;
    return object;
  }
  stateIsMapKey() {
    if (this.stack.length > 0) {
      const state25 = this.stack.top();
      return state25.type === STATE_MAP_KEY;
    }
    return false;
  }
  /**
   * @throws {@link RangeError}
   */
  decodeBinary(byteLength, headOffset) {
    if (byteLength > this.maxBinLength) {
      throw new DecodeError(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);
    }
    if (!this.hasRemaining(byteLength + headOffset)) {
      throw MORE_DATA;
    }
    const offset = this.pos + headOffset;
    const object = this.bytes.subarray(offset, offset + byteLength);
    this.pos += headOffset + byteLength;
    return object;
  }
  decodeExtension(size8, headOffset) {
    if (size8 > this.maxExtLength) {
      throw new DecodeError(`Max length exceeded: ext length (${size8}) > maxExtLength (${this.maxExtLength})`);
    }
    const extType = this.view.getInt8(this.pos + headOffset);
    const data = this.decodeBinary(
      size8,
      headOffset + 1
      /* extType */
    );
    return this.extensionCodec.decode(data, extType, this.context);
  }
  lookU8() {
    return this.view.getUint8(this.pos);
  }
  lookU16() {
    return this.view.getUint16(this.pos);
  }
  lookU32() {
    return this.view.getUint32(this.pos);
  }
  readU8() {
    const value = this.view.getUint8(this.pos);
    this.pos++;
    return value;
  }
  readI8() {
    const value = this.view.getInt8(this.pos);
    this.pos++;
    return value;
  }
  readU16() {
    const value = this.view.getUint16(this.pos);
    this.pos += 2;
    return value;
  }
  readI16() {
    const value = this.view.getInt16(this.pos);
    this.pos += 2;
    return value;
  }
  readU32() {
    const value = this.view.getUint32(this.pos);
    this.pos += 4;
    return value;
  }
  readI32() {
    const value = this.view.getInt32(this.pos);
    this.pos += 4;
    return value;
  }
  readU64() {
    const value = getUint64(this.view, this.pos);
    this.pos += 8;
    return value;
  }
  readI64() {
    const value = getInt64(this.view, this.pos);
    this.pos += 8;
    return value;
  }
  readU64AsBigInt() {
    const value = this.view.getBigUint64(this.pos);
    this.pos += 8;
    return value;
  }
  readI64AsBigInt() {
    const value = this.view.getBigInt64(this.pos);
    this.pos += 8;
    return value;
  }
  readF32() {
    const value = this.view.getFloat32(this.pos);
    this.pos += 4;
    return value;
  }
  readF64() {
    const value = this.view.getFloat64(this.pos);
    this.pos += 8;
    return value;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/decode.mjs
function decode2(buffer2, options) {
  const decoder = new Decoder(options);
  return decoder.decode(buffer2);
}

// node_modules/uint8arrays/esm/src/util/as-uint8array.js
function asUint8Array(buf) {
  if (globalThis.Buffer != null) {
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }
  return buf;
}

// node_modules/uint8arrays/esm/src/alloc.js
function allocUnsafe(size8 = 0) {
  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
    return asUint8Array(globalThis.Buffer.allocUnsafe(size8));
  }
  return new Uint8Array(size8);
}

// node_modules/uint8arrays/esm/src/concat.js
function concat4(arrays, length2) {
  if (!length2) {
    length2 = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = allocUnsafe(length2);
  let offset = 0;
  for (const arr of arrays) {
    output.set(arr, offset);
    offset += arr.length;
  }
  return asUint8Array(output);
}

// node_modules/multiformats/esm/src/bases/identity.js
var identity_exports = {};
__export(identity_exports, {
  identity: () => identity
});

// node_modules/multiformats/esm/vendor/base-x.js
function base2(ALPHABET2, name2) {
  if (ALPHABET2.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  var BASE_MAP = new Uint8Array(256);
  for (var j5 = 0; j5 < BASE_MAP.length; j5++) {
    BASE_MAP[j5] = 255;
  }
  for (var i4 = 0; i4 < ALPHABET2.length; i4++) {
    var x6 = ALPHABET2.charAt(i4);
    var xc2 = x6.charCodeAt(0);
    if (BASE_MAP[xc2] !== 255) {
      throw new TypeError(x6 + " is ambiguous");
    }
    BASE_MAP[xc2] = i4;
  }
  var BASE = ALPHABET2.length;
  var LEADER = ALPHABET2.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256);
  var iFACTOR = Math.log(256) / Math.log(BASE);
  function encode12(source) {
    if (source instanceof Uint8Array)
      ;
    else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    var zeroes = 0;
    var length2 = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    var size8 = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size8);
    while (pbegin !== pend) {
      var carry = source[pbegin];
      var i5 = 0;
      for (var it1 = size8 - 1; (carry !== 0 || i5 < length2) && it1 !== -1; it1--, i5++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i5;
      pbegin++;
    }
    var it22 = size8 - length2;
    while (it22 !== size8 && b58[it22] === 0) {
      it22++;
    }
    var str = LEADER.repeat(zeroes);
    for (; it22 < size8; ++it22) {
      str += ALPHABET2.charAt(b58[it22]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    var psz = 0;
    if (source[psz] === " ") {
      return;
    }
    var zeroes = 0;
    var length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    var size8 = (source.length - psz) * FACTOR + 1 >>> 0;
    var b256 = new Uint8Array(size8);
    while (source[psz]) {
      var carry = BASE_MAP[source.charCodeAt(psz)];
      if (carry === 255) {
        return;
      }
      var i5 = 0;
      for (var it32 = size8 - 1; (carry !== 0 || i5 < length2) && it32 !== -1; it32--, i5++) {
        carry += BASE * b256[it32] >>> 0;
        b256[it32] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i5;
      psz++;
    }
    if (source[psz] === " ") {
      return;
    }
    var it4 = size8 - length2;
    while (it4 !== size8 && b256[it4] === 0) {
      it4++;
    }
    var vch = new Uint8Array(zeroes + (size8 - it4));
    var j6 = zeroes;
    while (it4 !== size8) {
      vch[j6++] = b256[it4++];
    }
    return vch;
  }
  function decode9(string2) {
    var buffer2 = decodeUnsafe(string2);
    if (buffer2) {
      return buffer2;
    }
    throw new Error(`Non-${name2} character`);
  }
  return {
    encode: encode12,
    decodeUnsafe,
    decode: decode9
  };
}
var src = base2;
var _brrp__multiformats_scope_baseX = src;
var base_x_default = _brrp__multiformats_scope_baseX;

// node_modules/multiformats/esm/src/bytes.js
var empty = new Uint8Array(0);
var equals = (aa2, bb) => {
  if (aa2 === bb)
    return true;
  if (aa2.byteLength !== bb.byteLength) {
    return false;
  }
  for (let ii4 = 0; ii4 < aa2.byteLength; ii4++) {
    if (aa2[ii4] !== bb[ii4]) {
      return false;
    }
  }
  return true;
};
var coerce = (o5) => {
  if (o5 instanceof Uint8Array && o5.constructor.name === "Uint8Array")
    return o5;
  if (o5 instanceof ArrayBuffer)
    return new Uint8Array(o5);
  if (ArrayBuffer.isView(o5)) {
    return new Uint8Array(o5.buffer, o5.byteOffset, o5.byteLength);
  }
  throw new Error("Unknown type, must be binary type");
};
var fromString5 = (str) => new TextEncoder().encode(str);
var toString3 = (b5) => new TextDecoder().decode(b5);

// node_modules/multiformats/esm/src/bases/base.js
var Encoder2 = class {
  constructor(name2, prefix, baseEncode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
  }
  encode(bytes) {
    if (bytes instanceof Uint8Array) {
      return `${this.prefix}${this.baseEncode(bytes)}`;
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};
var Decoder2 = class {
  constructor(name2, prefix, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    if (prefix.codePointAt(0) === void 0) {
      throw new Error("Invalid prefix character");
    }
    this.prefixCodePoint = prefix.codePointAt(0);
    this.baseDecode = baseDecode;
  }
  decode(text) {
    if (typeof text === "string") {
      if (text.codePointAt(0) !== this.prefixCodePoint) {
        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      }
      return this.baseDecode(text.slice(this.prefix.length));
    } else {
      throw Error("Can only multibase decode strings");
    }
  }
  or(decoder) {
    return or2(this, decoder);
  }
};
var ComposedDecoder = class {
  constructor(decoders) {
    this.decoders = decoders;
  }
  or(decoder) {
    return or2(this, decoder);
  }
  decode(input) {
    const prefix = input[0];
    const decoder = this.decoders[prefix];
    if (decoder) {
      return decoder.decode(input);
    } else {
      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
  }
};
var or2 = (left, right) => new ComposedDecoder({
  ...left.decoders || { [left.prefix]: left },
  ...right.decoders || { [right.prefix]: right }
});
var Codec = class {
  constructor(name2, prefix, baseEncode, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
    this.baseDecode = baseDecode;
    this.encoder = new Encoder2(name2, prefix, baseEncode);
    this.decoder = new Decoder2(name2, prefix, baseDecode);
  }
  encode(input) {
    return this.encoder.encode(input);
  }
  decode(input) {
    return this.decoder.decode(input);
  }
};
var from8 = ({ name: name2, prefix, encode: encode12, decode: decode9 }) => new Codec(name2, prefix, encode12, decode9);
var baseX = ({ prefix, name: name2, alphabet: alphabet3 }) => {
  const { encode: encode12, decode: decode9 } = base_x_default(alphabet3, name2);
  return from8({
    prefix,
    name: name2,
    encode: encode12,
    decode: (text) => coerce(decode9(text))
  });
};
var decode3 = (string2, alphabet3, bitsPerChar, name2) => {
  const codes = {};
  for (let i4 = 0; i4 < alphabet3.length; ++i4) {
    codes[alphabet3[i4]] = i4;
  }
  let end = string2.length;
  while (string2[end - 1] === "=") {
    --end;
  }
  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
  let bits = 0;
  let buffer2 = 0;
  let written = 0;
  for (let i4 = 0; i4 < end; ++i4) {
    const value = codes[string2[i4]];
    if (value === void 0) {
      throw new SyntaxError(`Non-${name2} character`);
    }
    buffer2 = buffer2 << bitsPerChar | value;
    bits += bitsPerChar;
    if (bits >= 8) {
      bits -= 8;
      out[written++] = 255 & buffer2 >> bits;
    }
  }
  if (bits >= bitsPerChar || 255 & buffer2 << 8 - bits) {
    throw new SyntaxError("Unexpected end of data");
  }
  return out;
};
var encode5 = (data, alphabet3, bitsPerChar) => {
  const pad3 = alphabet3[alphabet3.length - 1] === "=";
  const mask = (1 << bitsPerChar) - 1;
  let out = "";
  let bits = 0;
  let buffer2 = 0;
  for (let i4 = 0; i4 < data.length; ++i4) {
    buffer2 = buffer2 << 8 | data[i4];
    bits += 8;
    while (bits > bitsPerChar) {
      bits -= bitsPerChar;
      out += alphabet3[mask & buffer2 >> bits];
    }
  }
  if (bits) {
    out += alphabet3[mask & buffer2 << bitsPerChar - bits];
  }
  if (pad3) {
    while (out.length * bitsPerChar & 7) {
      out += "=";
    }
  }
  return out;
};
var rfc4648 = ({ name: name2, prefix, bitsPerChar, alphabet: alphabet3 }) => {
  return from8({
    prefix,
    name: name2,
    encode(input) {
      return encode5(input, alphabet3, bitsPerChar);
    },
    decode(input) {
      return decode3(input, alphabet3, bitsPerChar, name2);
    }
  });
};

// node_modules/multiformats/esm/src/bases/identity.js
var identity = from8({
  prefix: "\0",
  name: "identity",
  encode: (buf) => toString3(buf),
  decode: (str) => fromString5(str)
});

// node_modules/multiformats/esm/src/bases/base2.js
var base2_exports = {};
__export(base2_exports, {
  base2: () => base22
});
var base22 = rfc4648({
  prefix: "0",
  name: "base2",
  alphabet: "01",
  bitsPerChar: 1
});

// node_modules/multiformats/esm/src/bases/base8.js
var base8_exports = {};
__export(base8_exports, {
  base8: () => base8
});
var base8 = rfc4648({
  prefix: "7",
  name: "base8",
  alphabet: "01234567",
  bitsPerChar: 3
});

// node_modules/multiformats/esm/src/bases/base10.js
var base10_exports = {};
__export(base10_exports, {
  base10: () => base10
});
var base10 = baseX({
  prefix: "9",
  name: "base10",
  alphabet: "0123456789"
});

// node_modules/multiformats/esm/src/bases/base16.js
var base16_exports = {};
__export(base16_exports, {
  base16: () => base162,
  base16upper: () => base16upper
});
var base162 = rfc4648({
  prefix: "f",
  name: "base16",
  alphabet: "0123456789abcdef",
  bitsPerChar: 4
});
var base16upper = rfc4648({
  prefix: "F",
  name: "base16upper",
  alphabet: "0123456789ABCDEF",
  bitsPerChar: 4
});

// node_modules/multiformats/esm/src/bases/base32.js
var base32_exports = {};
__export(base32_exports, {
  base32: () => base322,
  base32hex: () => base32hex2,
  base32hexpad: () => base32hexpad,
  base32hexpadupper: () => base32hexpadupper,
  base32hexupper: () => base32hexupper,
  base32pad: () => base32pad,
  base32padupper: () => base32padupper,
  base32upper: () => base32upper,
  base32z: () => base32z
});
var base322 = rfc4648({
  prefix: "b",
  name: "base32",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567",
  bitsPerChar: 5
});
var base32upper = rfc4648({
  prefix: "B",
  name: "base32upper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
  bitsPerChar: 5
});
var base32pad = rfc4648({
  prefix: "c",
  name: "base32pad",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
  bitsPerChar: 5
});
var base32padupper = rfc4648({
  prefix: "C",
  name: "base32padupper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
  bitsPerChar: 5
});
var base32hex2 = rfc4648({
  prefix: "v",
  name: "base32hex",
  alphabet: "0123456789abcdefghijklmnopqrstuv",
  bitsPerChar: 5
});
var base32hexupper = rfc4648({
  prefix: "V",
  name: "base32hexupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
  bitsPerChar: 5
});
var base32hexpad = rfc4648({
  prefix: "t",
  name: "base32hexpad",
  alphabet: "0123456789abcdefghijklmnopqrstuv=",
  bitsPerChar: 5
});
var base32hexpadupper = rfc4648({
  prefix: "T",
  name: "base32hexpadupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
  bitsPerChar: 5
});
var base32z = rfc4648({
  prefix: "h",
  name: "base32z",
  alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
  bitsPerChar: 5
});

// node_modules/multiformats/esm/src/bases/base36.js
var base36_exports = {};
__export(base36_exports, {
  base36: () => base36,
  base36upper: () => base36upper
});
var base36 = baseX({
  prefix: "k",
  name: "base36",
  alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
});
var base36upper = baseX({
  prefix: "K",
  name: "base36upper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
});

// node_modules/multiformats/esm/src/bases/base58.js
var base58_exports = {};
__export(base58_exports, {
  base58btc: () => base58btc,
  base58flickr: () => base58flickr2
});
var base58btc = baseX({
  name: "base58btc",
  prefix: "z",
  alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
});
var base58flickr2 = baseX({
  name: "base58flickr",
  prefix: "Z",
  alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
});

// node_modules/multiformats/esm/src/bases/base64.js
var base64_exports = {};
__export(base64_exports, {
  base64: () => base642,
  base64pad: () => base64pad,
  base64url: () => base64url2,
  base64urlpad: () => base64urlpad
});
var base642 = rfc4648({
  prefix: "m",
  name: "base64",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
  bitsPerChar: 6
});
var base64pad = rfc4648({
  prefix: "M",
  name: "base64pad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  bitsPerChar: 6
});
var base64url2 = rfc4648({
  prefix: "u",
  name: "base64url",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
  bitsPerChar: 6
});
var base64urlpad = rfc4648({
  prefix: "U",
  name: "base64urlpad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
  bitsPerChar: 6
});

// node_modules/multiformats/esm/src/bases/base256emoji.js
var base256emoji_exports = {};
__export(base256emoji_exports, {
  base256emoji: () => base256emoji
});
var alphabet2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var alphabetBytesToChars = alphabet2.reduce((p5, c7, i4) => {
  p5[i4] = c7;
  return p5;
}, []);
var alphabetCharsToBytes = alphabet2.reduce((p5, c7, i4) => {
  p5[c7.codePointAt(0)] = i4;
  return p5;
}, []);
function encode6(data) {
  return data.reduce((p5, c7) => {
    p5 += alphabetBytesToChars[c7];
    return p5;
  }, "");
}
function decode4(str) {
  const byts = [];
  for (const char of str) {
    const byt = alphabetCharsToBytes[char.codePointAt(0)];
    if (byt === void 0) {
      throw new Error(`Non-base256emoji character: ${char}`);
    }
    byts.push(byt);
  }
  return new Uint8Array(byts);
}
var base256emoji = from8({
  prefix: "🚀",
  name: "base256emoji",
  encode: encode6,
  decode: decode4
});

// node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha2_browser_exports = {};
__export(sha2_browser_exports, {
  sha256: () => sha2565,
  sha512: () => sha512
});

// node_modules/multiformats/esm/vendor/varint.js
var encode_1 = encode7;
var MSB = 128;
var REST = 127;
var MSBALL = ~REST;
var INT = Math.pow(2, 31);
function encode7(num2, out, offset) {
  out = out || [];
  offset = offset || 0;
  var oldOffset = offset;
  while (num2 >= INT) {
    out[offset++] = num2 & 255 | MSB;
    num2 /= 128;
  }
  while (num2 & MSBALL) {
    out[offset++] = num2 & 255 | MSB;
    num2 >>>= 7;
  }
  out[offset] = num2 | 0;
  encode7.bytes = offset - oldOffset + 1;
  return out;
}
var decode5 = read;
var MSB$1 = 128;
var REST$1 = 127;
function read(buf, offset) {
  var res = 0, offset = offset || 0, shift = 0, counter = offset, b5, l8 = buf.length;
  do {
    if (counter >= l8) {
      read.bytes = 0;
      throw new RangeError("Could not decode varint");
    }
    b5 = buf[counter++];
    res += shift < 28 ? (b5 & REST$1) << shift : (b5 & REST$1) * Math.pow(2, shift);
    shift += 7;
  } while (b5 >= MSB$1);
  read.bytes = counter - offset;
  return res;
}
var N1 = Math.pow(2, 7);
var N22 = Math.pow(2, 14);
var N3 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);
var length = function(value) {
  return value < N1 ? 1 : value < N22 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};
var varint = {
  encode: encode_1,
  decode: decode5,
  encodingLength: length
};
var _brrp_varint = varint;
var varint_default = _brrp_varint;

// node_modules/multiformats/esm/src/varint.js
var decode6 = (data, offset = 0) => {
  const code2 = varint_default.decode(data, offset);
  return [
    code2,
    varint_default.decode.bytes
  ];
};
var encodeTo = (int, target, offset = 0) => {
  varint_default.encode(int, target, offset);
  return target;
};
var encodingLength = (int) => {
  return varint_default.encodingLength(int);
};

// node_modules/multiformats/esm/src/hashes/digest.js
var create2 = (code2, digest2) => {
  const size8 = digest2.byteLength;
  const sizeOffset = encodingLength(code2);
  const digestOffset = sizeOffset + encodingLength(size8);
  const bytes = new Uint8Array(digestOffset + size8);
  encodeTo(code2, bytes, 0);
  encodeTo(size8, bytes, sizeOffset);
  bytes.set(digest2, digestOffset);
  return new Digest(code2, size8, digest2, bytes);
};
var decode7 = (multihash) => {
  const bytes = coerce(multihash);
  const [code2, sizeOffset] = decode6(bytes);
  const [size8, digestOffset] = decode6(bytes.subarray(sizeOffset));
  const digest2 = bytes.subarray(sizeOffset + digestOffset);
  if (digest2.byteLength !== size8) {
    throw new Error("Incorrect length");
  }
  return new Digest(code2, size8, digest2, bytes);
};
var equals2 = (a3, b5) => {
  if (a3 === b5) {
    return true;
  } else {
    return a3.code === b5.code && a3.size === b5.size && equals(a3.bytes, b5.bytes);
  }
};
var Digest = class {
  constructor(code2, size8, digest2, bytes) {
    this.code = code2;
    this.size = size8;
    this.digest = digest2;
    this.bytes = bytes;
  }
};

// node_modules/multiformats/esm/src/hashes/hasher.js
var from9 = ({ name: name2, code: code2, encode: encode12 }) => new Hasher(name2, code2, encode12);
var Hasher = class {
  constructor(name2, code2, encode12) {
    this.name = name2;
    this.code = code2;
    this.encode = encode12;
  }
  digest(input) {
    if (input instanceof Uint8Array) {
      const result = this.encode(input);
      return result instanceof Uint8Array ? create2(this.code, result) : result.then((digest2) => create2(this.code, digest2));
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};

// node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha = (name2) => async (data) => new Uint8Array(await crypto.subtle.digest(name2, data));
var sha2565 = from9({
  name: "sha2-256",
  code: 18,
  encode: sha("SHA-256")
});
var sha512 = from9({
  name: "sha2-512",
  code: 19,
  encode: sha("SHA-512")
});

// node_modules/multiformats/esm/src/hashes/identity.js
var identity_exports2 = {};
__export(identity_exports2, {
  identity: () => identity2
});
var code = 0;
var name = "identity";
var encode8 = coerce;
var digest = (input) => create2(code, encode8(input));
var identity2 = {
  code,
  name,
  encode: encode8,
  digest
};

// node_modules/multiformats/esm/src/codecs/json.js
var textEncoder = new TextEncoder();
var textDecoder = new TextDecoder();

// node_modules/multiformats/esm/src/cid.js
var CID = class _CID {
  constructor(version2, code2, multihash, bytes) {
    this.code = code2;
    this.version = version2;
    this.multihash = multihash;
    this.bytes = bytes;
    this.byteOffset = bytes.byteOffset;
    this.byteLength = bytes.byteLength;
    this.asCID = this;
    this._baseCache = /* @__PURE__ */ new Map();
    Object.defineProperties(this, {
      byteOffset: hidden,
      byteLength: hidden,
      code: readonly,
      version: readonly,
      multihash: readonly,
      bytes: readonly,
      _baseCache: hidden,
      asCID: hidden
    });
  }
  toV0() {
    switch (this.version) {
      case 0: {
        return this;
      }
      default: {
        const { code: code2, multihash } = this;
        if (code2 !== DAG_PB_CODE) {
          throw new Error("Cannot convert a non dag-pb CID to CIDv0");
        }
        if (multihash.code !== SHA_256_CODE) {
          throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
        }
        return _CID.createV0(multihash);
      }
    }
  }
  toV1() {
    switch (this.version) {
      case 0: {
        const { code: code2, digest: digest2 } = this.multihash;
        const multihash = create2(code2, digest2);
        return _CID.createV1(this.code, multihash);
      }
      case 1: {
        return this;
      }
      default: {
        throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
      }
    }
  }
  equals(other) {
    return other && this.code === other.code && this.version === other.version && equals2(this.multihash, other.multihash);
  }
  toString(base3) {
    const { bytes, version: version2, _baseCache } = this;
    switch (version2) {
      case 0:
        return toStringV0(bytes, _baseCache, base3 || base58btc.encoder);
      default:
        return toStringV1(bytes, _baseCache, base3 || base322.encoder);
    }
  }
  toJSON() {
    return {
      code: this.code,
      version: this.version,
      hash: this.multihash.bytes
    };
  }
  get [Symbol.toStringTag]() {
    return "CID";
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return "CID(" + this.toString() + ")";
  }
  static isCID(value) {
    deprecate(/^0\.0/, IS_CID_DEPRECATION);
    return !!(value && (value[cidSymbol] || value.asCID === value));
  }
  get toBaseEncodedString() {
    throw new Error("Deprecated, use .toString()");
  }
  get codec() {
    throw new Error('"codec" property is deprecated, use integer "code" property instead');
  }
  get buffer() {
    throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
  }
  get multibaseName() {
    throw new Error('"multibaseName" property is deprecated');
  }
  get prefix() {
    throw new Error('"prefix" property is deprecated');
  }
  static asCID(value) {
    if (value instanceof _CID) {
      return value;
    } else if (value != null && value.asCID === value) {
      const { version: version2, code: code2, multihash, bytes } = value;
      return new _CID(version2, code2, multihash, bytes || encodeCID(version2, code2, multihash.bytes));
    } else if (value != null && value[cidSymbol] === true) {
      const { version: version2, multihash, code: code2 } = value;
      const digest2 = decode7(multihash);
      return _CID.create(version2, code2, digest2);
    } else {
      return null;
    }
  }
  static create(version2, code2, digest2) {
    if (typeof code2 !== "number") {
      throw new Error("String codecs are no longer supported");
    }
    switch (version2) {
      case 0: {
        if (code2 !== DAG_PB_CODE) {
          throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
        } else {
          return new _CID(version2, code2, digest2, digest2.bytes);
        }
      }
      case 1: {
        const bytes = encodeCID(version2, code2, digest2.bytes);
        return new _CID(version2, code2, digest2, bytes);
      }
      default: {
        throw new Error("Invalid version");
      }
    }
  }
  static createV0(digest2) {
    return _CID.create(0, DAG_PB_CODE, digest2);
  }
  static createV1(code2, digest2) {
    return _CID.create(1, code2, digest2);
  }
  static decode(bytes) {
    const [cid, remainder] = _CID.decodeFirst(bytes);
    if (remainder.length) {
      throw new Error("Incorrect length");
    }
    return cid;
  }
  static decodeFirst(bytes) {
    const specs = _CID.inspectBytes(bytes);
    const prefixSize = specs.size - specs.multihashSize;
    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
    if (multihashBytes.byteLength !== specs.multihashSize) {
      throw new Error("Incorrect length");
    }
    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
    const digest2 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
    const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
    return [
      cid,
      bytes.subarray(specs.size)
    ];
  }
  static inspectBytes(initialBytes) {
    let offset = 0;
    const next = () => {
      const [i4, length2] = decode6(initialBytes.subarray(offset));
      offset += length2;
      return i4;
    };
    let version2 = next();
    let codec = DAG_PB_CODE;
    if (version2 === 18) {
      version2 = 0;
      offset = 0;
    } else if (version2 === 1) {
      codec = next();
    }
    if (version2 !== 0 && version2 !== 1) {
      throw new RangeError(`Invalid CID version ${version2}`);
    }
    const prefixSize = offset;
    const multihashCode = next();
    const digestSize = next();
    const size8 = offset + digestSize;
    const multihashSize = size8 - prefixSize;
    return {
      version: version2,
      codec,
      multihashCode,
      digestSize,
      multihashSize,
      size: size8
    };
  }
  static parse(source, base3) {
    const [prefix, bytes] = parseCIDtoBytes(source, base3);
    const cid = _CID.decode(bytes);
    cid._baseCache.set(prefix, source);
    return cid;
  }
};
var parseCIDtoBytes = (source, base3) => {
  switch (source[0]) {
    case "Q": {
      const decoder = base3 || base58btc;
      return [
        base58btc.prefix,
        decoder.decode(`${base58btc.prefix}${source}`)
      ];
    }
    case base58btc.prefix: {
      const decoder = base3 || base58btc;
      return [
        base58btc.prefix,
        decoder.decode(source)
      ];
    }
    case base322.prefix: {
      const decoder = base3 || base322;
      return [
        base322.prefix,
        decoder.decode(source)
      ];
    }
    default: {
      if (base3 == null) {
        throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
      }
      return [
        source[0],
        base3.decode(source)
      ];
    }
  }
};
var toStringV0 = (bytes, cache, base3) => {
  const { prefix } = base3;
  if (prefix !== base58btc.prefix) {
    throw Error(`Cannot string encode V0 in ${base3.name} encoding`);
  }
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base3.encode(bytes).slice(1);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var toStringV1 = (bytes, cache, base3) => {
  const { prefix } = base3;
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base3.encode(bytes);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var DAG_PB_CODE = 112;
var SHA_256_CODE = 18;
var encodeCID = (version2, code2, multihash) => {
  const codeOffset = encodingLength(version2);
  const hashOffset = codeOffset + encodingLength(code2);
  const bytes = new Uint8Array(hashOffset + multihash.byteLength);
  encodeTo(version2, bytes, 0);
  encodeTo(code2, bytes, codeOffset);
  bytes.set(multihash, hashOffset);
  return bytes;
};
var cidSymbol = Symbol.for("@ipld/js-cid/CID");
var readonly = {
  writable: false,
  configurable: false,
  enumerable: true
};
var hidden = {
  writable: false,
  enumerable: false,
  configurable: false
};
var version = "0.0.0-dev";
var deprecate = (range, message) => {
  if (range.test(version)) {
    console.warn(message);
  } else {
    throw new Error(message);
  }
};
var IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;

// node_modules/multiformats/esm/src/basics.js
var bases = {
  ...identity_exports,
  ...base2_exports,
  ...base8_exports,
  ...base10_exports,
  ...base16_exports,
  ...base32_exports,
  ...base36_exports,
  ...base58_exports,
  ...base64_exports,
  ...base256emoji_exports
};
var hashes = {
  ...sha2_browser_exports,
  ...identity_exports2
};

// node_modules/uint8arrays/esm/src/util/bases.js
function createCodec(name2, prefix, encode12, decode9) {
  return {
    name: name2,
    prefix,
    encoder: {
      name: name2,
      prefix,
      encode: encode12
    },
    decoder: { decode: decode9 }
  };
}
var string = createCodec("utf8", "u", (buf) => {
  const decoder = new TextDecoder("utf8");
  return "u" + decoder.decode(buf);
}, (str) => {
  const encoder = new TextEncoder();
  return encoder.encode(str.substring(1));
});
var ascii = createCodec("ascii", "a", (buf) => {
  let string2 = "a";
  for (let i4 = 0; i4 < buf.length; i4++) {
    string2 += String.fromCharCode(buf[i4]);
  }
  return string2;
}, (str) => {
  str = str.substring(1);
  const buf = allocUnsafe(str.length);
  for (let i4 = 0; i4 < str.length; i4++) {
    buf[i4] = str.charCodeAt(i4);
  }
  return buf;
});
var BASES = {
  utf8: string,
  "utf-8": string,
  hex: bases.base16,
  latin1: ascii,
  ascii,
  binary: ascii,
  ...bases
};
var bases_default = BASES;

// node_modules/uint8arrays/esm/src/from-string.js
function fromString6(string2, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return asUint8Array(globalThis.Buffer.from(string2, "utf-8"));
  }
  return base3.decoder.decode(`${base3.prefix}${string2}`);
}

// node_modules/uint8arrays/esm/src/to-string.js
function toString4(array, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString("utf8");
  }
  return base3.encoder.encode(array).substring(1);
}

// node_modules/@walletconnect/relay-api/dist/index.es.js
var C2 = { waku: { publish: "waku_publish", batchPublish: "waku_batchPublish", subscribe: "waku_subscribe", batchSubscribe: "waku_batchSubscribe", subscription: "waku_subscription", unsubscribe: "waku_unsubscribe", batchUnsubscribe: "waku_batchUnsubscribe", batchFetchMessages: "waku_batchFetchMessages" }, irn: { publish: "irn_publish", batchPublish: "irn_batchPublish", subscribe: "irn_subscribe", batchSubscribe: "irn_batchSubscribe", subscription: "irn_subscription", unsubscribe: "irn_unsubscribe", batchUnsubscribe: "irn_batchUnsubscribe", batchFetchMessages: "irn_batchFetchMessages" }, iridium: { publish: "iridium_publish", batchPublish: "iridium_batchPublish", subscribe: "iridium_subscribe", batchSubscribe: "iridium_batchSubscribe", subscription: "iridium_subscription", unsubscribe: "iridium_unsubscribe", batchUnsubscribe: "iridium_batchUnsubscribe", batchFetchMessages: "iridium_batchFetchMessages" } };

// node_modules/@walletconnect/utils/dist/index.es.js
var import_blakejs = __toESM(require_blakejs());
var xe2 = ":";
function Fe(t) {
  const [e2, n5] = t.split(xe2);
  return { namespace: e2, reference: n5 };
}
function ve2(t, e2) {
  return t.includes(":") ? [t] : e2.chains || [];
}
var $s = Object.defineProperty;
var Cs = Object.defineProperties;
var Ls = Object.getOwnPropertyDescriptors;
var Jn2 = Object.getOwnPropertySymbols;
var js = Object.prototype.hasOwnProperty;
var ks = Object.prototype.propertyIsEnumerable;
var Ze2 = (t, e2, n5) => e2 in t ? $s(t, e2, { enumerable: true, configurable: true, writable: true, value: n5 }) : t[e2] = n5;
var Qn2 = (t, e2) => {
  for (var n5 in e2 || (e2 = {}))
    js.call(e2, n5) && Ze2(t, n5, e2[n5]);
  if (Jn2)
    for (var n5 of Jn2(e2))
      ks.call(e2, n5) && Ze2(t, n5, e2[n5]);
  return t;
};
var Ps = (t, e2) => Cs(t, Ls(e2));
var tr2 = (t, e2, n5) => Ze2(t, typeof e2 != "symbol" ? e2 + "" : e2, n5);
var er2 = "ReactNative";
var J3 = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
var rr2 = "js";
function Ye2() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function Bt2() {
  return !(0, import_window_getters.getDocument)() && !!(0, import_window_getters.getNavigator)() && navigator.product === er2;
}
function Ms() {
  return Bt2() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "android";
}
function Vs() {
  return Bt2() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "ios";
}
function zt2() {
  return !Ye2() && !!(0, import_window_getters.getNavigator)() && !!(0, import_window_getters.getDocument)();
}
function Pt2() {
  return Bt2() ? J3.reactNative : Ye2() ? J3.node : zt2() ? J3.browser : J3.unknown;
}
function qs() {
  var t;
  try {
    return Bt2() && typeof global < "u" && typeof (global == null ? void 0 : global.Application) < "u" ? (t = global.Application) == null ? void 0 : t.applicationId : void 0;
  } catch {
    return;
  }
}
function or3(t, e2) {
  const n5 = new URLSearchParams(t);
  for (const r3 of Object.keys(e2).sort())
    if (e2.hasOwnProperty(r3)) {
      const o5 = e2[r3];
      o5 !== void 0 && n5.set(r3, o5);
    }
  return n5.toString();
}
function Ks(t) {
  var e2, n5;
  const r3 = sr2();
  try {
    return t != null && t.url && r3.url && new URL(t.url).host !== new URL(r3.url).host && (console.warn(`The configured WalletConnect 'metadata.url':${t.url} differs from the actual page url:${r3.url}. This is probably unintended and can lead to issues.`), t.url = r3.url), (e2 = t == null ? void 0 : t.icons) != null && e2.length && t.icons.length > 0 && (t.icons = t.icons.filter((o5) => o5 !== "")), Ps(Qn2(Qn2({}, r3), t), { url: (t == null ? void 0 : t.url) || r3.url, name: (t == null ? void 0 : t.name) || r3.name, description: (t == null ? void 0 : t.description) || r3.description, icons: (n5 = t == null ? void 0 : t.icons) != null && n5.length && t.icons.length > 0 ? t.icons : r3.icons });
  } catch (o5) {
    return console.warn("Error populating app metadata", o5), t || r3;
  }
}
function sr2() {
  return (0, import_window_metadata.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function ir2() {
  if (Pt2() === J3.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
    const { OS: n5, Version: r3 } = global.Platform;
    return [n5, r3].join("-");
  }
  const t = detect();
  if (t === null)
    return "unknown";
  const e2 = t.os ? t.os.replace(" ", "").toLowerCase() : "unknown";
  return t.type === "browser" ? [e2, t.name, t.version].join("-") : [e2, t.version].join("-");
}
function fr2() {
  var t;
  const e2 = Pt2();
  return e2 === J3.browser ? [e2, ((t = (0, import_window_getters.getLocation)()) == null ? void 0 : t.host) || "unknown"].join(":") : e2;
}
function cr2(t, e2, n5) {
  const r3 = ir2(), o5 = fr2();
  return [[t, e2].join("-"), [rr2, n5].join("-"), r3, o5].join("/");
}
function zs({ protocol: t, version: e2, relayUrl: n5, sdkVersion: r3, auth: o5, projectId: s3, useOnCloseEvent: i4, bundleId: f8, packageName: a3 }) {
  const l8 = n5.split("?"), c7 = cr2(t, e2, r3), u3 = { auth: o5, ua: c7, projectId: s3, useOnCloseEvent: i4 || void 0, packageName: a3 || void 0, bundleId: f8 || void 0 }, h6 = or3(l8[1] || "", u3);
  return l8[0] + "?" + h6;
}
function It2(t, e2) {
  return t.filter((n5) => e2.includes(n5)).length === t.length;
}
function Ys(t) {
  return Object.fromEntries(t.entries());
}
function Xs(t) {
  return new Map(Object.entries(t));
}
function ei(t = import_time3.FIVE_MINUTES, e2) {
  const n5 = (0, import_time3.toMiliseconds)(t || import_time3.FIVE_MINUTES);
  let r3, o5, s3, i4;
  return { resolve: (f8) => {
    s3 && r3 && (clearTimeout(s3), r3(f8), i4 = Promise.resolve(f8));
  }, reject: (f8) => {
    s3 && o5 && (clearTimeout(s3), o5(f8));
  }, done: () => new Promise((f8, a3) => {
    if (i4)
      return f8(i4);
    s3 = setTimeout(() => {
      const l8 = new Error(e2);
      i4 = Promise.reject(l8), a3(l8);
    }, n5), r3 = f8, o5 = a3;
  }) };
}
function ni(t, e2, n5) {
  return new Promise(async (r3, o5) => {
    const s3 = setTimeout(() => o5(new Error(n5)), e2);
    try {
      const i4 = await t;
      r3(i4);
    } catch (i4) {
      o5(i4);
    }
    clearTimeout(s3);
  });
}
function Xe2(t, e2) {
  if (typeof e2 == "string" && e2.startsWith(`${t}:`))
    return e2;
  if (t.toLowerCase() === "topic") {
    if (typeof e2 != "string")
      throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${e2}`;
  } else if (t.toLowerCase() === "id") {
    if (typeof e2 != "number")
      throw new Error('Value must be "number" for expirer target type: id');
    return `id:${e2}`;
  }
  throw new Error(`Unknown expirer target type: ${t}`);
}
function ri(t) {
  return Xe2("topic", t);
}
function oi(t) {
  return Xe2("id", t);
}
function si(t) {
  const [e2, n5] = t.split(":"), r3 = { id: void 0, topic: void 0 };
  if (e2 === "topic" && typeof n5 == "string")
    r3.topic = n5;
  else if (e2 === "id" && Number.isInteger(Number(n5)))
    r3.id = Number(n5);
  else
    throw new Error(`Invalid target, expected id:number or topic:string, got ${e2}:${n5}`);
  return r3;
}
function ii(t, e2) {
  return (0, import_time3.fromMiliseconds)((e2 || Date.now()) + (0, import_time3.toMiliseconds)(t));
}
function fi(t) {
  return Date.now() >= (0, import_time3.toMiliseconds)(t);
}
function ci(t, e2) {
  return `${t}${e2 ? `:${e2}` : ""}`;
}
function ct2(t = [], e2 = []) {
  return [.../* @__PURE__ */ new Set([...t, ...e2])];
}
async function ai({ id: t, topic: e2, wcDeepLink: n5 }) {
  var r3;
  try {
    if (!n5)
      return;
    const o5 = typeof n5 == "string" ? JSON.parse(n5) : n5, s3 = o5 == null ? void 0 : o5.href;
    if (typeof s3 != "string")
      return;
    const i4 = dr2(s3, t, e2), f8 = Pt2();
    if (f8 === J3.browser) {
      if (!((r3 = (0, import_window_getters.getDocument)()) != null && r3.hasFocus())) {
        console.warn("Document does not have focus, skipping deeplink.");
        return;
      }
      hr2(i4);
    } else
      f8 === J3.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && await global.Linking.openURL(i4);
  } catch (o5) {
    console.error(o5);
  }
}
function dr2(t, e2, n5) {
  const r3 = `requestId=${e2}&sessionTopic=${n5}`;
  t.endsWith("/") && (t = t.slice(0, -1));
  let o5 = `${t}`;
  if (t.startsWith("https://t.me")) {
    const s3 = t.includes("?") ? "&startapp=" : "?startapp=";
    o5 = `${o5}${s3}${br2(r3, true)}`;
  } else
    o5 = `${o5}/wc?${r3}`;
  return o5;
}
function hr2(t) {
  let e2 = "_self";
  gr2() ? e2 = "_top" : (pr2() || t.startsWith("https://") || t.startsWith("http://")) && (e2 = "_blank"), window.open(t, e2, "noreferrer noopener");
}
async function ui(t, e2) {
  let n5 = "";
  try {
    if (zt2() && (n5 = localStorage.getItem(e2), n5))
      return n5;
    n5 = await t.getItem(e2);
  } catch (r3) {
    console.error(r3);
  }
  return n5;
}
function li(t, e2) {
  if (!t.includes(e2))
    return null;
  const n5 = t.split(/([&,?,=])/), r3 = n5.indexOf(e2);
  return n5[r3 + 2];
}
function di() {
  return typeof crypto < "u" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (t) => {
    const e2 = Math.random() * 16 | 0;
    return (t === "x" ? e2 : e2 & 3 | 8).toString(16);
  });
}
function hi() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function pr2() {
  return typeof window < "u" && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);
}
function gr2() {
  try {
    return window.self !== window.top;
  } catch {
    return false;
  }
}
function br2(t, e2 = false) {
  const n5 = Buffer.from(t).toString("base64");
  return e2 ? n5.replace(/[=]/g, "") : n5;
}
function Qe2(t) {
  return Buffer.from(t, "base64").toString("utf-8");
}
function pi(t) {
  return new Promise((e2) => setTimeout(e2, t));
}
var gi = class {
  constructor({ limit: e2 }) {
    tr2(this, "limit"), tr2(this, "set"), this.limit = e2, this.set = /* @__PURE__ */ new Set();
  }
  add(e2) {
    if (!this.set.has(e2)) {
      if (this.set.size >= this.limit) {
        const n5 = this.set.values().next().value;
        n5 && this.set.delete(n5);
      }
      this.set.add(e2);
    }
  }
  has(e2) {
    return this.set.has(e2);
  }
};
var Be2 = BigInt(2 ** 32 - 1);
var yr2 = BigInt(32);
function mr2(t, e2 = false) {
  return e2 ? { h: Number(t & Be2), l: Number(t >> yr2 & Be2) } : { h: Number(t >> yr2 & Be2) | 0, l: Number(t & Be2) | 0 };
}
function wr2(t, e2 = false) {
  const n5 = t.length;
  let r3 = new Uint32Array(n5), o5 = new Uint32Array(n5);
  for (let s3 = 0; s3 < n5; s3++) {
    const { h: i4, l: f8 } = mr2(t[s3], e2);
    [r3[s3], o5[s3]] = [i4, f8];
  }
  return [r3, o5];
}
var xr2 = (t, e2, n5) => t >>> n5;
var vr2 = (t, e2, n5) => t << 32 - n5 | e2 >>> n5;
var At = (t, e2, n5) => t >>> n5 | e2 << 32 - n5;
var St2 = (t, e2, n5) => t << 32 - n5 | e2 >>> n5;
var se = (t, e2, n5) => t << 64 - n5 | e2 >>> n5 - 32;
var ie = (t, e2, n5) => t >>> n5 - 32 | e2 << 64 - n5;
var bi = (t, e2) => e2;
var yi = (t, e2) => t;
var mi = (t, e2, n5) => t << n5 | e2 >>> 32 - n5;
var wi = (t, e2, n5) => e2 << n5 | t >>> 32 - n5;
var xi = (t, e2, n5) => e2 << n5 - 32 | t >>> 64 - n5;
var vi = (t, e2, n5) => t << n5 - 32 | e2 >>> 64 - n5;
function dt2(t, e2, n5, r3) {
  const o5 = (e2 >>> 0) + (r3 >>> 0);
  return { h: t + n5 + (o5 / 2 ** 32 | 0) | 0, l: o5 | 0 };
}
var tn = (t, e2, n5) => (t >>> 0) + (e2 >>> 0) + (n5 >>> 0);
var en2 = (t, e2, n5, r3) => e2 + n5 + r3 + (t / 2 ** 32 | 0) | 0;
var Ei = (t, e2, n5, r3) => (t >>> 0) + (e2 >>> 0) + (n5 >>> 0) + (r3 >>> 0);
var Bi = (t, e2, n5, r3, o5) => e2 + n5 + r3 + o5 + (t / 2 ** 32 | 0) | 0;
var Ii = (t, e2, n5, r3, o5) => (t >>> 0) + (e2 >>> 0) + (n5 >>> 0) + (r3 >>> 0) + (o5 >>> 0);
var Ai = (t, e2, n5, r3, o5, s3) => e2 + n5 + r3 + o5 + s3 + (t / 2 ** 32 | 0) | 0;
var Gt2 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
function nn2(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function mt(t) {
  if (!Number.isSafeInteger(t) || t < 0)
    throw new Error("positive integer expected, got " + t);
}
function at(t, ...e2) {
  if (!nn2(t))
    throw new Error("Uint8Array expected");
  if (e2.length > 0 && !e2.includes(t.length))
    throw new Error("Uint8Array expected of length " + e2 + ", got length=" + t.length);
}
function rn2(t) {
  if (typeof t != "function" || typeof t.create != "function")
    throw new Error("Hash should be wrapped by utils.createHasher");
  mt(t.outputLen), mt(t.blockLen);
}
function Nt2(t, e2 = true) {
  if (t.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e2 && t.finished)
    throw new Error("Hash#digest() has already been called");
}
function on2(t, e2) {
  at(t);
  const n5 = e2.outputLen;
  if (t.length < n5)
    throw new Error("digestInto() expects output buffer of length at least " + n5);
}
function fe2(t) {
  return new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
}
function ut2(...t) {
  for (let e2 = 0; e2 < t.length; e2++)
    t[e2].fill(0);
}
function sn2(t) {
  return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
function gt2(t, e2) {
  return t << 32 - e2 | t >>> e2;
}
var Er2 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Br2(t) {
  return t << 24 & 4278190080 | t << 8 & 16711680 | t >>> 8 & 65280 | t >>> 24 & 255;
}
var wt2 = Er2 ? (t) => t : (t) => Br2(t);
function Si(t) {
  for (let e2 = 0; e2 < t.length; e2++)
    t[e2] = Br2(t[e2]);
  return t;
}
var Ot2 = Er2 ? (t) => t : Si;
var Ir2 = typeof Uint8Array.from([]).toHex == "function" && typeof Uint8Array.fromHex == "function";
var Ni = Array.from({ length: 256 }, (t, e2) => e2.toString(16).padStart(2, "0"));
function ce(t) {
  if (at(t), Ir2)
    return t.toHex();
  let e2 = "";
  for (let n5 = 0; n5 < t.length; n5++)
    e2 += Ni[t[n5]];
  return e2;
}
var xt2 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function Ar2(t) {
  if (t >= xt2._0 && t <= xt2._9)
    return t - xt2._0;
  if (t >= xt2.A && t <= xt2.F)
    return t - (xt2.A - 10);
  if (t >= xt2.a && t <= xt2.f)
    return t - (xt2.a - 10);
}
function fn(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  if (Ir2)
    return Uint8Array.fromHex(t);
  const e2 = t.length, n5 = e2 / 2;
  if (e2 % 2)
    throw new Error("hex string expected, got unpadded hex of length " + e2);
  const r3 = new Uint8Array(n5);
  for (let o5 = 0, s3 = 0; o5 < n5; o5++, s3 += 2) {
    const i4 = Ar2(t.charCodeAt(s3)), f8 = Ar2(t.charCodeAt(s3 + 1));
    if (i4 === void 0 || f8 === void 0) {
      const a3 = t[s3] + t[s3 + 1];
      throw new Error('hex string expected, got non-hex character "' + a3 + '" at index ' + s3);
    }
    r3[o5] = i4 * 16 + f8;
  }
  return r3;
}
function Oi(t) {
  if (typeof t != "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t));
}
function ht2(t) {
  return typeof t == "string" && (t = Oi(t)), at(t), t;
}
function Ht2(...t) {
  let e2 = 0;
  for (let r3 = 0; r3 < t.length; r3++) {
    const o5 = t[r3];
    at(o5), e2 += o5.length;
  }
  const n5 = new Uint8Array(e2);
  for (let r3 = 0, o5 = 0; r3 < t.length; r3++) {
    const s3 = t[r3];
    n5.set(s3, o5), o5 += s3.length;
  }
  return n5;
}
var Ie2 = class {
};
function ae(t) {
  const e2 = (r3) => t().update(ht2(r3)).digest(), n5 = t();
  return e2.outputLen = n5.outputLen, e2.blockLen = n5.blockLen, e2.create = () => t(), e2;
}
function Ui(t) {
  const e2 = (r3, o5) => t(o5).update(ht2(r3)).digest(), n5 = t({});
  return e2.outputLen = n5.outputLen, e2.blockLen = n5.blockLen, e2.create = (r3) => t(r3), e2;
}
function Zt2(t = 32) {
  if (Gt2 && typeof Gt2.getRandomValues == "function")
    return Gt2.getRandomValues(new Uint8Array(t));
  if (Gt2 && typeof Gt2.randomBytes == "function")
    return Uint8Array.from(Gt2.randomBytes(t));
  throw new Error("crypto.getRandomValues must be defined");
}
var _i = BigInt(0);
var ue = BigInt(1);
var Ti = BigInt(2);
var Ri = BigInt(7);
var $i = BigInt(256);
var Ci = BigInt(113);
var Sr2 = [];
var Nr2 = [];
var Or2 = [];
for (let t = 0, e2 = ue, n5 = 1, r3 = 0; t < 24; t++) {
  [n5, r3] = [r3, (2 * n5 + 3 * r3) % 5], Sr2.push(2 * (5 * r3 + n5)), Nr2.push((t + 1) * (t + 2) / 2 % 64);
  let o5 = _i;
  for (let s3 = 0; s3 < 7; s3++)
    e2 = (e2 << ue ^ (e2 >> Ri) * Ci) % $i, e2 & Ti && (o5 ^= ue << (ue << BigInt(s3)) - ue);
  Or2.push(o5);
}
var Ur2 = wr2(Or2, true);
var Li = Ur2[0];
var ji = Ur2[1];
var _r2 = (t, e2, n5) => n5 > 32 ? xi(t, e2, n5) : mi(t, e2, n5);
var Tr2 = (t, e2, n5) => n5 > 32 ? vi(t, e2, n5) : wi(t, e2, n5);
function ki(t, e2 = 24) {
  const n5 = new Uint32Array(10);
  for (let r3 = 24 - e2; r3 < 24; r3++) {
    for (let i4 = 0; i4 < 10; i4++)
      n5[i4] = t[i4] ^ t[i4 + 10] ^ t[i4 + 20] ^ t[i4 + 30] ^ t[i4 + 40];
    for (let i4 = 0; i4 < 10; i4 += 2) {
      const f8 = (i4 + 8) % 10, a3 = (i4 + 2) % 10, l8 = n5[a3], c7 = n5[a3 + 1], u3 = _r2(l8, c7, 1) ^ n5[f8], h6 = Tr2(l8, c7, 1) ^ n5[f8 + 1];
      for (let g4 = 0; g4 < 50; g4 += 10)
        t[i4 + g4] ^= u3, t[i4 + g4 + 1] ^= h6;
    }
    let o5 = t[2], s3 = t[3];
    for (let i4 = 0; i4 < 24; i4++) {
      const f8 = Nr2[i4], a3 = _r2(o5, s3, f8), l8 = Tr2(o5, s3, f8), c7 = Sr2[i4];
      o5 = t[c7], s3 = t[c7 + 1], t[c7] = a3, t[c7 + 1] = l8;
    }
    for (let i4 = 0; i4 < 50; i4 += 10) {
      for (let f8 = 0; f8 < 10; f8++)
        n5[f8] = t[i4 + f8];
      for (let f8 = 0; f8 < 10; f8++)
        t[i4 + f8] ^= ~n5[(f8 + 2) % 10] & n5[(f8 + 4) % 10];
    }
    t[0] ^= Li[r3], t[1] ^= ji[r3];
  }
  ut2(n5);
}
var qn2 = class _qn extends Ie2 {
  constructor(e2, n5, r3, o5 = false, s3 = 24) {
    if (super(), this.pos = 0, this.posOut = 0, this.finished = false, this.destroyed = false, this.enableXOF = false, this.blockLen = e2, this.suffix = n5, this.outputLen = r3, this.enableXOF = o5, this.rounds = s3, mt(r3), !(0 < e2 && e2 < 200))
      throw new Error("only keccak-f1600 function is supported");
    this.state = new Uint8Array(200), this.state32 = fe2(this.state);
  }
  clone() {
    return this._cloneInto();
  }
  keccak() {
    Ot2(this.state32), ki(this.state32, this.rounds), Ot2(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(e2) {
    Nt2(this), e2 = ht2(e2), at(e2);
    const { blockLen: n5, state: r3 } = this, o5 = e2.length;
    for (let s3 = 0; s3 < o5; ) {
      const i4 = Math.min(n5 - this.pos, o5 - s3);
      for (let f8 = 0; f8 < i4; f8++)
        r3[this.pos++] ^= e2[s3++];
      this.pos === n5 && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state: e2, suffix: n5, pos: r3, blockLen: o5 } = this;
    e2[r3] ^= n5, (n5 & 128) !== 0 && r3 === o5 - 1 && this.keccak(), e2[o5 - 1] ^= 128, this.keccak();
  }
  writeInto(e2) {
    Nt2(this, false), at(e2), this.finish();
    const n5 = this.state, { blockLen: r3 } = this;
    for (let o5 = 0, s3 = e2.length; o5 < s3; ) {
      this.posOut >= r3 && this.keccak();
      const i4 = Math.min(r3 - this.posOut, s3 - o5);
      e2.set(n5.subarray(this.posOut, this.posOut + i4), o5), this.posOut += i4, o5 += i4;
    }
    return e2;
  }
  xofInto(e2) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(e2);
  }
  xof(e2) {
    return mt(e2), this.xofInto(new Uint8Array(e2));
  }
  digestInto(e2) {
    if (on2(e2, this), this.finished)
      throw new Error("digest() was already called");
    return this.writeInto(e2), this.destroy(), e2;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true, ut2(this.state);
  }
  _cloneInto(e2) {
    const { blockLen: n5, suffix: r3, outputLen: o5, rounds: s3, enableXOF: i4 } = this;
    return e2 || (e2 = new _qn(n5, r3, o5, i4, s3)), e2.state32.set(this.state32), e2.pos = this.pos, e2.posOut = this.posOut, e2.finished = this.finished, e2.rounds = s3, e2.suffix = r3, e2.outputLen = o5, e2.enableXOF = i4, e2.destroyed = this.destroyed, e2;
  }
};
var Pi = (t, e2, n5) => ae(() => new qn2(e2, t, n5));
var Hi = Pi(1, 136, 256 / 8);
function Di(t, e2, n5, r3) {
  if (typeof t.setBigUint64 == "function")
    return t.setBigUint64(e2, n5, r3);
  const o5 = BigInt(32), s3 = BigInt(4294967295), i4 = Number(n5 >> o5 & s3), f8 = Number(n5 & s3), a3 = r3 ? 4 : 0, l8 = r3 ? 0 : 4;
  t.setUint32(e2 + a3, i4, r3), t.setUint32(e2 + l8, f8, r3);
}
function Mi(t, e2, n5) {
  return t & e2 ^ ~t & n5;
}
function Vi(t, e2, n5) {
  return t & e2 ^ t & n5 ^ e2 & n5;
}
var Rr2 = class extends Ie2 {
  constructor(e2, n5, r3, o5) {
    super(), this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.blockLen = e2, this.outputLen = n5, this.padOffset = r3, this.isLE = o5, this.buffer = new Uint8Array(e2), this.view = sn2(this.buffer);
  }
  update(e2) {
    Nt2(this), e2 = ht2(e2), at(e2);
    const { view: n5, buffer: r3, blockLen: o5 } = this, s3 = e2.length;
    for (let i4 = 0; i4 < s3; ) {
      const f8 = Math.min(o5 - this.pos, s3 - i4);
      if (f8 === o5) {
        const a3 = sn2(e2);
        for (; o5 <= s3 - i4; i4 += o5)
          this.process(a3, i4);
        continue;
      }
      r3.set(e2.subarray(i4, i4 + f8), this.pos), this.pos += f8, i4 += f8, this.pos === o5 && (this.process(n5, 0), this.pos = 0);
    }
    return this.length += e2.length, this.roundClean(), this;
  }
  digestInto(e2) {
    Nt2(this), on2(e2, this), this.finished = true;
    const { buffer: n5, view: r3, blockLen: o5, isLE: s3 } = this;
    let { pos: i4 } = this;
    n5[i4++] = 128, ut2(this.buffer.subarray(i4)), this.padOffset > o5 - i4 && (this.process(r3, 0), i4 = 0);
    for (let u3 = i4; u3 < o5; u3++)
      n5[u3] = 0;
    Di(r3, o5 - 8, BigInt(this.length * 8), s3), this.process(r3, 0);
    const f8 = sn2(e2), a3 = this.outputLen;
    if (a3 % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const l8 = a3 / 4, c7 = this.get();
    if (l8 > c7.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let u3 = 0; u3 < l8; u3++)
      f8.setUint32(4 * u3, c7[u3], s3);
  }
  digest() {
    const { buffer: e2, outputLen: n5 } = this;
    this.digestInto(e2);
    const r3 = e2.slice(0, n5);
    return this.destroy(), r3;
  }
  _cloneInto(e2) {
    e2 || (e2 = new this.constructor()), e2.set(...this.get());
    const { blockLen: n5, buffer: r3, length: o5, finished: s3, destroyed: i4, pos: f8 } = this;
    return e2.destroyed = i4, e2.finished = s3, e2.length = o5, e2.pos = f8, o5 % n5 && e2.buffer.set(r3), e2;
  }
  clone() {
    return this._cloneInto();
  }
};
var Ut2 = Uint32Array.from([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]);
var W2 = Uint32Array.from([3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428]);
var Y = Uint32Array.from([1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209]);
var qi = Uint32Array.from([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
var _t2 = new Uint32Array(64);
var Ki = class extends Rr2 {
  constructor(e2 = 32) {
    super(64, e2, 8, false), this.A = Ut2[0] | 0, this.B = Ut2[1] | 0, this.C = Ut2[2] | 0, this.D = Ut2[3] | 0, this.E = Ut2[4] | 0, this.F = Ut2[5] | 0, this.G = Ut2[6] | 0, this.H = Ut2[7] | 0;
  }
  get() {
    const { A: e2, B: n5, C: r3, D: o5, E: s3, F: i4, G: f8, H: a3 } = this;
    return [e2, n5, r3, o5, s3, i4, f8, a3];
  }
  set(e2, n5, r3, o5, s3, i4, f8, a3) {
    this.A = e2 | 0, this.B = n5 | 0, this.C = r3 | 0, this.D = o5 | 0, this.E = s3 | 0, this.F = i4 | 0, this.G = f8 | 0, this.H = a3 | 0;
  }
  process(e2, n5) {
    for (let u3 = 0; u3 < 16; u3++, n5 += 4)
      _t2[u3] = e2.getUint32(n5, false);
    for (let u3 = 16; u3 < 64; u3++) {
      const h6 = _t2[u3 - 15], g4 = _t2[u3 - 2], w5 = gt2(h6, 7) ^ gt2(h6, 18) ^ h6 >>> 3, y6 = gt2(g4, 17) ^ gt2(g4, 19) ^ g4 >>> 10;
      _t2[u3] = y6 + _t2[u3 - 7] + w5 + _t2[u3 - 16] | 0;
    }
    let { A: r3, B: o5, C: s3, D: i4, E: f8, F: a3, G: l8, H: c7 } = this;
    for (let u3 = 0; u3 < 64; u3++) {
      const h6 = gt2(f8, 6) ^ gt2(f8, 11) ^ gt2(f8, 25), g4 = c7 + h6 + Mi(f8, a3, l8) + qi[u3] + _t2[u3] | 0, y6 = (gt2(r3, 2) ^ gt2(r3, 13) ^ gt2(r3, 22)) + Vi(r3, o5, s3) | 0;
      c7 = l8, l8 = a3, a3 = f8, f8 = i4 + g4 | 0, i4 = s3, s3 = o5, o5 = r3, r3 = g4 + y6 | 0;
    }
    r3 = r3 + this.A | 0, o5 = o5 + this.B | 0, s3 = s3 + this.C | 0, i4 = i4 + this.D | 0, f8 = f8 + this.E | 0, a3 = a3 + this.F | 0, l8 = l8 + this.G | 0, c7 = c7 + this.H | 0, this.set(r3, o5, s3, i4, f8, a3, l8, c7);
  }
  roundClean() {
    ut2(_t2);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), ut2(this.buffer);
  }
};
var $r2 = wr2(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t) => BigInt(t)));
var Fi = $r2[0];
var zi = $r2[1];
var Tt2 = new Uint32Array(80);
var Rt2 = new Uint32Array(80);
var cn = class extends Rr2 {
  constructor(e2 = 64) {
    super(128, e2, 16, false), this.Ah = Y[0] | 0, this.Al = Y[1] | 0, this.Bh = Y[2] | 0, this.Bl = Y[3] | 0, this.Ch = Y[4] | 0, this.Cl = Y[5] | 0, this.Dh = Y[6] | 0, this.Dl = Y[7] | 0, this.Eh = Y[8] | 0, this.El = Y[9] | 0, this.Fh = Y[10] | 0, this.Fl = Y[11] | 0, this.Gh = Y[12] | 0, this.Gl = Y[13] | 0, this.Hh = Y[14] | 0, this.Hl = Y[15] | 0;
  }
  get() {
    const { Ah: e2, Al: n5, Bh: r3, Bl: o5, Ch: s3, Cl: i4, Dh: f8, Dl: a3, Eh: l8, El: c7, Fh: u3, Fl: h6, Gh: g4, Gl: w5, Hh: y6, Hl: x6 } = this;
    return [e2, n5, r3, o5, s3, i4, f8, a3, l8, c7, u3, h6, g4, w5, y6, x6];
  }
  set(e2, n5, r3, o5, s3, i4, f8, a3, l8, c7, u3, h6, g4, w5, y6, x6) {
    this.Ah = e2 | 0, this.Al = n5 | 0, this.Bh = r3 | 0, this.Bl = o5 | 0, this.Ch = s3 | 0, this.Cl = i4 | 0, this.Dh = f8 | 0, this.Dl = a3 | 0, this.Eh = l8 | 0, this.El = c7 | 0, this.Fh = u3 | 0, this.Fl = h6 | 0, this.Gh = g4 | 0, this.Gl = w5 | 0, this.Hh = y6 | 0, this.Hl = x6 | 0;
  }
  process(e2, n5) {
    for (let L5 = 0; L5 < 16; L5++, n5 += 4)
      Tt2[L5] = e2.getUint32(n5), Rt2[L5] = e2.getUint32(n5 += 4);
    for (let L5 = 16; L5 < 80; L5++) {
      const V4 = Tt2[L5 - 15] | 0, _3 = Rt2[L5 - 15] | 0, k6 = At(V4, _3, 1) ^ At(V4, _3, 8) ^ xr2(V4, _3, 7), j5 = St2(V4, _3, 1) ^ St2(V4, _3, 8) ^ vr2(V4, _3, 7), $4 = Tt2[L5 - 2] | 0, d5 = Rt2[L5 - 2] | 0, m4 = At($4, d5, 19) ^ se($4, d5, 61) ^ xr2($4, d5, 6), p5 = St2($4, d5, 19) ^ ie($4, d5, 61) ^ vr2($4, d5, 6), b5 = Ei(j5, p5, Rt2[L5 - 7], Rt2[L5 - 16]), v6 = Bi(b5, k6, m4, Tt2[L5 - 7], Tt2[L5 - 16]);
      Tt2[L5] = v6 | 0, Rt2[L5] = b5 | 0;
    }
    let { Ah: r3, Al: o5, Bh: s3, Bl: i4, Ch: f8, Cl: a3, Dh: l8, Dl: c7, Eh: u3, El: h6, Fh: g4, Fl: w5, Gh: y6, Gl: x6, Hh: R4, Hl: M5 } = this;
    for (let L5 = 0; L5 < 80; L5++) {
      const V4 = At(u3, h6, 14) ^ At(u3, h6, 18) ^ se(u3, h6, 41), _3 = St2(u3, h6, 14) ^ St2(u3, h6, 18) ^ ie(u3, h6, 41), k6 = u3 & g4 ^ ~u3 & y6, j5 = h6 & w5 ^ ~h6 & x6, $4 = Ii(M5, _3, j5, zi[L5], Rt2[L5]), d5 = Ai($4, R4, V4, k6, Fi[L5], Tt2[L5]), m4 = $4 | 0, p5 = At(r3, o5, 28) ^ se(r3, o5, 34) ^ se(r3, o5, 39), b5 = St2(r3, o5, 28) ^ ie(r3, o5, 34) ^ ie(r3, o5, 39), v6 = r3 & s3 ^ r3 & f8 ^ s3 & f8, B4 = o5 & i4 ^ o5 & a3 ^ i4 & a3;
      R4 = y6 | 0, M5 = x6 | 0, y6 = g4 | 0, x6 = w5 | 0, g4 = u3 | 0, w5 = h6 | 0, { h: u3, l: h6 } = dt2(l8 | 0, c7 | 0, d5 | 0, m4 | 0), l8 = f8 | 0, c7 = a3 | 0, f8 = s3 | 0, a3 = i4 | 0, s3 = r3 | 0, i4 = o5 | 0;
      const E6 = tn(m4, b5, B4);
      r3 = en2(E6, d5, p5, v6), o5 = E6 | 0;
    }
    ({ h: r3, l: o5 } = dt2(this.Ah | 0, this.Al | 0, r3 | 0, o5 | 0)), { h: s3, l: i4 } = dt2(this.Bh | 0, this.Bl | 0, s3 | 0, i4 | 0), { h: f8, l: a3 } = dt2(this.Ch | 0, this.Cl | 0, f8 | 0, a3 | 0), { h: l8, l: c7 } = dt2(this.Dh | 0, this.Dl | 0, l8 | 0, c7 | 0), { h: u3, l: h6 } = dt2(this.Eh | 0, this.El | 0, u3 | 0, h6 | 0), { h: g4, l: w5 } = dt2(this.Fh | 0, this.Fl | 0, g4 | 0, w5 | 0), { h: y6, l: x6 } = dt2(this.Gh | 0, this.Gl | 0, y6 | 0, x6 | 0), { h: R4, l: M5 } = dt2(this.Hh | 0, this.Hl | 0, R4 | 0, M5 | 0), this.set(r3, o5, s3, i4, f8, a3, l8, c7, u3, h6, g4, w5, y6, x6, R4, M5);
  }
  roundClean() {
    ut2(Tt2, Rt2);
  }
  destroy() {
    ut2(this.buffer), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Gi = class extends cn {
  constructor() {
    super(48), this.Ah = W2[0] | 0, this.Al = W2[1] | 0, this.Bh = W2[2] | 0, this.Bl = W2[3] | 0, this.Ch = W2[4] | 0, this.Cl = W2[5] | 0, this.Dh = W2[6] | 0, this.Dl = W2[7] | 0, this.Eh = W2[8] | 0, this.El = W2[9] | 0, this.Fh = W2[10] | 0, this.Fl = W2[11] | 0, this.Gh = W2[12] | 0, this.Gl = W2[13] | 0, this.Hh = W2[14] | 0, this.Hl = W2[15] | 0;
  }
};
var X = Uint32Array.from([573645204, 4230739756, 2673172387, 3360449730, 596883563, 1867755857, 2520282905, 1497426621, 2519219938, 2827943907, 3193839141, 1401305490, 721525244, 746961066, 246885852, 2177182882]);
var Zi = class extends cn {
  constructor() {
    super(32), this.Ah = X[0] | 0, this.Al = X[1] | 0, this.Bh = X[2] | 0, this.Bl = X[3] | 0, this.Ch = X[4] | 0, this.Cl = X[5] | 0, this.Dh = X[6] | 0, this.Dl = X[7] | 0, this.Eh = X[8] | 0, this.El = X[9] | 0, this.Fh = X[10] | 0, this.Fl = X[11] | 0, this.Gh = X[12] | 0, this.Gl = X[13] | 0, this.Hh = X[14] | 0, this.Hl = X[15] | 0;
  }
};
var Ae2 = ae(() => new Ki());
var Wi = ae(() => new cn());
var Yi = ae(() => new Gi());
var Xi = ae(() => new Zi());
var Ji = Uint8Array.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9]);
var F = Uint32Array.from([4089235720, 1779033703, 2227873595, 3144134277, 4271175723, 1013904242, 1595750129, 2773480762, 2917565137, 1359893119, 725511199, 2600822924, 4215389547, 528734635, 327033209, 1541459225]);
var N10 = new Uint32Array(32);
function $t2(t, e2, n5, r3, o5, s3) {
  const i4 = o5[s3], f8 = o5[s3 + 1];
  let a3 = N10[2 * t], l8 = N10[2 * t + 1], c7 = N10[2 * e2], u3 = N10[2 * e2 + 1], h6 = N10[2 * n5], g4 = N10[2 * n5 + 1], w5 = N10[2 * r3], y6 = N10[2 * r3 + 1], x6 = tn(a3, c7, i4);
  l8 = en2(x6, l8, u3, f8), a3 = x6 | 0, { Dh: y6, Dl: w5 } = { Dh: y6 ^ l8, Dl: w5 ^ a3 }, { Dh: y6, Dl: w5 } = { Dh: bi(y6, w5), Dl: yi(y6) }, { h: g4, l: h6 } = dt2(g4, h6, y6, w5), { Bh: u3, Bl: c7 } = { Bh: u3 ^ g4, Bl: c7 ^ h6 }, { Bh: u3, Bl: c7 } = { Bh: At(u3, c7, 24), Bl: St2(u3, c7, 24) }, N10[2 * t] = a3, N10[2 * t + 1] = l8, N10[2 * e2] = c7, N10[2 * e2 + 1] = u3, N10[2 * n5] = h6, N10[2 * n5 + 1] = g4, N10[2 * r3] = w5, N10[2 * r3 + 1] = y6;
}
function Ct(t, e2, n5, r3, o5, s3) {
  const i4 = o5[s3], f8 = o5[s3 + 1];
  let a3 = N10[2 * t], l8 = N10[2 * t + 1], c7 = N10[2 * e2], u3 = N10[2 * e2 + 1], h6 = N10[2 * n5], g4 = N10[2 * n5 + 1], w5 = N10[2 * r3], y6 = N10[2 * r3 + 1], x6 = tn(a3, c7, i4);
  l8 = en2(x6, l8, u3, f8), a3 = x6 | 0, { Dh: y6, Dl: w5 } = { Dh: y6 ^ l8, Dl: w5 ^ a3 }, { Dh: y6, Dl: w5 } = { Dh: At(y6, w5, 16), Dl: St2(y6, w5, 16) }, { h: g4, l: h6 } = dt2(g4, h6, y6, w5), { Bh: u3, Bl: c7 } = { Bh: u3 ^ g4, Bl: c7 ^ h6 }, { Bh: u3, Bl: c7 } = { Bh: se(u3, c7, 63), Bl: ie(u3, c7, 63) }, N10[2 * t] = a3, N10[2 * t + 1] = l8, N10[2 * e2] = c7, N10[2 * e2 + 1] = u3, N10[2 * n5] = h6, N10[2 * n5 + 1] = g4, N10[2 * r3] = w5, N10[2 * r3 + 1] = y6;
}
function Qi(t, e2 = {}, n5, r3, o5) {
  if (mt(n5), t < 0 || t > n5)
    throw new Error("outputLen bigger than keyLen");
  const { key: s3, salt: i4, personalization: f8 } = e2;
  if (s3 !== void 0 && (s3.length < 1 || s3.length > n5))
    throw new Error("key length must be undefined or 1.." + n5);
  if (i4 !== void 0 && i4.length !== r3)
    throw new Error("salt must be undefined or " + r3);
  if (f8 !== void 0 && f8.length !== o5)
    throw new Error("personalization must be undefined or " + o5);
}
var tf = class extends Ie2 {
  constructor(e2, n5) {
    super(), this.finished = false, this.destroyed = false, this.length = 0, this.pos = 0, mt(e2), mt(n5), this.blockLen = e2, this.outputLen = n5, this.buffer = new Uint8Array(e2), this.buffer32 = fe2(this.buffer);
  }
  update(e2) {
    Nt2(this), e2 = ht2(e2), at(e2);
    const { blockLen: n5, buffer: r3, buffer32: o5 } = this, s3 = e2.length, i4 = e2.byteOffset, f8 = e2.buffer;
    for (let a3 = 0; a3 < s3; ) {
      this.pos === n5 && (Ot2(o5), this.compress(o5, 0, false), Ot2(o5), this.pos = 0);
      const l8 = Math.min(n5 - this.pos, s3 - a3), c7 = i4 + a3;
      if (l8 === n5 && !(c7 % 4) && a3 + l8 < s3) {
        const u3 = new Uint32Array(f8, c7, Math.floor((s3 - a3) / 4));
        Ot2(u3);
        for (let h6 = 0; a3 + n5 < s3; h6 += o5.length, a3 += n5)
          this.length += n5, this.compress(u3, h6, false);
        Ot2(u3);
        continue;
      }
      r3.set(e2.subarray(a3, a3 + l8), this.pos), this.pos += l8, this.length += l8, a3 += l8;
    }
    return this;
  }
  digestInto(e2) {
    Nt2(this), on2(e2, this);
    const { pos: n5, buffer32: r3 } = this;
    this.finished = true, ut2(this.buffer.subarray(n5)), Ot2(r3), this.compress(r3, 0, true), Ot2(r3);
    const o5 = fe2(e2);
    this.get().forEach((s3, i4) => o5[i4] = wt2(s3));
  }
  digest() {
    const { buffer: e2, outputLen: n5 } = this;
    this.digestInto(e2);
    const r3 = e2.slice(0, n5);
    return this.destroy(), r3;
  }
  _cloneInto(e2) {
    const { buffer: n5, length: r3, finished: o5, destroyed: s3, outputLen: i4, pos: f8 } = this;
    return e2 || (e2 = new this.constructor({ dkLen: i4 })), e2.set(...this.get()), e2.buffer.set(n5), e2.destroyed = s3, e2.finished = o5, e2.length = r3, e2.pos = f8, e2.outputLen = i4, e2;
  }
  clone() {
    return this._cloneInto();
  }
};
var ef = class extends tf {
  constructor(e2 = {}) {
    const n5 = e2.dkLen === void 0 ? 64 : e2.dkLen;
    super(128, n5), this.v0l = F[0] | 0, this.v0h = F[1] | 0, this.v1l = F[2] | 0, this.v1h = F[3] | 0, this.v2l = F[4] | 0, this.v2h = F[5] | 0, this.v3l = F[6] | 0, this.v3h = F[7] | 0, this.v4l = F[8] | 0, this.v4h = F[9] | 0, this.v5l = F[10] | 0, this.v5h = F[11] | 0, this.v6l = F[12] | 0, this.v6h = F[13] | 0, this.v7l = F[14] | 0, this.v7h = F[15] | 0, Qi(n5, e2, 64, 16, 16);
    let { key: r3, personalization: o5, salt: s3 } = e2, i4 = 0;
    if (r3 !== void 0 && (r3 = ht2(r3), i4 = r3.length), this.v0l ^= this.outputLen | i4 << 8 | 65536 | 1 << 24, s3 !== void 0) {
      s3 = ht2(s3);
      const f8 = fe2(s3);
      this.v4l ^= wt2(f8[0]), this.v4h ^= wt2(f8[1]), this.v5l ^= wt2(f8[2]), this.v5h ^= wt2(f8[3]);
    }
    if (o5 !== void 0) {
      o5 = ht2(o5);
      const f8 = fe2(o5);
      this.v6l ^= wt2(f8[0]), this.v6h ^= wt2(f8[1]), this.v7l ^= wt2(f8[2]), this.v7h ^= wt2(f8[3]);
    }
    if (r3 !== void 0) {
      const f8 = new Uint8Array(this.blockLen);
      f8.set(r3), this.update(f8);
    }
  }
  get() {
    let { v0l: e2, v0h: n5, v1l: r3, v1h: o5, v2l: s3, v2h: i4, v3l: f8, v3h: a3, v4l: l8, v4h: c7, v5l: u3, v5h: h6, v6l: g4, v6h: w5, v7l: y6, v7h: x6 } = this;
    return [e2, n5, r3, o5, s3, i4, f8, a3, l8, c7, u3, h6, g4, w5, y6, x6];
  }
  set(e2, n5, r3, o5, s3, i4, f8, a3, l8, c7, u3, h6, g4, w5, y6, x6) {
    this.v0l = e2 | 0, this.v0h = n5 | 0, this.v1l = r3 | 0, this.v1h = o5 | 0, this.v2l = s3 | 0, this.v2h = i4 | 0, this.v3l = f8 | 0, this.v3h = a3 | 0, this.v4l = l8 | 0, this.v4h = c7 | 0, this.v5l = u3 | 0, this.v5h = h6 | 0, this.v6l = g4 | 0, this.v6h = w5 | 0, this.v7l = y6 | 0, this.v7h = x6 | 0;
  }
  compress(e2, n5, r3) {
    this.get().forEach((a3, l8) => N10[l8] = a3), N10.set(F, 16);
    let { h: o5, l: s3 } = mr2(BigInt(this.length));
    N10[24] = F[8] ^ s3, N10[25] = F[9] ^ o5, r3 && (N10[28] = ~N10[28], N10[29] = ~N10[29]);
    let i4 = 0;
    const f8 = Ji;
    for (let a3 = 0; a3 < 12; a3++)
      $t2(0, 4, 8, 12, e2, n5 + 2 * f8[i4++]), Ct(0, 4, 8, 12, e2, n5 + 2 * f8[i4++]), $t2(1, 5, 9, 13, e2, n5 + 2 * f8[i4++]), Ct(1, 5, 9, 13, e2, n5 + 2 * f8[i4++]), $t2(2, 6, 10, 14, e2, n5 + 2 * f8[i4++]), Ct(2, 6, 10, 14, e2, n5 + 2 * f8[i4++]), $t2(3, 7, 11, 15, e2, n5 + 2 * f8[i4++]), Ct(3, 7, 11, 15, e2, n5 + 2 * f8[i4++]), $t2(0, 5, 10, 15, e2, n5 + 2 * f8[i4++]), Ct(0, 5, 10, 15, e2, n5 + 2 * f8[i4++]), $t2(1, 6, 11, 12, e2, n5 + 2 * f8[i4++]), Ct(1, 6, 11, 12, e2, n5 + 2 * f8[i4++]), $t2(2, 7, 8, 13, e2, n5 + 2 * f8[i4++]), Ct(2, 7, 8, 13, e2, n5 + 2 * f8[i4++]), $t2(3, 4, 9, 14, e2, n5 + 2 * f8[i4++]), Ct(3, 4, 9, 14, e2, n5 + 2 * f8[i4++]);
    this.v0l ^= N10[0] ^ N10[16], this.v0h ^= N10[1] ^ N10[17], this.v1l ^= N10[2] ^ N10[18], this.v1h ^= N10[3] ^ N10[19], this.v2l ^= N10[4] ^ N10[20], this.v2h ^= N10[5] ^ N10[21], this.v3l ^= N10[6] ^ N10[22], this.v3h ^= N10[7] ^ N10[23], this.v4l ^= N10[8] ^ N10[24], this.v4h ^= N10[9] ^ N10[25], this.v5l ^= N10[10] ^ N10[26], this.v5h ^= N10[11] ^ N10[27], this.v6l ^= N10[12] ^ N10[28], this.v6h ^= N10[13] ^ N10[29], this.v7l ^= N10[14] ^ N10[30], this.v7h ^= N10[15] ^ N10[31], ut2(N10);
  }
  destroy() {
    this.destroyed = true, ut2(this.buffer32), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var nf = Ui((t) => new ef(t));
var rf = "https://rpc.walletconnect.org/v1";
function an(t) {
  const e2 = `Ethereum Signed Message:
${t.length}`, n5 = new TextEncoder().encode(e2 + t);
  return "0x" + Buffer.from(Hi(n5)).toString("hex");
}
async function Cr2(t, e2, n5, r3, o5, s3) {
  switch (n5.t) {
    case "eip191":
      return await Lr2(t, e2, n5.s);
    case "eip1271":
      return await jr2(t, e2, n5.s, r3, o5, s3);
    default:
      throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${n5.t}`);
  }
}
async function Lr2(t, e2, n5) {
  return (await recoverAddress({ hash: an(e2), signature: n5 })).toLowerCase() === t.toLowerCase();
}
async function jr2(t, e2, n5, r3, o5, s3) {
  const i4 = Fe(r3);
  if (!i4.namespace || !i4.reference)
    throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r3}`);
  try {
    const f8 = "0x1626ba7e", a3 = "0000000000000000000000000000000000000000000000000000000000000040", l8 = n5.substring(2), c7 = (l8.length / 2).toString(16).padStart(64, "0"), u3 = (e2.startsWith("0x") ? e2 : an(e2)).substring(2), h6 = f8 + u3 + a3 + c7 + l8, g4 = await fetch(`${s3 || rf}/?chainId=${r3}&projectId=${o5}`, { headers: { "Content-Type": "application/json" }, method: "POST", body: JSON.stringify({ id: of(), jsonrpc: "2.0", method: "eth_call", params: [{ to: t, data: h6 }, "latest"] }) }), { result: w5 } = await g4.json();
    return w5 ? w5.slice(0, f8.length).toLowerCase() === f8.toLowerCase() : false;
  } catch (f8) {
    return console.error("isValidEip1271Signature: ", f8), false;
  }
}
function of() {
  return Date.now() + Math.floor(Math.random() * 1e3);
}
function sf(t) {
  const e2 = atob(t), n5 = new Uint8Array(e2.length);
  for (let i4 = 0; i4 < e2.length; i4++)
    n5[i4] = e2.charCodeAt(i4);
  const r3 = n5[0];
  if (r3 === 0)
    throw new Error("No signatures found");
  const o5 = 1 + r3 * 64;
  if (n5.length < o5)
    throw new Error("Transaction data too short for claimed signature count");
  if (n5.length < 100)
    throw new Error("Transaction too short");
  const s3 = Buffer.from(t, "base64").slice(1, 65);
  return esm_default2.encode(s3);
}
function ff(t) {
  const e2 = new Uint8Array(Buffer.from(t, "base64")), n5 = Array.from("TransactionData::").map((s3) => s3.charCodeAt(0)), r3 = new Uint8Array(n5.length + e2.length);
  r3.set(n5), r3.set(e2, n5.length);
  const o5 = nf(r3, { dkLen: 32 });
  return esm_default2.encode(o5);
}
function cf(t) {
  const e2 = new Uint8Array(Ae2(kr2(t)));
  return esm_default2.encode(e2);
}
function kr2(t) {
  if (t instanceof Uint8Array)
    return t;
  if (Array.isArray(t))
    return new Uint8Array(t);
  if (typeof t == "object" && t != null && t.data)
    return new Uint8Array(Object.values(t.data));
  if (typeof t == "object" && t)
    return new Uint8Array(Object.values(t));
  throw new Error("getNearUint8ArrayFromBytes: Unexpected result type from bytes array");
}
function af(t) {
  const e2 = Buffer.from(t, "base64"), n5 = decode2(e2).txn;
  if (!n5)
    throw new Error("Invalid signed transaction: missing 'txn' field");
  const r3 = encode4(n5), o5 = Buffer.from("TX"), s3 = Buffer.concat([o5, Buffer.from(r3)]), i4 = Xi(s3);
  return base32.encode(i4).replace(/=+$/, "");
}
function un(t) {
  const e2 = [];
  let n5 = BigInt(t);
  for (; n5 >= BigInt(128); )
    e2.push(Number(n5 & BigInt(127) | BigInt(128))), n5 >>= BigInt(7);
  return e2.push(Number(n5)), Buffer.from(e2);
}
function uf(t) {
  const e2 = Buffer.from(t.signed.bodyBytes, "base64"), n5 = Buffer.from(t.signed.authInfoBytes, "base64"), r3 = Buffer.from(t.signature.signature, "base64"), o5 = [];
  o5.push(Buffer.from([10])), o5.push(un(e2.length)), o5.push(e2), o5.push(Buffer.from([18])), o5.push(un(n5.length)), o5.push(n5), o5.push(Buffer.from([26])), o5.push(un(r3.length)), o5.push(r3);
  const s3 = Buffer.concat(o5), i4 = Ae2(s3);
  return Buffer.from(i4).toString("hex").toUpperCase();
}
var lf = Object.defineProperty;
var df = Object.defineProperties;
var hf = Object.getOwnPropertyDescriptors;
var Pr2 = Object.getOwnPropertySymbols;
var pf = Object.prototype.hasOwnProperty;
var gf = Object.prototype.propertyIsEnumerable;
var Hr2 = (t, e2, n5) => e2 in t ? lf(t, e2, { enumerable: true, configurable: true, writable: true, value: n5 }) : t[e2] = n5;
var ln = (t, e2) => {
  for (var n5 in e2 || (e2 = {}))
    pf.call(e2, n5) && Hr2(t, n5, e2[n5]);
  if (Pr2)
    for (var n5 of Pr2(e2))
      gf.call(e2, n5) && Hr2(t, n5, e2[n5]);
  return t;
};
var Dr2 = (t, e2) => df(t, hf(e2));
var bf = "did:pkh:";
var Se2 = (t) => t == null ? void 0 : t.split(":");
var Mr2 = (t) => {
  const e2 = t && Se2(t);
  if (e2)
    return t.includes(bf) ? e2[3] : e2[1];
};
var Vr2 = (t) => {
  const e2 = t && Se2(t);
  if (e2)
    return e2[2] + ":" + e2[3];
};
var dn = (t) => {
  const e2 = t && Se2(t);
  if (e2)
    return e2.pop();
};
async function yf(t) {
  const { cacao: e2, projectId: n5 } = t, { s: r3, p: o5 } = e2, s3 = qr2(o5, o5.iss), i4 = dn(o5.iss);
  return await Cr2(i4, s3, r3, Vr2(o5.iss), n5);
}
var qr2 = (t, e2) => {
  const n5 = `${t.domain} wants you to sign in with your Ethereum account:`, r3 = dn(e2);
  if (!t.aud && !t.uri)
    throw new Error("Either `aud` or `uri` is required to construct the message");
  let o5 = t.statement || void 0;
  const s3 = `URI: ${t.aud || t.uri}`, i4 = `Version: ${t.version}`, f8 = `Chain ID: ${Mr2(e2)}`, a3 = `Nonce: ${t.nonce}`, l8 = `Issued At: ${t.iat}`, c7 = t.exp ? `Expiration Time: ${t.exp}` : void 0, u3 = t.nbf ? `Not Before: ${t.nbf}` : void 0, h6 = t.requestId ? `Request ID: ${t.requestId}` : void 0, g4 = t.resources ? `Resources:${t.resources.map((y6) => `
- ${y6}`).join("")}` : void 0, w5 = Oe2(t.resources);
  if (w5) {
    const y6 = Lt2(w5);
    o5 = gn2(o5, y6);
  }
  return [n5, r3, "", o5, "", s3, i4, f8, a3, l8, c7, u3, h6, g4].filter((y6) => y6 != null).join(`
`);
};
function Gr2(t) {
  return Buffer.from(JSON.stringify(t)).toString("base64");
}
function Zr2(t) {
  return JSON.parse(Buffer.from(t, "base64").toString("utf-8"));
}
function bt2(t) {
  if (!t)
    throw new Error("No recap provided, value is undefined");
  if (!t.att)
    throw new Error("No `att` property found");
  const e2 = Object.keys(t.att);
  if (!(e2 != null && e2.length))
    throw new Error("No resources found in `att` property");
  e2.forEach((n5) => {
    const r3 = t.att[n5];
    if (Array.isArray(r3))
      throw new Error(`Resource must be an object: ${n5}`);
    if (typeof r3 != "object")
      throw new Error(`Resource must be an object: ${n5}`);
    if (!Object.keys(r3).length)
      throw new Error(`Resource object is empty: ${n5}`);
    Object.keys(r3).forEach((o5) => {
      const s3 = r3[o5];
      if (!Array.isArray(s3))
        throw new Error(`Ability limits ${o5} must be an array of objects, found: ${s3}`);
      if (!s3.length)
        throw new Error(`Value of ${o5} is empty array, must be an array with objects`);
      s3.forEach((i4) => {
        if (typeof i4 != "object")
          throw new Error(`Ability limits (${o5}) must be an array of objects, found: ${i4}`);
      });
    });
  });
}
function Wr2(t, e2, n5, r3 = {}) {
  return n5 == null ? void 0 : n5.sort((o5, s3) => o5.localeCompare(s3)), { att: { [t]: hn(e2, n5, r3) } };
}
function hn(t, e2, n5 = {}) {
  e2 = e2 == null ? void 0 : e2.sort((o5, s3) => o5.localeCompare(s3));
  const r3 = e2.map((o5) => ({ [`${t}/${o5}`]: [n5] }));
  return Object.assign({}, ...r3);
}
function Ne2(t) {
  return bt2(t), `urn:recap:${Gr2(t).replace(/=/g, "")}`;
}
function Lt2(t) {
  const e2 = Zr2(t.replace("urn:recap:", ""));
  return bt2(e2), e2;
}
function Ef(t, e2, n5) {
  const r3 = Wr2(t, e2, n5);
  return Ne2(r3);
}
function pn(t) {
  return t && t.includes("urn:recap:");
}
function Bf(t, e2) {
  const n5 = Lt2(t), r3 = Lt2(e2), o5 = Xr2(n5, r3);
  return Ne2(o5);
}
function Xr2(t, e2) {
  bt2(t), bt2(e2);
  const n5 = Object.keys(t.att).concat(Object.keys(e2.att)).sort((o5, s3) => o5.localeCompare(s3)), r3 = { att: {} };
  return n5.forEach((o5) => {
    var s3, i4;
    Object.keys(((s3 = t.att) == null ? void 0 : s3[o5]) || {}).concat(Object.keys(((i4 = e2.att) == null ? void 0 : i4[o5]) || {})).sort((f8, a3) => f8.localeCompare(a3)).forEach((f8) => {
      var a3, l8;
      r3.att[o5] = Dr2(ln({}, r3.att[o5]), { [f8]: ((a3 = t.att[o5]) == null ? void 0 : a3[f8]) || ((l8 = e2.att[o5]) == null ? void 0 : l8[f8]) });
    });
  }), r3;
}
function gn2(t = "", e2) {
  bt2(e2);
  const n5 = "I further authorize the stated URI to perform the following actions on my behalf: ";
  if (t.includes(n5))
    return t;
  const r3 = [];
  let o5 = 0;
  Object.keys(e2.att).forEach((f8) => {
    const a3 = Object.keys(e2.att[f8]).map((u3) => ({ ability: u3.split("/")[0], action: u3.split("/")[1] }));
    a3.sort((u3, h6) => u3.action.localeCompare(h6.action));
    const l8 = {};
    a3.forEach((u3) => {
      l8[u3.ability] || (l8[u3.ability] = []), l8[u3.ability].push(u3.action);
    });
    const c7 = Object.keys(l8).map((u3) => (o5++, `(${o5}) '${u3}': '${l8[u3].join("', '")}' for '${f8}'.`));
    r3.push(c7.join(", ").replace(".,", "."));
  });
  const s3 = r3.join(" "), i4 = `${n5}${s3}`;
  return `${t ? t + " " : ""}${i4}`;
}
function If(t) {
  var e2;
  const n5 = Lt2(t);
  bt2(n5);
  const r3 = (e2 = n5.att) == null ? void 0 : e2.eip155;
  return r3 ? Object.keys(r3).map((o5) => o5.split("/")[1]) : [];
}
function Af(t) {
  const e2 = Lt2(t);
  bt2(e2);
  const n5 = [];
  return Object.values(e2.att).forEach((r3) => {
    Object.values(r3).forEach((o5) => {
      var s3;
      (s3 = o5 == null ? void 0 : o5[0]) != null && s3.chains && n5.push(o5[0].chains);
    });
  }), [...new Set(n5.flat())];
}
function Oe2(t) {
  if (!t)
    return;
  const e2 = t == null ? void 0 : t[t.length - 1];
  return pn(e2) ? e2 : void 0;
}
function Qr2(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function bn2(t) {
  if (typeof t != "boolean")
    throw new Error(`boolean expected, not ${t}`);
}
function yn2(t) {
  if (!Number.isSafeInteger(t) || t < 0)
    throw new Error("positive integer expected, got " + t);
}
function nt2(t, ...e2) {
  if (!Qr2(t))
    throw new Error("Uint8Array expected");
  if (e2.length > 0 && !e2.includes(t.length))
    throw new Error("Uint8Array expected of length " + e2 + ", got length=" + t.length);
}
function to2(t, e2 = true) {
  if (t.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e2 && t.finished)
    throw new Error("Hash#digest() has already been called");
}
function Sf(t, e2) {
  nt2(t);
  const n5 = e2.outputLen;
  if (t.length < n5)
    throw new Error("digestInto() expects output buffer of length at least " + n5);
}
function jt2(t) {
  return new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
}
function Wt2(...t) {
  for (let e2 = 0; e2 < t.length; e2++)
    t[e2].fill(0);
}
function Nf(t) {
  return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
var Of = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Uf(t) {
  if (typeof t != "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t));
}
function mn2(t) {
  if (typeof t == "string")
    t = Uf(t);
  else if (Qr2(t))
    t = wn(t);
  else
    throw new Error("Uint8Array expected, got " + typeof t);
  return t;
}
function _f(t, e2) {
  if (e2 == null || typeof e2 != "object")
    throw new Error("options must be defined");
  return Object.assign(t, e2);
}
function Tf(t, e2) {
  if (t.length !== e2.length)
    return false;
  let n5 = 0;
  for (let r3 = 0; r3 < t.length; r3++)
    n5 |= t[r3] ^ e2[r3];
  return n5 === 0;
}
var Rf = (t, e2) => {
  function n5(r3, ...o5) {
    if (nt2(r3), !Of)
      throw new Error("Non little-endian hardware is not yet supported");
    if (t.nonceLength !== void 0) {
      const c7 = o5[0];
      if (!c7)
        throw new Error("nonce / iv required");
      t.varSizeNonce ? nt2(c7) : nt2(c7, t.nonceLength);
    }
    const s3 = t.tagLength;
    s3 && o5[1] !== void 0 && nt2(o5[1]);
    const i4 = e2(r3, ...o5), f8 = (c7, u3) => {
      if (u3 !== void 0) {
        if (c7 !== 2)
          throw new Error("cipher output not supported");
        nt2(u3);
      }
    };
    let a3 = false;
    return { encrypt(c7, u3) {
      if (a3)
        throw new Error("cannot encrypt() twice with same key + nonce");
      return a3 = true, nt2(c7), f8(i4.encrypt.length, u3), i4.encrypt(c7, u3);
    }, decrypt(c7, u3) {
      if (nt2(c7), s3 && c7.length < s3)
        throw new Error("invalid ciphertext length: smaller than tagLength=" + s3);
      return f8(i4.decrypt.length, u3), i4.decrypt(c7, u3);
    } };
  }
  return Object.assign(n5, t), n5;
};
function eo2(t, e2, n5 = true) {
  if (e2 === void 0)
    return new Uint8Array(t);
  if (e2.length !== t)
    throw new Error("invalid output length, expected " + t + ", got: " + e2.length);
  if (n5 && !Cf(e2))
    throw new Error("invalid output, must be aligned");
  return e2;
}
function no2(t, e2, n5, r3) {
  if (typeof t.setBigUint64 == "function")
    return t.setBigUint64(e2, n5, r3);
  const o5 = BigInt(32), s3 = BigInt(4294967295), i4 = Number(n5 >> o5 & s3), f8 = Number(n5 & s3), a3 = r3 ? 4 : 0, l8 = r3 ? 0 : 4;
  t.setUint32(e2 + a3, i4, r3), t.setUint32(e2 + l8, f8, r3);
}
function $f(t, e2, n5) {
  bn2(n5);
  const r3 = new Uint8Array(16), o5 = Nf(r3);
  return no2(o5, 0, BigInt(e2), n5), no2(o5, 8, BigInt(t), n5), r3;
}
function Cf(t) {
  return t.byteOffset % 4 === 0;
}
function wn(t) {
  return Uint8Array.from(t);
}
var ro2 = (t) => Uint8Array.from(t.split("").map((e2) => e2.charCodeAt(0)));
var Lf = ro2("expand 16-byte k");
var jf = ro2("expand 32-byte k");
var kf = jt2(Lf);
var Pf = jt2(jf);
function D2(t, e2) {
  return t << e2 | t >>> 32 - e2;
}
function xn2(t) {
  return t.byteOffset % 4 === 0;
}
var Ue2 = 64;
var Hf = 16;
var oo2 = 2 ** 32 - 1;
var so2 = new Uint32Array();
function Df(t, e2, n5, r3, o5, s3, i4, f8) {
  const a3 = o5.length, l8 = new Uint8Array(Ue2), c7 = jt2(l8), u3 = xn2(o5) && xn2(s3), h6 = u3 ? jt2(o5) : so2, g4 = u3 ? jt2(s3) : so2;
  for (let w5 = 0; w5 < a3; i4++) {
    if (t(e2, n5, r3, c7, i4, f8), i4 >= oo2)
      throw new Error("arx: counter overflow");
    const y6 = Math.min(Ue2, a3 - w5);
    if (u3 && y6 === Ue2) {
      const x6 = w5 / 4;
      if (w5 % 4 !== 0)
        throw new Error("arx: invalid block position");
      for (let R4 = 0, M5; R4 < Hf; R4++)
        M5 = x6 + R4, g4[M5] = h6[M5] ^ c7[R4];
      w5 += Ue2;
      continue;
    }
    for (let x6 = 0, R4; x6 < y6; x6++)
      R4 = w5 + x6, s3[R4] = o5[R4] ^ l8[x6];
    w5 += y6;
  }
}
function Mf(t, e2) {
  const { allowShortKeys: n5, extendNonceFn: r3, counterLength: o5, counterRight: s3, rounds: i4 } = _f({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, e2);
  if (typeof t != "function")
    throw new Error("core must be a function");
  return yn2(o5), yn2(i4), bn2(s3), bn2(n5), (f8, a3, l8, c7, u3 = 0) => {
    nt2(f8), nt2(a3), nt2(l8);
    const h6 = l8.length;
    if (c7 === void 0 && (c7 = new Uint8Array(h6)), nt2(c7), yn2(u3), u3 < 0 || u3 >= oo2)
      throw new Error("arx: counter overflow");
    if (c7.length < h6)
      throw new Error(`arx: output (${c7.length}) is shorter than data (${h6})`);
    const g4 = [];
    let w5 = f8.length, y6, x6;
    if (w5 === 32)
      g4.push(y6 = wn(f8)), x6 = Pf;
    else if (w5 === 16 && n5)
      y6 = new Uint8Array(32), y6.set(f8), y6.set(f8, 16), x6 = kf, g4.push(y6);
    else
      throw new Error(`arx: invalid 32-byte key, got length=${w5}`);
    xn2(a3) || g4.push(a3 = wn(a3));
    const R4 = jt2(y6);
    if (r3) {
      if (a3.length !== 24)
        throw new Error("arx: extended nonce must be 24 bytes");
      r3(x6, R4, jt2(a3.subarray(0, 16)), R4), a3 = a3.subarray(16);
    }
    const M5 = 16 - o5;
    if (M5 !== a3.length)
      throw new Error(`arx: nonce must be ${M5} or 16 bytes`);
    if (M5 !== 12) {
      const V4 = new Uint8Array(12);
      V4.set(a3, s3 ? 0 : 12 - a3.length), a3 = V4, g4.push(a3);
    }
    const L5 = jt2(a3);
    return Df(t, x6, R4, L5, l8, c7, u3, i4), Wt2(...g4), c7;
  };
}
var G2 = (t, e2) => t[e2++] & 255 | (t[e2++] & 255) << 8;
var Vf = class {
  constructor(e2) {
    this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = false, e2 = mn2(e2), nt2(e2, 32);
    const n5 = G2(e2, 0), r3 = G2(e2, 2), o5 = G2(e2, 4), s3 = G2(e2, 6), i4 = G2(e2, 8), f8 = G2(e2, 10), a3 = G2(e2, 12), l8 = G2(e2, 14);
    this.r[0] = n5 & 8191, this.r[1] = (n5 >>> 13 | r3 << 3) & 8191, this.r[2] = (r3 >>> 10 | o5 << 6) & 7939, this.r[3] = (o5 >>> 7 | s3 << 9) & 8191, this.r[4] = (s3 >>> 4 | i4 << 12) & 255, this.r[5] = i4 >>> 1 & 8190, this.r[6] = (i4 >>> 14 | f8 << 2) & 8191, this.r[7] = (f8 >>> 11 | a3 << 5) & 8065, this.r[8] = (a3 >>> 8 | l8 << 8) & 8191, this.r[9] = l8 >>> 5 & 127;
    for (let c7 = 0; c7 < 8; c7++)
      this.pad[c7] = G2(e2, 16 + 2 * c7);
  }
  process(e2, n5, r3 = false) {
    const o5 = r3 ? 0 : 2048, { h: s3, r: i4 } = this, f8 = i4[0], a3 = i4[1], l8 = i4[2], c7 = i4[3], u3 = i4[4], h6 = i4[5], g4 = i4[6], w5 = i4[7], y6 = i4[8], x6 = i4[9], R4 = G2(e2, n5 + 0), M5 = G2(e2, n5 + 2), L5 = G2(e2, n5 + 4), V4 = G2(e2, n5 + 6), _3 = G2(e2, n5 + 8), k6 = G2(e2, n5 + 10), j5 = G2(e2, n5 + 12), $4 = G2(e2, n5 + 14);
    let d5 = s3[0] + (R4 & 8191), m4 = s3[1] + ((R4 >>> 13 | M5 << 3) & 8191), p5 = s3[2] + ((M5 >>> 10 | L5 << 6) & 8191), b5 = s3[3] + ((L5 >>> 7 | V4 << 9) & 8191), v6 = s3[4] + ((V4 >>> 4 | _3 << 12) & 8191), B4 = s3[5] + (_3 >>> 1 & 8191), E6 = s3[6] + ((_3 >>> 14 | k6 << 2) & 8191), I5 = s3[7] + ((k6 >>> 11 | j5 << 5) & 8191), S5 = s3[8] + ((j5 >>> 8 | $4 << 8) & 8191), O7 = s3[9] + ($4 >>> 5 | o5), A5 = 0, T5 = A5 + d5 * f8 + m4 * (5 * x6) + p5 * (5 * y6) + b5 * (5 * w5) + v6 * (5 * g4);
    A5 = T5 >>> 13, T5 &= 8191, T5 += B4 * (5 * h6) + E6 * (5 * u3) + I5 * (5 * c7) + S5 * (5 * l8) + O7 * (5 * a3), A5 += T5 >>> 13, T5 &= 8191;
    let U4 = A5 + d5 * a3 + m4 * f8 + p5 * (5 * x6) + b5 * (5 * y6) + v6 * (5 * w5);
    A5 = U4 >>> 13, U4 &= 8191, U4 += B4 * (5 * g4) + E6 * (5 * h6) + I5 * (5 * u3) + S5 * (5 * c7) + O7 * (5 * l8), A5 += U4 >>> 13, U4 &= 8191;
    let C5 = A5 + d5 * l8 + m4 * a3 + p5 * f8 + b5 * (5 * x6) + v6 * (5 * y6);
    A5 = C5 >>> 13, C5 &= 8191, C5 += B4 * (5 * w5) + E6 * (5 * g4) + I5 * (5 * h6) + S5 * (5 * u3) + O7 * (5 * c7), A5 += C5 >>> 13, C5 &= 8191;
    let H3 = A5 + d5 * c7 + m4 * l8 + p5 * a3 + b5 * f8 + v6 * (5 * x6);
    A5 = H3 >>> 13, H3 &= 8191, H3 += B4 * (5 * y6) + E6 * (5 * w5) + I5 * (5 * g4) + S5 * (5 * h6) + O7 * (5 * u3), A5 += H3 >>> 13, H3 &= 8191;
    let q2 = A5 + d5 * u3 + m4 * c7 + p5 * l8 + b5 * a3 + v6 * f8;
    A5 = q2 >>> 13, q2 &= 8191, q2 += B4 * (5 * x6) + E6 * (5 * y6) + I5 * (5 * w5) + S5 * (5 * g4) + O7 * (5 * h6), A5 += q2 >>> 13, q2 &= 8191;
    let P6 = A5 + d5 * h6 + m4 * u3 + p5 * c7 + b5 * l8 + v6 * a3;
    A5 = P6 >>> 13, P6 &= 8191, P6 += B4 * f8 + E6 * (5 * x6) + I5 * (5 * y6) + S5 * (5 * w5) + O7 * (5 * g4), A5 += P6 >>> 13, P6 &= 8191;
    let K7 = A5 + d5 * g4 + m4 * h6 + p5 * u3 + b5 * c7 + v6 * l8;
    A5 = K7 >>> 13, K7 &= 8191, K7 += B4 * a3 + E6 * f8 + I5 * (5 * x6) + S5 * (5 * y6) + O7 * (5 * w5), A5 += K7 >>> 13, K7 &= 8191;
    let et = A5 + d5 * w5 + m4 * g4 + p5 * h6 + b5 * u3 + v6 * c7;
    A5 = et >>> 13, et &= 8191, et += B4 * l8 + E6 * a3 + I5 * f8 + S5 * (5 * x6) + O7 * (5 * y6), A5 += et >>> 13, et &= 8191;
    let Z3 = A5 + d5 * y6 + m4 * w5 + p5 * g4 + b5 * h6 + v6 * u3;
    A5 = Z3 >>> 13, Z3 &= 8191, Z3 += B4 * c7 + E6 * l8 + I5 * a3 + S5 * f8 + O7 * (5 * x6), A5 += Z3 >>> 13, Z3 &= 8191;
    let z4 = A5 + d5 * x6 + m4 * y6 + p5 * w5 + b5 * g4 + v6 * h6;
    A5 = z4 >>> 13, z4 &= 8191, z4 += B4 * u3 + E6 * c7 + I5 * l8 + S5 * a3 + O7 * f8, A5 += z4 >>> 13, z4 &= 8191, A5 = (A5 << 2) + A5 | 0, A5 = A5 + T5 | 0, T5 = A5 & 8191, A5 = A5 >>> 13, U4 += A5, s3[0] = T5, s3[1] = U4, s3[2] = C5, s3[3] = H3, s3[4] = q2, s3[5] = P6, s3[6] = K7, s3[7] = et, s3[8] = Z3, s3[9] = z4;
  }
  finalize() {
    const { h: e2, pad: n5 } = this, r3 = new Uint16Array(10);
    let o5 = e2[1] >>> 13;
    e2[1] &= 8191;
    for (let f8 = 2; f8 < 10; f8++)
      e2[f8] += o5, o5 = e2[f8] >>> 13, e2[f8] &= 8191;
    e2[0] += o5 * 5, o5 = e2[0] >>> 13, e2[0] &= 8191, e2[1] += o5, o5 = e2[1] >>> 13, e2[1] &= 8191, e2[2] += o5, r3[0] = e2[0] + 5, o5 = r3[0] >>> 13, r3[0] &= 8191;
    for (let f8 = 1; f8 < 10; f8++)
      r3[f8] = e2[f8] + o5, o5 = r3[f8] >>> 13, r3[f8] &= 8191;
    r3[9] -= 8192;
    let s3 = (o5 ^ 1) - 1;
    for (let f8 = 0; f8 < 10; f8++)
      r3[f8] &= s3;
    s3 = ~s3;
    for (let f8 = 0; f8 < 10; f8++)
      e2[f8] = e2[f8] & s3 | r3[f8];
    e2[0] = (e2[0] | e2[1] << 13) & 65535, e2[1] = (e2[1] >>> 3 | e2[2] << 10) & 65535, e2[2] = (e2[2] >>> 6 | e2[3] << 7) & 65535, e2[3] = (e2[3] >>> 9 | e2[4] << 4) & 65535, e2[4] = (e2[4] >>> 12 | e2[5] << 1 | e2[6] << 14) & 65535, e2[5] = (e2[6] >>> 2 | e2[7] << 11) & 65535, e2[6] = (e2[7] >>> 5 | e2[8] << 8) & 65535, e2[7] = (e2[8] >>> 8 | e2[9] << 5) & 65535;
    let i4 = e2[0] + n5[0];
    e2[0] = i4 & 65535;
    for (let f8 = 1; f8 < 8; f8++)
      i4 = (e2[f8] + n5[f8] | 0) + (i4 >>> 16) | 0, e2[f8] = i4 & 65535;
    Wt2(r3);
  }
  update(e2) {
    to2(this), e2 = mn2(e2), nt2(e2);
    const { buffer: n5, blockLen: r3 } = this, o5 = e2.length;
    for (let s3 = 0; s3 < o5; ) {
      const i4 = Math.min(r3 - this.pos, o5 - s3);
      if (i4 === r3) {
        for (; r3 <= o5 - s3; s3 += r3)
          this.process(e2, s3);
        continue;
      }
      n5.set(e2.subarray(s3, s3 + i4), this.pos), this.pos += i4, s3 += i4, this.pos === r3 && (this.process(n5, 0, false), this.pos = 0);
    }
    return this;
  }
  destroy() {
    Wt2(this.h, this.r, this.buffer, this.pad);
  }
  digestInto(e2) {
    to2(this), Sf(e2, this), this.finished = true;
    const { buffer: n5, h: r3 } = this;
    let { pos: o5 } = this;
    if (o5) {
      for (n5[o5++] = 1; o5 < 16; o5++)
        n5[o5] = 0;
      this.process(n5, 0, true);
    }
    this.finalize();
    let s3 = 0;
    for (let i4 = 0; i4 < 8; i4++)
      e2[s3++] = r3[i4] >>> 0, e2[s3++] = r3[i4] >>> 8;
    return e2;
  }
  digest() {
    const { buffer: e2, outputLen: n5 } = this;
    this.digestInto(e2);
    const r3 = e2.slice(0, n5);
    return this.destroy(), r3;
  }
};
function qf(t) {
  const e2 = (r3, o5) => t(o5).update(mn2(r3)).digest(), n5 = t(new Uint8Array(32));
  return e2.outputLen = n5.outputLen, e2.blockLen = n5.blockLen, e2.create = (r3) => t(r3), e2;
}
var Kf = qf((t) => new Vf(t));
function Ff(t, e2, n5, r3, o5, s3 = 20) {
  let i4 = t[0], f8 = t[1], a3 = t[2], l8 = t[3], c7 = e2[0], u3 = e2[1], h6 = e2[2], g4 = e2[3], w5 = e2[4], y6 = e2[5], x6 = e2[6], R4 = e2[7], M5 = o5, L5 = n5[0], V4 = n5[1], _3 = n5[2], k6 = i4, j5 = f8, $4 = a3, d5 = l8, m4 = c7, p5 = u3, b5 = h6, v6 = g4, B4 = w5, E6 = y6, I5 = x6, S5 = R4, O7 = M5, A5 = L5, T5 = V4, U4 = _3;
  for (let H3 = 0; H3 < s3; H3 += 2)
    k6 = k6 + m4 | 0, O7 = D2(O7 ^ k6, 16), B4 = B4 + O7 | 0, m4 = D2(m4 ^ B4, 12), k6 = k6 + m4 | 0, O7 = D2(O7 ^ k6, 8), B4 = B4 + O7 | 0, m4 = D2(m4 ^ B4, 7), j5 = j5 + p5 | 0, A5 = D2(A5 ^ j5, 16), E6 = E6 + A5 | 0, p5 = D2(p5 ^ E6, 12), j5 = j5 + p5 | 0, A5 = D2(A5 ^ j5, 8), E6 = E6 + A5 | 0, p5 = D2(p5 ^ E6, 7), $4 = $4 + b5 | 0, T5 = D2(T5 ^ $4, 16), I5 = I5 + T5 | 0, b5 = D2(b5 ^ I5, 12), $4 = $4 + b5 | 0, T5 = D2(T5 ^ $4, 8), I5 = I5 + T5 | 0, b5 = D2(b5 ^ I5, 7), d5 = d5 + v6 | 0, U4 = D2(U4 ^ d5, 16), S5 = S5 + U4 | 0, v6 = D2(v6 ^ S5, 12), d5 = d5 + v6 | 0, U4 = D2(U4 ^ d5, 8), S5 = S5 + U4 | 0, v6 = D2(v6 ^ S5, 7), k6 = k6 + p5 | 0, U4 = D2(U4 ^ k6, 16), I5 = I5 + U4 | 0, p5 = D2(p5 ^ I5, 12), k6 = k6 + p5 | 0, U4 = D2(U4 ^ k6, 8), I5 = I5 + U4 | 0, p5 = D2(p5 ^ I5, 7), j5 = j5 + b5 | 0, O7 = D2(O7 ^ j5, 16), S5 = S5 + O7 | 0, b5 = D2(b5 ^ S5, 12), j5 = j5 + b5 | 0, O7 = D2(O7 ^ j5, 8), S5 = S5 + O7 | 0, b5 = D2(b5 ^ S5, 7), $4 = $4 + v6 | 0, A5 = D2(A5 ^ $4, 16), B4 = B4 + A5 | 0, v6 = D2(v6 ^ B4, 12), $4 = $4 + v6 | 0, A5 = D2(A5 ^ $4, 8), B4 = B4 + A5 | 0, v6 = D2(v6 ^ B4, 7), d5 = d5 + m4 | 0, T5 = D2(T5 ^ d5, 16), E6 = E6 + T5 | 0, m4 = D2(m4 ^ E6, 12), d5 = d5 + m4 | 0, T5 = D2(T5 ^ d5, 8), E6 = E6 + T5 | 0, m4 = D2(m4 ^ E6, 7);
  let C5 = 0;
  r3[C5++] = i4 + k6 | 0, r3[C5++] = f8 + j5 | 0, r3[C5++] = a3 + $4 | 0, r3[C5++] = l8 + d5 | 0, r3[C5++] = c7 + m4 | 0, r3[C5++] = u3 + p5 | 0, r3[C5++] = h6 + b5 | 0, r3[C5++] = g4 + v6 | 0, r3[C5++] = w5 + B4 | 0, r3[C5++] = y6 + E6 | 0, r3[C5++] = x6 + I5 | 0, r3[C5++] = R4 + S5 | 0, r3[C5++] = M5 + O7 | 0, r3[C5++] = L5 + A5 | 0, r3[C5++] = V4 + T5 | 0, r3[C5++] = _3 + U4 | 0;
}
var zf = Mf(Ff, { counterRight: false, counterLength: 4, allowShortKeys: false });
var Gf = new Uint8Array(16);
var io2 = (t, e2) => {
  t.update(e2);
  const n5 = e2.length % 16;
  n5 && t.update(Gf.subarray(n5));
};
var Zf = new Uint8Array(32);
function fo2(t, e2, n5, r3, o5) {
  const s3 = t(e2, n5, Zf), i4 = Kf.create(s3);
  o5 && io2(i4, o5), io2(i4, r3);
  const f8 = $f(r3.length, o5 ? o5.length : 0, true);
  i4.update(f8);
  const a3 = i4.digest();
  return Wt2(s3, f8), a3;
}
var Wf = (t) => (e2, n5, r3) => ({ encrypt(s3, i4) {
  const f8 = s3.length;
  i4 = eo2(f8 + 16, i4, false), i4.set(s3);
  const a3 = i4.subarray(0, -16);
  t(e2, n5, a3, a3, 1);
  const l8 = fo2(t, e2, n5, a3, r3);
  return i4.set(l8, f8), Wt2(l8), i4;
}, decrypt(s3, i4) {
  i4 = eo2(s3.length - 16, i4, false);
  const f8 = s3.subarray(0, -16), a3 = s3.subarray(-16), l8 = fo2(t, e2, n5, f8, r3);
  if (!Tf(a3, l8))
    throw new Error("invalid tag");
  return i4.set(s3.subarray(0, -16)), t(e2, n5, i4, i4, 1), Wt2(l8), i4;
} });
var co2 = Rf({ blockSize: 64, nonceLength: 12, tagLength: 16 }, Wf(zf));
var ao2 = class extends Ie2 {
  constructor(e2, n5) {
    super(), this.finished = false, this.destroyed = false, rn2(e2);
    const r3 = ht2(n5);
    if (this.iHash = e2.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o5 = this.blockLen, s3 = new Uint8Array(o5);
    s3.set(r3.length > o5 ? e2.create().update(r3).digest() : r3);
    for (let i4 = 0; i4 < s3.length; i4++)
      s3[i4] ^= 54;
    this.iHash.update(s3), this.oHash = e2.create();
    for (let i4 = 0; i4 < s3.length; i4++)
      s3[i4] ^= 106;
    this.oHash.update(s3), ut2(s3);
  }
  update(e2) {
    return Nt2(this), this.iHash.update(e2), this;
  }
  digestInto(e2) {
    Nt2(this), at(e2, this.outputLen), this.finished = true, this.iHash.digestInto(e2), this.oHash.update(e2), this.oHash.digestInto(e2), this.destroy();
  }
  digest() {
    const e2 = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e2), e2;
  }
  _cloneInto(e2) {
    e2 || (e2 = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n5, iHash: r3, finished: o5, destroyed: s3, blockLen: i4, outputLen: f8 } = this;
    return e2 = e2, e2.finished = o5, e2.destroyed = s3, e2.blockLen = i4, e2.outputLen = f8, e2.oHash = n5._cloneInto(e2.oHash), e2.iHash = r3._cloneInto(e2.iHash), e2;
  }
  clone() {
    return this._cloneInto();
  }
  destroy() {
    this.destroyed = true, this.oHash.destroy(), this.iHash.destroy();
  }
};
var _e2 = (t, e2, n5) => new ao2(t, e2).update(n5).digest();
_e2.create = (t, e2) => new ao2(t, e2);
function Yf(t, e2, n5) {
  return rn2(t), n5 === void 0 && (n5 = new Uint8Array(t.outputLen)), _e2(t, ht2(n5), ht2(e2));
}
var vn2 = Uint8Array.from([0]);
var uo2 = Uint8Array.of();
function Xf(t, e2, n5, r3 = 32) {
  rn2(t), mt(r3);
  const o5 = t.outputLen;
  if (r3 > 255 * o5)
    throw new Error("Length should be <= 255*HashLen");
  const s3 = Math.ceil(r3 / o5);
  n5 === void 0 && (n5 = uo2);
  const i4 = new Uint8Array(s3 * o5), f8 = _e2.create(t, e2), a3 = f8._cloneInto(), l8 = new Uint8Array(f8.outputLen);
  for (let c7 = 0; c7 < s3; c7++)
    vn2[0] = c7 + 1, a3.update(c7 === 0 ? uo2 : l8).update(n5).update(vn2).digestInto(l8), i4.set(l8, o5 * c7), f8._cloneInto(a3);
  return f8.destroy(), a3.destroy(), ut2(l8, vn2), i4.slice(0, r3);
}
var Jf = (t, e2, n5, r3, o5) => Xf(t, Yf(t, e2, n5), r3, o5);
var Te2 = Ae2;
var En2 = BigInt(0);
var Bn2 = BigInt(1);
function Re2(t, e2) {
  if (typeof e2 != "boolean")
    throw new Error(t + " boolean expected, got " + e2);
}
function $e2(t) {
  const e2 = t.toString(16);
  return e2.length & 1 ? "0" + e2 : e2;
}
function lo2(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  return t === "" ? En2 : BigInt("0x" + t);
}
function Ce2(t) {
  return lo2(ce(t));
}
function Le2(t) {
  return at(t), lo2(ce(Uint8Array.from(t).reverse()));
}
function In2(t, e2) {
  return fn(t.toString(16).padStart(e2 * 2, "0"));
}
function An2(t, e2) {
  return In2(t, e2).reverse();
}
function rt2(t, e2, n5) {
  let r3;
  if (typeof e2 == "string")
    try {
      r3 = fn(e2);
    } catch (s3) {
      throw new Error(t + " must be hex string or Uint8Array, cause: " + s3);
    }
  else if (nn2(e2))
    r3 = Uint8Array.from(e2);
  else
    throw new Error(t + " must be hex string or Uint8Array");
  const o5 = r3.length;
  if (typeof n5 == "number" && o5 !== n5)
    throw new Error(t + " of length " + n5 + " expected, got " + o5);
  return r3;
}
var Sn2 = (t) => typeof t == "bigint" && En2 <= t;
function Qf(t, e2, n5) {
  return Sn2(t) && Sn2(e2) && Sn2(n5) && e2 <= t && t < n5;
}
function Nn2(t, e2, n5, r3) {
  if (!Qf(e2, n5, r3))
    throw new Error("expected valid " + t + ": " + n5 + " <= n < " + r3 + ", got " + e2);
}
function tc(t) {
  let e2;
  for (e2 = 0; t > En2; t >>= Bn2, e2 += 1)
    ;
  return e2;
}
var je2 = (t) => (Bn2 << BigInt(t)) - Bn2;
function ec(t, e2, n5) {
  if (typeof t != "number" || t < 2)
    throw new Error("hashLen must be a number");
  if (typeof e2 != "number" || e2 < 2)
    throw new Error("qByteLen must be a number");
  if (typeof n5 != "function")
    throw new Error("hmacFn must be a function");
  const r3 = (g4) => new Uint8Array(g4), o5 = (g4) => Uint8Array.of(g4);
  let s3 = r3(t), i4 = r3(t), f8 = 0;
  const a3 = () => {
    s3.fill(1), i4.fill(0), f8 = 0;
  }, l8 = (...g4) => n5(i4, s3, ...g4), c7 = (g4 = r3(0)) => {
    i4 = l8(o5(0), g4), s3 = l8(), g4.length !== 0 && (i4 = l8(o5(1), g4), s3 = l8());
  }, u3 = () => {
    if (f8++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let g4 = 0;
    const w5 = [];
    for (; g4 < e2; ) {
      s3 = l8();
      const y6 = s3.slice();
      w5.push(y6), g4 += s3.length;
    }
    return Ht2(...w5);
  };
  return (g4, w5) => {
    a3(), c7(g4);
    let y6;
    for (; !(y6 = w5(u3())); )
      c7();
    return a3(), y6;
  };
}
function ke2(t, e2, n5 = {}) {
  if (!t || typeof t != "object")
    throw new Error("expected valid options object");
  function r3(o5, s3, i4) {
    const f8 = t[o5];
    if (i4 && f8 === void 0)
      return;
    const a3 = typeof f8;
    if (a3 !== s3 || f8 === null)
      throw new Error(`param "${o5}" is invalid: expected ${s3}, got ${a3}`);
  }
  Object.entries(e2).forEach(([o5, s3]) => r3(o5, s3, false)), Object.entries(n5).forEach(([o5, s3]) => r3(o5, s3, true));
}
function ho2(t) {
  const e2 = /* @__PURE__ */ new WeakMap();
  return (n5, ...r3) => {
    const o5 = e2.get(n5);
    if (o5 !== void 0)
      return o5;
    const s3 = t(n5, ...r3);
    return e2.set(n5, s3), s3;
  };
}
var ot = BigInt(0);
var Q2 = BigInt(1);
var Dt2 = BigInt(2);
var nc = BigInt(3);
var po2 = BigInt(4);
var go2 = BigInt(5);
var bo2 = BigInt(8);
function lt2(t, e2) {
  const n5 = t % e2;
  return n5 >= ot ? n5 : e2 + n5;
}
function pt(t, e2, n5) {
  let r3 = t;
  for (; e2-- > ot; )
    r3 *= r3, r3 %= n5;
  return r3;
}
function yo2(t, e2) {
  if (t === ot)
    throw new Error("invert: expected non-zero number");
  if (e2 <= ot)
    throw new Error("invert: expected positive modulus, got " + e2);
  let n5 = lt2(t, e2), r3 = e2, o5 = ot, s3 = Q2;
  for (; n5 !== ot; ) {
    const f8 = r3 / n5, a3 = r3 % n5, l8 = o5 - s3 * f8;
    r3 = n5, n5 = a3, o5 = s3, s3 = l8;
  }
  if (r3 !== Q2)
    throw new Error("invert: does not exist");
  return lt2(o5, e2);
}
function mo2(t, e2) {
  const n5 = (t.ORDER + Q2) / po2, r3 = t.pow(e2, n5);
  if (!t.eql(t.sqr(r3), e2))
    throw new Error("Cannot find square root");
  return r3;
}
function rc(t, e2) {
  const n5 = (t.ORDER - go2) / bo2, r3 = t.mul(e2, Dt2), o5 = t.pow(r3, n5), s3 = t.mul(e2, o5), i4 = t.mul(t.mul(s3, Dt2), o5), f8 = t.mul(s3, t.sub(i4, t.ONE));
  if (!t.eql(t.sqr(f8), e2))
    throw new Error("Cannot find square root");
  return f8;
}
function oc(t) {
  if (t < BigInt(3))
    throw new Error("sqrt is not defined for small field");
  let e2 = t - Q2, n5 = 0;
  for (; e2 % Dt2 === ot; )
    e2 /= Dt2, n5++;
  let r3 = Dt2;
  const o5 = Yt2(t);
  for (; xo2(o5, r3) === 1; )
    if (r3++ > 1e3)
      throw new Error("Cannot find square root: probably non-prime P");
  if (n5 === 1)
    return mo2;
  let s3 = o5.pow(r3, e2);
  const i4 = (e2 + Q2) / Dt2;
  return function(a3, l8) {
    if (a3.is0(l8))
      return l8;
    if (xo2(a3, l8) !== 1)
      throw new Error("Cannot find square root");
    let c7 = n5, u3 = a3.mul(a3.ONE, s3), h6 = a3.pow(l8, e2), g4 = a3.pow(l8, i4);
    for (; !a3.eql(h6, a3.ONE); ) {
      if (a3.is0(h6))
        return a3.ZERO;
      let w5 = 1, y6 = a3.sqr(h6);
      for (; !a3.eql(y6, a3.ONE); )
        if (w5++, y6 = a3.sqr(y6), w5 === c7)
          throw new Error("Cannot find square root");
      const x6 = Q2 << BigInt(c7 - w5 - 1), R4 = a3.pow(u3, x6);
      c7 = w5, u3 = a3.sqr(R4), h6 = a3.mul(h6, u3), g4 = a3.mul(g4, R4);
    }
    return g4;
  };
}
function sc(t) {
  return t % po2 === nc ? mo2 : t % bo2 === go2 ? rc : oc(t);
}
var ic = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function fc(t) {
  const e2 = { ORDER: "bigint", MASK: "bigint", BYTES: "number", BITS: "number" }, n5 = ic.reduce((r3, o5) => (r3[o5] = "function", r3), e2);
  return ke2(t, n5), t;
}
function cc(t, e2, n5) {
  if (n5 < ot)
    throw new Error("invalid exponent, negatives unsupported");
  if (n5 === ot)
    return t.ONE;
  if (n5 === Q2)
    return e2;
  let r3 = t.ONE, o5 = e2;
  for (; n5 > ot; )
    n5 & Q2 && (r3 = t.mul(r3, o5)), o5 = t.sqr(o5), n5 >>= Q2;
  return r3;
}
function wo2(t, e2, n5 = false) {
  const r3 = new Array(e2.length).fill(n5 ? t.ZERO : void 0), o5 = e2.reduce((i4, f8, a3) => t.is0(f8) ? i4 : (r3[a3] = i4, t.mul(i4, f8)), t.ONE), s3 = t.inv(o5);
  return e2.reduceRight((i4, f8, a3) => t.is0(f8) ? i4 : (r3[a3] = t.mul(i4, r3[a3]), t.mul(i4, f8)), s3), r3;
}
function xo2(t, e2) {
  const n5 = (t.ORDER - Q2) / Dt2, r3 = t.pow(e2, n5), o5 = t.eql(r3, t.ONE), s3 = t.eql(r3, t.ZERO), i4 = t.eql(r3, t.neg(t.ONE));
  if (!o5 && !s3 && !i4)
    throw new Error("invalid Legendre symbol result");
  return o5 ? 1 : s3 ? 0 : -1;
}
function ac(t, e2) {
  e2 !== void 0 && mt(e2);
  const n5 = e2 !== void 0 ? e2 : t.toString(2).length, r3 = Math.ceil(n5 / 8);
  return { nBitLength: n5, nByteLength: r3 };
}
function Yt2(t, e2, n5 = false, r3 = {}) {
  if (t <= ot)
    throw new Error("invalid field: expected ORDER > 0, got " + t);
  let o5, s3;
  if (typeof e2 == "object" && e2 != null) {
    if (r3.sqrt || n5)
      throw new Error("cannot specify opts in two arguments");
    const c7 = e2;
    c7.BITS && (o5 = c7.BITS), c7.sqrt && (s3 = c7.sqrt), typeof c7.isLE == "boolean" && (n5 = c7.isLE);
  } else
    typeof e2 == "number" && (o5 = e2), r3.sqrt && (s3 = r3.sqrt);
  const { nBitLength: i4, nByteLength: f8 } = ac(t, o5);
  if (f8 > 2048)
    throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let a3;
  const l8 = Object.freeze({ ORDER: t, isLE: n5, BITS: i4, BYTES: f8, MASK: je2(i4), ZERO: ot, ONE: Q2, create: (c7) => lt2(c7, t), isValid: (c7) => {
    if (typeof c7 != "bigint")
      throw new Error("invalid field element: expected bigint, got " + typeof c7);
    return ot <= c7 && c7 < t;
  }, is0: (c7) => c7 === ot, isValidNot0: (c7) => !l8.is0(c7) && l8.isValid(c7), isOdd: (c7) => (c7 & Q2) === Q2, neg: (c7) => lt2(-c7, t), eql: (c7, u3) => c7 === u3, sqr: (c7) => lt2(c7 * c7, t), add: (c7, u3) => lt2(c7 + u3, t), sub: (c7, u3) => lt2(c7 - u3, t), mul: (c7, u3) => lt2(c7 * u3, t), pow: (c7, u3) => cc(l8, c7, u3), div: (c7, u3) => lt2(c7 * yo2(u3, t), t), sqrN: (c7) => c7 * c7, addN: (c7, u3) => c7 + u3, subN: (c7, u3) => c7 - u3, mulN: (c7, u3) => c7 * u3, inv: (c7) => yo2(c7, t), sqrt: s3 || ((c7) => (a3 || (a3 = sc(t)), a3(l8, c7))), toBytes: (c7) => n5 ? An2(c7, f8) : In2(c7, f8), fromBytes: (c7) => {
    if (c7.length !== f8)
      throw new Error("Field.fromBytes: expected " + f8 + " bytes, got " + c7.length);
    return n5 ? Le2(c7) : Ce2(c7);
  }, invertBatch: (c7) => wo2(l8, c7), cmov: (c7, u3, h6) => h6 ? u3 : c7 });
  return Object.freeze(l8);
}
function vo2(t) {
  if (typeof t != "bigint")
    throw new Error("field order must be bigint");
  const e2 = t.toString(2).length;
  return Math.ceil(e2 / 8);
}
function Eo2(t) {
  const e2 = vo2(t);
  return e2 + Math.ceil(e2 / 2);
}
function uc(t, e2, n5 = false) {
  const r3 = t.length, o5 = vo2(e2), s3 = Eo2(e2);
  if (r3 < 16 || r3 < s3 || r3 > 1024)
    throw new Error("expected " + s3 + "-1024 bytes of input, got " + r3);
  const i4 = n5 ? Le2(t) : Ce2(t), f8 = lt2(i4, e2 - Q2) + Q2;
  return n5 ? An2(f8, o5) : In2(f8, o5);
}
var Xt2 = BigInt(0);
var Mt2 = BigInt(1);
function le2(t, e2) {
  const n5 = e2.negate();
  return t ? n5 : e2;
}
function lc(t, e2, n5) {
  const r3 = e2 === "pz" ? (i4) => i4.pz : (i4) => i4.ez, o5 = wo2(t.Fp, n5.map(r3));
  return n5.map((i4, f8) => i4.toAffine(o5[f8])).map(t.fromAffine);
}
function Bo2(t, e2) {
  if (!Number.isSafeInteger(t) || t <= 0 || t > e2)
    throw new Error("invalid window size, expected [1.." + e2 + "], got W=" + t);
}
function On2(t, e2) {
  Bo2(t, e2);
  const n5 = Math.ceil(e2 / t) + 1, r3 = 2 ** (t - 1), o5 = 2 ** t, s3 = je2(t), i4 = BigInt(t);
  return { windows: n5, windowSize: r3, mask: s3, maxNumber: o5, shiftBy: i4 };
}
function Io2(t, e2, n5) {
  const { windowSize: r3, mask: o5, maxNumber: s3, shiftBy: i4 } = n5;
  let f8 = Number(t & o5), a3 = t >> i4;
  f8 > r3 && (f8 -= s3, a3 += Mt2);
  const l8 = e2 * r3, c7 = l8 + Math.abs(f8) - 1, u3 = f8 === 0, h6 = f8 < 0, g4 = e2 % 2 !== 0;
  return { nextN: a3, offset: c7, isZero: u3, isNeg: h6, isNegF: g4, offsetF: l8 };
}
function dc(t, e2) {
  if (!Array.isArray(t))
    throw new Error("array expected");
  t.forEach((n5, r3) => {
    if (!(n5 instanceof e2))
      throw new Error("invalid point at index " + r3);
  });
}
function hc(t, e2) {
  if (!Array.isArray(t))
    throw new Error("array of scalars expected");
  t.forEach((n5, r3) => {
    if (!e2.isValid(n5))
      throw new Error("invalid scalar at index " + r3);
  });
}
var Un2 = /* @__PURE__ */ new WeakMap();
var Ao2 = /* @__PURE__ */ new WeakMap();
function _n2(t) {
  return Ao2.get(t) || 1;
}
function So2(t) {
  if (t !== Xt2)
    throw new Error("invalid wNAF");
}
function pc(t, e2) {
  return { constTimeNegate: le2, hasPrecomputes(n5) {
    return _n2(n5) !== 1;
  }, unsafeLadder(n5, r3, o5 = t.ZERO) {
    let s3 = n5;
    for (; r3 > Xt2; )
      r3 & Mt2 && (o5 = o5.add(s3)), s3 = s3.double(), r3 >>= Mt2;
    return o5;
  }, precomputeWindow(n5, r3) {
    const { windows: o5, windowSize: s3 } = On2(r3, e2), i4 = [];
    let f8 = n5, a3 = f8;
    for (let l8 = 0; l8 < o5; l8++) {
      a3 = f8, i4.push(a3);
      for (let c7 = 1; c7 < s3; c7++)
        a3 = a3.add(f8), i4.push(a3);
      f8 = a3.double();
    }
    return i4;
  }, wNAF(n5, r3, o5) {
    let s3 = t.ZERO, i4 = t.BASE;
    const f8 = On2(n5, e2);
    for (let a3 = 0; a3 < f8.windows; a3++) {
      const { nextN: l8, offset: c7, isZero: u3, isNeg: h6, isNegF: g4, offsetF: w5 } = Io2(o5, a3, f8);
      o5 = l8, u3 ? i4 = i4.add(le2(g4, r3[w5])) : s3 = s3.add(le2(h6, r3[c7]));
    }
    return So2(o5), { p: s3, f: i4 };
  }, wNAFUnsafe(n5, r3, o5, s3 = t.ZERO) {
    const i4 = On2(n5, e2);
    for (let f8 = 0; f8 < i4.windows && o5 !== Xt2; f8++) {
      const { nextN: a3, offset: l8, isZero: c7, isNeg: u3 } = Io2(o5, f8, i4);
      if (o5 = a3, !c7) {
        const h6 = r3[l8];
        s3 = s3.add(u3 ? h6.negate() : h6);
      }
    }
    return So2(o5), s3;
  }, getPrecomputes(n5, r3, o5) {
    let s3 = Un2.get(r3);
    return s3 || (s3 = this.precomputeWindow(r3, n5), n5 !== 1 && (typeof o5 == "function" && (s3 = o5(s3)), Un2.set(r3, s3))), s3;
  }, wNAFCached(n5, r3, o5) {
    const s3 = _n2(n5);
    return this.wNAF(s3, this.getPrecomputes(s3, n5, o5), r3);
  }, wNAFCachedUnsafe(n5, r3, o5, s3) {
    const i4 = _n2(n5);
    return i4 === 1 ? this.unsafeLadder(n5, r3, s3) : this.wNAFUnsafe(i4, this.getPrecomputes(i4, n5, o5), r3, s3);
  }, setWindowSize(n5, r3) {
    Bo2(r3, e2), Ao2.set(n5, r3), Un2.delete(n5);
  } };
}
function gc(t, e2, n5, r3) {
  let o5 = e2, s3 = t.ZERO, i4 = t.ZERO;
  for (; n5 > Xt2 || r3 > Xt2; )
    n5 & Mt2 && (s3 = s3.add(o5)), r3 & Mt2 && (i4 = i4.add(o5)), o5 = o5.double(), n5 >>= Mt2, r3 >>= Mt2;
  return { p1: s3, p2: i4 };
}
function bc(t, e2, n5, r3) {
  dc(n5, t), hc(r3, e2);
  const o5 = n5.length, s3 = r3.length;
  if (o5 !== s3)
    throw new Error("arrays of points and scalars must have equal length");
  const i4 = t.ZERO, f8 = tc(BigInt(o5));
  let a3 = 1;
  f8 > 12 ? a3 = f8 - 3 : f8 > 4 ? a3 = f8 - 2 : f8 > 0 && (a3 = 2);
  const l8 = je2(a3), c7 = new Array(Number(l8) + 1).fill(i4), u3 = Math.floor((e2.BITS - 1) / a3) * a3;
  let h6 = i4;
  for (let g4 = u3; g4 >= 0; g4 -= a3) {
    c7.fill(i4);
    for (let y6 = 0; y6 < s3; y6++) {
      const x6 = r3[y6], R4 = Number(x6 >> BigInt(g4) & l8);
      c7[R4] = c7[R4].add(n5[y6]);
    }
    let w5 = i4;
    for (let y6 = c7.length - 1, x6 = i4; y6 > 0; y6--)
      x6 = x6.add(c7[y6]), w5 = w5.add(x6);
    if (h6 = h6.add(w5), g4 !== 0)
      for (let y6 = 0; y6 < a3; y6++)
        h6 = h6.double();
  }
  return h6;
}
function No2(t, e2) {
  if (e2) {
    if (e2.ORDER !== t)
      throw new Error("Field.ORDER must match order: Fp == p, Fn == n");
    return fc(e2), e2;
  } else
    return Yt2(t);
}
function yc(t, e2, n5 = {}) {
  if (!e2 || typeof e2 != "object")
    throw new Error(`expected valid ${t} CURVE object`);
  for (const f8 of ["p", "n", "h"]) {
    const a3 = e2[f8];
    if (!(typeof a3 == "bigint" && a3 > Xt2))
      throw new Error(`CURVE.${f8} must be positive bigint`);
  }
  const r3 = No2(e2.p, n5.Fp), o5 = No2(e2.n, n5.Fn), i4 = ["Gx", "Gy", "a", t === "weierstrass" ? "b" : "d"];
  for (const f8 of i4)
    if (!r3.isValid(e2[f8]))
      throw new Error(`CURVE.${f8} must be valid field element of CURVE.Fp`);
  return { Fp: r3, Fn: o5 };
}
BigInt(0), BigInt(1), BigInt(2), BigInt(8);
var de2 = BigInt(0);
var Jt2 = BigInt(1);
var Pe2 = BigInt(2);
function mc(t) {
  return ke2(t, { adjustScalarBytes: "function", powPminus2: "function" }), Object.freeze({ ...t });
}
function wc(t) {
  const e2 = mc(t), { P: n5, type: r3, adjustScalarBytes: o5, powPminus2: s3, randomBytes: i4 } = e2, f8 = r3 === "x25519";
  if (!f8 && r3 !== "x448")
    throw new Error("invalid type");
  const a3 = i4 || Zt2, l8 = f8 ? 255 : 448, c7 = f8 ? 32 : 56, u3 = BigInt(f8 ? 9 : 5), h6 = BigInt(f8 ? 121665 : 39081), g4 = f8 ? Pe2 ** BigInt(254) : Pe2 ** BigInt(447), w5 = f8 ? BigInt(8) * Pe2 ** BigInt(251) - Jt2 : BigInt(4) * Pe2 ** BigInt(445) - Jt2, y6 = g4 + w5 + Jt2, x6 = (d5) => lt2(d5, n5), R4 = M5(u3);
  function M5(d5) {
    return An2(x6(d5), c7);
  }
  function L5(d5) {
    const m4 = rt2("u coordinate", d5, c7);
    return f8 && (m4[31] &= 127), x6(Le2(m4));
  }
  function V4(d5) {
    return Le2(o5(rt2("scalar", d5, c7)));
  }
  function _3(d5, m4) {
    const p5 = $4(L5(m4), V4(d5));
    if (p5 === de2)
      throw new Error("invalid private or public key received");
    return M5(p5);
  }
  function k6(d5) {
    return _3(d5, R4);
  }
  function j5(d5, m4, p5) {
    const b5 = x6(d5 * (m4 - p5));
    return m4 = x6(m4 - b5), p5 = x6(p5 + b5), { x_2: m4, x_3: p5 };
  }
  function $4(d5, m4) {
    Nn2("u", d5, de2, n5), Nn2("scalar", m4, g4, y6);
    const p5 = m4, b5 = d5;
    let v6 = Jt2, B4 = de2, E6 = d5, I5 = Jt2, S5 = de2;
    for (let A5 = BigInt(l8 - 1); A5 >= de2; A5--) {
      const T5 = p5 >> A5 & Jt2;
      S5 ^= T5, { x_2: v6, x_3: E6 } = j5(S5, v6, E6), { x_2: B4, x_3: I5 } = j5(S5, B4, I5), S5 = T5;
      const U4 = v6 + B4, C5 = x6(U4 * U4), H3 = v6 - B4, q2 = x6(H3 * H3), P6 = C5 - q2, K7 = E6 + I5, et = E6 - I5, Z3 = x6(et * U4), z4 = x6(K7 * H3), Ft3 = Z3 + z4, yt4 = Z3 - z4;
      E6 = x6(Ft3 * Ft3), I5 = x6(b5 * x6(yt4 * yt4)), v6 = x6(C5 * q2), B4 = x6(P6 * (C5 + x6(h6 * P6)));
    }
    ({ x_2: v6, x_3: E6 } = j5(S5, v6, E6)), { x_2: B4, x_3: I5 } = j5(S5, B4, I5);
    const O7 = s3(B4);
    return x6(v6 * O7);
  }
  return { scalarMult: _3, scalarMultBase: k6, getSharedSecret: (d5, m4) => _3(d5, m4), getPublicKey: (d5) => k6(d5), utils: { randomPrivateKey: () => a3(c7) }, GuBytes: R4.slice() };
}
BigInt(0);
var xc = BigInt(1);
var Oo2 = BigInt(2);
var vc = BigInt(3);
var Ec = BigInt(5);
var Bc = BigInt(8);
var Uo2 = { p: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed"), n: BigInt("0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed"), h: Bc, a: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec"), d: BigInt("0x52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3"), Gx: BigInt("0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a"), Gy: BigInt("0x6666666666666666666666666666666666666666666666666666666666666658") };
function Ic(t) {
  const e2 = BigInt(10), n5 = BigInt(20), r3 = BigInt(40), o5 = BigInt(80), s3 = Uo2.p, f8 = t * t % s3 * t % s3, a3 = pt(f8, Oo2, s3) * f8 % s3, l8 = pt(a3, xc, s3) * t % s3, c7 = pt(l8, Ec, s3) * l8 % s3, u3 = pt(c7, e2, s3) * c7 % s3, h6 = pt(u3, n5, s3) * u3 % s3, g4 = pt(h6, r3, s3) * h6 % s3, w5 = pt(g4, o5, s3) * g4 % s3, y6 = pt(w5, o5, s3) * g4 % s3, x6 = pt(y6, e2, s3) * c7 % s3;
  return { pow_p_5_8: pt(x6, Oo2, s3) * t % s3, b2: f8 };
}
function Ac(t) {
  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;
}
var Tn2 = (() => {
  const t = Uo2.p;
  return wc({ P: t, type: "x25519", powPminus2: (e2) => {
    const { pow_p_5_8: n5, b2: r3 } = Ic(e2);
    return lt2(pt(n5, vc, t) * r3, t);
  }, adjustScalarBytes: Ac });
})();
function _o2(t) {
  t.lowS !== void 0 && Re2("lowS", t.lowS), t.prehash !== void 0 && Re2("prehash", t.prehash);
}
var Sc = class extends Error {
  constructor(e2 = "") {
    super(e2);
  }
};
var vt2 = { Err: Sc, _tlv: { encode: (t, e2) => {
  const { Err: n5 } = vt2;
  if (t < 0 || t > 256)
    throw new n5("tlv.encode: wrong tag");
  if (e2.length & 1)
    throw new n5("tlv.encode: unpadded data");
  const r3 = e2.length / 2, o5 = $e2(r3);
  if (o5.length / 2 & 128)
    throw new n5("tlv.encode: long form length too big");
  const s3 = r3 > 127 ? $e2(o5.length / 2 | 128) : "";
  return $e2(t) + s3 + o5 + e2;
}, decode(t, e2) {
  const { Err: n5 } = vt2;
  let r3 = 0;
  if (t < 0 || t > 256)
    throw new n5("tlv.encode: wrong tag");
  if (e2.length < 2 || e2[r3++] !== t)
    throw new n5("tlv.decode: wrong tlv");
  const o5 = e2[r3++], s3 = !!(o5 & 128);
  let i4 = 0;
  if (!s3)
    i4 = o5;
  else {
    const a3 = o5 & 127;
    if (!a3)
      throw new n5("tlv.decode(long): indefinite length not supported");
    if (a3 > 4)
      throw new n5("tlv.decode(long): byte length is too big");
    const l8 = e2.subarray(r3, r3 + a3);
    if (l8.length !== a3)
      throw new n5("tlv.decode: length bytes not complete");
    if (l8[0] === 0)
      throw new n5("tlv.decode(long): zero leftmost byte");
    for (const c7 of l8)
      i4 = i4 << 8 | c7;
    if (r3 += a3, i4 < 128)
      throw new n5("tlv.decode(long): not minimal encoding");
  }
  const f8 = e2.subarray(r3, r3 + i4);
  if (f8.length !== i4)
    throw new n5("tlv.decode: wrong value length");
  return { v: f8, l: e2.subarray(r3 + i4) };
} }, _int: { encode(t) {
  const { Err: e2 } = vt2;
  if (t < he2)
    throw new e2("integer: negative integers are not allowed");
  let n5 = $e2(t);
  if (Number.parseInt(n5[0], 16) & 8 && (n5 = "00" + n5), n5.length & 1)
    throw new e2("unexpected DER parsing assertion: unpadded hex");
  return n5;
}, decode(t) {
  const { Err: e2 } = vt2;
  if (t[0] & 128)
    throw new e2("invalid signature integer: negative");
  if (t[0] === 0 && !(t[1] & 128))
    throw new e2("invalid signature integer: unnecessary leading zero");
  return Ce2(t);
} }, toSig(t) {
  const { Err: e2, _int: n5, _tlv: r3 } = vt2, o5 = rt2("signature", t), { v: s3, l: i4 } = r3.decode(48, o5);
  if (i4.length)
    throw new e2("invalid signature: left bytes after parsing");
  const { v: f8, l: a3 } = r3.decode(2, s3), { v: l8, l: c7 } = r3.decode(2, a3);
  if (c7.length)
    throw new e2("invalid signature: left bytes after parsing");
  return { r: n5.decode(f8), s: n5.decode(l8) };
}, hexFromSig(t) {
  const { _tlv: e2, _int: n5 } = vt2, r3 = e2.encode(2, n5.encode(t.r)), o5 = e2.encode(2, n5.encode(t.s)), s3 = r3 + o5;
  return e2.encode(48, s3);
} };
var he2 = BigInt(0);
var pe2 = BigInt(1);
var Nc = BigInt(2);
var He2 = BigInt(3);
var Oc = BigInt(4);
function Uc(t, e2, n5) {
  function r3(o5) {
    const s3 = t.sqr(o5), i4 = t.mul(s3, o5);
    return t.add(t.add(i4, t.mul(o5, e2)), n5);
  }
  return r3;
}
function To2(t, e2, n5) {
  const { BYTES: r3 } = t;
  function o5(s3) {
    let i4;
    if (typeof s3 == "bigint")
      i4 = s3;
    else {
      let f8 = rt2("private key", s3);
      if (e2) {
        if (!e2.includes(f8.length * 2))
          throw new Error("invalid private key");
        const a3 = new Uint8Array(r3);
        a3.set(f8, a3.length - f8.length), f8 = a3;
      }
      try {
        i4 = t.fromBytes(f8);
      } catch {
        throw new Error(`invalid private key: expected ui8a of size ${r3}, got ${typeof s3}`);
      }
    }
    if (n5 && (i4 = t.create(i4)), !t.isValidNot0(i4))
      throw new Error("invalid private key: out of range [1..N-1]");
    return i4;
  }
  return o5;
}
function _c(t, e2 = {}) {
  const { Fp: n5, Fn: r3 } = yc("weierstrass", t, e2), { h: o5, n: s3 } = t;
  ke2(e2, {}, { allowInfinityPoint: "boolean", clearCofactor: "function", isTorsionFree: "function", fromBytes: "function", toBytes: "function", endo: "object", wrapPrivateKey: "boolean" });
  const { endo: i4 } = e2;
  if (i4 && (!n5.is0(t.a) || typeof i4.beta != "bigint" || typeof i4.splitScalar != "function"))
    throw new Error('invalid endo: expected "beta": bigint and "splitScalar": function');
  function f8() {
    if (!n5.isOdd)
      throw new Error("compression is not supported: Field does not have .isOdd()");
  }
  function a3($4, d5, m4) {
    const { x: p5, y: b5 } = d5.toAffine(), v6 = n5.toBytes(p5);
    if (Re2("isCompressed", m4), m4) {
      f8();
      const B4 = !n5.isOdd(b5);
      return Ht2(Ro2(B4), v6);
    } else
      return Ht2(Uint8Array.of(4), v6, n5.toBytes(b5));
  }
  function l8($4) {
    at($4);
    const d5 = n5.BYTES, m4 = d5 + 1, p5 = 2 * d5 + 1, b5 = $4.length, v6 = $4[0], B4 = $4.subarray(1);
    if (b5 === m4 && (v6 === 2 || v6 === 3)) {
      const E6 = n5.fromBytes(B4);
      if (!n5.isValid(E6))
        throw new Error("bad point: is not on curve, wrong x");
      const I5 = h6(E6);
      let S5;
      try {
        S5 = n5.sqrt(I5);
      } catch (T5) {
        const U4 = T5 instanceof Error ? ": " + T5.message : "";
        throw new Error("bad point: is not on curve, sqrt error" + U4);
      }
      f8();
      const O7 = n5.isOdd(S5);
      return (v6 & 1) === 1 !== O7 && (S5 = n5.neg(S5)), { x: E6, y: S5 };
    } else if (b5 === p5 && v6 === 4) {
      const E6 = n5.fromBytes(B4.subarray(d5 * 0, d5 * 1)), I5 = n5.fromBytes(B4.subarray(d5 * 1, d5 * 2));
      if (!g4(E6, I5))
        throw new Error("bad point: is not on curve");
      return { x: E6, y: I5 };
    } else
      throw new Error(`bad point: got length ${b5}, expected compressed=${m4} or uncompressed=${p5}`);
  }
  const c7 = e2.toBytes || a3, u3 = e2.fromBytes || l8, h6 = Uc(n5, t.a, t.b);
  function g4($4, d5) {
    const m4 = n5.sqr(d5), p5 = h6($4);
    return n5.eql(m4, p5);
  }
  if (!g4(t.Gx, t.Gy))
    throw new Error("bad curve params: generator point");
  const w5 = n5.mul(n5.pow(t.a, He2), Oc), y6 = n5.mul(n5.sqr(t.b), BigInt(27));
  if (n5.is0(n5.add(w5, y6)))
    throw new Error("bad curve params: a or b");
  function x6($4, d5, m4 = false) {
    if (!n5.isValid(d5) || m4 && n5.is0(d5))
      throw new Error(`bad point coordinate ${$4}`);
    return d5;
  }
  function R4($4) {
    if (!($4 instanceof _3))
      throw new Error("ProjectivePoint expected");
  }
  const M5 = ho2(($4, d5) => {
    const { px: m4, py: p5, pz: b5 } = $4;
    if (n5.eql(b5, n5.ONE))
      return { x: m4, y: p5 };
    const v6 = $4.is0();
    d5 == null && (d5 = v6 ? n5.ONE : n5.inv(b5));
    const B4 = n5.mul(m4, d5), E6 = n5.mul(p5, d5), I5 = n5.mul(b5, d5);
    if (v6)
      return { x: n5.ZERO, y: n5.ZERO };
    if (!n5.eql(I5, n5.ONE))
      throw new Error("invZ was invalid");
    return { x: B4, y: E6 };
  }), L5 = ho2(($4) => {
    if ($4.is0()) {
      if (e2.allowInfinityPoint && !n5.is0($4.py))
        return;
      throw new Error("bad point: ZERO");
    }
    const { x: d5, y: m4 } = $4.toAffine();
    if (!n5.isValid(d5) || !n5.isValid(m4))
      throw new Error("bad point: x or y not field elements");
    if (!g4(d5, m4))
      throw new Error("bad point: equation left != right");
    if (!$4.isTorsionFree())
      throw new Error("bad point: not in prime-order subgroup");
    return true;
  });
  function V4($4, d5, m4, p5, b5) {
    return m4 = new _3(n5.mul(m4.px, $4), m4.py, m4.pz), d5 = le2(p5, d5), m4 = le2(b5, m4), d5.add(m4);
  }
  class _3 {
    constructor(d5, m4, p5) {
      this.px = x6("x", d5), this.py = x6("y", m4, true), this.pz = x6("z", p5), Object.freeze(this);
    }
    static fromAffine(d5) {
      const { x: m4, y: p5 } = d5 || {};
      if (!d5 || !n5.isValid(m4) || !n5.isValid(p5))
        throw new Error("invalid affine point");
      if (d5 instanceof _3)
        throw new Error("projective point not allowed");
      return n5.is0(m4) && n5.is0(p5) ? _3.ZERO : new _3(m4, p5, n5.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static normalizeZ(d5) {
      return lc(_3, "pz", d5);
    }
    static fromBytes(d5) {
      return at(d5), _3.fromHex(d5);
    }
    static fromHex(d5) {
      const m4 = _3.fromAffine(u3(rt2("pointHex", d5)));
      return m4.assertValidity(), m4;
    }
    static fromPrivateKey(d5) {
      const m4 = To2(r3, e2.allowedPrivateKeyLengths, e2.wrapPrivateKey);
      return _3.BASE.multiply(m4(d5));
    }
    static msm(d5, m4) {
      return bc(_3, r3, d5, m4);
    }
    precompute(d5 = 8, m4 = true) {
      return j5.setWindowSize(this, d5), m4 || this.multiply(He2), this;
    }
    _setWindowSize(d5) {
      this.precompute(d5);
    }
    assertValidity() {
      L5(this);
    }
    hasEvenY() {
      const { y: d5 } = this.toAffine();
      if (!n5.isOdd)
        throw new Error("Field doesn't support isOdd");
      return !n5.isOdd(d5);
    }
    equals(d5) {
      R4(d5);
      const { px: m4, py: p5, pz: b5 } = this, { px: v6, py: B4, pz: E6 } = d5, I5 = n5.eql(n5.mul(m4, E6), n5.mul(v6, b5)), S5 = n5.eql(n5.mul(p5, E6), n5.mul(B4, b5));
      return I5 && S5;
    }
    negate() {
      return new _3(this.px, n5.neg(this.py), this.pz);
    }
    double() {
      const { a: d5, b: m4 } = t, p5 = n5.mul(m4, He2), { px: b5, py: v6, pz: B4 } = this;
      let E6 = n5.ZERO, I5 = n5.ZERO, S5 = n5.ZERO, O7 = n5.mul(b5, b5), A5 = n5.mul(v6, v6), T5 = n5.mul(B4, B4), U4 = n5.mul(b5, v6);
      return U4 = n5.add(U4, U4), S5 = n5.mul(b5, B4), S5 = n5.add(S5, S5), E6 = n5.mul(d5, S5), I5 = n5.mul(p5, T5), I5 = n5.add(E6, I5), E6 = n5.sub(A5, I5), I5 = n5.add(A5, I5), I5 = n5.mul(E6, I5), E6 = n5.mul(U4, E6), S5 = n5.mul(p5, S5), T5 = n5.mul(d5, T5), U4 = n5.sub(O7, T5), U4 = n5.mul(d5, U4), U4 = n5.add(U4, S5), S5 = n5.add(O7, O7), O7 = n5.add(S5, O7), O7 = n5.add(O7, T5), O7 = n5.mul(O7, U4), I5 = n5.add(I5, O7), T5 = n5.mul(v6, B4), T5 = n5.add(T5, T5), O7 = n5.mul(T5, U4), E6 = n5.sub(E6, O7), S5 = n5.mul(T5, A5), S5 = n5.add(S5, S5), S5 = n5.add(S5, S5), new _3(E6, I5, S5);
    }
    add(d5) {
      R4(d5);
      const { px: m4, py: p5, pz: b5 } = this, { px: v6, py: B4, pz: E6 } = d5;
      let I5 = n5.ZERO, S5 = n5.ZERO, O7 = n5.ZERO;
      const A5 = t.a, T5 = n5.mul(t.b, He2);
      let U4 = n5.mul(m4, v6), C5 = n5.mul(p5, B4), H3 = n5.mul(b5, E6), q2 = n5.add(m4, p5), P6 = n5.add(v6, B4);
      q2 = n5.mul(q2, P6), P6 = n5.add(U4, C5), q2 = n5.sub(q2, P6), P6 = n5.add(m4, b5);
      let K7 = n5.add(v6, E6);
      return P6 = n5.mul(P6, K7), K7 = n5.add(U4, H3), P6 = n5.sub(P6, K7), K7 = n5.add(p5, b5), I5 = n5.add(B4, E6), K7 = n5.mul(K7, I5), I5 = n5.add(C5, H3), K7 = n5.sub(K7, I5), O7 = n5.mul(A5, P6), I5 = n5.mul(T5, H3), O7 = n5.add(I5, O7), I5 = n5.sub(C5, O7), O7 = n5.add(C5, O7), S5 = n5.mul(I5, O7), C5 = n5.add(U4, U4), C5 = n5.add(C5, U4), H3 = n5.mul(A5, H3), P6 = n5.mul(T5, P6), C5 = n5.add(C5, H3), H3 = n5.sub(U4, H3), H3 = n5.mul(A5, H3), P6 = n5.add(P6, H3), U4 = n5.mul(C5, P6), S5 = n5.add(S5, U4), U4 = n5.mul(K7, P6), I5 = n5.mul(q2, I5), I5 = n5.sub(I5, U4), U4 = n5.mul(q2, C5), O7 = n5.mul(K7, O7), O7 = n5.add(O7, U4), new _3(I5, S5, O7);
    }
    subtract(d5) {
      return this.add(d5.negate());
    }
    is0() {
      return this.equals(_3.ZERO);
    }
    multiply(d5) {
      const { endo: m4 } = e2;
      if (!r3.isValidNot0(d5))
        throw new Error("invalid scalar: out of range");
      let p5, b5;
      const v6 = (B4) => j5.wNAFCached(this, B4, _3.normalizeZ);
      if (m4) {
        const { k1neg: B4, k1: E6, k2neg: I5, k2: S5 } = m4.splitScalar(d5), { p: O7, f: A5 } = v6(E6), { p: T5, f: U4 } = v6(S5);
        b5 = A5.add(U4), p5 = V4(m4.beta, O7, T5, B4, I5);
      } else {
        const { p: B4, f: E6 } = v6(d5);
        p5 = B4, b5 = E6;
      }
      return _3.normalizeZ([p5, b5])[0];
    }
    multiplyUnsafe(d5) {
      const { endo: m4 } = e2, p5 = this;
      if (!r3.isValid(d5))
        throw new Error("invalid scalar: out of range");
      if (d5 === he2 || p5.is0())
        return _3.ZERO;
      if (d5 === pe2)
        return p5;
      if (j5.hasPrecomputes(this))
        return this.multiply(d5);
      if (m4) {
        const { k1neg: b5, k1: v6, k2neg: B4, k2: E6 } = m4.splitScalar(d5), { p1: I5, p2: S5 } = gc(_3, p5, v6, E6);
        return V4(m4.beta, I5, S5, b5, B4);
      } else
        return j5.wNAFCachedUnsafe(p5, d5);
    }
    multiplyAndAddUnsafe(d5, m4, p5) {
      const b5 = this.multiplyUnsafe(m4).add(d5.multiplyUnsafe(p5));
      return b5.is0() ? void 0 : b5;
    }
    toAffine(d5) {
      return M5(this, d5);
    }
    isTorsionFree() {
      const { isTorsionFree: d5 } = e2;
      return o5 === pe2 ? true : d5 ? d5(_3, this) : j5.wNAFCachedUnsafe(this, s3).is0();
    }
    clearCofactor() {
      const { clearCofactor: d5 } = e2;
      return o5 === pe2 ? this : d5 ? d5(_3, this) : this.multiplyUnsafe(o5);
    }
    toBytes(d5 = true) {
      return Re2("isCompressed", d5), this.assertValidity(), c7(_3, this, d5);
    }
    toRawBytes(d5 = true) {
      return this.toBytes(d5);
    }
    toHex(d5 = true) {
      return ce(this.toBytes(d5));
    }
    toString() {
      return `<Point ${this.is0() ? "ZERO" : this.toHex()}>`;
    }
  }
  _3.BASE = new _3(t.Gx, t.Gy, n5.ONE), _3.ZERO = new _3(n5.ZERO, n5.ONE, n5.ZERO), _3.Fp = n5, _3.Fn = r3;
  const k6 = r3.BITS, j5 = pc(_3, e2.endo ? Math.ceil(k6 / 2) : k6);
  return _3;
}
function Ro2(t) {
  return Uint8Array.of(t ? 2 : 3);
}
function Tc(t, e2, n5 = {}) {
  ke2(e2, { hash: "function" }, { hmac: "function", lowS: "boolean", randomBytes: "function", bits2int: "function", bits2int_modN: "function" });
  const r3 = e2.randomBytes || Zt2, o5 = e2.hmac || ((p5, ...b5) => _e2(e2.hash, p5, Ht2(...b5))), { Fp: s3, Fn: i4 } = t, { ORDER: f8, BITS: a3 } = i4;
  function l8(p5) {
    const b5 = f8 >> pe2;
    return p5 > b5;
  }
  function c7(p5) {
    return l8(p5) ? i4.neg(p5) : p5;
  }
  function u3(p5, b5) {
    if (!i4.isValidNot0(b5))
      throw new Error(`invalid signature ${p5}: out of range 1..CURVE.n`);
  }
  class h6 {
    constructor(b5, v6, B4) {
      u3("r", b5), u3("s", v6), this.r = b5, this.s = v6, B4 != null && (this.recovery = B4), Object.freeze(this);
    }
    static fromCompact(b5) {
      const v6 = i4.BYTES, B4 = rt2("compactSignature", b5, v6 * 2);
      return new h6(i4.fromBytes(B4.subarray(0, v6)), i4.fromBytes(B4.subarray(v6, v6 * 2)));
    }
    static fromDER(b5) {
      const { r: v6, s: B4 } = vt2.toSig(rt2("DER", b5));
      return new h6(v6, B4);
    }
    assertValidity() {
    }
    addRecoveryBit(b5) {
      return new h6(this.r, this.s, b5);
    }
    recoverPublicKey(b5) {
      const v6 = s3.ORDER, { r: B4, s: E6, recovery: I5 } = this;
      if (I5 == null || ![0, 1, 2, 3].includes(I5))
        throw new Error("recovery id invalid");
      if (f8 * Nc < v6 && I5 > 1)
        throw new Error("recovery id is ambiguous for h>1 curve");
      const O7 = I5 === 2 || I5 === 3 ? B4 + f8 : B4;
      if (!s3.isValid(O7))
        throw new Error("recovery id 2 or 3 invalid");
      const A5 = s3.toBytes(O7), T5 = t.fromHex(Ht2(Ro2((I5 & 1) === 0), A5)), U4 = i4.inv(O7), C5 = L5(rt2("msgHash", b5)), H3 = i4.create(-C5 * U4), q2 = i4.create(E6 * U4), P6 = t.BASE.multiplyUnsafe(H3).add(T5.multiplyUnsafe(q2));
      if (P6.is0())
        throw new Error("point at infinify");
      return P6.assertValidity(), P6;
    }
    hasHighS() {
      return l8(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new h6(this.r, i4.neg(this.s), this.recovery) : this;
    }
    toBytes(b5) {
      if (b5 === "compact")
        return Ht2(i4.toBytes(this.r), i4.toBytes(this.s));
      if (b5 === "der")
        return fn(vt2.hexFromSig(this));
      throw new Error("invalid format");
    }
    toDERRawBytes() {
      return this.toBytes("der");
    }
    toDERHex() {
      return ce(this.toBytes("der"));
    }
    toCompactRawBytes() {
      return this.toBytes("compact");
    }
    toCompactHex() {
      return ce(this.toBytes("compact"));
    }
  }
  const g4 = To2(i4, n5.allowedPrivateKeyLengths, n5.wrapPrivateKey), w5 = { isValidPrivateKey(p5) {
    try {
      return g4(p5), true;
    } catch {
      return false;
    }
  }, normPrivateKeyToScalar: g4, randomPrivateKey: () => {
    const p5 = f8;
    return uc(r3(Eo2(p5)), p5);
  }, precompute(p5 = 8, b5 = t.BASE) {
    return b5.precompute(p5, false);
  } };
  function y6(p5, b5 = true) {
    return t.fromPrivateKey(p5).toBytes(b5);
  }
  function x6(p5) {
    if (typeof p5 == "bigint")
      return false;
    if (p5 instanceof t)
      return true;
    const v6 = rt2("key", p5).length, B4 = s3.BYTES, E6 = B4 + 1, I5 = 2 * B4 + 1;
    if (!(n5.allowedPrivateKeyLengths || i4.BYTES === E6))
      return v6 === E6 || v6 === I5;
  }
  function R4(p5, b5, v6 = true) {
    if (x6(p5) === true)
      throw new Error("first arg must be private key");
    if (x6(b5) === false)
      throw new Error("second arg must be public key");
    return t.fromHex(b5).multiply(g4(p5)).toBytes(v6);
  }
  const M5 = e2.bits2int || function(p5) {
    if (p5.length > 8192)
      throw new Error("input is too large");
    const b5 = Ce2(p5), v6 = p5.length * 8 - a3;
    return v6 > 0 ? b5 >> BigInt(v6) : b5;
  }, L5 = e2.bits2int_modN || function(p5) {
    return i4.create(M5(p5));
  }, V4 = je2(a3);
  function _3(p5) {
    return Nn2("num < 2^" + a3, p5, he2, V4), i4.toBytes(p5);
  }
  function k6(p5, b5, v6 = j5) {
    if (["recovered", "canonical"].some((q2) => q2 in v6))
      throw new Error("sign() legacy options not supported");
    const { hash: B4 } = e2;
    let { lowS: E6, prehash: I5, extraEntropy: S5 } = v6;
    E6 == null && (E6 = true), p5 = rt2("msgHash", p5), _o2(v6), I5 && (p5 = rt2("prehashed msgHash", B4(p5)));
    const O7 = L5(p5), A5 = g4(b5), T5 = [_3(A5), _3(O7)];
    if (S5 != null && S5 !== false) {
      const q2 = S5 === true ? r3(s3.BYTES) : S5;
      T5.push(rt2("extraEntropy", q2));
    }
    const U4 = Ht2(...T5), C5 = O7;
    function H3(q2) {
      const P6 = M5(q2);
      if (!i4.isValidNot0(P6))
        return;
      const K7 = i4.inv(P6), et = t.BASE.multiply(P6).toAffine(), Z3 = i4.create(et.x);
      if (Z3 === he2)
        return;
      const z4 = i4.create(K7 * i4.create(C5 + Z3 * A5));
      if (z4 === he2)
        return;
      let Ft3 = (et.x === Z3 ? 0 : 2) | Number(et.y & pe2), yt4 = z4;
      return E6 && l8(z4) && (yt4 = c7(z4), Ft3 ^= 1), new h6(Z3, yt4, Ft3);
    }
    return { seed: U4, k2sig: H3 };
  }
  const j5 = { lowS: e2.lowS, prehash: false }, $4 = { lowS: e2.lowS, prehash: false };
  function d5(p5, b5, v6 = j5) {
    const { seed: B4, k2sig: E6 } = k6(p5, b5, v6);
    return ec(e2.hash.outputLen, i4.BYTES, o5)(B4, E6);
  }
  t.BASE.precompute(8);
  function m4(p5, b5, v6, B4 = $4) {
    const E6 = p5;
    b5 = rt2("msgHash", b5), v6 = rt2("publicKey", v6), _o2(B4);
    const { lowS: I5, prehash: S5, format: O7 } = B4;
    if ("strict" in B4)
      throw new Error("options.strict was renamed to lowS");
    if (O7 !== void 0 && !["compact", "der", "js"].includes(O7))
      throw new Error('format must be "compact", "der" or "js"');
    const A5 = typeof E6 == "string" || nn2(E6), T5 = !A5 && !O7 && typeof E6 == "object" && E6 !== null && typeof E6.r == "bigint" && typeof E6.s == "bigint";
    if (!A5 && !T5)
      throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    let U4, C5;
    try {
      if (T5)
        if (O7 === void 0 || O7 === "js")
          U4 = new h6(E6.r, E6.s);
        else
          throw new Error("invalid format");
      if (A5) {
        try {
          O7 !== "compact" && (U4 = h6.fromDER(E6));
        } catch (yt4) {
          if (!(yt4 instanceof vt2.Err))
            throw yt4;
        }
        !U4 && O7 !== "der" && (U4 = h6.fromCompact(E6));
      }
      C5 = t.fromHex(v6);
    } catch {
      return false;
    }
    if (!U4 || I5 && U4.hasHighS())
      return false;
    S5 && (b5 = e2.hash(b5));
    const { r: H3, s: q2 } = U4, P6 = L5(b5), K7 = i4.inv(q2), et = i4.create(P6 * K7), Z3 = i4.create(H3 * K7), z4 = t.BASE.multiplyUnsafe(et).add(C5.multiplyUnsafe(Z3));
    return z4.is0() ? false : i4.create(z4.x) === H3;
  }
  return Object.freeze({ getPublicKey: y6, getSharedSecret: R4, sign: d5, verify: m4, utils: w5, Point: t, Signature: h6 });
}
function Rc(t) {
  const e2 = { a: t.a, b: t.b, p: t.Fp.ORDER, n: t.n, h: t.h, Gx: t.Gx, Gy: t.Gy }, n5 = t.Fp, r3 = Yt2(e2.n, t.nBitLength), o5 = { Fp: n5, Fn: r3, allowedPrivateKeyLengths: t.allowedPrivateKeyLengths, allowInfinityPoint: t.allowInfinityPoint, endo: t.endo, wrapPrivateKey: t.wrapPrivateKey, isTorsionFree: t.isTorsionFree, clearCofactor: t.clearCofactor, fromBytes: t.fromBytes, toBytes: t.toBytes };
  return { CURVE: e2, curveOpts: o5 };
}
function $c(t) {
  const { CURVE: e2, curveOpts: n5 } = Rc(t), r3 = { hash: t.hash, hmac: t.hmac, randomBytes: t.randomBytes, lowS: t.lowS, bits2int: t.bits2int, bits2int_modN: t.bits2int_modN };
  return { CURVE: e2, curveOpts: n5, ecdsaOpts: r3 };
}
function Cc(t, e2) {
  return Object.assign({}, e2, { ProjectivePoint: e2.Point, CURVE: t });
}
function Lc(t) {
  const { CURVE: e2, curveOpts: n5, ecdsaOpts: r3 } = $c(t), o5 = _c(e2, n5), s3 = Tc(o5, r3, n5);
  return Cc(t, s3);
}
function Rn2(t, e2) {
  const n5 = (r3) => Lc({ ...t, hash: r3 });
  return { ...n5(e2), create: n5 };
}
var $o2 = { p: BigInt("0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff"), n: BigInt("0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551"), h: BigInt(1), a: BigInt("0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc"), b: BigInt("0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b"), Gx: BigInt("0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296"), Gy: BigInt("0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5") };
var Co2 = { p: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff"), n: BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973"), h: BigInt(1), a: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc"), b: BigInt("0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef"), Gx: BigInt("0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7"), Gy: BigInt("0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f") };
var Lo2 = { p: BigInt("0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), n: BigInt("0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409"), h: BigInt(1), a: BigInt("0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc"), b: BigInt("0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00"), Gx: BigInt("0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66"), Gy: BigInt("0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650") };
var jc = Yt2($o2.p);
var kc = Yt2(Co2.p);
var Pc = Yt2(Lo2.p);
var Hc = Rn2({ ...$o2, Fp: jc, lowS: false }, Ae2);
Rn2({ ...Co2, Fp: kc, lowS: false }, Yi), Rn2({ ...Lo2, Fp: Pc, lowS: false, allowedPrivateKeyLengths: [130, 131, 132] }, Wi);
var Dc = Hc;
var $n2 = "base10";
var tt = "base16";
var Qt2 = "base64pad";
var De2 = "base64url";
var te2 = "utf8";
var Cn2 = 0;
var ee = 1;
var ge2 = 2;
var Mc = 0;
var jo2 = 1;
var be2 = 12;
var Ln2 = 32;
function Vc() {
  const t = Tn2.utils.randomPrivateKey(), e2 = Tn2.getPublicKey(t);
  return { privateKey: toString4(t, tt), publicKey: toString4(e2, tt) };
}
function qc() {
  const t = Zt2(Ln2);
  return toString4(t, tt);
}
function Kc(t, e2) {
  const n5 = Tn2.getSharedSecret(fromString6(t, tt), fromString6(e2, tt)), r3 = Jf(Te2, n5, void 0, void 0, Ln2);
  return toString4(r3, tt);
}
function Fc(t) {
  const e2 = Te2(fromString6(t, tt));
  return toString4(e2, tt);
}
function zc(t) {
  const e2 = Te2(fromString6(t, te2));
  return toString4(e2, tt);
}
function jn2(t) {
  return fromString6(`${t}`, $n2);
}
function Vt2(t) {
  return Number(toString4(t, $n2));
}
function ko2(t) {
  return t.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}
function Po2(t) {
  const e2 = t.replace(/-/g, "+").replace(/_/g, "/"), n5 = (4 - e2.length % 4) % 4;
  return e2 + "=".repeat(n5);
}
function Gc(t) {
  const e2 = jn2(typeof t.type < "u" ? t.type : Cn2);
  if (Vt2(e2) === ee && typeof t.senderPublicKey > "u")
    throw new Error("Missing sender public key for type 1 envelope");
  const n5 = typeof t.senderPublicKey < "u" ? fromString6(t.senderPublicKey, tt) : void 0, r3 = typeof t.iv < "u" ? fromString6(t.iv, tt) : Zt2(be2), o5 = fromString6(t.symKey, tt), s3 = co2(o5, r3).encrypt(fromString6(t.message, te2)), i4 = kn2({ type: e2, sealed: s3, iv: r3, senderPublicKey: n5 });
  return t.encoding === De2 ? ko2(i4) : i4;
}
function Zc(t) {
  const e2 = fromString6(t.symKey, tt), { sealed: n5, iv: r3 } = Me2({ encoded: t.encoded, encoding: t.encoding }), o5 = co2(e2, r3).decrypt(n5);
  if (o5 === null)
    throw new Error("Failed to decrypt");
  return toString4(o5, te2);
}
function Wc(t, e2) {
  const n5 = jn2(ge2), r3 = Zt2(be2), o5 = fromString6(t, te2), s3 = kn2({ type: n5, sealed: o5, iv: r3 });
  return e2 === De2 ? ko2(s3) : s3;
}
function Yc(t, e2) {
  const { sealed: n5 } = Me2({ encoded: t, encoding: e2 });
  return toString4(n5, te2);
}
function kn2(t) {
  if (Vt2(t.type) === ge2)
    return toString4(concat4([t.type, t.sealed]), Qt2);
  if (Vt2(t.type) === ee) {
    if (typeof t.senderPublicKey > "u")
      throw new Error("Missing sender public key for type 1 envelope");
    return toString4(concat4([t.type, t.senderPublicKey, t.iv, t.sealed]), Qt2);
  }
  return toString4(concat4([t.type, t.iv, t.sealed]), Qt2);
}
function Me2(t) {
  const e2 = (t.encoding || Qt2) === De2 ? Po2(t.encoded) : t.encoded, n5 = fromString6(e2, Qt2), r3 = n5.slice(Mc, jo2), o5 = jo2;
  if (Vt2(r3) === ee) {
    const a3 = o5 + Ln2, l8 = a3 + be2, c7 = n5.slice(o5, a3), u3 = n5.slice(a3, l8), h6 = n5.slice(l8);
    return { type: r3, sealed: h6, iv: u3, senderPublicKey: c7 };
  }
  if (Vt2(r3) === ge2) {
    const a3 = n5.slice(o5), l8 = Zt2(be2);
    return { type: r3, sealed: a3, iv: l8 };
  }
  const s3 = o5 + be2, i4 = n5.slice(o5, s3), f8 = n5.slice(s3);
  return { type: r3, sealed: f8, iv: i4 };
}
function Xc(t, e2) {
  const n5 = Me2({ encoded: t, encoding: e2 == null ? void 0 : e2.encoding });
  return Ho2({ type: Vt2(n5.type), senderPublicKey: typeof n5.senderPublicKey < "u" ? toString4(n5.senderPublicKey, tt) : void 0, receiverPublicKey: e2 == null ? void 0 : e2.receiverPublicKey });
}
function Ho2(t) {
  const e2 = (t == null ? void 0 : t.type) || Cn2;
  if (e2 === ee) {
    if (typeof (t == null ? void 0 : t.senderPublicKey) > "u")
      throw new Error("missing sender public key");
    if (typeof (t == null ? void 0 : t.receiverPublicKey) > "u")
      throw new Error("missing receiver public key");
  }
  return { type: e2, senderPublicKey: t == null ? void 0 : t.senderPublicKey, receiverPublicKey: t == null ? void 0 : t.receiverPublicKey };
}
function Jc(t) {
  return t.type === ee && typeof t.senderPublicKey == "string" && typeof t.receiverPublicKey == "string";
}
function Qc(t) {
  return t.type === ge2;
}
function Do2(t) {
  const e2 = Buffer.from(t.x, "base64"), n5 = Buffer.from(t.y, "base64");
  return concat4([new Uint8Array([4]), e2, n5]);
}
function ta(t, e2) {
  const [n5, r3, o5] = t.split("."), s3 = Buffer.from(Po2(o5), "base64");
  if (s3.length !== 64)
    throw new Error("Invalid signature length");
  const i4 = s3.slice(0, 32), f8 = s3.slice(32, 64), a3 = `${n5}.${r3}`, l8 = Te2(a3), c7 = Do2(e2);
  if (!Dc.verify(concat4([i4, f8]), l8, c7))
    throw new Error("Invalid signature");
  return sn(t).payload;
}
var Mo2 = "irn";
function ea(t) {
  return (t == null ? void 0 : t.relay) || { protocol: Mo2 };
}
function na(t) {
  const e2 = C2[t];
  if (typeof e2 > "u")
    throw new Error(`Relay Protocol not supported: ${t}`);
  return e2;
}
function Vo2(t, e2 = "-") {
  const n5 = {}, r3 = "relay" + e2;
  return Object.keys(t).forEach((o5) => {
    if (o5.startsWith(r3)) {
      const s3 = o5.replace(r3, ""), i4 = t[o5];
      n5[s3] = i4;
    }
  }), n5;
}
function ra(t) {
  if (!t.includes("wc:")) {
    const l8 = Qe2(t);
    l8 != null && l8.includes("wc:") && (t = l8);
  }
  t = t.includes("wc://") ? t.replace("wc://", "") : t, t = t.includes("wc:") ? t.replace("wc:", "") : t;
  const e2 = t.indexOf(":"), n5 = t.indexOf("?") !== -1 ? t.indexOf("?") : void 0, r3 = t.substring(0, e2), o5 = t.substring(e2 + 1, n5).split("@"), s3 = typeof n5 < "u" ? t.substring(n5) : "", i4 = new URLSearchParams(s3), f8 = {};
  i4.forEach((l8, c7) => {
    f8[c7] = l8;
  });
  const a3 = typeof f8.methods == "string" ? f8.methods.split(",") : void 0;
  return { protocol: r3, topic: qo2(o5[0]), version: parseInt(o5[1], 10), symKey: f8.symKey, relay: Vo2(f8), methods: a3, expiryTimestamp: f8.expiryTimestamp ? parseInt(f8.expiryTimestamp, 10) : void 0 };
}
function qo2(t) {
  return t.startsWith("//") ? t.substring(2) : t;
}
function Ko2(t, e2 = "-") {
  const n5 = "relay", r3 = {};
  return Object.keys(t).forEach((o5) => {
    const s3 = o5, i4 = n5 + e2 + s3;
    t[s3] && (r3[i4] = t[s3]);
  }), r3;
}
function oa(t) {
  const e2 = new URLSearchParams(), n5 = Ko2(t.relay);
  Object.keys(n5).sort().forEach((o5) => {
    e2.set(o5, n5[o5]);
  }), e2.set("symKey", t.symKey), t.expiryTimestamp && e2.set("expiryTimestamp", t.expiryTimestamp.toString()), t.methods && e2.set("methods", t.methods.join(","));
  const r3 = e2.toString();
  return `${t.protocol}:${t.topic}@${t.version}?${r3}`;
}
function sa(t, e2, n5) {
  return `${t}?wc_ev=${n5}&topic=${e2}`;
}
var ia = Object.defineProperty;
var fa = Object.defineProperties;
var ca = Object.getOwnPropertyDescriptors;
var Fo2 = Object.getOwnPropertySymbols;
var aa = Object.prototype.hasOwnProperty;
var ua = Object.prototype.propertyIsEnumerable;
var zo2 = (t, e2, n5) => e2 in t ? ia(t, e2, { enumerable: true, configurable: true, writable: true, value: n5 }) : t[e2] = n5;
var la = (t, e2) => {
  for (var n5 in e2 || (e2 = {}))
    aa.call(e2, n5) && zo2(t, n5, e2[n5]);
  if (Fo2)
    for (var n5 of Fo2(e2))
      ua.call(e2, n5) && zo2(t, n5, e2[n5]);
  return t;
};
var da = (t, e2) => fa(t, ca(e2));
function qt2(t) {
  const e2 = [];
  return t.forEach((n5) => {
    const [r3, o5] = n5.split(":");
    e2.push(`${r3}:${o5}`);
  }), e2;
}
function Go2(t) {
  const e2 = [];
  return Object.values(t).forEach((n5) => {
    e2.push(...qt2(n5.accounts));
  }), e2;
}
function Zo2(t, e2) {
  const n5 = [];
  return Object.values(t).forEach((r3) => {
    qt2(r3.accounts).includes(e2) && n5.push(...r3.methods);
  }), n5;
}
function Wo2(t, e2) {
  const n5 = [];
  return Object.values(t).forEach((r3) => {
    qt2(r3.accounts).includes(e2) && n5.push(...r3.events);
  }), n5;
}
function Pn2(t) {
  return t.includes(":");
}
function Yo2(t) {
  return Pn2(t) ? t.split(":")[0] : t;
}
function ye2(t) {
  var e2, n5, r3;
  const o5 = {};
  if (!Ve2(t))
    return o5;
  for (const [s3, i4] of Object.entries(t)) {
    const f8 = Pn2(s3) ? [s3] : i4.chains, a3 = i4.methods || [], l8 = i4.events || [], c7 = Yo2(s3);
    o5[c7] = da(la({}, o5[c7]), { chains: ct2(f8, (e2 = o5[c7]) == null ? void 0 : e2.chains), methods: ct2(a3, (n5 = o5[c7]) == null ? void 0 : n5.methods), events: ct2(l8, (r3 = o5[c7]) == null ? void 0 : r3.events) });
  }
  return o5;
}
function Xo(t) {
  const e2 = {};
  return t == null ? void 0 : t.forEach((n5) => {
    var r3;
    const [o5, s3] = n5.split(":");
    e2[o5] || (e2[o5] = { accounts: [], chains: [], events: [], methods: [] }), e2[o5].accounts.push(n5), (r3 = e2[o5].chains) == null || r3.push(`${o5}:${s3}`);
  }), e2;
}
function ga(t, e2) {
  e2 = e2.map((r3) => r3.replace("did:pkh:", ""));
  const n5 = Xo(e2);
  for (const [r3, o5] of Object.entries(n5))
    o5.methods ? o5.methods = ct2(o5.methods, t) : o5.methods = t, o5.events = ["chainChanged", "accountsChanged"];
  return n5;
}
function ba(t, e2) {
  var n5, r3, o5, s3, i4, f8;
  const a3 = ye2(t), l8 = ye2(e2), c7 = {}, u3 = Object.keys(a3).concat(Object.keys(l8));
  for (const h6 of u3)
    c7[h6] = { chains: ct2((n5 = a3[h6]) == null ? void 0 : n5.chains, (r3 = l8[h6]) == null ? void 0 : r3.chains), methods: ct2((o5 = a3[h6]) == null ? void 0 : o5.methods, (s3 = l8[h6]) == null ? void 0 : s3.methods), events: ct2((i4 = a3[h6]) == null ? void 0 : i4.events, (f8 = l8[h6]) == null ? void 0 : f8.events) };
  return c7;
}
var Jo2 = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
var Qo2 = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function Et2(t, e2) {
  const { message: n5, code: r3 } = Qo2[t];
  return { message: e2 ? `${n5} ${e2}` : n5, code: r3 };
}
function Kt2(t, e2) {
  const { message: n5, code: r3 } = Jo2[t];
  return { message: e2 ? `${n5} ${e2}` : n5, code: r3 };
}
function me2(t, e2) {
  return Array.isArray(t) ? typeof e2 < "u" && t.length ? t.every(e2) : true : false;
}
function Ve2(t) {
  return Object.getPrototypeOf(t) === Object.prototype && Object.keys(t).length;
}
function kt2(t) {
  return typeof t > "u";
}
function it2(t, e2) {
  return e2 && kt2(t) ? true : typeof t == "string" && !!t.trim().length;
}
function qe2(t, e2) {
  return e2 && kt2(t) ? true : typeof t == "number" && !isNaN(t);
}
function ya(t, e2) {
  const { requiredNamespaces: n5 } = e2, r3 = Object.keys(t.namespaces), o5 = Object.keys(n5);
  let s3 = true;
  return It2(o5, r3) ? (r3.forEach((i4) => {
    const { accounts: f8, methods: a3, events: l8 } = t.namespaces[i4], c7 = qt2(f8), u3 = n5[i4];
    (!It2(ve2(i4, u3), c7) || !It2(u3.methods, a3) || !It2(u3.events, l8)) && (s3 = false);
  }), s3) : false;
}
function we2(t) {
  return it2(t, false) && t.includes(":") ? t.split(":").length === 2 : false;
}
function ts(t) {
  if (it2(t, false) && t.includes(":")) {
    const e2 = t.split(":");
    if (e2.length === 3) {
      const n5 = e2[0] + ":" + e2[1];
      return !!e2[2] && we2(n5);
    }
  }
  return false;
}
function ma(t) {
  function e2(n5) {
    try {
      return typeof new URL(n5) < "u";
    } catch {
      return false;
    }
  }
  try {
    if (it2(t, false)) {
      if (e2(t))
        return true;
      const n5 = Qe2(t);
      return e2(n5);
    }
  } catch {
  }
  return false;
}
function wa(t) {
  var e2;
  return (e2 = t == null ? void 0 : t.proposer) == null ? void 0 : e2.publicKey;
}
function xa(t) {
  return t == null ? void 0 : t.topic;
}
function va(t, e2) {
  let n5 = null;
  return it2(t == null ? void 0 : t.publicKey, false) || (n5 = Et2("MISSING_OR_INVALID", `${e2} controller public key should be a string`)), n5;
}
function Hn2(t) {
  let e2 = true;
  return me2(t) ? t.length && (e2 = t.every((n5) => it2(n5, false))) : e2 = false, e2;
}
function es(t, e2, n5) {
  let r3 = null;
  return me2(e2) && e2.length ? e2.forEach((o5) => {
    r3 || we2(o5) || (r3 = Kt2("UNSUPPORTED_CHAINS", `${n5}, chain ${o5} should be a string and conform to "namespace:chainId" format`));
  }) : we2(t) || (r3 = Kt2("UNSUPPORTED_CHAINS", `${n5}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), r3;
}
function ns(t, e2, n5) {
  let r3 = null;
  return Object.entries(t).forEach(([o5, s3]) => {
    if (r3)
      return;
    const i4 = es(o5, ve2(o5, s3), `${e2} ${n5}`);
    i4 && (r3 = i4);
  }), r3;
}
function rs(t, e2) {
  let n5 = null;
  return me2(t) ? t.forEach((r3) => {
    n5 || ts(r3) || (n5 = Kt2("UNSUPPORTED_ACCOUNTS", `${e2}, account ${r3} should be a string and conform to "namespace:chainId:address" format`));
  }) : n5 = Kt2("UNSUPPORTED_ACCOUNTS", `${e2}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), n5;
}
function os(t, e2) {
  let n5 = null;
  return Object.values(t).forEach((r3) => {
    if (n5)
      return;
    const o5 = rs(r3 == null ? void 0 : r3.accounts, `${e2} namespace`);
    o5 && (n5 = o5);
  }), n5;
}
function ss(t, e2) {
  let n5 = null;
  return Hn2(t == null ? void 0 : t.methods) ? Hn2(t == null ? void 0 : t.events) || (n5 = Kt2("UNSUPPORTED_EVENTS", `${e2}, events should be an array of strings or empty array for no events`)) : n5 = Kt2("UNSUPPORTED_METHODS", `${e2}, methods should be an array of strings or empty array for no methods`), n5;
}
function Dn(t, e2) {
  let n5 = null;
  return Object.values(t).forEach((r3) => {
    if (n5)
      return;
    const o5 = ss(r3, `${e2}, namespace`);
    o5 && (n5 = o5);
  }), n5;
}
function Ea(t, e2, n5) {
  let r3 = null;
  if (t && Ve2(t)) {
    const o5 = Dn(t, e2);
    o5 && (r3 = o5);
    const s3 = ns(t, e2, n5);
    s3 && (r3 = s3);
  } else
    r3 = Et2("MISSING_OR_INVALID", `${e2}, ${n5} should be an object with data`);
  return r3;
}
function is(t, e2) {
  let n5 = null;
  if (t && Ve2(t)) {
    const r3 = Dn(t, e2);
    r3 && (n5 = r3);
    const o5 = os(t, e2);
    o5 && (n5 = o5);
  } else
    n5 = Et2("MISSING_OR_INVALID", `${e2}, namespaces should be an object with data`);
  return n5;
}
function fs(t) {
  return it2(t.protocol, true);
}
function Ba(t, e2) {
  let n5 = false;
  return e2 && !t ? n5 = true : t && me2(t) && t.length && t.forEach((r3) => {
    n5 = fs(r3);
  }), n5;
}
function Ia(t) {
  return typeof t == "number";
}
function Aa(t) {
  return typeof t < "u" && typeof t !== null;
}
function Sa(t) {
  return !(!t || typeof t != "object" || !t.code || !qe2(t.code, false) || !t.message || !it2(t.message, false));
}
function Na(t) {
  return !(kt2(t) || !it2(t.method, false));
}
function Oa(t) {
  return !(kt2(t) || kt2(t.result) && kt2(t.error) || !qe2(t.id, false) || !it2(t.jsonrpc, false));
}
function Ua(t) {
  return !(kt2(t) || !it2(t.name, false));
}
function _a(t, e2) {
  return !(!we2(e2) || !Go2(t).includes(e2));
}
function Ta(t, e2, n5) {
  return it2(n5, false) ? Zo2(t, e2).includes(n5) : false;
}
function Ra(t, e2, n5) {
  return it2(n5, false) ? Wo2(t, e2).includes(n5) : false;
}
function cs(t, e2, n5) {
  let r3 = null;
  const o5 = $a(t), s3 = Ca(e2), i4 = Object.keys(o5), f8 = Object.keys(s3), a3 = as(Object.keys(t)), l8 = as(Object.keys(e2)), c7 = a3.filter((u3) => !l8.includes(u3));
  return c7.length && (r3 = Et2("NON_CONFORMING_NAMESPACES", `${n5} namespaces keys don't satisfy requiredNamespaces.
      Required: ${c7.toString()}
      Received: ${Object.keys(e2).toString()}`)), It2(i4, f8) || (r3 = Et2("NON_CONFORMING_NAMESPACES", `${n5} namespaces chains don't satisfy required namespaces.
      Required: ${i4.toString()}
      Approved: ${f8.toString()}`)), Object.keys(e2).forEach((u3) => {
    if (!u3.includes(":") || r3)
      return;
    const h6 = qt2(e2[u3].accounts);
    h6.includes(u3) || (r3 = Et2("NON_CONFORMING_NAMESPACES", `${n5} namespaces accounts don't satisfy namespace accounts for ${u3}
        Required: ${u3}
        Approved: ${h6.toString()}`));
  }), i4.forEach((u3) => {
    r3 || (It2(o5[u3].methods, s3[u3].methods) ? It2(o5[u3].events, s3[u3].events) || (r3 = Et2("NON_CONFORMING_NAMESPACES", `${n5} namespaces events don't satisfy namespace events for ${u3}`)) : r3 = Et2("NON_CONFORMING_NAMESPACES", `${n5} namespaces methods don't satisfy namespace methods for ${u3}`));
  }), r3;
}
function $a(t) {
  const e2 = {};
  return Object.keys(t).forEach((n5) => {
    var r3;
    n5.includes(":") ? e2[n5] = t[n5] : (r3 = t[n5].chains) == null || r3.forEach((o5) => {
      e2[o5] = { methods: t[n5].methods, events: t[n5].events };
    });
  }), e2;
}
function as(t) {
  return [...new Set(t.map((e2) => e2.includes(":") ? e2.split(":")[0] : e2))];
}
function Ca(t) {
  const e2 = {};
  return Object.keys(t).forEach((n5) => {
    if (n5.includes(":"))
      e2[n5] = t[n5];
    else {
      const r3 = qt2(t[n5].accounts);
      r3 == null ? void 0 : r3.forEach((o5) => {
        e2[o5] = { accounts: t[n5].accounts.filter((s3) => s3.includes(`${o5}:`)), methods: t[n5].methods, events: t[n5].events };
      });
    }
  }), e2;
}
function La(t, e2) {
  return qe2(t, false) && t <= e2.max && t >= e2.min;
}
function ja() {
  const t = Pt2();
  return new Promise((e2) => {
    switch (t) {
      case J3.browser:
        e2(us());
        break;
      case J3.reactNative:
        e2(ls());
        break;
      case J3.node:
        e2(ds());
        break;
      default:
        e2(true);
    }
  });
}
function us() {
  return zt2() && (navigator == null ? void 0 : navigator.onLine);
}
async function ls() {
  if (Bt2() && typeof global < "u" && global != null && global.NetInfo) {
    const t = await (global == null ? void 0 : global.NetInfo.fetch());
    return t == null ? void 0 : t.isConnected;
  }
  return true;
}
function ds() {
  return true;
}
function ka(t) {
  switch (Pt2()) {
    case J3.browser:
      hs(t);
      break;
    case J3.reactNative:
      ps(t);
      break;
    case J3.node:
      break;
  }
}
function hs(t) {
  !Bt2() && zt2() && (window.addEventListener("online", () => t(true)), window.addEventListener("offline", () => t(false)));
}
function ps(t) {
  Bt2() && typeof global < "u" && global != null && global.NetInfo && (global == null ? void 0 : global.NetInfo.addEventListener((e2) => t(e2 == null ? void 0 : e2.isConnected)));
}
function Pa() {
  var t;
  return zt2() && (0, import_window_getters.getDocument)() ? ((t = (0, import_window_getters.getDocument)()) == null ? void 0 : t.visibilityState) === "visible" : true;
}
var Mn2 = {};
var Ha = class {
  static get(e2) {
    return Mn2[e2];
  }
  static set(e2, n5) {
    Mn2[e2] = n5;
  }
  static delete(e2) {
    delete Mn2[e2];
  }
};
function gs(t) {
  const e2 = esm_default2.decode(t);
  if (e2.length < 33)
    throw new Error("Too short to contain a public key");
  return e2.slice(1, 33);
}
function bs({ publicKey: t, signature: e2, payload: n5 }) {
  var r3;
  const o5 = Vn2(n5.method), s3 = 128 | parseInt(((r3 = n5.version) == null ? void 0 : r3.toString()) || "4"), i4 = Ma(n5.address), f8 = n5.era === "00" ? new Uint8Array([0]) : Vn2(n5.era);
  if (f8.length !== 1 && f8.length !== 2)
    throw new Error("Invalid era length");
  const a3 = parseInt(n5.nonce, 16), l8 = new Uint8Array([a3 & 255, a3 >> 8 & 255]), c7 = BigInt(`0x${Da(n5.tip)}`), u3 = qa(c7), h6 = new Uint8Array([0, ...t, i4, ...e2, ...f8, ...l8, ...u3, ...o5]), g4 = Va(h6.length + 1);
  return new Uint8Array([...g4, s3, ...h6]);
}
function ys(t) {
  const e2 = Vn2(t), n5 = (0, import_blakejs.blake2b)(e2, void 0, 32);
  return "0x" + Buffer.from(n5).toString("hex");
}
function Vn2(t) {
  return new Uint8Array(t.replace(/^0x/, "").match(/.{1,2}/g).map((e2) => parseInt(e2, 16)));
}
function Da(t) {
  return t.startsWith("0x") ? t.slice(2) : t;
}
function Ma(t) {
  const e2 = esm_default2.decode(t)[0];
  return e2 === 42 ? 0 : e2 === 60 ? 2 : 1;
}
function Va(t) {
  if (t < 64)
    return new Uint8Array([t << 2]);
  if (t < 16384) {
    const e2 = t << 2 | 1;
    return new Uint8Array([e2 & 255, e2 >> 8 & 255]);
  } else if (t < 1 << 30) {
    const e2 = t << 2 | 2;
    return new Uint8Array([e2 & 255, e2 >> 8 & 255, e2 >> 16 & 255, e2 >> 24 & 255]);
  } else
    throw new Error("Compact encoding > 2^30 not supported");
}
function qa(t) {
  if (t < BigInt(1) << BigInt(6))
    return new Uint8Array([Number(t << BigInt(2))]);
  if (t < BigInt(1) << BigInt(14)) {
    const e2 = t << BigInt(2) | BigInt(1);
    return new Uint8Array([Number(e2 & BigInt(255)), Number(e2 >> BigInt(8) & BigInt(255))]);
  } else if (t < BigInt(1) << BigInt(30)) {
    const e2 = t << BigInt(2) | BigInt(2);
    return new Uint8Array([Number(e2 & BigInt(255)), Number(e2 >> BigInt(8) & BigInt(255)), Number(e2 >> BigInt(16) & BigInt(255)), Number(e2 >> BigInt(24) & BigInt(255))]);
  } else
    throw new Error("BigInt compact encoding not supported > 2^30");
}
function Ka(t) {
  const e2 = Uint8Array.from(Buffer.from(t.signature, "hex")), n5 = gs(t.transaction.address), r3 = bs({ publicKey: n5, signature: e2, payload: t.transaction }), o5 = Buffer.from(r3).toString("hex");
  return ys(o5);
}

// node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var import_events5 = __toESM(require_events());

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  DEFAULT_ERROR: () => DEFAULT_ERROR,
  IBaseJsonRpcProvider: () => n4,
  IEvents: () => e,
  IJsonRpcConnection: () => o2,
  IJsonRpcProvider: () => r2,
  INTERNAL_ERROR: () => INTERNAL_ERROR,
  INVALID_PARAMS: () => INVALID_PARAMS,
  INVALID_REQUEST: () => INVALID_REQUEST,
  METHOD_NOT_FOUND: () => METHOD_NOT_FOUND,
  PARSE_ERROR: () => PARSE_ERROR,
  RESERVED_ERROR_CODES: () => RESERVED_ERROR_CODES,
  SERVER_ERROR: () => SERVER_ERROR,
  SERVER_ERROR_CODE_RANGE: () => SERVER_ERROR_CODE_RANGE,
  STANDARD_ERROR_MAP: () => STANDARD_ERROR_MAP,
  formatErrorMessage: () => formatErrorMessage,
  formatJsonRpcError: () => formatJsonRpcError,
  formatJsonRpcRequest: () => formatJsonRpcRequest,
  formatJsonRpcResult: () => formatJsonRpcResult,
  getBigIntRpcId: () => getBigIntRpcId,
  getError: () => getError,
  getErrorByCode: () => getErrorByCode,
  isHttpUrl: () => isHttpUrl,
  isJsonRpcError: () => isJsonRpcError,
  isJsonRpcPayload: () => isJsonRpcPayload,
  isJsonRpcRequest: () => isJsonRpcRequest,
  isJsonRpcResponse: () => isJsonRpcResponse,
  isJsonRpcResult: () => isJsonRpcResult,
  isJsonRpcValidationInvalid: () => isJsonRpcValidationInvalid,
  isLocalhostUrl: () => isLocalhostUrl,
  isNodeJs: () => isNodeJs,
  isReservedErrorCode: () => isReservedErrorCode,
  isServerErrorCode: () => isServerErrorCode,
  isValidDefaultRoute: () => isValidDefaultRoute,
  isValidErrorCode: () => isValidErrorCode,
  isValidLeadingWildcardRoute: () => isValidLeadingWildcardRoute,
  isValidRoute: () => isValidRoute,
  isValidTrailingWildcardRoute: () => isValidTrailingWildcardRoute,
  isValidWildcardRoute: () => isValidWildcardRoute,
  isWsUrl: () => isWsUrl,
  parseConnectionError: () => parseConnectionError,
  payloadId: () => payloadId,
  validateJsonRpcError: () => validateJsonRpcError
});

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js
var PARSE_ERROR = "PARSE_ERROR";
var INVALID_REQUEST = "INVALID_REQUEST";
var METHOD_NOT_FOUND = "METHOD_NOT_FOUND";
var INVALID_PARAMS = "INVALID_PARAMS";
var INTERNAL_ERROR = "INTERNAL_ERROR";
var SERVER_ERROR = "SERVER_ERROR";
var RESERVED_ERROR_CODES = [-32700, -32600, -32601, -32602, -32603];
var SERVER_ERROR_CODE_RANGE = [-32e3, -32099];
var STANDARD_ERROR_MAP = {
  [PARSE_ERROR]: { code: -32700, message: "Parse error" },
  [INVALID_REQUEST]: { code: -32600, message: "Invalid Request" },
  [METHOD_NOT_FOUND]: { code: -32601, message: "Method not found" },
  [INVALID_PARAMS]: { code: -32602, message: "Invalid params" },
  [INTERNAL_ERROR]: { code: -32603, message: "Internal error" },
  [SERVER_ERROR]: { code: -32e3, message: "Server error" }
};
var DEFAULT_ERROR = SERVER_ERROR;

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js
function isServerErrorCode(code2) {
  return code2 <= SERVER_ERROR_CODE_RANGE[0] && code2 >= SERVER_ERROR_CODE_RANGE[1];
}
function isReservedErrorCode(code2) {
  return RESERVED_ERROR_CODES.includes(code2);
}
function isValidErrorCode(code2) {
  return typeof code2 === "number";
}
function getError(type) {
  if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return STANDARD_ERROR_MAP[type];
}
function getErrorByCode(code2) {
  const match = Object.values(STANDARD_ERROR_MAP).find((e2) => e2.code === code2);
  if (!match) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return match;
}
function validateJsonRpcError(response) {
  if (typeof response.error.code === "undefined") {
    return { valid: false, error: "Missing code for JSON-RPC error" };
  }
  if (typeof response.error.message === "undefined") {
    return { valid: false, error: "Missing message for JSON-RPC error" };
  }
  if (!isValidErrorCode(response.error.code)) {
    return {
      valid: false,
      error: `Invalid error code type for JSON-RPC: ${response.error.code}`
    };
  }
  if (isReservedErrorCode(response.error.code)) {
    const error = getErrorByCode(response.error.code);
    if (error.message !== STANDARD_ERROR_MAP[DEFAULT_ERROR].message && response.error.message === error.message) {
      return {
        valid: false,
        error: `Invalid error code message for JSON-RPC: ${response.error.code}`
      };
    }
  }
  return { valid: true };
}
function parseConnectionError(e2, url, type) {
  return e2.message.includes("getaddrinfo ENOTFOUND") || e2.message.includes("connect ECONNREFUSED") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e2;
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js
var env_exports = {};
__export(env_exports, {
  isNodeJs: () => isNodeJs
});
var import_environment = __toESM(require_cjs4());
__reExport(env_exports, __toESM(require_cjs4()));
var isNodeJs = import_environment.isNode;

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
__reExport(esm_exports, env_exports);

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js
function payloadId(entropy = 3) {
  const date = Date.now() * Math.pow(10, entropy);
  const extra = Math.floor(Math.random() * Math.pow(10, entropy));
  return date + extra;
}
function getBigIntRpcId(entropy = 6) {
  return BigInt(payloadId(entropy));
}
function formatJsonRpcRequest(method, params, id) {
  return {
    id: id || payloadId(),
    jsonrpc: "2.0",
    method,
    params
  };
}
function formatJsonRpcResult(id, result) {
  return {
    id,
    jsonrpc: "2.0",
    result
  };
}
function formatJsonRpcError(id, error, data) {
  return {
    id,
    jsonrpc: "2.0",
    error: formatErrorMessage(error, data)
  };
}
function formatErrorMessage(error, data) {
  if (typeof error === "undefined") {
    return getError(INTERNAL_ERROR);
  }
  if (typeof error === "string") {
    error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), { message: error });
  }
  if (typeof data !== "undefined") {
    error.data = data;
  }
  if (isReservedErrorCode(error.code)) {
    error = getErrorByCode(error.code);
  }
  return error;
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js
function isValidRoute(route) {
  if (route.includes("*")) {
    return isValidWildcardRoute(route);
  }
  if (/\W/g.test(route)) {
    return false;
  }
  return true;
}
function isValidDefaultRoute(route) {
  return route === "*";
}
function isValidWildcardRoute(route) {
  if (isValidDefaultRoute(route)) {
    return true;
  }
  if (!route.includes("*")) {
    return false;
  }
  if (route.split("*").length !== 2) {
    return false;
  }
  if (route.split("*").filter((x6) => x6.trim() === "").length !== 1) {
    return false;
  }
  return true;
}
function isValidLeadingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[0].trim();
}
function isValidTrailingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[1].trim();
}

// node_modules/@walletconnect/jsonrpc-types/dist/index.es.js
var e = class {
};
var o2 = class extends e {
  constructor(c7) {
    super();
  }
};
var n4 = class extends e {
  constructor() {
    super();
  }
};
var r2 = class extends n4 {
  constructor(c7) {
    super();
  }
};

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js
var HTTP_REGEX = "^https?:";
var WS_REGEX = "^wss?:";
function getUrlProtocol(url) {
  const matches = url.match(new RegExp(/^\w+:/, "gi"));
  if (!matches || !matches.length)
    return;
  return matches[0];
}
function matchRegexProtocol(url, regex) {
  const protocol = getUrlProtocol(url);
  if (typeof protocol === "undefined")
    return false;
  return new RegExp(regex).test(protocol);
}
function isHttpUrl(url) {
  return matchRegexProtocol(url, HTTP_REGEX);
}
function isWsUrl(url) {
  return matchRegexProtocol(url, WS_REGEX);
}
function isLocalhostUrl(url) {
  return new RegExp("wss?://localhost(:d{2,5})?").test(url);
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js
function isJsonRpcPayload(payload) {
  return typeof payload === "object" && "id" in payload && "jsonrpc" in payload && payload.jsonrpc === "2.0";
}
function isJsonRpcRequest(payload) {
  return isJsonRpcPayload(payload) && "method" in payload;
}
function isJsonRpcResponse(payload) {
  return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));
}
function isJsonRpcResult(payload) {
  return "result" in payload;
}
function isJsonRpcError(payload) {
  return "error" in payload;
}
function isJsonRpcValidationInvalid(validation) {
  return "error" in validation && validation.valid === false;
}

// node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var o3 = class extends r2 {
  constructor(t) {
    super(t), this.events = new import_events5.EventEmitter(), this.hasRegisteredEventListeners = false, this.connection = this.setConnection(t), this.connection.connected && this.registerEventListeners();
  }
  async connect(t = this.connection) {
    await this.open(t);
  }
  async disconnect() {
    await this.close();
  }
  on(t, e2) {
    this.events.on(t, e2);
  }
  once(t, e2) {
    this.events.once(t, e2);
  }
  off(t, e2) {
    this.events.off(t, e2);
  }
  removeListener(t, e2) {
    this.events.removeListener(t, e2);
  }
  async request(t, e2) {
    return this.requestStrict(formatJsonRpcRequest(t.method, t.params || [], t.id || getBigIntRpcId().toString()), e2);
  }
  async requestStrict(t, e2) {
    return new Promise(async (i4, s3) => {
      if (!this.connection.connected)
        try {
          await this.open();
        } catch (n5) {
          s3(n5);
        }
      this.events.on(`${t.id}`, (n5) => {
        isJsonRpcError(n5) ? s3(n5.error) : i4(n5.result);
      });
      try {
        await this.connection.send(t, e2);
      } catch (n5) {
        s3(n5);
      }
    });
  }
  setConnection(t = this.connection) {
    return t;
  }
  onPayload(t) {
    this.events.emit("payload", t), isJsonRpcResponse(t) ? this.events.emit(`${t.id}`, t) : this.events.emit("message", { type: t.method, data: t.params });
  }
  onClose(t) {
    t && t.code === 3e3 && this.events.emit("error", new Error(`WebSocket connection closed abnormally with code: ${t.code} ${t.reason ? `(${t.reason})` : ""}`)), this.events.emit("disconnect");
  }
  async open(t = this.connection) {
    this.connection === t && this.connection.connected || (this.connection.connected && this.close(), typeof t == "string" && (await this.connection.open(t), t = this.connection), this.connection = this.setConnection(t), await this.connection.open(), this.registerEventListeners(), this.events.emit("connect"));
  }
  async close() {
    await this.connection.close();
  }
  registerEventListeners() {
    this.hasRegisteredEventListeners || (this.connection.on("payload", (t) => this.onPayload(t)), this.connection.on("close", (t) => this.onClose(t)), this.connection.on("error", (t) => this.events.emit("error", t)), this.connection.on("register_error", (t) => this.onClose()), this.hasRegisteredEventListeners = true);
  }
};

// node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js
var import_events6 = __toESM(require_events());
var v3 = () => typeof WebSocket < "u" ? WebSocket : typeof global < "u" && typeof global.WebSocket < "u" ? global.WebSocket : typeof window < "u" && typeof window.WebSocket < "u" ? window.WebSocket : typeof self < "u" && typeof self.WebSocket < "u" ? self.WebSocket : require_browser2();
var w2 = () => typeof WebSocket < "u" || typeof global < "u" && typeof global.WebSocket < "u" || typeof window < "u" && typeof window.WebSocket < "u" || typeof self < "u" && typeof self.WebSocket < "u";
var d3 = (r3) => r3.split("?")[0];
var h4 = 10;
var b3 = v3();
var f3 = class {
  constructor(e2) {
    if (this.url = e2, this.events = new import_events6.EventEmitter(), this.registering = false, !isWsUrl(e2))
      throw new Error(`Provided URL is not compatible with WebSocket connection: ${e2}`);
    this.url = e2;
  }
  get connected() {
    return typeof this.socket < "u";
  }
  get connecting() {
    return this.registering;
  }
  on(e2, t) {
    this.events.on(e2, t);
  }
  once(e2, t) {
    this.events.once(e2, t);
  }
  off(e2, t) {
    this.events.off(e2, t);
  }
  removeListener(e2, t) {
    this.events.removeListener(e2, t);
  }
  async open(e2 = this.url) {
    await this.register(e2);
  }
  async close() {
    return new Promise((e2, t) => {
      if (typeof this.socket > "u") {
        t(new Error("Connection already closed"));
        return;
      }
      this.socket.onclose = (n5) => {
        this.onClose(n5), e2();
      }, this.socket.close();
    });
  }
  async send(e2) {
    typeof this.socket > "u" && (this.socket = await this.register());
    try {
      this.socket.send(safeJsonStringify(e2));
    } catch (t) {
      this.onError(e2.id, t);
    }
  }
  register(e2 = this.url) {
    if (!isWsUrl(e2))
      throw new Error(`Provided URL is not compatible with WebSocket connection: ${e2}`);
    if (this.registering) {
      const t = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= t || this.events.listenerCount("open") >= t) && this.events.setMaxListeners(t + 1), new Promise((n5, s3) => {
        this.events.once("register_error", (o5) => {
          this.resetMaxListeners(), s3(o5);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.socket > "u")
            return s3(new Error("WebSocket connection is missing or invalid"));
          n5(this.socket);
        });
      });
    }
    return this.url = e2, this.registering = true, new Promise((t, n5) => {
      const s3 = (0, esm_exports.isReactNative)() ? void 0 : { rejectUnauthorized: !isLocalhostUrl(e2) }, o5 = new b3(e2, [], s3);
      w2() ? o5.onerror = (i4) => {
        const a3 = i4;
        n5(this.emitError(a3.error));
      } : o5.on("error", (i4) => {
        n5(this.emitError(i4));
      }), o5.onopen = () => {
        this.onOpen(o5), t(o5);
      };
    });
  }
  onOpen(e2) {
    e2.onmessage = (t) => this.onPayload(t), e2.onclose = (t) => this.onClose(t), this.socket = e2, this.registering = false, this.events.emit("open");
  }
  onClose(e2) {
    this.socket = void 0, this.registering = false, this.events.emit("close", e2);
  }
  onPayload(e2) {
    if (typeof e2.data > "u")
      return;
    const t = typeof e2.data == "string" ? safeJsonParse(e2.data) : e2.data;
    this.events.emit("payload", t);
  }
  onError(e2, t) {
    const n5 = this.parseError(t), s3 = n5.message || n5.toString(), o5 = formatJsonRpcError(e2, s3);
    this.events.emit("payload", o5);
  }
  parseError(e2, t = this.url) {
    return parseConnectionError(e2, d3(t), "WS");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > h4 && this.events.setMaxListeners(h4);
  }
  emitError(e2) {
    const t = this.parseError(new Error((e2 == null ? void 0 : e2.message) || `WebSocket connection failed for host: ${d3(this.url)}`));
    return this.events.emit("register_error", t), t;
  }
};

// node_modules/@walletconnect/core/dist/index.es.js
var import_window_getters2 = __toESM(require_cjs2());
var ze2 = "wc";
var Le3 = 2;
var he3 = "core";
var B2 = `${ze2}@2:${he3}:`;
var Et3 = { name: he3, logger: "error" };
var It3 = { database: ":memory:" };
var Tt3 = "crypto";
var ke3 = "client_ed25519_seed";
var Ct2 = import_time4.ONE_DAY;
var Pt3 = "keychain";
var St3 = "0.3";
var Ot3 = "messages";
var Rt3 = "0.3";
var je3 = import_time4.SIX_HOURS;
var At2 = "publisher";
var xt3 = "irn";
var Nt3 = "error";
var Ue3 = "wss://relay.walletconnect.org";
var $t3 = "relayer";
var C3 = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" };
var zt3 = "_subscription";
var L2 = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" };
var Lt3 = 0.1;
var _e3 = "2.21.5";
var Q3 = { link_mode: "link_mode", relay: "relay" };
var le3 = { inbound: "inbound", outbound: "outbound" };
var kt3 = "0.3";
var jt3 = "WALLETCONNECT_CLIENT_ID";
var Fe2 = "WALLETCONNECT_LINK_MODE_APPS";
var $ = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" };
var Ut3 = "subscription";
var Ft2 = "0.3";
var Js = import_time4.FIVE_SECONDS * 1e3;
var Mt3 = "pairing";
var Kt3 = "0.3";
var se2 = { wc_pairingDelete: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1e3 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1001 } }, wc_pairingPing: { req: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1002 }, res: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1003 } }, unregistered_method: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 } } };
var re = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" };
var F2 = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
var Bt3 = "history";
var Vt3 = "0.3";
var qt3 = "expirer";
var M3 = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" };
var Gt3 = "0.3";
var Wt3 = "verify-api";
var Qs = "https://verify.walletconnect.com";
var Ht3 = "https://verify.walletconnect.org";
var ue2 = Ht3;
var Yt3 = `${ue2}/v3`;
var Jt3 = [Qs, Ht3];
var Xt3 = "echo";
var Zt3 = "https://echo.walletconnect.com";
var G3 = { pairing_started: "pairing_started", pairing_uri_validation_success: "pairing_uri_validation_success", pairing_uri_not_expired: "pairing_uri_not_expired", store_new_pairing: "store_new_pairing", subscribing_pairing_topic: "subscribing_pairing_topic", subscribe_pairing_topic_success: "subscribe_pairing_topic_success", existing_pairing: "existing_pairing", pairing_not_expired: "pairing_not_expired", emit_inactive_pairing: "emit_inactive_pairing", emit_session_proposal: "emit_session_proposal", subscribing_to_pairing_topic: "subscribing_to_pairing_topic" };
var Y2 = { no_wss_connection: "no_wss_connection", no_internet_connection: "no_internet_connection", malformed_pairing_uri: "malformed_pairing_uri", active_pairing_already_exists: "active_pairing_already_exists", subscribe_pairing_topic_failure: "subscribe_pairing_topic_failure", pairing_expired: "pairing_expired", proposal_expired: "proposal_expired", proposal_listener_not_found: "proposal_listener_not_found" };
var tr3 = { session_approve_started: "session_approve_started", proposal_not_expired: "proposal_not_expired", session_namespaces_validation_success: "session_namespaces_validation_success", create_session_topic: "create_session_topic", subscribing_session_topic: "subscribing_session_topic", subscribe_session_topic_success: "subscribe_session_topic_success", publishing_session_approve: "publishing_session_approve", session_approve_publish_success: "session_approve_publish_success", store_session: "store_session", publishing_session_settle: "publishing_session_settle", session_settle_publish_success: "session_settle_publish_success" };
var ir3 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", proposal_expired: "proposal_expired", subscribe_session_topic_failure: "subscribe_session_topic_failure", session_approve_publish_failure: "session_approve_publish_failure", session_settle_publish_failure: "session_settle_publish_failure", session_approve_namespace_validation_failure: "session_approve_namespace_validation_failure", proposal_not_found: "proposal_not_found" };
var sr3 = { authenticated_session_approve_started: "authenticated_session_approve_started", authenticated_session_not_expired: "authenticated_session_not_expired", chains_caip2_compliant: "chains_caip2_compliant", chains_evm_compliant: "chains_evm_compliant", create_authenticated_session_topic: "create_authenticated_session_topic", cacaos_verified: "cacaos_verified", store_authenticated_session: "store_authenticated_session", subscribing_authenticated_session_topic: "subscribing_authenticated_session_topic", subscribe_authenticated_session_topic_success: "subscribe_authenticated_session_topic_success", publishing_authenticated_session_approve: "publishing_authenticated_session_approve", authenticated_session_approve_publish_success: "authenticated_session_approve_publish_success" };
var rr3 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", missing_session_authenticate_request: "missing_session_authenticate_request", session_authenticate_request_expired: "session_authenticate_request_expired", chains_caip2_compliant_failure: "chains_caip2_compliant_failure", chains_evm_compliant_failure: "chains_evm_compliant_failure", invalid_cacao: "invalid_cacao", subscribe_authenticated_session_topic_failure: "subscribe_authenticated_session_topic_failure", authenticated_session_approve_publish_failure: "authenticated_session_approve_publish_failure", authenticated_session_pending_request_not_found: "authenticated_session_pending_request_not_found" };
var Qt3 = 0.1;
var ei2 = "event-client";
var ti = 86400;
var ii2 = "https://pulse.walletconnect.org/batch";
function nr2(r3, e2) {
  if (r3.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var t = new Uint8Array(256), i4 = 0; i4 < t.length; i4++)
    t[i4] = 255;
  for (var s3 = 0; s3 < r3.length; s3++) {
    var n5 = r3.charAt(s3), o5 = n5.charCodeAt(0);
    if (t[o5] !== 255)
      throw new TypeError(n5 + " is ambiguous");
    t[o5] = s3;
  }
  var a3 = r3.length, c7 = r3.charAt(0), h6 = Math.log(a3) / Math.log(256), l8 = Math.log(256) / Math.log(a3);
  function d5(u3) {
    if (u3 instanceof Uint8Array || (ArrayBuffer.isView(u3) ? u3 = new Uint8Array(u3.buffer, u3.byteOffset, u3.byteLength) : Array.isArray(u3) && (u3 = Uint8Array.from(u3))), !(u3 instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (u3.length === 0)
      return "";
    for (var b5 = 0, x6 = 0, I5 = 0, D4 = u3.length; I5 !== D4 && u3[I5] === 0; )
      I5++, b5++;
    for (var j5 = (D4 - I5) * l8 + 1 >>> 0, T5 = new Uint8Array(j5); I5 !== D4; ) {
      for (var q2 = u3[I5], J4 = 0, K7 = j5 - 1; (q2 !== 0 || J4 < x6) && K7 !== -1; K7--, J4++)
        q2 += 256 * T5[K7] >>> 0, T5[K7] = q2 % a3 >>> 0, q2 = q2 / a3 >>> 0;
      if (q2 !== 0)
        throw new Error("Non-zero carry");
      x6 = J4, I5++;
    }
    for (var H3 = j5 - x6; H3 !== j5 && T5[H3] === 0; )
      H3++;
    for (var me5 = c7.repeat(b5); H3 < j5; ++H3)
      me5 += r3.charAt(T5[H3]);
    return me5;
  }
  function g4(u3) {
    if (typeof u3 != "string")
      throw new TypeError("Expected String");
    if (u3.length === 0)
      return new Uint8Array();
    var b5 = 0;
    if (u3[b5] !== " ") {
      for (var x6 = 0, I5 = 0; u3[b5] === c7; )
        x6++, b5++;
      for (var D4 = (u3.length - b5) * h6 + 1 >>> 0, j5 = new Uint8Array(D4); u3[b5]; ) {
        var T5 = t[u3.charCodeAt(b5)];
        if (T5 === 255)
          return;
        for (var q2 = 0, J4 = D4 - 1; (T5 !== 0 || q2 < I5) && J4 !== -1; J4--, q2++)
          T5 += a3 * j5[J4] >>> 0, j5[J4] = T5 % 256 >>> 0, T5 = T5 / 256 >>> 0;
        if (T5 !== 0)
          throw new Error("Non-zero carry");
        I5 = q2, b5++;
      }
      if (u3[b5] !== " ") {
        for (var K7 = D4 - I5; K7 !== D4 && j5[K7] === 0; )
          K7++;
        for (var H3 = new Uint8Array(x6 + (D4 - K7)), me5 = x6; K7 !== D4; )
          H3[me5++] = j5[K7++];
        return H3;
      }
    }
  }
  function _3(u3) {
    var b5 = g4(u3);
    if (b5)
      return b5;
    throw new Error(`Non-${e2} character`);
  }
  return { encode: d5, decodeUnsafe: g4, decode: _3 };
}
var or4 = nr2;
var ar2 = or4;
var si2 = (r3) => {
  if (r3 instanceof Uint8Array && r3.constructor.name === "Uint8Array")
    return r3;
  if (r3 instanceof ArrayBuffer)
    return new Uint8Array(r3);
  if (ArrayBuffer.isView(r3))
    return new Uint8Array(r3.buffer, r3.byteOffset, r3.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var cr3 = (r3) => new TextEncoder().encode(r3);
var hr3 = (r3) => new TextDecoder().decode(r3);
var lr2 = class {
  constructor(e2, t, i4) {
    this.name = e2, this.prefix = t, this.baseEncode = i4;
  }
  encode(e2) {
    if (e2 instanceof Uint8Array)
      return `${this.prefix}${this.baseEncode(e2)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var ur2 = class {
  constructor(e2, t, i4) {
    if (this.name = e2, this.prefix = t, t.codePointAt(0) === void 0)
      throw new Error("Invalid prefix character");
    this.prefixCodePoint = t.codePointAt(0), this.baseDecode = i4;
  }
  decode(e2) {
    if (typeof e2 == "string") {
      if (e2.codePointAt(0) !== this.prefixCodePoint)
        throw Error(`Unable to decode multibase string ${JSON.stringify(e2)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e2.slice(this.prefix.length));
    } else
      throw Error("Can only multibase decode strings");
  }
  or(e2) {
    return ri2(this, e2);
  }
};
var dr3 = class {
  constructor(e2) {
    this.decoders = e2;
  }
  or(e2) {
    return ri2(this, e2);
  }
  decode(e2) {
    const t = e2[0], i4 = this.decoders[t];
    if (i4)
      return i4.decode(e2);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e2)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ri2 = (r3, e2) => new dr3({ ...r3.decoders || { [r3.prefix]: r3 }, ...e2.decoders || { [e2.prefix]: e2 } });
var gr3 = class {
  constructor(e2, t, i4, s3) {
    this.name = e2, this.prefix = t, this.baseEncode = i4, this.baseDecode = s3, this.encoder = new lr2(e2, t, i4), this.decoder = new ur2(e2, t, s3);
  }
  encode(e2) {
    return this.encoder.encode(e2);
  }
  decode(e2) {
    return this.decoder.decode(e2);
  }
};
var Ee2 = ({ name: r3, prefix: e2, encode: t, decode: i4 }) => new gr3(r3, e2, t, i4);
var de3 = ({ prefix: r3, name: e2, alphabet: t }) => {
  const { encode: i4, decode: s3 } = ar2(t, e2);
  return Ee2({ prefix: r3, name: e2, encode: i4, decode: (n5) => si2(s3(n5)) });
};
var pr3 = (r3, e2, t, i4) => {
  const s3 = {};
  for (let l8 = 0; l8 < e2.length; ++l8)
    s3[e2[l8]] = l8;
  let n5 = r3.length;
  for (; r3[n5 - 1] === "="; )
    --n5;
  const o5 = new Uint8Array(n5 * t / 8 | 0);
  let a3 = 0, c7 = 0, h6 = 0;
  for (let l8 = 0; l8 < n5; ++l8) {
    const d5 = s3[r3[l8]];
    if (d5 === void 0)
      throw new SyntaxError(`Non-${i4} character`);
    c7 = c7 << t | d5, a3 += t, a3 >= 8 && (a3 -= 8, o5[h6++] = 255 & c7 >> a3);
  }
  if (a3 >= t || 255 & c7 << 8 - a3)
    throw new SyntaxError("Unexpected end of data");
  return o5;
};
var yr3 = (r3, e2, t) => {
  const i4 = e2[e2.length - 1] === "=", s3 = (1 << t) - 1;
  let n5 = "", o5 = 0, a3 = 0;
  for (let c7 = 0; c7 < r3.length; ++c7)
    for (a3 = a3 << 8 | r3[c7], o5 += 8; o5 > t; )
      o5 -= t, n5 += e2[s3 & a3 >> o5];
  if (o5 && (n5 += e2[s3 & a3 << t - o5]), i4)
    for (; n5.length * t & 7; )
      n5 += "=";
  return n5;
};
var P3 = ({ name: r3, prefix: e2, bitsPerChar: t, alphabet: i4 }) => Ee2({ prefix: e2, name: r3, encode(s3) {
  return yr3(s3, i4, t);
}, decode(s3) {
  return pr3(s3, i4, t, r3);
} });
var br3 = Ee2({ prefix: "\0", name: "identity", encode: (r3) => hr3(r3), decode: (r3) => cr3(r3) });
var mr3 = Object.freeze({ __proto__: null, identity: br3 });
var fr3 = P3({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var Dr3 = Object.freeze({ __proto__: null, base2: fr3 });
var vr3 = P3({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var wr3 = Object.freeze({ __proto__: null, base8: vr3 });
var _r3 = de3({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Er3 = Object.freeze({ __proto__: null, base10: _r3 });
var Ir3 = P3({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Tr3 = P3({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Cr3 = Object.freeze({ __proto__: null, base16: Ir3, base16upper: Tr3 });
var Pr3 = P3({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Sr3 = P3({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Or3 = P3({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var Rr3 = P3({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var Ar3 = P3({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var xr3 = P3({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var Nr3 = P3({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var $r3 = P3({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var zr2 = P3({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var Lr3 = Object.freeze({ __proto__: null, base32: Pr3, base32upper: Sr3, base32pad: Or3, base32padupper: Rr3, base32hex: Ar3, base32hexupper: xr3, base32hexpad: Nr3, base32hexpadupper: $r3, base32z: zr2 });
var kr3 = de3({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var jr3 = de3({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var Ur3 = Object.freeze({ __proto__: null, base36: kr3, base36upper: jr3 });
var Fr2 = de3({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Mr3 = de3({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var Kr2 = Object.freeze({ __proto__: null, base58btc: Fr2, base58flickr: Mr3 });
var Br3 = P3({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var Vr3 = P3({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var qr3 = P3({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var Gr3 = P3({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Wr3 = Object.freeze({ __proto__: null, base64: Br3, base64pad: Vr3, base64url: qr3, base64urlpad: Gr3 });
var ni2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var Hr3 = ni2.reduce((r3, e2, t) => (r3[t] = e2, r3), []);
var Yr2 = ni2.reduce((r3, e2, t) => (r3[e2.codePointAt(0)] = t, r3), []);
function Jr2(r3) {
  return r3.reduce((e2, t) => (e2 += Hr3[t], e2), "");
}
function Xr3(r3) {
  const e2 = [];
  for (const t of r3) {
    const i4 = Yr2[t.codePointAt(0)];
    if (i4 === void 0)
      throw new Error(`Non-base256emoji character: ${t}`);
    e2.push(i4);
  }
  return new Uint8Array(e2);
}
var Zr3 = Ee2({ prefix: "🚀", name: "base256emoji", encode: Jr2, decode: Xr3 });
var Qr3 = Object.freeze({ __proto__: null, base256emoji: Zr3 });
var en3 = ai2;
var oi2 = 128;
var tn2 = 127;
var sn3 = ~tn2;
var rn3 = Math.pow(2, 31);
function ai2(r3, e2, t) {
  e2 = e2 || [], t = t || 0;
  for (var i4 = t; r3 >= rn3; )
    e2[t++] = r3 & 255 | oi2, r3 /= 128;
  for (; r3 & sn3; )
    e2[t++] = r3 & 255 | oi2, r3 >>>= 7;
  return e2[t] = r3 | 0, ai2.bytes = t - i4 + 1, e2;
}
var nn3 = Me3;
var on3 = 128;
var ci2 = 127;
function Me3(r3, i4) {
  var t = 0, i4 = i4 || 0, s3 = 0, n5 = i4, o5, a3 = r3.length;
  do {
    if (n5 >= a3)
      throw Me3.bytes = 0, new RangeError("Could not decode varint");
    o5 = r3[n5++], t += s3 < 28 ? (o5 & ci2) << s3 : (o5 & ci2) * Math.pow(2, s3), s3 += 7;
  } while (o5 >= on3);
  return Me3.bytes = n5 - i4, t;
}
var an2 = Math.pow(2, 7);
var cn2 = Math.pow(2, 14);
var hn2 = Math.pow(2, 21);
var ln2 = Math.pow(2, 28);
var un2 = Math.pow(2, 35);
var dn2 = Math.pow(2, 42);
var gn3 = Math.pow(2, 49);
var pn2 = Math.pow(2, 56);
var yn3 = Math.pow(2, 63);
var bn3 = function(r3) {
  return r3 < an2 ? 1 : r3 < cn2 ? 2 : r3 < hn2 ? 3 : r3 < ln2 ? 4 : r3 < un2 ? 5 : r3 < dn2 ? 6 : r3 < gn3 ? 7 : r3 < pn2 ? 8 : r3 < yn3 ? 9 : 10;
};
var mn3 = { encode: en3, decode: nn3, encodingLength: bn3 };
var hi2 = mn3;
var li2 = (r3, e2, t = 0) => (hi2.encode(r3, e2, t), e2);
var ui2 = (r3) => hi2.encodingLength(r3);
var Ke3 = (r3, e2) => {
  const t = e2.byteLength, i4 = ui2(r3), s3 = i4 + ui2(t), n5 = new Uint8Array(s3 + t);
  return li2(r3, n5, 0), li2(t, n5, i4), n5.set(e2, s3), new fn2(r3, t, e2, n5);
};
var fn2 = class {
  constructor(e2, t, i4, s3) {
    this.code = e2, this.size = t, this.digest = i4, this.bytes = s3;
  }
};
var di2 = ({ name: r3, code: e2, encode: t }) => new Dn2(r3, e2, t);
var Dn2 = class {
  constructor(e2, t, i4) {
    this.name = e2, this.code = t, this.encode = i4;
  }
  digest(e2) {
    if (e2 instanceof Uint8Array) {
      const t = this.encode(e2);
      return t instanceof Uint8Array ? Ke3(this.code, t) : t.then((i4) => Ke3(this.code, i4));
    } else
      throw Error("Unknown type, must be binary type");
  }
};
var gi2 = (r3) => async (e2) => new Uint8Array(await crypto.subtle.digest(r3, e2));
var vn3 = di2({ name: "sha2-256", code: 18, encode: gi2("SHA-256") });
var wn2 = di2({ name: "sha2-512", code: 19, encode: gi2("SHA-512") });
var _n3 = Object.freeze({ __proto__: null, sha256: vn3, sha512: wn2 });
var pi2 = 0;
var En3 = "identity";
var yi2 = si2;
var In3 = (r3) => Ke3(pi2, yi2(r3));
var Tn3 = { code: pi2, name: En3, encode: yi2, digest: In3 };
var Cn3 = Object.freeze({ __proto__: null, identity: Tn3 });
new TextEncoder(), new TextDecoder();
var bi2 = { ...mr3, ...Dr3, ...wr3, ...Er3, ...Cr3, ...Lr3, ...Ur3, ...Kr2, ...Wr3, ...Qr3 };
({ ..._n3, ...Cn3 });
function mi2(r3) {
  return globalThis.Buffer != null ? new Uint8Array(r3.buffer, r3.byteOffset, r3.byteLength) : r3;
}
function Pn3(r3 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? mi2(globalThis.Buffer.allocUnsafe(r3)) : new Uint8Array(r3);
}
function fi2(r3, e2, t, i4) {
  return { name: r3, prefix: e2, encoder: { name: r3, prefix: e2, encode: t }, decoder: { decode: i4 } };
}
var Di2 = fi2("utf8", "u", (r3) => "u" + new TextDecoder("utf8").decode(r3), (r3) => new TextEncoder().encode(r3.substring(1)));
var Be3 = fi2("ascii", "a", (r3) => {
  let e2 = "a";
  for (let t = 0; t < r3.length; t++)
    e2 += String.fromCharCode(r3[t]);
  return e2;
}, (r3) => {
  r3 = r3.substring(1);
  const e2 = Pn3(r3.length);
  for (let t = 0; t < r3.length; t++)
    e2[t] = r3.charCodeAt(t);
  return e2;
});
var Sn3 = { utf8: Di2, "utf-8": Di2, hex: bi2.base16, latin1: Be3, ascii: Be3, binary: Be3, ...bi2 };
function On3(r3, e2 = "utf8") {
  const t = Sn3[e2];
  if (!t)
    throw new Error(`Unsupported encoding "${e2}"`);
  return (e2 === "utf8" || e2 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? mi2(globalThis.Buffer.from(r3, "utf-8")) : t.decoder.decode(`${t.prefix}${r3}`);
}
var Rn3 = Object.defineProperty;
var An3 = (r3, e2, t) => e2 in r3 ? Rn3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var W3 = (r3, e2, t) => An3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var vi2 = class {
  constructor(e2, t) {
    this.core = e2, this.logger = t, W3(this, "keychain", /* @__PURE__ */ new Map()), W3(this, "name", Pt3), W3(this, "version", St3), W3(this, "initialized", false), W3(this, "storagePrefix", B2), W3(this, "init", async () => {
      if (!this.initialized) {
        const i4 = await this.getKeyChain();
        typeof i4 < "u" && (this.keychain = i4), this.initialized = true;
      }
    }), W3(this, "has", (i4) => (this.isInitialized(), this.keychain.has(i4))), W3(this, "set", async (i4, s3) => {
      this.isInitialized(), this.keychain.set(i4, s3), await this.persist();
    }), W3(this, "get", (i4) => {
      this.isInitialized();
      const s3 = this.keychain.get(i4);
      if (typeof s3 > "u") {
        const { message: n5 } = Et2("NO_MATCHING_KEY", `${this.name}: ${i4}`);
        throw new Error(n5);
      }
      return s3;
    }), W3(this, "del", async (i4) => {
      this.isInitialized(), this.keychain.delete(i4), await this.persist();
    }), this.core = e2, this.logger = E2(t, this.name);
  }
  get context() {
    return y2(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setKeyChain(e2) {
    await this.core.storage.setItem(this.storageKey, Ys(e2));
  }
  async getKeyChain() {
    const e2 = await this.core.storage.getItem(this.storageKey);
    return typeof e2 < "u" ? Xs(e2) : void 0;
  }
  async persist() {
    await this.setKeyChain(this.keychain);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var xn3 = Object.defineProperty;
var Nn3 = (r3, e2, t) => e2 in r3 ? xn3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var S3 = (r3, e2, t) => Nn3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var wi2 = class {
  constructor(e2, t, i4) {
    this.core = e2, this.logger = t, S3(this, "name", Tt3), S3(this, "keychain"), S3(this, "randomSessionIdentifier", qc()), S3(this, "initialized", false), S3(this, "init", async () => {
      this.initialized || (await this.keychain.init(), this.initialized = true);
    }), S3(this, "hasKeys", (s3) => (this.isInitialized(), this.keychain.has(s3))), S3(this, "getClientId", async () => {
      this.isInitialized();
      const s3 = await this.getClientSeed(), n5 = Po(s3);
      return Qe(n5.publicKey);
    }), S3(this, "generateKeyPair", () => {
      this.isInitialized();
      const s3 = Vc();
      return this.setPrivateKey(s3.publicKey, s3.privateKey);
    }), S3(this, "signJWT", async (s3) => {
      this.isInitialized();
      const n5 = await this.getClientSeed(), o5 = Po(n5), a3 = this.randomSessionIdentifier, c7 = Ct2;
      return await Qo(a3, s3, c7, o5);
    }), S3(this, "generateSharedKey", (s3, n5, o5) => {
      this.isInitialized();
      const a3 = this.getPrivateKey(s3), c7 = Kc(a3, n5);
      return this.setSymKey(c7, o5);
    }), S3(this, "setSymKey", async (s3, n5) => {
      this.isInitialized();
      const o5 = n5 || Fc(s3);
      return await this.keychain.set(o5, s3), o5;
    }), S3(this, "deleteKeyPair", async (s3) => {
      this.isInitialized(), await this.keychain.del(s3);
    }), S3(this, "deleteSymKey", async (s3) => {
      this.isInitialized(), await this.keychain.del(s3);
    }), S3(this, "encode", async (s3, n5, o5) => {
      this.isInitialized();
      const a3 = Ho2(o5), c7 = safeJsonStringify(n5);
      if (Qc(a3))
        return Wc(c7, o5 == null ? void 0 : o5.encoding);
      if (Jc(a3)) {
        const g4 = a3.senderPublicKey, _3 = a3.receiverPublicKey;
        s3 = await this.generateSharedKey(g4, _3);
      }
      const h6 = this.getSymKey(s3), { type: l8, senderPublicKey: d5 } = a3;
      return Gc({ type: l8, symKey: h6, message: c7, senderPublicKey: d5, encoding: o5 == null ? void 0 : o5.encoding });
    }), S3(this, "decode", async (s3, n5, o5) => {
      this.isInitialized();
      const a3 = Xc(n5, o5);
      if (Qc(a3)) {
        const c7 = Yc(n5, o5 == null ? void 0 : o5.encoding);
        return safeJsonParse(c7);
      }
      if (Jc(a3)) {
        const c7 = a3.receiverPublicKey, h6 = a3.senderPublicKey;
        s3 = await this.generateSharedKey(c7, h6);
      }
      try {
        const c7 = this.getSymKey(s3), h6 = Zc({ symKey: c7, encoded: n5, encoding: o5 == null ? void 0 : o5.encoding });
        return safeJsonParse(h6);
      } catch (c7) {
        this.logger.error(`Failed to decode message from topic: '${s3}', clientId: '${await this.getClientId()}'`), this.logger.error(c7);
      }
    }), S3(this, "getPayloadType", (s3, n5 = Qt2) => {
      const o5 = Me2({ encoded: s3, encoding: n5 });
      return Vt2(o5.type);
    }), S3(this, "getPayloadSenderPublicKey", (s3, n5 = Qt2) => {
      const o5 = Me2({ encoded: s3, encoding: n5 });
      return o5.senderPublicKey ? toString4(o5.senderPublicKey, tt) : void 0;
    }), this.core = e2, this.logger = E2(t, this.name), this.keychain = i4 || new vi2(this.core, this.logger);
  }
  get context() {
    return y2(this.logger);
  }
  async setPrivateKey(e2, t) {
    return await this.keychain.set(e2, t), e2;
  }
  getPrivateKey(e2) {
    return this.keychain.get(e2);
  }
  async getClientSeed() {
    let e2 = "";
    try {
      e2 = this.keychain.get(ke3);
    } catch {
      e2 = qc(), await this.keychain.set(ke3, e2);
    }
    return On3(e2, "base16");
  }
  getSymKey(e2) {
    return this.keychain.get(e2);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var $n3 = Object.defineProperty;
var zn3 = Object.defineProperties;
var Ln3 = Object.getOwnPropertyDescriptors;
var _i2 = Object.getOwnPropertySymbols;
var kn3 = Object.prototype.hasOwnProperty;
var jn3 = Object.prototype.propertyIsEnumerable;
var Ve3 = (r3, e2, t) => e2 in r3 ? $n3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var Un3 = (r3, e2) => {
  for (var t in e2 || (e2 = {}))
    kn3.call(e2, t) && Ve3(r3, t, e2[t]);
  if (_i2)
    for (var t of _i2(e2))
      jn3.call(e2, t) && Ve3(r3, t, e2[t]);
  return r3;
};
var Fn3 = (r3, e2) => zn3(r3, Ln3(e2));
var k5 = (r3, e2, t) => Ve3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Ei2 = class extends y3 {
  constructor(e2, t) {
    super(e2, t), this.logger = e2, this.core = t, k5(this, "messages", /* @__PURE__ */ new Map()), k5(this, "messagesWithoutClientAck", /* @__PURE__ */ new Map()), k5(this, "name", Ot3), k5(this, "version", Rt3), k5(this, "initialized", false), k5(this, "storagePrefix", B2), k5(this, "init", async () => {
      if (!this.initialized) {
        this.logger.trace("Initialized");
        try {
          const i4 = await this.getRelayerMessages();
          typeof i4 < "u" && (this.messages = i4);
          const s3 = await this.getRelayerMessagesWithoutClientAck();
          typeof s3 < "u" && (this.messagesWithoutClientAck = s3), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
        } catch (i4) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(i4);
        } finally {
          this.initialized = true;
        }
      }
    }), k5(this, "set", async (i4, s3, n5) => {
      this.isInitialized();
      const o5 = zc(s3);
      let a3 = this.messages.get(i4);
      if (typeof a3 > "u" && (a3 = {}), typeof a3[o5] < "u")
        return o5;
      if (a3[o5] = s3, this.messages.set(i4, a3), n5 === le3.inbound) {
        const c7 = this.messagesWithoutClientAck.get(i4) || {};
        this.messagesWithoutClientAck.set(i4, Fn3(Un3({}, c7), { [o5]: s3 }));
      }
      return await this.persist(), o5;
    }), k5(this, "get", (i4) => {
      this.isInitialized();
      let s3 = this.messages.get(i4);
      return typeof s3 > "u" && (s3 = {}), s3;
    }), k5(this, "getWithoutAck", (i4) => {
      this.isInitialized();
      const s3 = {};
      for (const n5 of i4) {
        const o5 = this.messagesWithoutClientAck.get(n5) || {};
        s3[n5] = Object.values(o5);
      }
      return s3;
    }), k5(this, "has", (i4, s3) => {
      this.isInitialized();
      const n5 = this.get(i4), o5 = zc(s3);
      return typeof n5[o5] < "u";
    }), k5(this, "ack", async (i4, s3) => {
      this.isInitialized();
      const n5 = this.messagesWithoutClientAck.get(i4);
      if (typeof n5 > "u")
        return;
      const o5 = zc(s3);
      delete n5[o5], Object.keys(n5).length === 0 ? this.messagesWithoutClientAck.delete(i4) : this.messagesWithoutClientAck.set(i4, n5), await this.persist();
    }), k5(this, "del", async (i4) => {
      this.isInitialized(), this.messages.delete(i4), this.messagesWithoutClientAck.delete(i4), await this.persist();
    }), this.logger = E2(e2, this.name), this.core = t;
  }
  get context() {
    return y2(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get storageKeyWithoutClientAck() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name + "_withoutClientAck";
  }
  async setRelayerMessages(e2) {
    await this.core.storage.setItem(this.storageKey, Ys(e2));
  }
  async setRelayerMessagesWithoutClientAck(e2) {
    await this.core.storage.setItem(this.storageKeyWithoutClientAck, Ys(e2));
  }
  async getRelayerMessages() {
    const e2 = await this.core.storage.getItem(this.storageKey);
    return typeof e2 < "u" ? Xs(e2) : void 0;
  }
  async getRelayerMessagesWithoutClientAck() {
    const e2 = await this.core.storage.getItem(this.storageKeyWithoutClientAck);
    return typeof e2 < "u" ? Xs(e2) : void 0;
  }
  async persist() {
    await this.setRelayerMessages(this.messages), await this.setRelayerMessagesWithoutClientAck(this.messagesWithoutClientAck);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var Mn3 = Object.defineProperty;
var Kn3 = Object.defineProperties;
var Bn3 = Object.getOwnPropertyDescriptors;
var Ii2 = Object.getOwnPropertySymbols;
var Vn3 = Object.prototype.hasOwnProperty;
var qn3 = Object.prototype.propertyIsEnumerable;
var qe3 = (r3, e2, t) => e2 in r3 ? Mn3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var Ie3 = (r3, e2) => {
  for (var t in e2 || (e2 = {}))
    Vn3.call(e2, t) && qe3(r3, t, e2[t]);
  if (Ii2)
    for (var t of Ii2(e2))
      qn3.call(e2, t) && qe3(r3, t, e2[t]);
  return r3;
};
var Ge2 = (r3, e2) => Kn3(r3, Bn3(e2));
var V2 = (r3, e2, t) => qe3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Gn2 = class extends m2 {
  constructor(e2, t) {
    super(e2, t), this.relayer = e2, this.logger = t, V2(this, "events", new import_events7.EventEmitter()), V2(this, "name", At2), V2(this, "queue", /* @__PURE__ */ new Map()), V2(this, "publishTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE)), V2(this, "initialPublishTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), V2(this, "needsTransportRestart", false), V2(this, "publish", async (i4, s3, n5) => {
      var o5;
      this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: i4, message: s3, opts: n5 } });
      const a3 = (n5 == null ? void 0 : n5.ttl) || je3, c7 = ea(n5), h6 = (n5 == null ? void 0 : n5.prompt) || false, l8 = (n5 == null ? void 0 : n5.tag) || 0, d5 = (n5 == null ? void 0 : n5.id) || getBigIntRpcId().toString(), g4 = { topic: i4, message: s3, opts: { ttl: a3, relay: c7, prompt: h6, tag: l8, id: d5, attestation: n5 == null ? void 0 : n5.attestation, tvf: n5 == null ? void 0 : n5.tvf } }, _3 = `Failed to publish payload, please try again. id:${d5} tag:${l8}`;
      try {
        const u3 = new Promise(async (b5) => {
          const x6 = ({ id: D4 }) => {
            g4.opts.id === D4 && (this.removeRequestFromQueue(D4), this.relayer.events.removeListener(C3.publish, x6), b5(g4));
          };
          this.relayer.events.on(C3.publish, x6);
          const I5 = ni(new Promise((D4, j5) => {
            this.rpcPublish({ topic: i4, message: s3, ttl: a3, prompt: h6, tag: l8, id: d5, attestation: n5 == null ? void 0 : n5.attestation, tvf: n5 == null ? void 0 : n5.tvf }).then(D4).catch((T5) => {
              this.logger.warn(T5, T5 == null ? void 0 : T5.message), j5(T5);
            });
          }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${d5} tag:${l8}`);
          try {
            await I5, this.events.removeListener(C3.publish, x6);
          } catch (D4) {
            this.queue.set(d5, Ge2(Ie3({}, g4), { attempt: 1 })), this.logger.warn(D4, D4 == null ? void 0 : D4.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: d5, topic: i4, message: s3, opts: n5 } }), await ni(u3, this.publishTimeout, _3);
      } catch (u3) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(u3), (o5 = n5 == null ? void 0 : n5.internal) != null && o5.throwOnFailedPublish)
          throw u3;
      } finally {
        this.queue.delete(d5);
      }
    }), V2(this, "on", (i4, s3) => {
      this.events.on(i4, s3);
    }), V2(this, "once", (i4, s3) => {
      this.events.once(i4, s3);
    }), V2(this, "off", (i4, s3) => {
      this.events.off(i4, s3);
    }), V2(this, "removeListener", (i4, s3) => {
      this.events.removeListener(i4, s3);
    }), this.relayer = e2, this.logger = E2(t, this.name), this.registerEventListeners();
  }
  get context() {
    return y2(this.logger);
  }
  async rpcPublish(e2) {
    var t, i4, s3, n5;
    const { topic: o5, message: a3, ttl: c7 = je3, prompt: h6, tag: l8, id: d5, attestation: g4, tvf: _3 } = e2, u3 = { method: na(ea().protocol).publish, params: Ie3({ topic: o5, message: a3, ttl: c7, prompt: h6, tag: l8, attestation: g4 }, _3), id: d5 };
    kt2((t = u3.params) == null ? void 0 : t.prompt) && ((i4 = u3.params) == null || delete i4.prompt), kt2((s3 = u3.params) == null ? void 0 : s3.tag) && ((n5 = u3.params) == null || delete n5.tag), this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: u3 });
    const b5 = await this.relayer.request(u3);
    return this.relayer.events.emit(C3.publish, e2), this.logger.debug("Successfully Published Payload"), b5;
  }
  removeRequestFromQueue(e2) {
    this.queue.delete(e2);
  }
  checkQueue() {
    this.queue.forEach(async (e2, t) => {
      const i4 = e2.attempt + 1;
      this.queue.set(t, Ge2(Ie3({}, e2), { attempt: i4 }));
      const { topic: s3, message: n5, opts: o5, attestation: a3 } = e2;
      this.logger.warn({}, `Publisher: queue->publishing: ${e2.opts.id}, tag: ${e2.opts.tag}, attempt: ${i4}`), await this.rpcPublish(Ge2(Ie3({}, e2), { topic: s3, message: n5, ttl: o5.ttl, prompt: o5.prompt, tag: o5.tag, id: o5.id, attestation: a3, tvf: o5.tvf })), this.logger.warn({}, `Publisher: queue->published: ${e2.opts.id}`);
    });
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(r.pulse, () => {
      if (this.needsTransportRestart) {
        this.needsTransportRestart = false, this.relayer.events.emit(C3.connection_stalled);
        return;
      }
      this.checkQueue();
    }), this.relayer.on(C3.message_ack, (e2) => {
      this.removeRequestFromQueue(e2.id.toString());
    });
  }
};
var Wn2 = Object.defineProperty;
var Hn3 = (r3, e2, t) => e2 in r3 ? Wn2(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var ne2 = (r3, e2, t) => Hn3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Yn2 = class {
  constructor() {
    ne2(this, "map", /* @__PURE__ */ new Map()), ne2(this, "set", (e2, t) => {
      const i4 = this.get(e2);
      this.exists(e2, t) || this.map.set(e2, [...i4, t]);
    }), ne2(this, "get", (e2) => this.map.get(e2) || []), ne2(this, "exists", (e2, t) => this.get(e2).includes(t)), ne2(this, "delete", (e2, t) => {
      if (typeof t > "u") {
        this.map.delete(e2);
        return;
      }
      if (!this.map.has(e2))
        return;
      const i4 = this.get(e2);
      if (!this.exists(e2, t))
        return;
      const s3 = i4.filter((n5) => n5 !== t);
      if (!s3.length) {
        this.map.delete(e2);
        return;
      }
      this.map.set(e2, s3);
    }), ne2(this, "clear", () => {
      this.map.clear();
    });
  }
  get topics() {
    return Array.from(this.map.keys());
  }
};
var Jn3 = Object.defineProperty;
var Xn2 = Object.defineProperties;
var Zn2 = Object.getOwnPropertyDescriptors;
var Ti2 = Object.getOwnPropertySymbols;
var Qn3 = Object.prototype.hasOwnProperty;
var eo3 = Object.prototype.propertyIsEnumerable;
var We2 = (r3, e2, t) => e2 in r3 ? Jn3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var ge3 = (r3, e2) => {
  for (var t in e2 || (e2 = {}))
    Qn3.call(e2, t) && We2(r3, t, e2[t]);
  if (Ti2)
    for (var t of Ti2(e2))
      eo3.call(e2, t) && We2(r3, t, e2[t]);
  return r3;
};
var He3 = (r3, e2) => Xn2(r3, Zn2(e2));
var f4 = (r3, e2, t) => We2(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Ci2 = class extends P {
  constructor(e2, t) {
    super(e2, t), this.relayer = e2, this.logger = t, f4(this, "subscriptions", /* @__PURE__ */ new Map()), f4(this, "topicMap", new Yn2()), f4(this, "events", new import_events7.EventEmitter()), f4(this, "name", Ut3), f4(this, "version", Ft2), f4(this, "pending", /* @__PURE__ */ new Map()), f4(this, "cached", []), f4(this, "initialized", false), f4(this, "storagePrefix", B2), f4(this, "subscribeTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE)), f4(this, "initialSubscribeTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), f4(this, "clientId"), f4(this, "batchSubscribeTopicsLimit", 500), f4(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), this.registerEventListeners(), await this.restore()), this.initialized = true;
    }), f4(this, "subscribe", async (i4, s3) => {
      this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i4, opts: s3 } });
      try {
        const n5 = ea(s3), o5 = { topic: i4, relay: n5, transportType: s3 == null ? void 0 : s3.transportType };
        this.pending.set(i4, o5);
        const a3 = await this.rpcSubscribe(i4, n5, s3);
        return typeof a3 == "string" && (this.onSubscribe(a3, o5), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i4, opts: s3 } })), a3;
      } catch (n5) {
        throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(n5), n5;
      }
    }), f4(this, "unsubscribe", async (i4, s3) => {
      this.isInitialized(), typeof (s3 == null ? void 0 : s3.id) < "u" ? await this.unsubscribeById(i4, s3.id, s3) : await this.unsubscribeByTopic(i4, s3);
    }), f4(this, "isSubscribed", (i4) => new Promise((s3) => {
      s3(this.topicMap.topics.includes(i4));
    })), f4(this, "isKnownTopic", (i4) => new Promise((s3) => {
      s3(this.topicMap.topics.includes(i4) || this.pending.has(i4) || this.cached.some((n5) => n5.topic === i4));
    })), f4(this, "on", (i4, s3) => {
      this.events.on(i4, s3);
    }), f4(this, "once", (i4, s3) => {
      this.events.once(i4, s3);
    }), f4(this, "off", (i4, s3) => {
      this.events.off(i4, s3);
    }), f4(this, "removeListener", (i4, s3) => {
      this.events.removeListener(i4, s3);
    }), f4(this, "start", async () => {
      await this.onConnect();
    }), f4(this, "stop", async () => {
      await this.onDisconnect();
    }), f4(this, "restart", async () => {
      await this.restore(), await this.onRestart();
    }), f4(this, "checkPending", async () => {
      if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected))
        return;
      const i4 = [];
      this.pending.forEach((s3) => {
        i4.push(s3);
      }), await this.batchSubscribe(i4);
    }), f4(this, "registerEventListeners", () => {
      this.relayer.core.heartbeat.on(r.pulse, async () => {
        await this.checkPending();
      }), this.events.on($.created, async (i4) => {
        const s3 = $.created;
        this.logger.info(`Emitting ${s3}`), this.logger.debug({ type: "event", event: s3, data: i4 }), await this.persist();
      }), this.events.on($.deleted, async (i4) => {
        const s3 = $.deleted;
        this.logger.info(`Emitting ${s3}`), this.logger.debug({ type: "event", event: s3, data: i4 }), await this.persist();
      });
    }), this.relayer = e2, this.logger = E2(t, this.name), this.clientId = "";
  }
  get context() {
    return y2(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.subscriptions.size;
  }
  get ids() {
    return Array.from(this.subscriptions.keys());
  }
  get values() {
    return Array.from(this.subscriptions.values());
  }
  get topics() {
    return this.topicMap.topics;
  }
  get hasAnyTopics() {
    return this.topicMap.topics.length > 0 || this.pending.size > 0 || this.cached.length > 0 || this.subscriptions.size > 0;
  }
  hasSubscription(e2, t) {
    let i4 = false;
    try {
      i4 = this.getSubscription(e2).topic === t;
    } catch {
    }
    return i4;
  }
  reset() {
    this.cached = [], this.initialized = true;
  }
  onDisable() {
    this.values.length > 0 && (this.cached = this.values), this.subscriptions.clear(), this.topicMap.clear();
  }
  async unsubscribeByTopic(e2, t) {
    const i4 = this.topicMap.get(e2);
    await Promise.all(i4.map(async (s3) => await this.unsubscribeById(e2, s3, t)));
  }
  async unsubscribeById(e2, t, i4) {
    this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e2, id: t, opts: i4 } });
    try {
      const s3 = ea(i4);
      await this.restartToComplete({ topic: e2, id: t, relay: s3 }), await this.rpcUnsubscribe(e2, t, s3);
      const n5 = Kt2("USER_DISCONNECTED", `${this.name}, ${e2}`);
      await this.onUnsubscribe(e2, t, n5), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e2, id: t, opts: i4 } });
    } catch (s3) {
      throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(s3), s3;
    }
  }
  async rpcSubscribe(e2, t, i4) {
    var s3;
    (!i4 || (i4 == null ? void 0 : i4.transportType) === Q3.relay) && await this.restartToComplete({ topic: e2, id: e2, relay: t });
    const n5 = { method: na(t.protocol).subscribe, params: { topic: e2 } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: n5 });
    const o5 = (s3 = i4 == null ? void 0 : i4.internal) == null ? void 0 : s3.throwOnFailedPublish;
    try {
      const a3 = await this.getSubscriptionId(e2);
      if ((i4 == null ? void 0 : i4.transportType) === Q3.link_mode)
        return setTimeout(() => {
          (this.relayer.connected || this.relayer.connecting) && this.relayer.request(n5).catch((l8) => this.logger.warn(l8));
        }, (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), a3;
      const c7 = new Promise(async (l8) => {
        const d5 = (g4) => {
          g4.topic === e2 && (this.events.removeListener($.created, d5), l8(g4.id));
        };
        this.events.on($.created, d5);
        try {
          const g4 = await ni(new Promise((_3, u3) => {
            this.relayer.request(n5).catch((b5) => {
              this.logger.warn(b5, b5 == null ? void 0 : b5.message), u3(b5);
            }).then(_3);
          }), this.initialSubscribeTimeout, `Subscribing to ${e2} failed, please try again`);
          this.events.removeListener($.created, d5), l8(g4);
        } catch {
        }
      }), h6 = await ni(c7, this.subscribeTimeout, `Subscribing to ${e2} failed, please try again`);
      if (!h6 && o5)
        throw new Error(`Subscribing to ${e2} failed, please try again`);
      return h6 ? a3 : null;
    } catch (a3) {
      if (this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(C3.connection_stalled), o5)
        throw a3;
    }
    return null;
  }
  async rpcBatchSubscribe(e2) {
    if (!e2.length)
      return;
    const t = e2[0].relay, i4 = { method: na(t.protocol).batchSubscribe, params: { topics: e2.map((s3) => s3.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i4 });
    try {
      await await ni(new Promise((s3) => {
        this.relayer.request(i4).catch((n5) => this.logger.warn(n5)).then(s3);
      }), this.subscribeTimeout, "rpcBatchSubscribe failed, please try again");
    } catch {
      this.relayer.events.emit(C3.connection_stalled);
    }
  }
  async rpcBatchFetchMessages(e2) {
    if (!e2.length)
      return;
    const t = e2[0].relay, i4 = { method: na(t.protocol).batchFetchMessages, params: { topics: e2.map((n5) => n5.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i4 });
    let s3;
    try {
      s3 = await await ni(new Promise((n5, o5) => {
        this.relayer.request(i4).catch((a3) => {
          this.logger.warn(a3), o5(a3);
        }).then(n5);
      }), this.subscribeTimeout, "rpcBatchFetchMessages failed, please try again");
    } catch {
      this.relayer.events.emit(C3.connection_stalled);
    }
    return s3;
  }
  rpcUnsubscribe(e2, t, i4) {
    const s3 = { method: na(i4.protocol).unsubscribe, params: { topic: e2, id: t } };
    return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s3 }), this.relayer.request(s3);
  }
  onSubscribe(e2, t) {
    this.setSubscription(e2, He3(ge3({}, t), { id: e2 })), this.pending.delete(t.topic);
  }
  onBatchSubscribe(e2) {
    e2.length && e2.forEach((t) => {
      this.setSubscription(t.id, ge3({}, t)), this.pending.delete(t.topic);
    });
  }
  async onUnsubscribe(e2, t, i4) {
    this.events.removeAllListeners(t), this.hasSubscription(t, e2) && this.deleteSubscription(t, i4), await this.relayer.messages.del(e2);
  }
  async setRelayerSubscriptions(e2) {
    await this.relayer.core.storage.setItem(this.storageKey, e2);
  }
  async getRelayerSubscriptions() {
    return await this.relayer.core.storage.getItem(this.storageKey);
  }
  setSubscription(e2, t) {
    this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e2, subscription: t }), this.addSubscription(e2, t);
  }
  addSubscription(e2, t) {
    this.subscriptions.set(e2, ge3({}, t)), this.topicMap.set(t.topic, e2), this.events.emit($.created, t);
  }
  getSubscription(e2) {
    this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e2 });
    const t = this.subscriptions.get(e2);
    if (!t) {
      const { message: i4 } = Et2("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw new Error(i4);
    }
    return t;
  }
  deleteSubscription(e2, t) {
    this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e2, reason: t });
    const i4 = this.getSubscription(e2);
    this.subscriptions.delete(e2), this.topicMap.delete(i4.topic, e2), this.events.emit($.deleted, He3(ge3({}, i4), { reason: t }));
  }
  async persist() {
    await this.setRelayerSubscriptions(this.values), this.events.emit($.sync);
  }
  async onRestart() {
    if (this.cached.length) {
      const e2 = [...this.cached], t = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
      for (let i4 = 0; i4 < t; i4++) {
        const s3 = e2.splice(0, this.batchSubscribeTopicsLimit);
        await this.batchSubscribe(s3);
      }
    }
    this.events.emit($.resubscribed);
  }
  async restore() {
    try {
      const e2 = await this.getRelayerSubscriptions();
      if (typeof e2 > "u" || !e2.length)
        return;
      if (this.subscriptions.size) {
        const { message: t } = Et2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e2);
    }
  }
  async batchSubscribe(e2) {
    e2.length && (await this.rpcBatchSubscribe(e2), this.onBatchSubscribe(await Promise.all(e2.map(async (t) => He3(ge3({}, t), { id: await this.getSubscriptionId(t.topic) })))));
  }
  async batchFetchMessages(e2) {
    if (!e2.length)
      return;
    this.logger.trace(`Fetching batch messages for ${e2.length} subscriptions`);
    const t = await this.rpcBatchFetchMessages(e2);
    t && t.messages && (await pi((0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t.messages));
  }
  async onConnect() {
    await this.restart(), this.reset();
  }
  onDisconnect() {
    this.onDisable();
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
  async restartToComplete(e2) {
    !this.relayer.connected && !this.relayer.connecting && (this.cached.push(e2), await this.relayer.transportOpen());
  }
  async getClientId() {
    return this.clientId || (this.clientId = await this.relayer.core.crypto.getClientId()), this.clientId;
  }
  async getSubscriptionId(e2) {
    return zc(e2 + await this.getClientId());
  }
};
var to3 = Object.defineProperty;
var Pi2 = Object.getOwnPropertySymbols;
var io3 = Object.prototype.hasOwnProperty;
var so3 = Object.prototype.propertyIsEnumerable;
var Ye3 = (r3, e2, t) => e2 in r3 ? to3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var Si2 = (r3, e2) => {
  for (var t in e2 || (e2 = {}))
    io3.call(e2, t) && Ye3(r3, t, e2[t]);
  if (Pi2)
    for (var t of Pi2(e2))
      so3.call(e2, t) && Ye3(r3, t, e2[t]);
  return r3;
};
var y4 = (r3, e2, t) => Ye3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Oi2 = class extends d2 {
  constructor(e2) {
    super(e2), y4(this, "protocol", "wc"), y4(this, "version", 2), y4(this, "core"), y4(this, "logger"), y4(this, "events", new import_events7.EventEmitter()), y4(this, "provider"), y4(this, "messages"), y4(this, "subscriber"), y4(this, "publisher"), y4(this, "name", $t3), y4(this, "transportExplicitlyClosed", false), y4(this, "initialized", false), y4(this, "connectionAttemptInProgress", false), y4(this, "relayUrl"), y4(this, "projectId"), y4(this, "packageName"), y4(this, "bundleId"), y4(this, "hasExperiencedNetworkDisruption", false), y4(this, "pingTimeout"), y4(this, "heartBeatTimeout", (0, import_time4.toMiliseconds)(import_time4.THIRTY_SECONDS + import_time4.FIVE_SECONDS)), y4(this, "reconnectTimeout"), y4(this, "connectPromise"), y4(this, "reconnectInProgress", false), y4(this, "requestsInFlight", []), y4(this, "connectTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), y4(this, "request", async (t) => {
      var i4, s3;
      this.logger.debug("Publishing Request Payload");
      const n5 = t.id || getBigIntRpcId().toString();
      await this.toEstablishConnection();
      try {
        this.logger.trace({ id: n5, method: t.method, topic: (i4 = t.params) == null ? void 0 : i4.topic }, "relayer.request - publishing...");
        const o5 = `${n5}:${((s3 = t.params) == null ? void 0 : s3.tag) || ""}`;
        this.requestsInFlight.push(o5);
        const a3 = await this.provider.request(t);
        return this.requestsInFlight = this.requestsInFlight.filter((c7) => c7 !== o5), a3;
      } catch (o5) {
        throw this.logger.debug(`Failed to Publish Request: ${n5}`), o5;
      }
    }), y4(this, "resetPingTimeout", () => {
      Ye2() && (clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(() => {
        var t, i4, s3, n5;
        try {
          this.logger.debug({}, "pingTimeout: Connection stalled, terminating..."), (n5 = (s3 = (i4 = (t = this.provider) == null ? void 0 : t.connection) == null ? void 0 : i4.socket) == null ? void 0 : s3.terminate) == null || n5.call(s3);
        } catch (o5) {
          this.logger.warn(o5, o5 == null ? void 0 : o5.message);
        }
      }, this.heartBeatTimeout));
    }), y4(this, "onPayloadHandler", (t) => {
      this.onProviderPayload(t), this.resetPingTimeout();
    }), y4(this, "onConnectHandler", () => {
      this.logger.warn({}, "Relayer connected 🛜"), this.startPingTimeout(), this.events.emit(C3.connect);
    }), y4(this, "onDisconnectHandler", () => {
      this.logger.warn({}, "Relayer disconnected 🛑"), this.requestsInFlight = [], this.onProviderDisconnect();
    }), y4(this, "onProviderErrorHandler", (t) => {
      this.logger.fatal(`Fatal socket error: ${t.message}`), this.events.emit(C3.error, t), this.logger.fatal("Fatal socket error received, closing transport"), this.transportClose();
    }), y4(this, "registerProviderListeners", () => {
      this.provider.on(L2.payload, this.onPayloadHandler), this.provider.on(L2.connect, this.onConnectHandler), this.provider.on(L2.disconnect, this.onDisconnectHandler), this.provider.on(L2.error, this.onProviderErrorHandler);
    }), this.core = e2.core, this.logger = typeof e2.logger < "u" && typeof e2.logger != "string" ? E2(e2.logger, this.name) : (0, import_pino2.default)(k2({ level: e2.logger || Nt3 })), this.messages = new Ei2(this.logger, e2.core), this.subscriber = new Ci2(this, this.logger), this.publisher = new Gn2(this, this.logger), this.relayUrl = (e2 == null ? void 0 : e2.relayUrl) || Ue3, this.projectId = e2.projectId, Ms() ? this.packageName = qs() : Vs() && (this.bundleId = qs()), this.provider = {};
  }
  async init() {
    this.logger.trace("Initialized"), this.registerEventListeners(), await Promise.all([this.messages.init(), this.subscriber.init()]), this.initialized = true, this.transportOpen().catch((e2) => this.logger.warn(e2, e2 == null ? void 0 : e2.message));
  }
  get context() {
    return y2(this.logger);
  }
  get connected() {
    var e2, t, i4;
    return ((i4 = (t = (e2 = this.provider) == null ? void 0 : e2.connection) == null ? void 0 : t.socket) == null ? void 0 : i4.readyState) === 1 || false;
  }
  get connecting() {
    var e2, t, i4;
    return ((i4 = (t = (e2 = this.provider) == null ? void 0 : e2.connection) == null ? void 0 : t.socket) == null ? void 0 : i4.readyState) === 0 || this.connectPromise !== void 0 || false;
  }
  async publish(e2, t, i4) {
    this.isInitialized(), await this.publisher.publish(e2, t, i4), await this.recordMessageEvent({ topic: e2, message: t, publishedAt: Date.now(), transportType: Q3.relay }, le3.outbound);
  }
  async subscribe(e2, t) {
    var i4, s3, n5;
    this.isInitialized(), (!(t != null && t.transportType) || (t == null ? void 0 : t.transportType) === "relay") && await this.toEstablishConnection();
    const o5 = typeof ((i4 = t == null ? void 0 : t.internal) == null ? void 0 : i4.throwOnFailedPublish) > "u" ? true : (s3 = t == null ? void 0 : t.internal) == null ? void 0 : s3.throwOnFailedPublish;
    let a3 = ((n5 = this.subscriber.topicMap.get(e2)) == null ? void 0 : n5[0]) || "", c7;
    const h6 = (l8) => {
      l8.topic === e2 && (this.subscriber.off($.created, h6), c7());
    };
    return await Promise.all([new Promise((l8) => {
      c7 = l8, this.subscriber.on($.created, h6);
    }), new Promise(async (l8, d5) => {
      a3 = await this.subscriber.subscribe(e2, Si2({ internal: { throwOnFailedPublish: o5 } }, t)).catch((g4) => {
        o5 && d5(g4);
      }) || a3, l8();
    })]), a3;
  }
  async unsubscribe(e2, t) {
    this.isInitialized(), await this.subscriber.unsubscribe(e2, t);
  }
  on(e2, t) {
    this.events.on(e2, t);
  }
  once(e2, t) {
    this.events.once(e2, t);
  }
  off(e2, t) {
    this.events.off(e2, t);
  }
  removeListener(e2, t) {
    this.events.removeListener(e2, t);
  }
  async transportDisconnect() {
    this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await ni(this.provider.disconnect(), 2e3, "provider.disconnect()").catch(() => this.onProviderDisconnect()) : this.onProviderDisconnect();
  }
  async transportClose() {
    this.transportExplicitlyClosed = true, await this.transportDisconnect();
  }
  async transportOpen(e2) {
    if (!this.subscriber.hasAnyTopics) {
      this.logger.info("Starting WS connection skipped because the client has no topics to work with.");
      return;
    }
    if (this.connectPromise ? (this.logger.debug({}, "Waiting for existing connection attempt to resolve..."), await this.connectPromise, this.logger.debug({}, "Existing connection attempt resolved")) : (this.connectPromise = new Promise(async (t, i4) => {
      await this.connect(e2).then(t).catch(i4).finally(() => {
        this.connectPromise = void 0;
      });
    }), await this.connectPromise), !this.connected)
      throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);
  }
  async restartTransport(e2) {
    this.logger.debug({}, "Restarting transport..."), !this.connectionAttemptInProgress && (this.relayUrl = e2 || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());
  }
  async confirmOnlineStateOrThrow() {
    if (!await ja())
      throw new Error("No internet connection detected. Please restart your network and try again.");
  }
  async handleBatchMessageEvents(e2) {
    if ((e2 == null ? void 0 : e2.length) === 0) {
      this.logger.trace("Batch message events is empty. Ignoring...");
      return;
    }
    const t = e2.sort((i4, s3) => i4.publishedAt - s3.publishedAt);
    this.logger.debug(`Batch of ${t.length} message events sorted`);
    for (const i4 of t)
      try {
        await this.onMessageEvent(i4);
      } catch (s3) {
        this.logger.warn(s3, "Error while processing batch message event: " + (s3 == null ? void 0 : s3.message));
      }
    this.logger.trace(`Batch of ${t.length} message events processed`);
  }
  async onLinkMessageEvent(e2, t) {
    const { topic: i4 } = e2;
    if (!t.sessionExists) {
      const s3 = ii(import_time4.FIVE_MINUTES), n5 = { topic: i4, expiry: s3, relay: { protocol: "irn" }, active: false };
      await this.core.pairing.pairings.set(i4, n5);
    }
    this.events.emit(C3.message, e2), await this.recordMessageEvent(e2, le3.inbound);
  }
  async connect(e2) {
    await this.confirmOnlineStateOrThrow(), e2 && e2 !== this.relayUrl && (this.relayUrl = e2, await this.transportDisconnect()), this.connectionAttemptInProgress = true, this.transportExplicitlyClosed = false;
    let t = 1;
    for (; t < 6; ) {
      try {
        if (this.transportExplicitlyClosed)
          break;
        this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t}...`), await this.createProvider(), await new Promise(async (i4, s3) => {
          const n5 = () => {
            s3(new Error("Connection interrupted while trying to connect"));
          };
          this.provider.once(L2.disconnect, n5), await ni(new Promise((o5, a3) => {
            this.provider.connect().then(o5).catch(a3);
          }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch((o5) => {
            s3(o5);
          }).finally(() => {
            this.provider.off(L2.disconnect, n5), clearTimeout(this.reconnectTimeout);
          }), await new Promise(async (o5, a3) => {
            const c7 = () => {
              s3(new Error("Connection interrupted while trying to subscribe"));
            };
            this.provider.once(L2.disconnect, c7), await this.subscriber.start().then(o5).catch(a3).finally(() => {
              this.provider.off(L2.disconnect, c7);
            });
          }), this.hasExperiencedNetworkDisruption = false, i4();
        });
      } catch (i4) {
        await this.subscriber.stop();
        const s3 = i4;
        this.logger.warn({}, s3.message), this.hasExperiencedNetworkDisruption = true;
      } finally {
        this.connectionAttemptInProgress = false;
      }
      if (this.connected) {
        this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t}`);
        break;
      }
      await new Promise((i4) => setTimeout(i4, (0, import_time4.toMiliseconds)(t * 1))), t++;
    }
  }
  startPingTimeout() {
    var e2, t, i4, s3, n5;
    if (Ye2())
      try {
        (t = (e2 = this.provider) == null ? void 0 : e2.connection) != null && t.socket && ((n5 = (s3 = (i4 = this.provider) == null ? void 0 : i4.connection) == null ? void 0 : s3.socket) == null || n5.on("ping", () => {
          this.resetPingTimeout();
        })), this.resetPingTimeout();
      } catch (o5) {
        this.logger.warn(o5, o5 == null ? void 0 : o5.message);
      }
  }
  async createProvider() {
    this.provider.connection && this.unregisterProviderListeners();
    const e2 = await this.core.crypto.signJWT(this.relayUrl);
    this.provider = new o3(new f3(zs({ sdkVersion: _e3, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e2, useOnCloseEvent: true, bundleId: this.bundleId, packageName: this.packageName }))), this.registerProviderListeners();
  }
  async recordMessageEvent(e2, t) {
    const { topic: i4, message: s3 } = e2;
    await this.messages.set(i4, s3, t);
  }
  async shouldIgnoreMessageEvent(e2) {
    const { topic: t, message: i4 } = e2;
    if (!i4 || i4.length === 0)
      return this.logger.warn(`Ignoring invalid/empty message: ${i4}`), true;
    if (!await this.subscriber.isKnownTopic(t))
      return this.logger.warn(`Ignoring message for unknown topic ${t}`), true;
    const s3 = this.messages.has(t, i4);
    return s3 && this.logger.warn(`Ignoring duplicate message: ${i4}`), s3;
  }
  async onProviderPayload(e2) {
    if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e2 }), isJsonRpcRequest(e2)) {
      if (!e2.method.endsWith(zt3))
        return;
      const t = e2.params, { topic: i4, message: s3, publishedAt: n5, attestation: o5 } = t.data, a3 = { topic: i4, message: s3, publishedAt: n5, transportType: Q3.relay, attestation: o5 };
      this.logger.debug("Emitting Relayer Payload"), this.logger.trace(Si2({ type: "event", event: t.id }, a3)), this.events.emit(t.id, a3), await this.acknowledgePayload(e2), await this.onMessageEvent(a3);
    } else
      isJsonRpcResponse(e2) && this.events.emit(C3.message_ack, e2);
  }
  async onMessageEvent(e2) {
    await this.shouldIgnoreMessageEvent(e2) || (await this.recordMessageEvent(e2, le3.inbound), this.events.emit(C3.message, e2));
  }
  async acknowledgePayload(e2) {
    const t = formatJsonRpcResult(e2.id, true);
    await this.provider.connection.send(t);
  }
  unregisterProviderListeners() {
    this.provider.off(L2.payload, this.onPayloadHandler), this.provider.off(L2.connect, this.onConnectHandler), this.provider.off(L2.disconnect, this.onDisconnectHandler), this.provider.off(L2.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);
  }
  async registerEventListeners() {
    let e2 = await ja();
    ka(async (t) => {
      e2 !== t && (e2 = t, t ? await this.transportOpen().catch((i4) => this.logger.error(i4, i4 == null ? void 0 : i4.message)) : (this.hasExperiencedNetworkDisruption = true, await this.transportDisconnect(), this.transportExplicitlyClosed = false));
    }), this.core.heartbeat.on(r.pulse, async () => {
      if (!this.transportExplicitlyClosed && !this.connected && Pa())
        try {
          await this.confirmOnlineStateOrThrow(), await this.transportOpen();
        } catch (t) {
          this.logger.warn(t, t == null ? void 0 : t.message);
        }
    });
  }
  async onProviderDisconnect() {
    clearTimeout(this.pingTimeout), this.events.emit(C3.disconnect), this.connectionAttemptInProgress = false, !this.reconnectInProgress && (this.reconnectInProgress = true, await this.subscriber.stop(), this.subscriber.hasAnyTopics && (this.transportExplicitlyClosed || (this.reconnectTimeout = setTimeout(async () => {
      await this.transportOpen().catch((e2) => this.logger.error(e2, e2 == null ? void 0 : e2.message)), this.reconnectTimeout = void 0, this.reconnectInProgress = false;
    }, (0, import_time4.toMiliseconds)(Lt3)))));
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
  async toEstablishConnection() {
    if (await this.confirmOnlineStateOrThrow(), !this.connected) {
      if (this.connectPromise) {
        await this.connectPromise;
        return;
      }
      await this.connect();
    }
  }
};
function ro3(r3, e2) {
  return r3 === e2 || Number.isNaN(r3) && Number.isNaN(e2);
}
function Ri2(r3) {
  return Object.getOwnPropertySymbols(r3).filter((e2) => Object.prototype.propertyIsEnumerable.call(r3, e2));
}
function Ai2(r3) {
  return r3 == null ? r3 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(r3);
}
var no3 = "[object RegExp]";
var oo3 = "[object String]";
var ao3 = "[object Number]";
var co3 = "[object Boolean]";
var xi2 = "[object Arguments]";
var ho3 = "[object Symbol]";
var lo3 = "[object Date]";
var uo3 = "[object Map]";
var go3 = "[object Set]";
var po3 = "[object Array]";
var yo3 = "[object Function]";
var bo3 = "[object ArrayBuffer]";
var Je2 = "[object Object]";
var mo3 = "[object Error]";
var fo3 = "[object DataView]";
var Do3 = "[object Uint8Array]";
var vo3 = "[object Uint8ClampedArray]";
var wo3 = "[object Uint16Array]";
var _o3 = "[object Uint32Array]";
var Eo3 = "[object BigUint64Array]";
var Io3 = "[object Int8Array]";
var To3 = "[object Int16Array]";
var Co3 = "[object Int32Array]";
var Po3 = "[object BigInt64Array]";
var So3 = "[object Float32Array]";
var Oo3 = "[object Float64Array]";
function Ro3() {
}
function Ni2(r3) {
  if (!r3 || typeof r3 != "object")
    return false;
  const e2 = Object.getPrototypeOf(r3);
  return e2 === null || e2 === Object.prototype || Object.getPrototypeOf(e2) === null ? Object.prototype.toString.call(r3) === "[object Object]" : false;
}
function Ao3(r3, e2, t) {
  return pe3(r3, e2, void 0, void 0, void 0, void 0, t);
}
function pe3(r3, e2, t, i4, s3, n5, o5) {
  const a3 = o5(r3, e2, t, i4, s3, n5);
  if (a3 !== void 0)
    return a3;
  if (typeof r3 == typeof e2)
    switch (typeof r3) {
      case "bigint":
      case "string":
      case "boolean":
      case "symbol":
      case "undefined":
        return r3 === e2;
      case "number":
        return r3 === e2 || Object.is(r3, e2);
      case "function":
        return r3 === e2;
      case "object":
        return ye3(r3, e2, n5, o5);
    }
  return ye3(r3, e2, n5, o5);
}
function ye3(r3, e2, t, i4) {
  if (Object.is(r3, e2))
    return true;
  let s3 = Ai2(r3), n5 = Ai2(e2);
  if (s3 === xi2 && (s3 = Je2), n5 === xi2 && (n5 = Je2), s3 !== n5)
    return false;
  switch (s3) {
    case oo3:
      return r3.toString() === e2.toString();
    case ao3: {
      const c7 = r3.valueOf(), h6 = e2.valueOf();
      return ro3(c7, h6);
    }
    case co3:
    case lo3:
    case ho3:
      return Object.is(r3.valueOf(), e2.valueOf());
    case no3:
      return r3.source === e2.source && r3.flags === e2.flags;
    case yo3:
      return r3 === e2;
  }
  t = t ?? /* @__PURE__ */ new Map();
  const o5 = t.get(r3), a3 = t.get(e2);
  if (o5 != null && a3 != null)
    return o5 === e2;
  t.set(r3, e2), t.set(e2, r3);
  try {
    switch (s3) {
      case uo3: {
        if (r3.size !== e2.size)
          return false;
        for (const [c7, h6] of r3.entries())
          if (!e2.has(c7) || !pe3(h6, e2.get(c7), c7, r3, e2, t, i4))
            return false;
        return true;
      }
      case go3: {
        if (r3.size !== e2.size)
          return false;
        const c7 = Array.from(r3.values()), h6 = Array.from(e2.values());
        for (let l8 = 0; l8 < c7.length; l8++) {
          const d5 = c7[l8], g4 = h6.findIndex((_3) => pe3(d5, _3, void 0, r3, e2, t, i4));
          if (g4 === -1)
            return false;
          h6.splice(g4, 1);
        }
        return true;
      }
      case po3:
      case Do3:
      case vo3:
      case wo3:
      case _o3:
      case Eo3:
      case Io3:
      case To3:
      case Co3:
      case Po3:
      case So3:
      case Oo3: {
        if (typeof Buffer < "u" && Buffer.isBuffer(r3) !== Buffer.isBuffer(e2) || r3.length !== e2.length)
          return false;
        for (let c7 = 0; c7 < r3.length; c7++)
          if (!pe3(r3[c7], e2[c7], c7, r3, e2, t, i4))
            return false;
        return true;
      }
      case bo3:
        return r3.byteLength !== e2.byteLength ? false : ye3(new Uint8Array(r3), new Uint8Array(e2), t, i4);
      case fo3:
        return r3.byteLength !== e2.byteLength || r3.byteOffset !== e2.byteOffset ? false : ye3(new Uint8Array(r3), new Uint8Array(e2), t, i4);
      case mo3:
        return r3.name === e2.name && r3.message === e2.message;
      case Je2: {
        if (!(ye3(r3.constructor, e2.constructor, t, i4) || Ni2(r3) && Ni2(e2)))
          return false;
        const h6 = [...Object.keys(r3), ...Ri2(r3)], l8 = [...Object.keys(e2), ...Ri2(e2)];
        if (h6.length !== l8.length)
          return false;
        for (let d5 = 0; d5 < h6.length; d5++) {
          const g4 = h6[d5], _3 = r3[g4];
          if (!Object.hasOwn(e2, g4))
            return false;
          const u3 = e2[g4];
          if (!pe3(_3, u3, g4, r3, e2, t, i4))
            return false;
        }
        return true;
      }
      default:
        return false;
    }
  } finally {
    t.delete(r3), t.delete(e2);
  }
}
function xo3(r3, e2) {
  return Ao3(r3, e2, Ro3);
}
var No3 = Object.defineProperty;
var $i2 = Object.getOwnPropertySymbols;
var $o3 = Object.prototype.hasOwnProperty;
var zo3 = Object.prototype.propertyIsEnumerable;
var Xe3 = (r3, e2, t) => e2 in r3 ? No3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var zi2 = (r3, e2) => {
  for (var t in e2 || (e2 = {}))
    $o3.call(e2, t) && Xe3(r3, t, e2[t]);
  if ($i2)
    for (var t of $i2(e2))
      zo3.call(e2, t) && Xe3(r3, t, e2[t]);
  return r3;
};
var z3 = (r3, e2, t) => Xe3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Li2 = class extends f2 {
  constructor(e2, t, i4, s3 = B2, n5 = void 0) {
    super(e2, t, i4, s3), this.core = e2, this.logger = t, this.name = i4, z3(this, "map", /* @__PURE__ */ new Map()), z3(this, "version", kt3), z3(this, "cached", []), z3(this, "initialized", false), z3(this, "getKey"), z3(this, "storagePrefix", B2), z3(this, "recentlyDeleted", []), z3(this, "recentlyDeletedLimit", 200), z3(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((o5) => {
        this.getKey && o5 !== null && !kt2(o5) ? this.map.set(this.getKey(o5), o5) : wa(o5) ? this.map.set(o5.id, o5) : xa(o5) && this.map.set(o5.topic, o5);
      }), this.cached = [], this.initialized = true);
    }), z3(this, "set", async (o5, a3) => {
      this.isInitialized(), this.map.has(o5) ? await this.update(o5, a3) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: o5, value: a3 }), this.map.set(o5, a3), await this.persist());
    }), z3(this, "get", (o5) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: o5 }), this.getData(o5))), z3(this, "getAll", (o5) => (this.isInitialized(), o5 ? this.values.filter((a3) => Object.keys(o5).every((c7) => xo3(a3[c7], o5[c7]))) : this.values)), z3(this, "update", async (o5, a3) => {
      this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: o5, update: a3 });
      const c7 = zi2(zi2({}, this.getData(o5)), a3);
      this.map.set(o5, c7), await this.persist();
    }), z3(this, "delete", async (o5, a3) => {
      this.isInitialized(), this.map.has(o5) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: o5, reason: a3 }), this.map.delete(o5), this.addToRecentlyDeleted(o5), await this.persist());
    }), this.logger = E2(t, this.name), this.storagePrefix = s3, this.getKey = n5;
  }
  get context() {
    return y2(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.map.size;
  }
  get keys() {
    return Array.from(this.map.keys());
  }
  get values() {
    return Array.from(this.map.values());
  }
  addToRecentlyDeleted(e2) {
    this.recentlyDeleted.push(e2), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);
  }
  async setDataStore(e2) {
    await this.core.storage.setItem(this.storageKey, e2);
  }
  async getDataStore() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getData(e2) {
    const t = this.map.get(e2);
    if (!t) {
      if (this.recentlyDeleted.includes(e2)) {
        const { message: s3 } = Et2("MISSING_OR_INVALID", `Record was recently deleted - ${this.name}: ${e2}`);
        throw this.logger.error(s3), new Error(s3);
      }
      const { message: i4 } = Et2("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw this.logger.error(i4), new Error(i4);
    }
    return t;
  }
  async persist() {
    await this.setDataStore(this.values);
  }
  async restore() {
    try {
      const e2 = await this.getDataStore();
      if (typeof e2 > "u" || !e2.length)
        return;
      if (this.map.size) {
        const { message: t } = Et2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e2);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var Lo3 = Object.defineProperty;
var ko3 = (r3, e2, t) => e2 in r3 ? Lo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var p3 = (r3, e2, t) => ko3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var ki2 = class {
  constructor(e2, t) {
    this.core = e2, this.logger = t, p3(this, "name", Mt3), p3(this, "version", Kt3), p3(this, "events", new import_events7.default()), p3(this, "pairings"), p3(this, "initialized", false), p3(this, "storagePrefix", B2), p3(this, "ignoredPayloadTypes", [ee]), p3(this, "registeredMethods", []), p3(this, "init", async () => {
      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = true, this.logger.trace("Initialized"));
    }), p3(this, "register", ({ methods: i4 }) => {
      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...i4])];
    }), p3(this, "create", async (i4) => {
      this.isInitialized();
      const s3 = qc(), n5 = await this.core.crypto.setSymKey(s3), o5 = ii(import_time4.FIVE_MINUTES), a3 = { protocol: xt3 }, c7 = { topic: n5, expiry: o5, relay: a3, active: false, methods: i4 == null ? void 0 : i4.methods }, h6 = oa({ protocol: this.core.protocol, version: this.core.version, topic: n5, symKey: s3, relay: a3, expiryTimestamp: o5, methods: i4 == null ? void 0 : i4.methods });
      return this.events.emit(re.create, c7), this.core.expirer.set(n5, o5), await this.pairings.set(n5, c7), await this.core.relayer.subscribe(n5, { transportType: i4 == null ? void 0 : i4.transportType }), { topic: n5, uri: h6 };
    }), p3(this, "pair", async (i4) => {
      this.isInitialized();
      const s3 = this.core.eventClient.createEvent({ properties: { topic: i4 == null ? void 0 : i4.uri, trace: [G3.pairing_started] } });
      this.isValidPair(i4, s3);
      const { topic: n5, symKey: o5, relay: a3, expiryTimestamp: c7, methods: h6 } = ra(i4.uri);
      s3.props.properties.topic = n5, s3.addTrace(G3.pairing_uri_validation_success), s3.addTrace(G3.pairing_uri_not_expired);
      let l8;
      if (this.pairings.keys.includes(n5)) {
        if (l8 = this.pairings.get(n5), s3.addTrace(G3.existing_pairing), l8.active)
          throw s3.setError(Y2.active_pairing_already_exists), new Error(`Pairing already exists: ${n5}. Please try again with a new connection URI.`);
        s3.addTrace(G3.pairing_not_expired);
      }
      const d5 = c7 || ii(import_time4.FIVE_MINUTES), g4 = { topic: n5, relay: a3, expiry: d5, active: false, methods: h6 };
      this.core.expirer.set(n5, d5), await this.pairings.set(n5, g4), s3.addTrace(G3.store_new_pairing), i4.activatePairing && await this.activate({ topic: n5 }), this.events.emit(re.create, g4), s3.addTrace(G3.emit_inactive_pairing), this.core.crypto.keychain.has(n5) || await this.core.crypto.setSymKey(o5, n5), s3.addTrace(G3.subscribing_pairing_topic);
      try {
        await this.core.relayer.confirmOnlineStateOrThrow();
      } catch {
        s3.setError(Y2.no_internet_connection);
      }
      try {
        await this.core.relayer.subscribe(n5, { relay: a3 });
      } catch (_3) {
        throw s3.setError(Y2.subscribe_pairing_topic_failure), _3;
      }
      return s3.addTrace(G3.subscribe_pairing_topic_success), g4;
    }), p3(this, "activate", async ({ topic: i4 }) => {
      this.isInitialized();
      const s3 = ii(import_time4.FIVE_MINUTES);
      this.core.expirer.set(i4, s3), await this.pairings.update(i4, { active: true, expiry: s3 });
    }), p3(this, "ping", async (i4) => {
      this.isInitialized(), await this.isValidPing(i4), this.logger.warn("ping() is deprecated and will be removed in the next major release.");
      const { topic: s3 } = i4;
      if (this.pairings.keys.includes(s3)) {
        const n5 = await this.sendRequest(s3, "wc_pairingPing", {}), { done: o5, resolve: a3, reject: c7 } = ei();
        this.events.once(ci("pairing_ping", n5), ({ error: h6 }) => {
          h6 ? c7(h6) : a3();
        }), await o5();
      }
    }), p3(this, "updateExpiry", async ({ topic: i4, expiry: s3 }) => {
      this.isInitialized(), await this.pairings.update(i4, { expiry: s3 });
    }), p3(this, "updateMetadata", async ({ topic: i4, metadata: s3 }) => {
      this.isInitialized(), await this.pairings.update(i4, { peerMetadata: s3 });
    }), p3(this, "getPairings", () => (this.isInitialized(), this.pairings.values)), p3(this, "disconnect", async (i4) => {
      this.isInitialized(), await this.isValidDisconnect(i4);
      const { topic: s3 } = i4;
      this.pairings.keys.includes(s3) && (await this.sendRequest(s3, "wc_pairingDelete", Kt2("USER_DISCONNECTED")), await this.deletePairing(s3));
    }), p3(this, "formatUriFromPairing", (i4) => {
      this.isInitialized();
      const { topic: s3, relay: n5, expiry: o5, methods: a3 } = i4, c7 = this.core.crypto.keychain.get(s3);
      return oa({ protocol: this.core.protocol, version: this.core.version, topic: s3, symKey: c7, relay: n5, expiryTimestamp: o5, methods: a3 });
    }), p3(this, "sendRequest", async (i4, s3, n5) => {
      const o5 = formatJsonRpcRequest(s3, n5), a3 = await this.core.crypto.encode(i4, o5), c7 = se2[s3].req;
      return this.core.history.set(i4, o5), this.core.relayer.publish(i4, a3, c7), o5.id;
    }), p3(this, "sendResult", async (i4, s3, n5) => {
      const o5 = formatJsonRpcResult(i4, n5), a3 = await this.core.crypto.encode(s3, o5), c7 = (await this.core.history.get(s3, i4)).request.method, h6 = se2[c7].res;
      await this.core.relayer.publish(s3, a3, h6), await this.core.history.resolve(o5);
    }), p3(this, "sendError", async (i4, s3, n5) => {
      const o5 = formatJsonRpcError(i4, n5), a3 = await this.core.crypto.encode(s3, o5), c7 = (await this.core.history.get(s3, i4)).request.method, h6 = se2[c7] ? se2[c7].res : se2.unregistered_method.res;
      await this.core.relayer.publish(s3, a3, h6), await this.core.history.resolve(o5);
    }), p3(this, "deletePairing", async (i4, s3) => {
      await this.core.relayer.unsubscribe(i4), await Promise.all([this.pairings.delete(i4, Kt2("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(i4), s3 ? Promise.resolve() : this.core.expirer.del(i4)]);
    }), p3(this, "cleanup", async () => {
      const i4 = this.pairings.getAll().filter((s3) => fi(s3.expiry));
      await Promise.all(i4.map((s3) => this.deletePairing(s3.topic)));
    }), p3(this, "onRelayEventRequest", async (i4) => {
      const { topic: s3, payload: n5 } = i4;
      switch (n5.method) {
        case "wc_pairingPing":
          return await this.onPairingPingRequest(s3, n5);
        case "wc_pairingDelete":
          return await this.onPairingDeleteRequest(s3, n5);
        default:
          return await this.onUnknownRpcMethodRequest(s3, n5);
      }
    }), p3(this, "onRelayEventResponse", async (i4) => {
      const { topic: s3, payload: n5 } = i4, o5 = (await this.core.history.get(s3, n5.id)).request.method;
      switch (o5) {
        case "wc_pairingPing":
          return this.onPairingPingResponse(s3, n5);
        default:
          return this.onUnknownRpcMethodResponse(o5);
      }
    }), p3(this, "onPairingPingRequest", async (i4, s3) => {
      const { id: n5 } = s3;
      try {
        this.isValidPing({ topic: i4 }), await this.sendResult(n5, i4, true), this.events.emit(re.ping, { id: n5, topic: i4 });
      } catch (o5) {
        await this.sendError(n5, i4, o5), this.logger.error(o5);
      }
    }), p3(this, "onPairingPingResponse", (i4, s3) => {
      const { id: n5 } = s3;
      setTimeout(() => {
        isJsonRpcResult(s3) ? this.events.emit(ci("pairing_ping", n5), {}) : isJsonRpcError(s3) && this.events.emit(ci("pairing_ping", n5), { error: s3.error });
      }, 500);
    }), p3(this, "onPairingDeleteRequest", async (i4, s3) => {
      const { id: n5 } = s3;
      try {
        this.isValidDisconnect({ topic: i4 }), await this.deletePairing(i4), this.events.emit(re.delete, { id: n5, topic: i4 });
      } catch (o5) {
        await this.sendError(n5, i4, o5), this.logger.error(o5);
      }
    }), p3(this, "onUnknownRpcMethodRequest", async (i4, s3) => {
      const { id: n5, method: o5 } = s3;
      try {
        if (this.registeredMethods.includes(o5))
          return;
        const a3 = Kt2("WC_METHOD_UNSUPPORTED", o5);
        await this.sendError(n5, i4, a3), this.logger.error(a3);
      } catch (a3) {
        await this.sendError(n5, i4, a3), this.logger.error(a3);
      }
    }), p3(this, "onUnknownRpcMethodResponse", (i4) => {
      this.registeredMethods.includes(i4) || this.logger.error(Kt2("WC_METHOD_UNSUPPORTED", i4));
    }), p3(this, "isValidPair", (i4, s3) => {
      var n5;
      if (!Aa(i4)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", `pair() params: ${i4}`);
        throw s3.setError(Y2.malformed_pairing_uri), new Error(a3);
      }
      if (!ma(i4.uri)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", `pair() uri: ${i4.uri}`);
        throw s3.setError(Y2.malformed_pairing_uri), new Error(a3);
      }
      const o5 = ra(i4 == null ? void 0 : i4.uri);
      if (!((n5 = o5 == null ? void 0 : o5.relay) != null && n5.protocol)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", "pair() uri#relay-protocol");
        throw s3.setError(Y2.malformed_pairing_uri), new Error(a3);
      }
      if (!(o5 != null && o5.symKey)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", "pair() uri#symKey");
        throw s3.setError(Y2.malformed_pairing_uri), new Error(a3);
      }
      if (o5 != null && o5.expiryTimestamp && (0, import_time4.toMiliseconds)(o5 == null ? void 0 : o5.expiryTimestamp) < Date.now()) {
        s3.setError(Y2.pairing_expired);
        const { message: a3 } = Et2("EXPIRED", "pair() URI has expired. Please try again with a new connection URI.");
        throw new Error(a3);
      }
    }), p3(this, "isValidPing", async (i4) => {
      if (!Aa(i4)) {
        const { message: n5 } = Et2("MISSING_OR_INVALID", `ping() params: ${i4}`);
        throw new Error(n5);
      }
      const { topic: s3 } = i4;
      await this.isValidPairingTopic(s3);
    }), p3(this, "isValidDisconnect", async (i4) => {
      if (!Aa(i4)) {
        const { message: n5 } = Et2("MISSING_OR_INVALID", `disconnect() params: ${i4}`);
        throw new Error(n5);
      }
      const { topic: s3 } = i4;
      await this.isValidPairingTopic(s3);
    }), p3(this, "isValidPairingTopic", async (i4) => {
      if (!it2(i4, false)) {
        const { message: s3 } = Et2("MISSING_OR_INVALID", `pairing topic should be a string: ${i4}`);
        throw new Error(s3);
      }
      if (!this.pairings.keys.includes(i4)) {
        const { message: s3 } = Et2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${i4}`);
        throw new Error(s3);
      }
      if (fi(this.pairings.get(i4).expiry)) {
        await this.deletePairing(i4);
        const { message: s3 } = Et2("EXPIRED", `pairing topic: ${i4}`);
        throw new Error(s3);
      }
    }), this.core = e2, this.logger = E2(t, this.name), this.pairings = new Li2(this.core, this.logger, this.name, this.storagePrefix);
  }
  get context() {
    return y2(this.logger);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
  registerRelayerEvents() {
    this.core.relayer.on(C3.message, async (e2) => {
      const { topic: t, message: i4, transportType: s3 } = e2;
      if (this.pairings.keys.includes(t) && s3 !== Q3.link_mode && !this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(i4)))
        try {
          const n5 = await this.core.crypto.decode(t, i4);
          isJsonRpcRequest(n5) ? (this.core.history.set(t, n5), await this.onRelayEventRequest({ topic: t, payload: n5 })) : isJsonRpcResponse(n5) && (await this.core.history.resolve(n5), await this.onRelayEventResponse({ topic: t, payload: n5 }), this.core.history.delete(t, n5.id)), await this.core.relayer.messages.ack(t, i4);
        } catch (n5) {
          this.logger.error(n5);
        }
    });
  }
  registerExpirerEvents() {
    this.core.expirer.on(M3.expired, async (e2) => {
      const { topic: t } = si(e2.target);
      t && this.pairings.keys.includes(t) && (await this.deletePairing(t, true), this.events.emit(re.expire, { topic: t }));
    });
  }
};
var jo3 = Object.defineProperty;
var Uo3 = (r3, e2, t) => e2 in r3 ? jo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var O4 = (r3, e2, t) => Uo3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var ji2 = class extends I2 {
  constructor(e2, t) {
    super(e2, t), this.core = e2, this.logger = t, O4(this, "records", /* @__PURE__ */ new Map()), O4(this, "events", new import_events7.EventEmitter()), O4(this, "name", Bt3), O4(this, "version", Vt3), O4(this, "cached", []), O4(this, "initialized", false), O4(this, "storagePrefix", B2), O4(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i4) => this.records.set(i4.id, i4)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), O4(this, "set", (i4, s3, n5) => {
      if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: i4, request: s3, chainId: n5 }), this.records.has(s3.id))
        return;
      const o5 = { id: s3.id, topic: i4, request: { method: s3.method, params: s3.params || null }, chainId: n5, expiry: ii(import_time4.THIRTY_DAYS) };
      this.records.set(o5.id, o5), this.persist(), this.events.emit(F2.created, o5);
    }), O4(this, "resolve", async (i4) => {
      if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: i4 }), !this.records.has(i4.id))
        return;
      const s3 = await this.getRecord(i4.id);
      typeof s3.response > "u" && (s3.response = isJsonRpcError(i4) ? { error: i4.error } : { result: i4.result }, this.records.set(s3.id, s3), this.persist(), this.events.emit(F2.updated, s3));
    }), O4(this, "get", async (i4, s3) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: i4, id: s3 }), await this.getRecord(s3))), O4(this, "delete", (i4, s3) => {
      this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: s3 }), this.values.forEach((n5) => {
        if (n5.topic === i4) {
          if (typeof s3 < "u" && n5.id !== s3)
            return;
          this.records.delete(n5.id), this.events.emit(F2.deleted, n5);
        }
      }), this.persist();
    }), O4(this, "exists", async (i4, s3) => (this.isInitialized(), this.records.has(s3) ? (await this.getRecord(s3)).topic === i4 : false)), O4(this, "on", (i4, s3) => {
      this.events.on(i4, s3);
    }), O4(this, "once", (i4, s3) => {
      this.events.once(i4, s3);
    }), O4(this, "off", (i4, s3) => {
      this.events.off(i4, s3);
    }), O4(this, "removeListener", (i4, s3) => {
      this.events.removeListener(i4, s3);
    }), this.logger = E2(t, this.name);
  }
  get context() {
    return y2(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get size() {
    return this.records.size;
  }
  get keys() {
    return Array.from(this.records.keys());
  }
  get values() {
    return Array.from(this.records.values());
  }
  get pending() {
    const e2 = [];
    return this.values.forEach((t) => {
      if (typeof t.response < "u")
        return;
      const i4 = { topic: t.topic, request: formatJsonRpcRequest(t.request.method, t.request.params, t.id), chainId: t.chainId };
      return e2.push(i4);
    }), e2;
  }
  async setJsonRpcRecords(e2) {
    await this.core.storage.setItem(this.storageKey, e2);
  }
  async getJsonRpcRecords() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getRecord(e2) {
    this.isInitialized();
    const t = this.records.get(e2);
    if (!t) {
      const { message: i4 } = Et2("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw new Error(i4);
    }
    return t;
  }
  async persist() {
    await this.setJsonRpcRecords(this.values), this.events.emit(F2.sync);
  }
  async restore() {
    try {
      const e2 = await this.getJsonRpcRecords();
      if (typeof e2 > "u" || !e2.length)
        return;
      if (this.records.size) {
        const { message: t } = Et2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e2);
    }
  }
  registerEventListeners() {
    this.events.on(F2.created, (e2) => {
      const t = F2.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e2 });
    }), this.events.on(F2.updated, (e2) => {
      const t = F2.updated;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e2 });
    }), this.events.on(F2.deleted, (e2) => {
      const t = F2.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e2 });
    }), this.core.heartbeat.on(r.pulse, () => {
      this.cleanup();
    });
  }
  cleanup() {
    try {
      this.isInitialized();
      let e2 = false;
      this.records.forEach((t) => {
        (0, import_time4.toMiliseconds)(t.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t.id}`), this.records.delete(t.id), this.events.emit(F2.deleted, t, false), e2 = true);
      }), e2 && this.persist();
    } catch (e2) {
      this.logger.warn(e2);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var Fo3 = Object.defineProperty;
var Mo3 = (r3, e2, t) => e2 in r3 ? Fo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var A2 = (r3, e2, t) => Mo3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Ui2 = class extends S2 {
  constructor(e2, t) {
    super(e2, t), this.core = e2, this.logger = t, A2(this, "expirations", /* @__PURE__ */ new Map()), A2(this, "events", new import_events7.EventEmitter()), A2(this, "name", qt3), A2(this, "version", Gt3), A2(this, "cached", []), A2(this, "initialized", false), A2(this, "storagePrefix", B2), A2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i4) => this.expirations.set(i4.target, i4)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), A2(this, "has", (i4) => {
      try {
        const s3 = this.formatTarget(i4);
        return typeof this.getExpiration(s3) < "u";
      } catch {
        return false;
      }
    }), A2(this, "set", (i4, s3) => {
      this.isInitialized();
      const n5 = this.formatTarget(i4), o5 = { target: n5, expiry: s3 };
      this.expirations.set(n5, o5), this.checkExpiry(n5, o5), this.events.emit(M3.created, { target: n5, expiration: o5 });
    }), A2(this, "get", (i4) => {
      this.isInitialized();
      const s3 = this.formatTarget(i4);
      return this.getExpiration(s3);
    }), A2(this, "del", (i4) => {
      if (this.isInitialized(), this.has(i4)) {
        const s3 = this.formatTarget(i4), n5 = this.getExpiration(s3);
        this.expirations.delete(s3), this.events.emit(M3.deleted, { target: s3, expiration: n5 });
      }
    }), A2(this, "on", (i4, s3) => {
      this.events.on(i4, s3);
    }), A2(this, "once", (i4, s3) => {
      this.events.once(i4, s3);
    }), A2(this, "off", (i4, s3) => {
      this.events.off(i4, s3);
    }), A2(this, "removeListener", (i4, s3) => {
      this.events.removeListener(i4, s3);
    }), this.logger = E2(t, this.name);
  }
  get context() {
    return y2(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.expirations.size;
  }
  get keys() {
    return Array.from(this.expirations.keys());
  }
  get values() {
    return Array.from(this.expirations.values());
  }
  formatTarget(e2) {
    if (typeof e2 == "string")
      return ri(e2);
    if (typeof e2 == "number")
      return oi(e2);
    const { message: t } = Et2("UNKNOWN_TYPE", `Target type: ${typeof e2}`);
    throw new Error(t);
  }
  async setExpirations(e2) {
    await this.core.storage.setItem(this.storageKey, e2);
  }
  async getExpirations() {
    return await this.core.storage.getItem(this.storageKey);
  }
  async persist() {
    await this.setExpirations(this.values), this.events.emit(M3.sync);
  }
  async restore() {
    try {
      const e2 = await this.getExpirations();
      if (typeof e2 > "u" || !e2.length)
        return;
      if (this.expirations.size) {
        const { message: t } = Et2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e2);
    }
  }
  getExpiration(e2) {
    const t = this.expirations.get(e2);
    if (!t) {
      const { message: i4 } = Et2("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw this.logger.warn(i4), new Error(i4);
    }
    return t;
  }
  checkExpiry(e2, t) {
    const { expiry: i4 } = t;
    (0, import_time4.toMiliseconds)(i4) - Date.now() <= 0 && this.expire(e2, t);
  }
  expire(e2, t) {
    this.expirations.delete(e2), this.events.emit(M3.expired, { target: e2, expiration: t });
  }
  checkExpirations() {
    this.core.relayer.connected && this.expirations.forEach((e2, t) => this.checkExpiry(t, e2));
  }
  registerEventListeners() {
    this.core.heartbeat.on(r.pulse, () => this.checkExpirations()), this.events.on(M3.created, (e2) => {
      const t = M3.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e2 }), this.persist();
    }), this.events.on(M3.expired, (e2) => {
      const t = M3.expired;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e2 }), this.persist();
    }), this.events.on(M3.deleted, (e2) => {
      const t = M3.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e2 }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var Ko3 = Object.defineProperty;
var Bo3 = (r3, e2, t) => e2 in r3 ? Ko3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var w3 = (r3, e2, t) => Bo3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Fi2 = class extends M {
  constructor(e2, t, i4) {
    super(e2, t, i4), this.core = e2, this.logger = t, this.store = i4, w3(this, "name", Wt3), w3(this, "abortController"), w3(this, "isDevEnv"), w3(this, "verifyUrlV3", Yt3), w3(this, "storagePrefix", B2), w3(this, "version", Le3), w3(this, "publicKey"), w3(this, "fetchPromise"), w3(this, "init", async () => {
      var s3;
      this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0, import_time4.toMiliseconds)((s3 = this.publicKey) == null ? void 0 : s3.expiresAt) < Date.now() && (this.logger.debug("verify v2 public key expired"), await this.removePublicKey()));
    }), w3(this, "register", async (s3) => {
      if (!zt2() || this.isDevEnv)
        return;
      const n5 = window.location.origin, { id: o5, decryptedId: a3 } = s3, c7 = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${n5}&id=${o5}&decryptedId=${a3}`;
      try {
        const h6 = (0, import_window_getters2.getDocument)(), l8 = this.startAbortTimer(import_time4.ONE_SECOND * 5), d5 = await new Promise((g4, _3) => {
          const u3 = () => {
            window.removeEventListener("message", x6), h6.body.removeChild(b5), _3("attestation aborted");
          };
          this.abortController.signal.addEventListener("abort", u3);
          const b5 = h6.createElement("iframe");
          b5.src = c7, b5.style.display = "none", b5.addEventListener("error", u3, { signal: this.abortController.signal });
          const x6 = (I5) => {
            if (I5.data && typeof I5.data == "string")
              try {
                const D4 = JSON.parse(I5.data);
                if (D4.type === "verify_attestation") {
                  if (sn(D4.attestation).payload.id !== o5)
                    return;
                  clearInterval(l8), h6.body.removeChild(b5), this.abortController.signal.removeEventListener("abort", u3), window.removeEventListener("message", x6), g4(D4.attestation === null ? "" : D4.attestation);
                }
              } catch (D4) {
                this.logger.warn(D4);
              }
          };
          h6.body.appendChild(b5), window.addEventListener("message", x6, { signal: this.abortController.signal });
        });
        return this.logger.debug("jwt attestation", d5), d5;
      } catch (h6) {
        this.logger.warn(h6);
      }
      return "";
    }), w3(this, "resolve", async (s3) => {
      if (this.isDevEnv)
        return "";
      const { attestationId: n5, hash: o5, encryptedId: a3 } = s3;
      if (n5 === "") {
        this.logger.debug("resolve: attestationId is empty, skipping");
        return;
      }
      if (n5) {
        if (sn(n5).payload.id !== a3)
          return;
        const h6 = await this.isValidJwtAttestation(n5);
        if (h6) {
          if (!h6.isVerified) {
            this.logger.warn("resolve: jwt attestation: origin url not verified");
            return;
          }
          return h6;
        }
      }
      if (!o5)
        return;
      const c7 = this.getVerifyUrl(s3 == null ? void 0 : s3.verifyUrl);
      return this.fetchAttestation(o5, c7);
    }), w3(this, "fetchAttestation", async (s3, n5) => {
      this.logger.debug(`resolving attestation: ${s3} from url: ${n5}`);
      const o5 = this.startAbortTimer(import_time4.ONE_SECOND * 5), a3 = await fetch(`${n5}/attestation/${s3}?v2Supported=true`, { signal: this.abortController.signal });
      return clearTimeout(o5), a3.status === 200 ? await a3.json() : void 0;
    }), w3(this, "getVerifyUrl", (s3) => {
      let n5 = s3 || ue2;
      return Jt3.includes(n5) || (this.logger.info(`verify url: ${n5}, not included in trusted list, assigning default: ${ue2}`), n5 = ue2), n5;
    }), w3(this, "fetchPublicKey", async () => {
      try {
        this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);
        const s3 = this.startAbortTimer(import_time4.FIVE_SECONDS), n5 = await fetch(`${this.verifyUrlV3}/public-key`, { signal: this.abortController.signal });
        return clearTimeout(s3), await n5.json();
      } catch (s3) {
        this.logger.warn(s3);
      }
    }), w3(this, "persistPublicKey", async (s3) => {
      this.logger.debug("persisting public key to local storage", s3), await this.store.setItem(this.storeKey, s3), this.publicKey = s3;
    }), w3(this, "removePublicKey", async () => {
      this.logger.debug("removing verify v2 public key from storage"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;
    }), w3(this, "isValidJwtAttestation", async (s3) => {
      const n5 = await this.getPublicKey();
      try {
        if (n5)
          return this.validateAttestation(s3, n5);
      } catch (a3) {
        this.logger.error(a3), this.logger.warn("error validating attestation");
      }
      const o5 = await this.fetchAndPersistPublicKey();
      try {
        if (o5)
          return this.validateAttestation(s3, o5);
      } catch (a3) {
        this.logger.error(a3), this.logger.warn("error validating attestation");
      }
    }), w3(this, "getPublicKey", async () => this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey()), w3(this, "fetchAndPersistPublicKey", async () => {
      if (this.fetchPromise)
        return await this.fetchPromise, this.publicKey;
      this.fetchPromise = new Promise(async (n5) => {
        const o5 = await this.fetchPublicKey();
        o5 && (await this.persistPublicKey(o5), n5(o5));
      });
      const s3 = await this.fetchPromise;
      return this.fetchPromise = void 0, s3;
    }), w3(this, "validateAttestation", (s3, n5) => {
      const o5 = ta(s3, n5.publicKey), a3 = { hasExpired: (0, import_time4.toMiliseconds)(o5.exp) < Date.now(), payload: o5 };
      if (a3.hasExpired)
        throw this.logger.warn("resolve: jwt attestation expired"), new Error("JWT attestation expired");
      return { origin: a3.payload.origin, isScam: a3.payload.isScam, isVerified: a3.payload.isVerified };
    }), this.logger = E2(t, this.name), this.abortController = new AbortController(), this.isDevEnv = hi(), this.init();
  }
  get storeKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//verify:public:key";
  }
  get context() {
    return y2(this.logger);
  }
  startAbortTimer(e2) {
    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), (0, import_time4.toMiliseconds)(e2));
  }
};
var Vo3 = Object.defineProperty;
var qo3 = (r3, e2, t) => e2 in r3 ? Vo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var Mi2 = (r3, e2, t) => qo3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Ki2 = class extends O3 {
  constructor(e2, t) {
    super(e2, t), this.projectId = e2, this.logger = t, Mi2(this, "context", Xt3), Mi2(this, "registerDeviceToken", async (i4) => {
      const { clientId: s3, token: n5, notificationType: o5, enableEncrypted: a3 = false } = i4, c7 = `${Zt3}/${this.projectId}/clients`;
      await fetch(c7, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ client_id: s3, type: o5, token: n5, always_raw: a3 }) });
    }), this.logger = E2(t, this.context);
  }
};
var Go3 = Object.defineProperty;
var Bi2 = Object.getOwnPropertySymbols;
var Wo3 = Object.prototype.hasOwnProperty;
var Ho3 = Object.prototype.propertyIsEnumerable;
var Ze3 = (r3, e2, t) => e2 in r3 ? Go3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var be3 = (r3, e2) => {
  for (var t in e2 || (e2 = {}))
    Wo3.call(e2, t) && Ze3(r3, t, e2[t]);
  if (Bi2)
    for (var t of Bi2(e2))
      Ho3.call(e2, t) && Ze3(r3, t, e2[t]);
  return r3;
};
var E3 = (r3, e2, t) => Ze3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Vi2 = class extends R {
  constructor(e2, t, i4 = true) {
    super(e2, t, i4), this.core = e2, this.logger = t, E3(this, "context", ei2), E3(this, "storagePrefix", B2), E3(this, "storageVersion", Qt3), E3(this, "events", /* @__PURE__ */ new Map()), E3(this, "shouldPersist", false), E3(this, "init", async () => {
      if (!hi())
        try {
          const s3 = { eventId: di(), timestamp: Date.now(), domain: this.getAppDomain(), props: { event: "INIT", type: "", properties: { client_id: await this.core.crypto.getClientId(), user_agent: cr2(this.core.relayer.protocol, this.core.relayer.version, _e3) } } };
          await this.sendEvent([s3]);
        } catch (s3) {
          this.logger.warn(s3);
        }
    }), E3(this, "createEvent", (s3) => {
      const { event: n5 = "ERROR", type: o5 = "", properties: { topic: a3, trace: c7 } } = s3, h6 = di(), l8 = this.core.projectId || "", d5 = Date.now(), g4 = be3({ eventId: h6, timestamp: d5, props: { event: n5, type: o5, properties: { topic: a3, trace: c7 } }, bundleId: l8, domain: this.getAppDomain() }, this.setMethods(h6));
      return this.telemetryEnabled && (this.events.set(h6, g4), this.shouldPersist = true), g4;
    }), E3(this, "getEvent", (s3) => {
      const { eventId: n5, topic: o5 } = s3;
      if (n5)
        return this.events.get(n5);
      const a3 = Array.from(this.events.values()).find((c7) => c7.props.properties.topic === o5);
      if (a3)
        return be3(be3({}, a3), this.setMethods(a3.eventId));
    }), E3(this, "deleteEvent", (s3) => {
      const { eventId: n5 } = s3;
      this.events.delete(n5), this.shouldPersist = true;
    }), E3(this, "setEventListeners", () => {
      this.core.heartbeat.on(r.pulse, async () => {
        this.shouldPersist && await this.persist(), this.events.forEach((s3) => {
          (0, import_time4.fromMiliseconds)(Date.now()) - (0, import_time4.fromMiliseconds)(s3.timestamp) > ti && (this.events.delete(s3.eventId), this.shouldPersist = true);
        });
      });
    }), E3(this, "setMethods", (s3) => ({ addTrace: (n5) => this.addTrace(s3, n5), setError: (n5) => this.setError(s3, n5) })), E3(this, "addTrace", (s3, n5) => {
      const o5 = this.events.get(s3);
      o5 && (o5.props.properties.trace.push(n5), this.events.set(s3, o5), this.shouldPersist = true);
    }), E3(this, "setError", (s3, n5) => {
      const o5 = this.events.get(s3);
      o5 && (o5.props.type = n5, o5.timestamp = Date.now(), this.events.set(s3, o5), this.shouldPersist = true);
    }), E3(this, "persist", async () => {
      await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = false;
    }), E3(this, "restore", async () => {
      try {
        const s3 = await this.core.storage.getItem(this.storageKey) || [];
        if (!s3.length)
          return;
        s3.forEach((n5) => {
          this.events.set(n5.eventId, be3(be3({}, n5), this.setMethods(n5.eventId)));
        });
      } catch (s3) {
        this.logger.warn(s3);
      }
    }), E3(this, "submit", async () => {
      if (!this.telemetryEnabled || this.events.size === 0)
        return;
      const s3 = [];
      for (const [n5, o5] of this.events)
        o5.props.type && s3.push(o5);
      if (s3.length !== 0)
        try {
          if ((await this.sendEvent(s3)).ok)
            for (const n5 of s3)
              this.events.delete(n5.eventId), this.shouldPersist = true;
        } catch (n5) {
          this.logger.warn(n5);
        }
    }), E3(this, "sendEvent", async (s3) => {
      const n5 = this.getAppDomain() ? "" : "&sp=desktop";
      return await fetch(`${ii2}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${_e3}${n5}`, { method: "POST", body: JSON.stringify(s3) });
    }), E3(this, "getAppDomain", () => sr2().url), this.logger = E2(t, this.context), this.telemetryEnabled = i4, i4 ? this.restore().then(async () => {
      await this.submit(), this.setEventListeners();
    }) : this.persist();
  }
  get storageKey() {
    return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + "//" + this.context;
  }
};
var Yo3 = Object.defineProperty;
var qi2 = Object.getOwnPropertySymbols;
var Jo3 = Object.prototype.hasOwnProperty;
var Xo2 = Object.prototype.propertyIsEnumerable;
var Qe3 = (r3, e2, t) => e2 in r3 ? Yo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var Gi2 = (r3, e2) => {
  for (var t in e2 || (e2 = {}))
    Jo3.call(e2, t) && Qe3(r3, t, e2[t]);
  if (qi2)
    for (var t of qi2(e2))
      Xo2.call(e2, t) && Qe3(r3, t, e2[t]);
  return r3;
};
var v4 = (r3, e2, t) => Qe3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Te3 = class _Te extends h3 {
  constructor(e2) {
    var t;
    super(e2), v4(this, "protocol", ze2), v4(this, "version", Le3), v4(this, "name", he3), v4(this, "relayUrl"), v4(this, "projectId"), v4(this, "customStoragePrefix"), v4(this, "events", new import_events7.EventEmitter()), v4(this, "logger"), v4(this, "heartbeat"), v4(this, "relayer"), v4(this, "crypto"), v4(this, "storage"), v4(this, "history"), v4(this, "expirer"), v4(this, "pairing"), v4(this, "verify"), v4(this, "echoClient"), v4(this, "linkModeSupportedApps"), v4(this, "eventClient"), v4(this, "initialized", false), v4(this, "logChunkController"), v4(this, "on", (a3, c7) => this.events.on(a3, c7)), v4(this, "once", (a3, c7) => this.events.once(a3, c7)), v4(this, "off", (a3, c7) => this.events.off(a3, c7)), v4(this, "removeListener", (a3, c7) => this.events.removeListener(a3, c7)), v4(this, "dispatchEnvelope", ({ topic: a3, message: c7, sessionExists: h6 }) => {
      if (!a3 || !c7)
        return;
      const l8 = { topic: a3, message: c7, publishedAt: Date.now(), transportType: Q3.link_mode };
      this.relayer.onLinkMessageEvent(l8, { sessionExists: h6 });
    });
    const i4 = this.getGlobalCore(e2 == null ? void 0 : e2.customStoragePrefix);
    if (i4)
      try {
        return this.customStoragePrefix = i4.customStoragePrefix, this.logger = i4.logger, this.heartbeat = i4.heartbeat, this.crypto = i4.crypto, this.history = i4.history, this.expirer = i4.expirer, this.storage = i4.storage, this.relayer = i4.relayer, this.pairing = i4.pairing, this.verify = i4.verify, this.echoClient = i4.echoClient, this.linkModeSupportedApps = i4.linkModeSupportedApps, this.eventClient = i4.eventClient, this.initialized = i4.initialized, this.logChunkController = i4.logChunkController, i4;
      } catch (a3) {
        console.warn("Failed to copy global core", a3);
      }
    this.projectId = e2 == null ? void 0 : e2.projectId, this.relayUrl = (e2 == null ? void 0 : e2.relayUrl) || Ue3, this.customStoragePrefix = e2 != null && e2.customStoragePrefix ? `:${e2.customStoragePrefix}` : "";
    const s3 = k2({ level: typeof (e2 == null ? void 0 : e2.logger) == "string" && e2.logger ? e2.logger : Et3.logger, name: he3 }), { logger: n5, chunkLoggerController: o5 } = A({ opts: s3, maxSizeInBytes: e2 == null ? void 0 : e2.maxLogBlobSizeInBytes, loggerOverride: e2 == null ? void 0 : e2.logger });
    this.logChunkController = o5, (t = this.logChunkController) != null && t.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async () => {
      var a3, c7;
      (a3 = this.logChunkController) != null && a3.downloadLogsBlobInBrowser && ((c7 = this.logChunkController) == null || c7.downloadLogsBlobInBrowser({ clientId: await this.crypto.getClientId() }));
    }), this.logger = E2(n5, this.name), this.heartbeat = new i(), this.crypto = new wi2(this, this.logger, e2 == null ? void 0 : e2.keychain), this.history = new ji2(this, this.logger), this.expirer = new Ui2(this, this.logger), this.storage = e2 != null && e2.storage ? e2.storage : new h(Gi2(Gi2({}, It3), e2 == null ? void 0 : e2.storageOptions)), this.relayer = new Oi2({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new ki2(this, this.logger), this.verify = new Fi2(this, this.logger, this.storage), this.echoClient = new Ki2(this.projectId || "", this.logger), this.linkModeSupportedApps = [], this.eventClient = new Vi2(this, this.logger, e2 == null ? void 0 : e2.telemetryEnabled), this.setGlobalCore(this);
  }
  static async init(e2) {
    const t = new _Te(e2);
    await t.initialize();
    const i4 = await t.crypto.getClientId();
    return await t.storage.setItem(jt3, i4), t;
  }
  get context() {
    return y2(this.logger);
  }
  async start() {
    this.initialized || await this.initialize();
  }
  async getLogsBlob() {
    var e2;
    return (e2 = this.logChunkController) == null ? void 0 : e2.logsToBlob({ clientId: await this.crypto.getClientId() });
  }
  async addLinkModeSupportedApp(e2) {
    this.linkModeSupportedApps.includes(e2) || (this.linkModeSupportedApps.push(e2), await this.storage.setItem(Fe2, this.linkModeSupportedApps));
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.linkModeSupportedApps = await this.storage.getItem(Fe2) || [], this.initialized = true, this.logger.info("Core Initialization Success");
    } catch (e2) {
      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e2), this.logger.error(e2.message), e2;
    }
  }
  getGlobalCore(e2 = "") {
    try {
      if (this.isGlobalCoreDisabled())
        return;
      const t = `_walletConnectCore_${e2}`, i4 = `${t}_count`;
      return globalThis[i4] = (globalThis[i4] || 0) + 1, globalThis[i4] > 1 && console.warn(`WalletConnect Core is already initialized. This is probably a mistake and can lead to unexpected behavior. Init() was called ${globalThis[i4]} times.`), globalThis[t];
    } catch (t) {
      console.warn("Failed to get global WalletConnect core", t);
      return;
    }
  }
  setGlobalCore(e2) {
    var t;
    try {
      if (this.isGlobalCoreDisabled())
        return;
      const i4 = `_walletConnectCore_${((t = e2.opts) == null ? void 0 : t.customStoragePrefix) || ""}`;
      globalThis[i4] = e2;
    } catch (i4) {
      console.warn("Failed to set global WalletConnect core", i4);
    }
  }
  isGlobalCoreDisabled() {
    try {
      return typeof process < "u" && process.env.DISABLE_GLOBAL_CORE === "true";
    } catch {
      return true;
    }
  }
};
var Zo3 = Te3;

// node_modules/@walletconnect/sign-client/dist/index.es.js
var import_events8 = __toESM(require_events());
var import_time5 = __toESM(require_cjs());
var Ce4 = "wc";
var ke4 = 2;
var De3 = "client";
var me3 = `${Ce4}@${ke4}:${De3}:`;
var we3 = { name: De3, logger: "error", controller: false, relayUrl: "wss://relay.walletconnect.org" };
var Le4 = "WALLETCONNECT_DEEPLINK_CHOICE";
var ht3 = "proposal";
var Me4 = "Proposal expired";
var dt3 = "session";
var X2 = import_time5.SEVEN_DAYS;
var ut3 = "engine";
var N11 = { wc_sessionPropose: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1100 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1101 }, reject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1120 }, autoReject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1121 } }, wc_sessionSettle: { req: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1102 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1104 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1105 } }, wc_sessionExtend: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1106 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1107 } }, wc_sessionRequest: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1108 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1109 } }, wc_sessionEvent: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1110 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1111 } }, wc_sessionDelete: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1112 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1113 } }, wc_sessionPing: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1114 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1115 } }, wc_sessionAuthenticate: { req: { ttl: import_time5.ONE_HOUR, prompt: true, tag: 1116 }, res: { ttl: import_time5.ONE_HOUR, prompt: false, tag: 1117 }, reject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1118 }, autoReject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1119 } } };
var _e4 = { min: import_time5.FIVE_MINUTES, max: import_time5.SEVEN_DAYS };
var $2 = { idle: "IDLE", active: "ACTIVE" };
var gt3 = { eth_sendTransaction: { key: "" }, eth_sendRawTransaction: { key: "" }, wallet_sendCalls: { key: "" }, solana_signTransaction: { key: "signature" }, solana_signAllTransactions: { key: "transactions" }, solana_signAndSendTransaction: { key: "signature" }, sui_signAndExecuteTransaction: { key: "digest" }, sui_signTransaction: { key: "" }, hedera_signAndExecuteTransaction: { key: "transactionId" }, hedera_executeTransaction: { key: "transactionId" }, near_signTransaction: { key: "" }, near_signTransactions: { key: "" }, tron_signTransaction: { key: "txID" }, xrpl_signTransaction: { key: "" }, xrpl_signTransactionFor: { key: "" }, algo_signTxn: { key: "" }, sendTransfer: { key: "txid" }, stacks_stxTransfer: { key: "txId" }, polkadot_signTransaction: { key: "" }, cosmos_signDirect: { key: "" } };
var yt2 = "request";
var mt2 = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest", "wc_sessionAuthenticate"];
var wt3 = "wc";
var _t3 = "auth";
var Et4 = "authKeys";
var ft2 = "pairingTopics";
var St4 = "requests";
var ae2 = `${wt3}@${1.5}:${_t3}:`;
var ce2 = `${ae2}:PUB_KEY`;
var Os = Object.defineProperty;
var bs2 = Object.defineProperties;
var As = Object.getOwnPropertyDescriptors;
var Rt4 = Object.getOwnPropertySymbols;
var xs2 = Object.prototype.hasOwnProperty;
var Vs2 = Object.prototype.propertyIsEnumerable;
var $e3 = (S5, o5, t) => o5 in S5 ? Os(S5, o5, { enumerable: true, configurable: true, writable: true, value: t }) : S5[o5] = t;
var I3 = (S5, o5) => {
  for (var t in o5 || (o5 = {}))
    xs2.call(o5, t) && $e3(S5, t, o5[t]);
  if (Rt4)
    for (var t of Rt4(o5))
      Vs2.call(o5, t) && $e3(S5, t, o5[t]);
  return S5;
};
var x4 = (S5, o5) => bs2(S5, As(o5));
var c5 = (S5, o5, t) => $e3(S5, typeof o5 != "symbol" ? o5 + "" : o5, t);
var Cs2 = class extends V {
  constructor(o5) {
    super(o5), c5(this, "name", ut3), c5(this, "events", new import_events8.default()), c5(this, "initialized", false), c5(this, "requestQueue", { state: $2.idle, queue: [] }), c5(this, "sessionRequestQueue", { state: $2.idle, queue: [] }), c5(this, "emittedSessionRequests", new gi({ limit: 500 })), c5(this, "requestQueueDelay", import_time5.ONE_SECOND), c5(this, "expectedPairingMethodMap", /* @__PURE__ */ new Map()), c5(this, "recentlyDeletedMap", /* @__PURE__ */ new Map()), c5(this, "recentlyDeletedLimit", 200), c5(this, "relayMessageCache", []), c5(this, "pendingSessions", /* @__PURE__ */ new Map()), c5(this, "init", async () => {
      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({ methods: Object.keys(N11) }), this.initialized = true, setTimeout(async () => {
        await this.processPendingMessageEvents(), this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();
      }, (0, import_time5.toMiliseconds)(this.requestQueueDelay)));
    }), c5(this, "connect", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      const e2 = x4(I3({}, t), { requiredNamespaces: t.requiredNamespaces || {}, optionalNamespaces: t.optionalNamespaces || {} });
      await this.isValidConnect(e2), e2.optionalNamespaces = ba(e2.requiredNamespaces, e2.optionalNamespaces), e2.requiredNamespaces = {};
      const { pairingTopic: s3, requiredNamespaces: i4, optionalNamespaces: r3, sessionProperties: n5, scopedProperties: a3, relays: l8 } = e2;
      let p5 = s3, h6, u3 = false;
      try {
        if (p5) {
          const T5 = this.client.core.pairing.pairings.get(p5);
          this.client.logger.warn("connect() with existing pairing topic is deprecated and will be removed in the next major release."), u3 = T5.active;
        }
      } catch (T5) {
        throw this.client.logger.error(`connect() -> pairing.get(${p5}) failed`), T5;
      }
      if (!p5 || !u3) {
        const { topic: T5, uri: K7 } = await this.client.core.pairing.create();
        p5 = T5, h6 = K7;
      }
      if (!p5) {
        const { message: T5 } = Et2("NO_MATCHING_KEY", `connect() pairing topic: ${p5}`);
        throw new Error(T5);
      }
      const d5 = await this.client.core.crypto.generateKeyPair(), w5 = N11.wc_sessionPropose.req.ttl || import_time5.FIVE_MINUTES, m4 = ii(w5), y6 = x4(I3(I3({ requiredNamespaces: i4, optionalNamespaces: r3, relays: l8 ?? [{ protocol: xt3 }], proposer: { publicKey: d5, metadata: this.client.metadata }, expiryTimestamp: m4, pairingTopic: p5 }, n5 && { sessionProperties: n5 }), a3 && { scopedProperties: a3 }), { id: payloadId() }), E6 = ci("session_connect", y6.id), { reject: _3, resolve: V4, done: C5 } = ei(w5, Me4), v6 = ({ id: T5 }) => {
        T5 === y6.id && (this.client.events.off("proposal_expire", v6), this.pendingSessions.delete(y6.id), this.events.emit(E6, { error: { message: Me4, code: 0 } }));
      };
      return this.client.events.on("proposal_expire", v6), this.events.once(E6, ({ error: T5, session: K7 }) => {
        this.client.events.off("proposal_expire", v6), T5 ? _3(T5) : K7 && V4(K7);
      }), await this.sendRequest({ topic: p5, method: "wc_sessionPropose", params: y6, throwOnFailedPublish: true, clientRpcId: y6.id }), await this.setProposal(y6.id, y6), { uri: h6, approval: C5 };
    }), c5(this, "pair", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        return await this.client.core.pairing.pair(t);
      } catch (e2) {
        throw this.client.logger.error("pair() failed"), e2;
      }
    }), c5(this, "approve", async (t) => {
      var e2, s3, i4;
      const r3 = this.client.core.eventClient.createEvent({ properties: { topic: (e2 = t == null ? void 0 : t.id) == null ? void 0 : e2.toString(), trace: [tr3.session_approve_started] } });
      try {
        this.isInitialized(), await this.confirmOnlineStateOrThrow();
      } catch (q2) {
        throw r3.setError(ir3.no_internet_connection), q2;
      }
      try {
        await this.isValidProposalId(t == null ? void 0 : t.id);
      } catch (q2) {
        throw this.client.logger.error(`approve() -> proposal.get(${t == null ? void 0 : t.id}) failed`), r3.setError(ir3.proposal_not_found), q2;
      }
      try {
        await this.isValidApprove(t);
      } catch (q2) {
        throw this.client.logger.error("approve() -> isValidApprove() failed"), r3.setError(ir3.session_approve_namespace_validation_failure), q2;
      }
      const { id: n5, relayProtocol: a3, namespaces: l8, sessionProperties: p5, scopedProperties: h6, sessionConfig: u3 } = t, d5 = this.client.proposal.get(n5);
      this.client.core.eventClient.deleteEvent({ eventId: r3.eventId });
      const { pairingTopic: w5, proposer: m4, requiredNamespaces: y6, optionalNamespaces: E6 } = d5;
      let _3 = (s3 = this.client.core.eventClient) == null ? void 0 : s3.getEvent({ topic: w5 });
      _3 || (_3 = (i4 = this.client.core.eventClient) == null ? void 0 : i4.createEvent({ type: tr3.session_approve_started, properties: { topic: w5, trace: [tr3.session_approve_started, tr3.session_namespaces_validation_success] } }));
      const V4 = await this.client.core.crypto.generateKeyPair(), C5 = m4.publicKey, v6 = await this.client.core.crypto.generateSharedKey(V4, C5), T5 = I3(I3(I3({ relay: { protocol: a3 ?? "irn" }, namespaces: l8, controller: { publicKey: V4, metadata: this.client.metadata }, expiry: ii(X2) }, p5 && { sessionProperties: p5 }), h6 && { scopedProperties: h6 }), u3 && { sessionConfig: u3 }), K7 = Q3.relay;
      _3.addTrace(tr3.subscribing_session_topic);
      try {
        await this.client.core.relayer.subscribe(v6, { transportType: K7 });
      } catch (q2) {
        throw _3.setError(ir3.subscribe_session_topic_failure), q2;
      }
      _3.addTrace(tr3.subscribe_session_topic_success);
      const fe5 = x4(I3({}, T5), { topic: v6, requiredNamespaces: y6, optionalNamespaces: E6, pairingTopic: w5, acknowledged: false, self: T5.controller, peer: { publicKey: m4.publicKey, metadata: m4.metadata }, controller: V4, transportType: Q3.relay });
      await this.client.session.set(v6, fe5), _3.addTrace(tr3.store_session);
      try {
        _3.addTrace(tr3.publishing_session_settle), await this.sendRequest({ topic: v6, method: "wc_sessionSettle", params: T5, throwOnFailedPublish: true }).catch((q2) => {
          throw _3 == null ? void 0 : _3.setError(ir3.session_settle_publish_failure), q2;
        }), _3.addTrace(tr3.session_settle_publish_success), _3.addTrace(tr3.publishing_session_approve), await this.sendResult({ id: n5, topic: w5, result: { relay: { protocol: a3 ?? "irn" }, responderPublicKey: V4 }, throwOnFailedPublish: true }).catch((q2) => {
          throw _3 == null ? void 0 : _3.setError(ir3.session_approve_publish_failure), q2;
        }), _3.addTrace(tr3.session_approve_publish_success);
      } catch (q2) {
        throw this.client.logger.error(q2), this.client.session.delete(v6, Kt2("USER_DISCONNECTED")), await this.client.core.relayer.unsubscribe(v6), q2;
      }
      return this.client.core.eventClient.deleteEvent({ eventId: _3.eventId }), await this.client.core.pairing.updateMetadata({ topic: w5, metadata: m4.metadata }), await this.deleteProposal(n5), await this.client.core.pairing.activate({ topic: w5 }), await this.setExpiry(v6, ii(X2)), { topic: v6, acknowledged: () => Promise.resolve(this.client.session.get(v6)) };
    }), c5(this, "reject", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidReject(t);
      } catch (r3) {
        throw this.client.logger.error("reject() -> isValidReject() failed"), r3;
      }
      const { id: e2, reason: s3 } = t;
      let i4;
      try {
        i4 = this.client.proposal.get(e2).pairingTopic;
      } catch (r3) {
        throw this.client.logger.error(`reject() -> proposal.get(${e2}) failed`), r3;
      }
      i4 && await this.sendError({ id: e2, topic: i4, error: s3, rpcOpts: N11.wc_sessionPropose.reject }), await this.deleteProposal(e2);
    }), c5(this, "update", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidUpdate(t);
      } catch (h6) {
        throw this.client.logger.error("update() -> isValidUpdate() failed"), h6;
      }
      const { topic: e2, namespaces: s3 } = t, { done: i4, resolve: r3, reject: n5 } = ei(), a3 = payloadId(), l8 = getBigIntRpcId().toString(), p5 = this.client.session.get(e2).namespaces;
      return this.events.once(ci("session_update", a3), ({ error: h6 }) => {
        h6 ? n5(h6) : r3();
      }), await this.client.session.update(e2, { namespaces: s3 }), await this.sendRequest({ topic: e2, method: "wc_sessionUpdate", params: { namespaces: s3 }, throwOnFailedPublish: true, clientRpcId: a3, relayRpcId: l8 }).catch((h6) => {
        this.client.logger.error(h6), this.client.session.update(e2, { namespaces: p5 }), n5(h6);
      }), { acknowledged: i4 };
    }), c5(this, "extend", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidExtend(t);
      } catch (a3) {
        throw this.client.logger.error("extend() -> isValidExtend() failed"), a3;
      }
      const { topic: e2 } = t, s3 = payloadId(), { done: i4, resolve: r3, reject: n5 } = ei();
      return this.events.once(ci("session_extend", s3), ({ error: a3 }) => {
        a3 ? n5(a3) : r3();
      }), await this.setExpiry(e2, ii(X2)), this.sendRequest({ topic: e2, method: "wc_sessionExtend", params: {}, clientRpcId: s3, throwOnFailedPublish: true }).catch((a3) => {
        n5(a3);
      }), { acknowledged: i4 };
    }), c5(this, "request", async (t) => {
      this.isInitialized();
      try {
        await this.isValidRequest(t);
      } catch (y6) {
        throw this.client.logger.error("request() -> isValidRequest() failed"), y6;
      }
      const { chainId: e2, request: s3, topic: i4, expiry: r3 = N11.wc_sessionRequest.req.ttl } = t, n5 = this.client.session.get(i4);
      (n5 == null ? void 0 : n5.transportType) === Q3.relay && await this.confirmOnlineStateOrThrow();
      const a3 = payloadId(), l8 = getBigIntRpcId().toString(), { done: p5, resolve: h6, reject: u3 } = ei(r3, "Request expired. Please try again.");
      this.events.once(ci("session_request", a3), ({ error: y6, result: E6 }) => {
        y6 ? u3(y6) : h6(E6);
      });
      const d5 = "wc_sessionRequest", w5 = this.getAppLinkIfEnabled(n5.peer.metadata, n5.transportType);
      if (w5)
        return await this.sendRequest({ clientRpcId: a3, relayRpcId: l8, topic: i4, method: d5, params: { request: x4(I3({}, s3), { expiryTimestamp: ii(r3) }), chainId: e2 }, expiry: r3, throwOnFailedPublish: true, appLink: w5 }).catch((y6) => u3(y6)), this.client.events.emit("session_request_sent", { topic: i4, request: s3, chainId: e2, id: a3 }), await p5();
      const m4 = { request: x4(I3({}, s3), { expiryTimestamp: ii(r3) }), chainId: e2 };
      return await Promise.all([new Promise(async (y6) => {
        await this.sendRequest({ clientRpcId: a3, relayRpcId: l8, topic: i4, method: d5, params: m4, expiry: r3, throwOnFailedPublish: true, tvf: this.getTVFParams(a3, m4) }).catch((E6) => u3(E6)), this.client.events.emit("session_request_sent", { topic: i4, request: s3, chainId: e2, id: a3 }), y6();
      }), new Promise(async (y6) => {
        var E6;
        if (!((E6 = n5.sessionConfig) != null && E6.disableDeepLink)) {
          const _3 = await ui(this.client.core.storage, Le4);
          await ai({ id: a3, topic: i4, wcDeepLink: _3 });
        }
        y6();
      }), p5()]).then((y6) => y6[2]);
    }), c5(this, "respond", async (t) => {
      this.isInitialized(), await this.isValidRespond(t);
      const { topic: e2, response: s3 } = t, { id: i4 } = s3, r3 = this.client.session.get(e2);
      r3.transportType === Q3.relay && await this.confirmOnlineStateOrThrow();
      const n5 = this.getAppLinkIfEnabled(r3.peer.metadata, r3.transportType);
      isJsonRpcResult(s3) ? await this.sendResult({ id: i4, topic: e2, result: s3.result, throwOnFailedPublish: true, appLink: n5 }) : isJsonRpcError(s3) && await this.sendError({ id: i4, topic: e2, error: s3.error, appLink: n5 }), this.cleanupAfterResponse(t);
    }), c5(this, "ping", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidPing(t);
      } catch (s3) {
        throw this.client.logger.error("ping() -> isValidPing() failed"), s3;
      }
      const { topic: e2 } = t;
      if (this.client.session.keys.includes(e2)) {
        const s3 = payloadId(), i4 = getBigIntRpcId().toString(), { done: r3, resolve: n5, reject: a3 } = ei();
        this.events.once(ci("session_ping", s3), ({ error: l8 }) => {
          l8 ? a3(l8) : n5();
        }), await Promise.all([this.sendRequest({ topic: e2, method: "wc_sessionPing", params: {}, throwOnFailedPublish: true, clientRpcId: s3, relayRpcId: i4 }), r3()]);
      } else
        this.client.core.pairing.pairings.keys.includes(e2) && (this.client.logger.warn("ping() on pairing topic is deprecated and will be removed in the next major release."), await this.client.core.pairing.ping({ topic: e2 }));
    }), c5(this, "emit", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(t);
      const { topic: e2, event: s3, chainId: i4 } = t, r3 = getBigIntRpcId().toString(), n5 = payloadId();
      await this.sendRequest({ topic: e2, method: "wc_sessionEvent", params: { event: s3, chainId: i4 }, throwOnFailedPublish: true, relayRpcId: r3, clientRpcId: n5 });
    }), c5(this, "disconnect", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(t);
      const { topic: e2 } = t;
      if (this.client.session.keys.includes(e2))
        await this.sendRequest({ topic: e2, method: "wc_sessionDelete", params: Kt2("USER_DISCONNECTED"), throwOnFailedPublish: true }), await this.deleteSession({ topic: e2, emitEvent: false });
      else if (this.client.core.pairing.pairings.keys.includes(e2))
        await this.client.core.pairing.disconnect({ topic: e2 });
      else {
        const { message: s3 } = Et2("MISMATCHED_TOPIC", `Session or pairing topic not found: ${e2}`);
        throw new Error(s3);
      }
    }), c5(this, "find", (t) => (this.isInitialized(), this.client.session.getAll().filter((e2) => ya(e2, t)))), c5(this, "getPendingSessionRequests", () => this.client.pendingRequest.getAll()), c5(this, "authenticate", async (t, e2) => {
      var s3;
      this.isInitialized(), this.isValidAuthenticate(t);
      const i4 = e2 && this.client.core.linkModeSupportedApps.includes(e2) && ((s3 = this.client.metadata.redirect) == null ? void 0 : s3.linkMode), r3 = i4 ? Q3.link_mode : Q3.relay;
      r3 === Q3.relay && await this.confirmOnlineStateOrThrow();
      const { chains: n5, statement: a3 = "", uri: l8, domain: p5, nonce: h6, type: u3, exp: d5, nbf: w5, methods: m4 = [], expiry: y6 } = t, E6 = [...t.resources || []], { topic: _3, uri: V4 } = await this.client.core.pairing.create({ methods: ["wc_sessionAuthenticate"], transportType: r3 });
      this.client.logger.info({ message: "Generated new pairing", pairing: { topic: _3, uri: V4 } });
      const C5 = await this.client.core.crypto.generateKeyPair(), v6 = Fc(C5);
      if (await Promise.all([this.client.auth.authKeys.set(ce2, { responseTopic: v6, publicKey: C5 }), this.client.auth.pairingTopics.set(v6, { topic: v6, pairingTopic: _3 })]), await this.client.core.relayer.subscribe(v6, { transportType: r3 }), this.client.logger.info(`sending request to new pairing topic: ${_3}`), m4.length > 0) {
        const { namespace: O7 } = Fe(n5[0]);
        let k6 = Ef(O7, "request", m4);
        Oe2(E6) && (k6 = Bf(k6, E6.pop())), E6.push(k6);
      }
      const T5 = y6 && y6 > N11.wc_sessionAuthenticate.req.ttl ? y6 : N11.wc_sessionAuthenticate.req.ttl, K7 = { authPayload: { type: u3 ?? "caip122", chains: n5, statement: a3, aud: l8, domain: p5, version: "1", nonce: h6, iat: (/* @__PURE__ */ new Date()).toISOString(), exp: d5, nbf: w5, resources: E6 }, requester: { publicKey: C5, metadata: this.client.metadata }, expiryTimestamp: ii(T5) }, fe5 = { eip155: { chains: n5, methods: [.../* @__PURE__ */ new Set(["personal_sign", ...m4])], events: ["chainChanged", "accountsChanged"] } }, q2 = { requiredNamespaces: {}, optionalNamespaces: fe5, relays: [{ protocol: "irn" }], pairingTopic: _3, proposer: { publicKey: C5, metadata: this.client.metadata }, expiryTimestamp: ii(N11.wc_sessionPropose.req.ttl), id: payloadId() }, { done: It5, resolve: Ue5, reject: Se5 } = ei(T5, "Request expired"), te4 = payloadId(), le5 = ci("session_connect", q2.id), Re4 = ci("session_request", te4), pe5 = async ({ error: O7, session: k6 }) => {
        this.events.off(Re4, ve4), O7 ? Se5(O7) : k6 && Ue5({ session: k6 });
      }, ve4 = async (O7) => {
        var k6, Ge4, je5;
        if (await this.deletePendingAuthRequest(te4, { message: "fulfilled", code: 0 }), O7.error) {
          const ie4 = Kt2("WC_METHOD_UNSUPPORTED", "wc_sessionAuthenticate");
          return O7.error.code === ie4.code ? void 0 : (this.events.off(le5, pe5), Se5(O7.error.message));
        }
        await this.deleteProposal(q2.id), this.events.off(le5, pe5);
        const { cacaos: Fe4, responder: Q5 } = O7.result, Te5 = [], Qe5 = [];
        for (const ie4 of Fe4) {
          await yf({ cacao: ie4, projectId: this.client.core.projectId }) || (this.client.logger.error(ie4, "Signature verification failed"), Se5(Kt2("SESSION_SETTLEMENT_FAILED", "Signature verification failed")));
          const { p: qe5 } = ie4, Pe5 = Oe2(qe5.resources), He5 = [Vr2(qe5.iss)], Tt5 = dn(qe5.iss);
          if (Pe5) {
            const Ne4 = If(Pe5), qt4 = Af(Pe5);
            Te5.push(...Ne4), He5.push(...qt4);
          }
          for (const Ne4 of He5)
            Qe5.push(`${Ne4}:${Tt5}`);
        }
        const se4 = await this.client.core.crypto.generateSharedKey(C5, Q5.publicKey);
        let he5;
        Te5.length > 0 && (he5 = { topic: se4, acknowledged: true, self: { publicKey: C5, metadata: this.client.metadata }, peer: Q5, controller: Q5.publicKey, expiry: ii(X2), requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: _3, namespaces: ga([...new Set(Te5)], [...new Set(Qe5)]), transportType: r3 }, await this.client.core.relayer.subscribe(se4, { transportType: r3 }), await this.client.session.set(se4, he5), _3 && await this.client.core.pairing.updateMetadata({ topic: _3, metadata: Q5.metadata }), he5 = this.client.session.get(se4)), (k6 = this.client.metadata.redirect) != null && k6.linkMode && (Ge4 = Q5.metadata.redirect) != null && Ge4.linkMode && (je5 = Q5.metadata.redirect) != null && je5.universal && e2 && (this.client.core.addLinkModeSupportedApp(Q5.metadata.redirect.universal), this.client.session.update(se4, { transportType: Q3.link_mode })), Ue5({ auths: Fe4, session: he5 });
      };
      this.events.once(le5, pe5), this.events.once(Re4, ve4);
      let Ie5;
      try {
        if (i4) {
          const O7 = formatJsonRpcRequest("wc_sessionAuthenticate", K7, te4);
          this.client.core.history.set(_3, O7);
          const k6 = await this.client.core.crypto.encode("", O7, { type: ge2, encoding: De2 });
          Ie5 = sa(e2, _3, k6);
        } else
          await Promise.all([this.sendRequest({ topic: _3, method: "wc_sessionAuthenticate", params: K7, expiry: t.expiry, throwOnFailedPublish: true, clientRpcId: te4 }), this.sendRequest({ topic: _3, method: "wc_sessionPropose", params: q2, expiry: N11.wc_sessionPropose.req.ttl, throwOnFailedPublish: true, clientRpcId: q2.id })]);
      } catch (O7) {
        throw this.events.off(le5, pe5), this.events.off(Re4, ve4), O7;
      }
      return await this.setProposal(q2.id, q2), await this.setAuthRequest(te4, { request: x4(I3({}, K7), { verifyContext: {} }), pairingTopic: _3, transportType: r3 }), { uri: Ie5 ?? V4, response: It5 };
    }), c5(this, "approveSessionAuthenticate", async (t) => {
      const { id: e2, auths: s3 } = t, i4 = this.client.core.eventClient.createEvent({ properties: { topic: e2.toString(), trace: [sr3.authenticated_session_approve_started] } });
      try {
        this.isInitialized();
      } catch (y6) {
        throw i4.setError(rr3.no_internet_connection), y6;
      }
      const r3 = this.getPendingAuthRequest(e2);
      if (!r3)
        throw i4.setError(rr3.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${e2}`);
      const n5 = r3.transportType || Q3.relay;
      n5 === Q3.relay && await this.confirmOnlineStateOrThrow();
      const a3 = r3.requester.publicKey, l8 = await this.client.core.crypto.generateKeyPair(), p5 = Fc(a3), h6 = { type: ee, receiverPublicKey: a3, senderPublicKey: l8 }, u3 = [], d5 = [];
      for (const y6 of s3) {
        if (!await yf({ cacao: y6, projectId: this.client.core.projectId })) {
          i4.setError(rr3.invalid_cacao);
          const v6 = Kt2("SESSION_SETTLEMENT_FAILED", "Signature verification failed");
          throw await this.sendError({ id: e2, topic: p5, error: v6, encodeOpts: h6 }), new Error(v6.message);
        }
        i4.addTrace(sr3.cacaos_verified);
        const { p: E6 } = y6, _3 = Oe2(E6.resources), V4 = [Vr2(E6.iss)], C5 = dn(E6.iss);
        if (_3) {
          const v6 = If(_3), T5 = Af(_3);
          u3.push(...v6), V4.push(...T5);
        }
        for (const v6 of V4)
          d5.push(`${v6}:${C5}`);
      }
      const w5 = await this.client.core.crypto.generateSharedKey(l8, a3);
      i4.addTrace(sr3.create_authenticated_session_topic);
      let m4;
      if ((u3 == null ? void 0 : u3.length) > 0) {
        m4 = { topic: w5, acknowledged: true, self: { publicKey: l8, metadata: this.client.metadata }, peer: { publicKey: a3, metadata: r3.requester.metadata }, controller: a3, expiry: ii(X2), authentication: s3, requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: r3.pairingTopic, namespaces: ga([...new Set(u3)], [...new Set(d5)]), transportType: n5 }, i4.addTrace(sr3.subscribing_authenticated_session_topic);
        try {
          await this.client.core.relayer.subscribe(w5, { transportType: n5 });
        } catch (y6) {
          throw i4.setError(rr3.subscribe_authenticated_session_topic_failure), y6;
        }
        i4.addTrace(sr3.subscribe_authenticated_session_topic_success), await this.client.session.set(w5, m4), i4.addTrace(sr3.store_authenticated_session), await this.client.core.pairing.updateMetadata({ topic: r3.pairingTopic, metadata: r3.requester.metadata });
      }
      i4.addTrace(sr3.publishing_authenticated_session_approve);
      try {
        await this.sendResult({ topic: p5, id: e2, result: { cacaos: s3, responder: { publicKey: l8, metadata: this.client.metadata } }, encodeOpts: h6, throwOnFailedPublish: true, appLink: this.getAppLinkIfEnabled(r3.requester.metadata, n5) });
      } catch (y6) {
        throw i4.setError(rr3.authenticated_session_approve_publish_failure), y6;
      }
      return await this.client.auth.requests.delete(e2, { message: "fulfilled", code: 0 }), await this.client.core.pairing.activate({ topic: r3.pairingTopic }), this.client.core.eventClient.deleteEvent({ eventId: i4.eventId }), { session: m4 };
    }), c5(this, "rejectSessionAuthenticate", async (t) => {
      this.isInitialized();
      const { id: e2, reason: s3 } = t, i4 = this.getPendingAuthRequest(e2);
      if (!i4)
        throw new Error(`Could not find pending auth request with id ${e2}`);
      i4.transportType === Q3.relay && await this.confirmOnlineStateOrThrow();
      const r3 = i4.requester.publicKey, n5 = await this.client.core.crypto.generateKeyPair(), a3 = Fc(r3), l8 = { type: ee, receiverPublicKey: r3, senderPublicKey: n5 };
      await this.sendError({ id: e2, topic: a3, error: s3, encodeOpts: l8, rpcOpts: N11.wc_sessionAuthenticate.reject, appLink: this.getAppLinkIfEnabled(i4.requester.metadata, i4.transportType) }), await this.client.auth.requests.delete(e2, { message: "rejected", code: 0 }), await this.deleteProposal(e2);
    }), c5(this, "formatAuthMessage", (t) => {
      this.isInitialized();
      const { request: e2, iss: s3 } = t;
      return qr2(e2, s3);
    }), c5(this, "processRelayMessageCache", () => {
      setTimeout(async () => {
        if (this.relayMessageCache.length !== 0)
          for (; this.relayMessageCache.length > 0; )
            try {
              const t = this.relayMessageCache.shift();
              t && await this.onRelayMessage(t);
            } catch (t) {
              this.client.logger.error(t);
            }
      }, 50);
    }), c5(this, "cleanupDuplicatePairings", async (t) => {
      if (t.pairingTopic)
        try {
          const e2 = this.client.core.pairing.pairings.get(t.pairingTopic), s3 = this.client.core.pairing.pairings.getAll().filter((i4) => {
            var r3, n5;
            return ((r3 = i4.peerMetadata) == null ? void 0 : r3.url) && ((n5 = i4.peerMetadata) == null ? void 0 : n5.url) === t.peer.metadata.url && i4.topic && i4.topic !== e2.topic;
          });
          if (s3.length === 0)
            return;
          this.client.logger.info(`Cleaning up ${s3.length} duplicate pairing(s)`), await Promise.all(s3.map((i4) => this.client.core.pairing.disconnect({ topic: i4.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
        } catch (e2) {
          this.client.logger.error(e2);
        }
    }), c5(this, "deleteSession", async (t) => {
      var e2;
      const { topic: s3, expirerHasDeleted: i4 = false, emitEvent: r3 = true, id: n5 = 0 } = t, { self: a3 } = this.client.session.get(s3);
      await this.client.core.relayer.unsubscribe(s3), await this.client.session.delete(s3, Kt2("USER_DISCONNECTED")), this.addToRecentlyDeleted(s3, "session"), this.client.core.crypto.keychain.has(a3.publicKey) && await this.client.core.crypto.deleteKeyPair(a3.publicKey), this.client.core.crypto.keychain.has(s3) && await this.client.core.crypto.deleteSymKey(s3), i4 || this.client.core.expirer.del(s3), this.client.core.storage.removeItem(Le4).catch((l8) => this.client.logger.warn(l8)), this.getPendingSessionRequests().forEach((l8) => {
        l8.topic === s3 && this.deletePendingSessionRequest(l8.id, Kt2("USER_DISCONNECTED"));
      }), s3 === ((e2 = this.sessionRequestQueue.queue[0]) == null ? void 0 : e2.topic) && (this.sessionRequestQueue.state = $2.idle), r3 && this.client.events.emit("session_delete", { id: n5, topic: s3 });
    }), c5(this, "deleteProposal", async (t, e2) => {
      if (e2)
        try {
          const s3 = this.client.proposal.get(t), i4 = this.client.core.eventClient.getEvent({ topic: s3.pairingTopic });
          i4 == null ? void 0 : i4.setError(ir3.proposal_expired);
        } catch {
        }
      await Promise.all([this.client.proposal.delete(t, Kt2("USER_DISCONNECTED")), e2 ? Promise.resolve() : this.client.core.expirer.del(t)]), this.addToRecentlyDeleted(t, "proposal");
    }), c5(this, "deletePendingSessionRequest", async (t, e2, s3 = false) => {
      await Promise.all([this.client.pendingRequest.delete(t, e2), s3 ? Promise.resolve() : this.client.core.expirer.del(t)]), this.addToRecentlyDeleted(t, "request"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i4) => i4.id !== t), s3 && (this.sessionRequestQueue.state = $2.idle, this.client.events.emit("session_request_expire", { id: t }));
    }), c5(this, "deletePendingAuthRequest", async (t, e2, s3 = false) => {
      await Promise.all([this.client.auth.requests.delete(t, e2), s3 ? Promise.resolve() : this.client.core.expirer.del(t)]);
    }), c5(this, "setExpiry", async (t, e2) => {
      this.client.session.keys.includes(t) && (this.client.core.expirer.set(t, e2), await this.client.session.update(t, { expiry: e2 }));
    }), c5(this, "setProposal", async (t, e2) => {
      this.client.core.expirer.set(t, ii(N11.wc_sessionPropose.req.ttl)), await this.client.proposal.set(t, e2);
    }), c5(this, "setAuthRequest", async (t, e2) => {
      const { request: s3, pairingTopic: i4, transportType: r3 = Q3.relay } = e2;
      this.client.core.expirer.set(t, s3.expiryTimestamp), await this.client.auth.requests.set(t, { authPayload: s3.authPayload, requester: s3.requester, expiryTimestamp: s3.expiryTimestamp, id: t, pairingTopic: i4, verifyContext: s3.verifyContext, transportType: r3 });
    }), c5(this, "setPendingSessionRequest", async (t) => {
      const { id: e2, topic: s3, params: i4, verifyContext: r3 } = t, n5 = i4.request.expiryTimestamp || ii(N11.wc_sessionRequest.req.ttl);
      this.client.core.expirer.set(e2, n5), await this.client.pendingRequest.set(e2, { id: e2, topic: s3, params: i4, verifyContext: r3 });
    }), c5(this, "sendRequest", async (t) => {
      const { topic: e2, method: s3, params: i4, expiry: r3, relayRpcId: n5, clientRpcId: a3, throwOnFailedPublish: l8, appLink: p5, tvf: h6 } = t, u3 = formatJsonRpcRequest(s3, i4, a3);
      let d5;
      const w5 = !!p5;
      try {
        const E6 = w5 ? De2 : Qt2;
        d5 = await this.client.core.crypto.encode(e2, u3, { encoding: E6 });
      } catch (E6) {
        throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${e2} failed`), E6;
      }
      let m4;
      if (mt2.includes(s3)) {
        const E6 = zc(JSON.stringify(u3)), _3 = zc(d5);
        m4 = await this.client.core.verify.register({ id: _3, decryptedId: E6 });
      }
      const y6 = N11[s3].req;
      if (y6.attestation = m4, r3 && (y6.ttl = r3), n5 && (y6.id = n5), this.client.core.history.set(e2, u3), w5) {
        const E6 = sa(p5, e2, d5);
        await global.Linking.openURL(E6, this.client.name);
      } else {
        const E6 = N11[s3].req;
        r3 && (E6.ttl = r3), n5 && (E6.id = n5), E6.tvf = x4(I3({}, h6), { correlationId: u3.id }), l8 ? (E6.internal = x4(I3({}, E6.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(e2, d5, E6)) : this.client.core.relayer.publish(e2, d5, E6).catch((_3) => this.client.logger.error(_3));
      }
      return u3.id;
    }), c5(this, "sendResult", async (t) => {
      const { id: e2, topic: s3, result: i4, throwOnFailedPublish: r3, encodeOpts: n5, appLink: a3 } = t, l8 = formatJsonRpcResult(e2, i4);
      let p5;
      const h6 = a3 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const w5 = h6 ? De2 : Qt2;
        p5 = await this.client.core.crypto.encode(s3, l8, x4(I3({}, n5 || {}), { encoding: w5 }));
      } catch (w5) {
        throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s3} failed`), w5;
      }
      let u3, d5;
      try {
        u3 = await this.client.core.history.get(s3, e2);
        const w5 = u3.request;
        try {
          d5 = this.getTVFParams(e2, w5.params, i4);
        } catch (m4) {
          this.client.logger.warn(`sendResult() -> getTVFParams() failed: ${m4 == null ? void 0 : m4.message}`);
        }
      } catch (w5) {
        throw this.client.logger.error(`sendResult() -> history.get(${s3}, ${e2}) failed`), w5;
      }
      if (h6) {
        const w5 = sa(a3, s3, p5);
        await global.Linking.openURL(w5, this.client.name);
      } else {
        const w5 = u3.request.method, m4 = N11[w5].res;
        m4.tvf = x4(I3({}, d5), { correlationId: e2 }), r3 ? (m4.internal = x4(I3({}, m4.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(s3, p5, m4)) : this.client.core.relayer.publish(s3, p5, m4).catch((y6) => this.client.logger.error(y6));
      }
      await this.client.core.history.resolve(l8);
    }), c5(this, "sendError", async (t) => {
      const { id: e2, topic: s3, error: i4, encodeOpts: r3, rpcOpts: n5, appLink: a3 } = t, l8 = formatJsonRpcError(e2, i4);
      let p5;
      const h6 = a3 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const d5 = h6 ? De2 : Qt2;
        p5 = await this.client.core.crypto.encode(s3, l8, x4(I3({}, r3 || {}), { encoding: d5 }));
      } catch (d5) {
        throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s3} failed`), d5;
      }
      let u3;
      try {
        u3 = await this.client.core.history.get(s3, e2);
      } catch (d5) {
        throw this.client.logger.error(`sendError() -> history.get(${s3}, ${e2}) failed`), d5;
      }
      if (h6) {
        const d5 = sa(a3, s3, p5);
        await global.Linking.openURL(d5, this.client.name);
      } else {
        const d5 = u3.request.method, w5 = n5 || N11[d5].res;
        this.client.core.relayer.publish(s3, p5, w5);
      }
      await this.client.core.history.resolve(l8);
    }), c5(this, "cleanup", async () => {
      const t = [], e2 = [];
      this.client.session.getAll().forEach((s3) => {
        let i4 = false;
        fi(s3.expiry) && (i4 = true), this.client.core.crypto.keychain.has(s3.topic) || (i4 = true), i4 && t.push(s3.topic);
      }), this.client.proposal.getAll().forEach((s3) => {
        fi(s3.expiryTimestamp) && e2.push(s3.id);
      }), await Promise.all([...t.map((s3) => this.deleteSession({ topic: s3 })), ...e2.map((s3) => this.deleteProposal(s3))]);
    }), c5(this, "onProviderMessageEvent", async (t) => {
      !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(t) : await this.onRelayMessage(t);
    }), c5(this, "onRelayEventRequest", async (t) => {
      this.requestQueue.queue.push(t), await this.processRequestsQueue();
    }), c5(this, "processRequestsQueue", async () => {
      if (this.requestQueue.state === $2.active) {
        this.client.logger.info("Request queue already active, skipping...");
        return;
      }
      for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
        this.requestQueue.state = $2.active;
        const t = this.requestQueue.queue.shift();
        if (t)
          try {
            await this.processRequest(t);
          } catch (e2) {
            this.client.logger.warn(e2);
          }
      }
      this.requestQueue.state = $2.idle;
    }), c5(this, "processRequest", async (t) => {
      const { topic: e2, payload: s3, attestation: i4, transportType: r3, encryptedId: n5 } = t, a3 = s3.method;
      if (!this.shouldIgnorePairingRequest({ topic: e2, requestMethod: a3 }))
        switch (a3) {
          case "wc_sessionPropose":
            return await this.onSessionProposeRequest({ topic: e2, payload: s3, attestation: i4, encryptedId: n5 });
          case "wc_sessionSettle":
            return await this.onSessionSettleRequest(e2, s3);
          case "wc_sessionUpdate":
            return await this.onSessionUpdateRequest(e2, s3);
          case "wc_sessionExtend":
            return await this.onSessionExtendRequest(e2, s3);
          case "wc_sessionPing":
            return await this.onSessionPingRequest(e2, s3);
          case "wc_sessionDelete":
            return await this.onSessionDeleteRequest(e2, s3);
          case "wc_sessionRequest":
            return await this.onSessionRequest({ topic: e2, payload: s3, attestation: i4, encryptedId: n5, transportType: r3 });
          case "wc_sessionEvent":
            return await this.onSessionEventRequest(e2, s3);
          case "wc_sessionAuthenticate":
            return await this.onSessionAuthenticateRequest({ topic: e2, payload: s3, attestation: i4, encryptedId: n5, transportType: r3 });
          default:
            return this.client.logger.info(`Unsupported request method ${a3}`);
        }
    }), c5(this, "onRelayEventResponse", async (t) => {
      const { topic: e2, payload: s3, transportType: i4 } = t, r3 = (await this.client.core.history.get(e2, s3.id)).request.method;
      switch (r3) {
        case "wc_sessionPropose":
          return this.onSessionProposeResponse(e2, s3, i4);
        case "wc_sessionSettle":
          return this.onSessionSettleResponse(e2, s3);
        case "wc_sessionUpdate":
          return this.onSessionUpdateResponse(e2, s3);
        case "wc_sessionExtend":
          return this.onSessionExtendResponse(e2, s3);
        case "wc_sessionPing":
          return this.onSessionPingResponse(e2, s3);
        case "wc_sessionRequest":
          return this.onSessionRequestResponse(e2, s3);
        case "wc_sessionAuthenticate":
          return this.onSessionAuthenticateResponse(e2, s3);
        default:
          return this.client.logger.info(`Unsupported response method ${r3}`);
      }
    }), c5(this, "onRelayEventUnknownPayload", (t) => {
      const { topic: e2 } = t, { message: s3 } = Et2("MISSING_OR_INVALID", `Decoded payload on topic ${e2} is not identifiable as a JSON-RPC request or a response.`);
      throw new Error(s3);
    }), c5(this, "shouldIgnorePairingRequest", (t) => {
      const { topic: e2, requestMethod: s3 } = t, i4 = this.expectedPairingMethodMap.get(e2);
      return !i4 || i4.includes(s3) ? false : !!(i4.includes("wc_sessionAuthenticate") && this.client.events.listenerCount("session_authenticate") > 0);
    }), c5(this, "onSessionProposeRequest", async (t) => {
      const { topic: e2, payload: s3, attestation: i4, encryptedId: r3 } = t, { params: n5, id: a3 } = s3;
      try {
        const l8 = this.client.core.eventClient.getEvent({ topic: e2 });
        this.client.events.listenerCount("session_proposal") === 0 && (console.warn("No listener for session_proposal event"), l8 == null ? void 0 : l8.setError(Y2.proposal_listener_not_found)), this.isValidConnect(I3({}, s3.params));
        const p5 = n5.expiryTimestamp || ii(N11.wc_sessionPropose.req.ttl), h6 = I3({ id: a3, pairingTopic: e2, expiryTimestamp: p5, attestation: i4, encryptedId: r3 }, n5);
        await this.setProposal(a3, h6);
        const u3 = await this.getVerifyContext({ attestationId: i4, hash: zc(JSON.stringify(s3)), encryptedId: r3, metadata: h6.proposer.metadata });
        l8 == null ? void 0 : l8.addTrace(G3.emit_session_proposal), this.client.events.emit("session_proposal", { id: a3, params: h6, verifyContext: u3 });
      } catch (l8) {
        await this.sendError({ id: a3, topic: e2, error: l8, rpcOpts: N11.wc_sessionPropose.autoReject }), this.client.logger.error(l8);
      }
    }), c5(this, "onSessionProposeResponse", async (t, e2, s3) => {
      const { id: i4 } = e2;
      if (isJsonRpcResult(e2)) {
        const { result: r3 } = e2;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: r3 });
        const n5 = this.client.proposal.get(i4);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: n5 });
        const a3 = n5.proposer.publicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: a3 });
        const l8 = r3.responderPublicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: l8 });
        const p5 = await this.client.core.crypto.generateSharedKey(a3, l8);
        this.pendingSessions.set(i4, { sessionTopic: p5, pairingTopic: t, proposalId: i4, publicKey: a3 });
        const h6 = await this.client.core.relayer.subscribe(p5, { transportType: s3 });
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: h6 }), await this.client.core.pairing.activate({ topic: t });
      } else if (isJsonRpcError(e2)) {
        await this.deleteProposal(i4);
        const r3 = ci("session_connect", i4);
        if (this.events.listenerCount(r3) === 0)
          throw new Error(`emitting ${r3} without any listeners, 954`);
        this.events.emit(r3, { error: e2.error });
      }
    }), c5(this, "onSessionSettleRequest", async (t, e2) => {
      const { id: s3, params: i4 } = e2;
      try {
        this.isValidSessionSettleRequest(i4);
        const { relay: r3, controller: n5, expiry: a3, namespaces: l8, sessionProperties: p5, scopedProperties: h6, sessionConfig: u3 } = e2.params, d5 = [...this.pendingSessions.values()].find((y6) => y6.sessionTopic === t);
        if (!d5)
          return this.client.logger.error(`Pending session not found for topic ${t}`);
        const w5 = this.client.proposal.get(d5.proposalId), m4 = x4(I3(I3(I3({ topic: t, relay: r3, expiry: a3, namespaces: l8, acknowledged: true, pairingTopic: d5.pairingTopic, requiredNamespaces: w5.requiredNamespaces, optionalNamespaces: w5.optionalNamespaces, controller: n5.publicKey, self: { publicKey: d5.publicKey, metadata: this.client.metadata }, peer: { publicKey: n5.publicKey, metadata: n5.metadata } }, p5 && { sessionProperties: p5 }), h6 && { scopedProperties: h6 }), u3 && { sessionConfig: u3 }), { transportType: Q3.relay });
        await this.client.session.set(m4.topic, m4), await this.setExpiry(m4.topic, m4.expiry), await this.client.core.pairing.updateMetadata({ topic: d5.pairingTopic, metadata: m4.peer.metadata }), this.client.events.emit("session_connect", { session: m4 }), this.events.emit(ci("session_connect", d5.proposalId), { session: m4 }), this.pendingSessions.delete(d5.proposalId), this.deleteProposal(d5.proposalId, false), this.cleanupDuplicatePairings(m4), await this.sendResult({ id: e2.id, topic: t, result: true });
      } catch (r3) {
        await this.sendError({ id: s3, topic: t, error: r3 }), this.client.logger.error(r3);
      }
    }), c5(this, "onSessionSettleResponse", async (t, e2) => {
      const { id: s3 } = e2;
      isJsonRpcResult(e2) ? (await this.client.session.update(t, { acknowledged: true }), this.events.emit(ci("session_approve", s3), {})) : isJsonRpcError(e2) && (await this.client.session.delete(t, Kt2("USER_DISCONNECTED")), this.events.emit(ci("session_approve", s3), { error: e2.error }));
    }), c5(this, "onSessionUpdateRequest", async (t, e2) => {
      const { params: s3, id: i4 } = e2;
      try {
        const r3 = `${t}_session_update`, n5 = Ha.get(r3);
        if (n5 && this.isRequestOutOfSync(n5, i4)) {
          this.client.logger.warn(`Discarding out of sync request - ${i4}`), this.sendError({ id: i4, topic: t, error: Kt2("INVALID_UPDATE_REQUEST") });
          return;
        }
        this.isValidUpdate(I3({ topic: t }, s3));
        try {
          Ha.set(r3, i4), await this.client.session.update(t, { namespaces: s3.namespaces }), await this.sendResult({ id: i4, topic: t, result: true });
        } catch (a3) {
          throw Ha.delete(r3), a3;
        }
        this.client.events.emit("session_update", { id: i4, topic: t, params: s3 });
      } catch (r3) {
        await this.sendError({ id: i4, topic: t, error: r3 }), this.client.logger.error(r3);
      }
    }), c5(this, "isRequestOutOfSync", (t, e2) => e2.toString().slice(0, -3) < t.toString().slice(0, -3)), c5(this, "onSessionUpdateResponse", (t, e2) => {
      const { id: s3 } = e2, i4 = ci("session_update", s3);
      if (this.events.listenerCount(i4) === 0)
        throw new Error(`emitting ${i4} without any listeners`);
      isJsonRpcResult(e2) ? this.events.emit(ci("session_update", s3), {}) : isJsonRpcError(e2) && this.events.emit(ci("session_update", s3), { error: e2.error });
    }), c5(this, "onSessionExtendRequest", async (t, e2) => {
      const { id: s3 } = e2;
      try {
        this.isValidExtend({ topic: t }), await this.setExpiry(t, ii(X2)), await this.sendResult({ id: s3, topic: t, result: true }), this.client.events.emit("session_extend", { id: s3, topic: t });
      } catch (i4) {
        await this.sendError({ id: s3, topic: t, error: i4 }), this.client.logger.error(i4);
      }
    }), c5(this, "onSessionExtendResponse", (t, e2) => {
      const { id: s3 } = e2, i4 = ci("session_extend", s3);
      if (this.events.listenerCount(i4) === 0)
        throw new Error(`emitting ${i4} without any listeners`);
      isJsonRpcResult(e2) ? this.events.emit(ci("session_extend", s3), {}) : isJsonRpcError(e2) && this.events.emit(ci("session_extend", s3), { error: e2.error });
    }), c5(this, "onSessionPingRequest", async (t, e2) => {
      const { id: s3 } = e2;
      try {
        this.isValidPing({ topic: t }), await this.sendResult({ id: s3, topic: t, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_ping", { id: s3, topic: t });
      } catch (i4) {
        await this.sendError({ id: s3, topic: t, error: i4 }), this.client.logger.error(i4);
      }
    }), c5(this, "onSessionPingResponse", (t, e2) => {
      const { id: s3 } = e2, i4 = ci("session_ping", s3);
      setTimeout(() => {
        if (this.events.listenerCount(i4) === 0)
          throw new Error(`emitting ${i4} without any listeners 2176`);
        isJsonRpcResult(e2) ? this.events.emit(ci("session_ping", s3), {}) : isJsonRpcError(e2) && this.events.emit(ci("session_ping", s3), { error: e2.error });
      }, 500);
    }), c5(this, "onSessionDeleteRequest", async (t, e2) => {
      const { id: s3 } = e2;
      try {
        this.isValidDisconnect({ topic: t, reason: e2.params }), Promise.all([new Promise((i4) => {
          this.client.core.relayer.once(C3.publish, async () => {
            i4(await this.deleteSession({ topic: t, id: s3 }));
          });
        }), this.sendResult({ id: s3, topic: t, result: true }), this.cleanupPendingSentRequestsForTopic({ topic: t, error: Kt2("USER_DISCONNECTED") })]).catch((i4) => this.client.logger.error(i4));
      } catch (i4) {
        this.client.logger.error(i4);
      }
    }), c5(this, "onSessionRequest", async (t) => {
      var e2, s3, i4;
      const { topic: r3, payload: n5, attestation: a3, encryptedId: l8, transportType: p5 } = t, { id: h6, params: u3 } = n5;
      try {
        await this.isValidRequest(I3({ topic: r3 }, u3));
        const d5 = this.client.session.get(r3), w5 = await this.getVerifyContext({ attestationId: a3, hash: zc(JSON.stringify(formatJsonRpcRequest("wc_sessionRequest", u3, h6))), encryptedId: l8, metadata: d5.peer.metadata, transportType: p5 }), m4 = { id: h6, topic: r3, params: u3, verifyContext: w5 };
        await this.setPendingSessionRequest(m4), p5 === Q3.link_mode && (e2 = d5.peer.metadata.redirect) != null && e2.universal && this.client.core.addLinkModeSupportedApp((s3 = d5.peer.metadata.redirect) == null ? void 0 : s3.universal), (i4 = this.client.signConfig) != null && i4.disableRequestQueue ? this.emitSessionRequest(m4) : (this.addSessionRequestToSessionRequestQueue(m4), this.processSessionRequestQueue());
      } catch (d5) {
        await this.sendError({ id: h6, topic: r3, error: d5 }), this.client.logger.error(d5);
      }
    }), c5(this, "onSessionRequestResponse", (t, e2) => {
      const { id: s3 } = e2, i4 = ci("session_request", s3);
      if (this.events.listenerCount(i4) === 0)
        throw new Error(`emitting ${i4} without any listeners`);
      isJsonRpcResult(e2) ? this.events.emit(ci("session_request", s3), { result: e2.result }) : isJsonRpcError(e2) && this.events.emit(ci("session_request", s3), { error: e2.error });
    }), c5(this, "onSessionEventRequest", async (t, e2) => {
      const { id: s3, params: i4 } = e2;
      try {
        const r3 = `${t}_session_event_${i4.event.name}`, n5 = Ha.get(r3);
        if (n5 && this.isRequestOutOfSync(n5, s3)) {
          this.client.logger.info(`Discarding out of sync request - ${s3}`);
          return;
        }
        this.isValidEmit(I3({ topic: t }, i4)), this.client.events.emit("session_event", { id: s3, topic: t, params: i4 }), Ha.set(r3, s3);
      } catch (r3) {
        await this.sendError({ id: s3, topic: t, error: r3 }), this.client.logger.error(r3);
      }
    }), c5(this, "onSessionAuthenticateResponse", (t, e2) => {
      const { id: s3 } = e2;
      this.client.logger.trace({ type: "method", method: "onSessionAuthenticateResponse", topic: t, payload: e2 }), isJsonRpcResult(e2) ? this.events.emit(ci("session_request", s3), { result: e2.result }) : isJsonRpcError(e2) && this.events.emit(ci("session_request", s3), { error: e2.error });
    }), c5(this, "onSessionAuthenticateRequest", async (t) => {
      var e2;
      const { topic: s3, payload: i4, attestation: r3, encryptedId: n5, transportType: a3 } = t;
      try {
        const { requester: l8, authPayload: p5, expiryTimestamp: h6 } = i4.params, u3 = await this.getVerifyContext({ attestationId: r3, hash: zc(JSON.stringify(i4)), encryptedId: n5, metadata: l8.metadata, transportType: a3 }), d5 = { requester: l8, pairingTopic: s3, id: i4.id, authPayload: p5, verifyContext: u3, expiryTimestamp: h6 };
        await this.setAuthRequest(i4.id, { request: d5, pairingTopic: s3, transportType: a3 }), a3 === Q3.link_mode && (e2 = l8.metadata.redirect) != null && e2.universal && this.client.core.addLinkModeSupportedApp(l8.metadata.redirect.universal), this.client.events.emit("session_authenticate", { topic: s3, params: i4.params, id: i4.id, verifyContext: u3 });
      } catch (l8) {
        this.client.logger.error(l8);
        const p5 = i4.params.requester.publicKey, h6 = await this.client.core.crypto.generateKeyPair(), u3 = this.getAppLinkIfEnabled(i4.params.requester.metadata, a3), d5 = { type: ee, receiverPublicKey: p5, senderPublicKey: h6 };
        await this.sendError({ id: i4.id, topic: s3, error: l8, encodeOpts: d5, rpcOpts: N11.wc_sessionAuthenticate.autoReject, appLink: u3 });
      }
    }), c5(this, "addSessionRequestToSessionRequestQueue", (t) => {
      this.sessionRequestQueue.queue.push(t);
    }), c5(this, "cleanupAfterResponse", (t) => {
      this.deletePendingSessionRequest(t.response.id, { message: "fulfilled", code: 0 }), setTimeout(() => {
        this.sessionRequestQueue.state = $2.idle, this.processSessionRequestQueue();
      }, (0, import_time5.toMiliseconds)(this.requestQueueDelay));
    }), c5(this, "cleanupPendingSentRequestsForTopic", ({ topic: t, error: e2 }) => {
      const s3 = this.client.core.history.pending;
      s3.length > 0 && s3.filter((i4) => i4.topic === t && i4.request.method === "wc_sessionRequest").forEach((i4) => {
        const r3 = i4.request.id, n5 = ci("session_request", r3);
        if (this.events.listenerCount(n5) === 0)
          throw new Error(`emitting ${n5} without any listeners`);
        this.events.emit(ci("session_request", i4.request.id), { error: e2 });
      });
    }), c5(this, "processSessionRequestQueue", () => {
      if (this.sessionRequestQueue.state === $2.active) {
        this.client.logger.info("session request queue is already active.");
        return;
      }
      const t = this.sessionRequestQueue.queue[0];
      if (!t) {
        this.client.logger.info("session request queue is empty.");
        return;
      }
      try {
        this.emitSessionRequest(t);
      } catch (e2) {
        this.client.logger.error(e2);
      }
    }), c5(this, "emitSessionRequest", (t) => {
      if (this.emittedSessionRequests.has(t.id)) {
        this.client.logger.warn({ id: t.id }, `Skipping emitting \`session_request\` event for duplicate request. id: ${t.id}`);
        return;
      }
      this.sessionRequestQueue.state = $2.active, this.emittedSessionRequests.add(t.id), this.client.events.emit("session_request", t);
    }), c5(this, "onPairingCreated", (t) => {
      if (t.methods && this.expectedPairingMethodMap.set(t.topic, t.methods), t.active)
        return;
      const e2 = this.client.proposal.getAll().find((s3) => s3.pairingTopic === t.topic);
      e2 && this.onSessionProposeRequest({ topic: t.topic, payload: formatJsonRpcRequest("wc_sessionPropose", x4(I3({}, e2), { requiredNamespaces: e2.requiredNamespaces, optionalNamespaces: e2.optionalNamespaces, relays: e2.relays, proposer: e2.proposer, sessionProperties: e2.sessionProperties, scopedProperties: e2.scopedProperties }), e2.id), attestation: e2.attestation, encryptedId: e2.encryptedId });
    }), c5(this, "isValidConnect", async (t) => {
      if (!Aa(t)) {
        const { message: l8 } = Et2("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(t)}`);
        throw new Error(l8);
      }
      const { pairingTopic: e2, requiredNamespaces: s3, optionalNamespaces: i4, sessionProperties: r3, scopedProperties: n5, relays: a3 } = t;
      if (kt2(e2) || await this.isValidPairingTopic(e2), !Ba(a3, true)) {
        const { message: l8 } = Et2("MISSING_OR_INVALID", `connect() relays: ${a3}`);
        throw new Error(l8);
      }
      if (!kt2(s3) && Ve2(s3) !== 0) {
        const l8 = "requiredNamespaces are deprecated and are automatically assigned to optionalNamespaces";
        ["fatal", "error", "silent"].includes(this.client.logger.level) ? console.warn(l8) : this.client.logger.warn(l8), this.validateNamespaces(s3, "requiredNamespaces");
      }
      if (!kt2(i4) && Ve2(i4) !== 0 && this.validateNamespaces(i4, "optionalNamespaces"), kt2(r3) || this.validateSessionProps(r3, "sessionProperties"), !kt2(n5)) {
        this.validateSessionProps(n5, "scopedProperties");
        const l8 = Object.keys(s3 || {}).concat(Object.keys(i4 || {}));
        if (!Object.keys(n5).every((p5) => l8.includes(p5.split(":")[0])))
          throw new Error(`Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(n5)}, required/optional namespaces: ${JSON.stringify(l8)}`);
      }
    }), c5(this, "validateNamespaces", (t, e2) => {
      const s3 = Ea(t, "connect()", e2);
      if (s3)
        throw new Error(s3.message);
    }), c5(this, "isValidApprove", async (t) => {
      if (!Aa(t))
        throw new Error(Et2("MISSING_OR_INVALID", `approve() params: ${t}`).message);
      const { id: e2, namespaces: s3, relayProtocol: i4, sessionProperties: r3, scopedProperties: n5 } = t;
      this.checkRecentlyDeleted(e2), await this.isValidProposalId(e2);
      const a3 = this.client.proposal.get(e2), l8 = is(s3, "approve()");
      if (l8)
        throw new Error(l8.message);
      const p5 = cs(a3.requiredNamespaces, s3, "approve()");
      if (p5)
        throw new Error(p5.message);
      if (!it2(i4, true)) {
        const { message: h6 } = Et2("MISSING_OR_INVALID", `approve() relayProtocol: ${i4}`);
        throw new Error(h6);
      }
      if (kt2(r3) || this.validateSessionProps(r3, "sessionProperties"), !kt2(n5)) {
        this.validateSessionProps(n5, "scopedProperties");
        const h6 = new Set(Object.keys(s3));
        if (!Object.keys(n5).every((u3) => h6.has(u3.split(":")[0])))
          throw new Error(`Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(n5)}, approved namespaces: ${Array.from(h6).join(", ")}`);
      }
    }), c5(this, "isValidReject", async (t) => {
      if (!Aa(t)) {
        const { message: i4 } = Et2("MISSING_OR_INVALID", `reject() params: ${t}`);
        throw new Error(i4);
      }
      const { id: e2, reason: s3 } = t;
      if (this.checkRecentlyDeleted(e2), await this.isValidProposalId(e2), !Sa(s3)) {
        const { message: i4 } = Et2("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(s3)}`);
        throw new Error(i4);
      }
    }), c5(this, "isValidSessionSettleRequest", (t) => {
      if (!Aa(t)) {
        const { message: l8 } = Et2("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${t}`);
        throw new Error(l8);
      }
      const { relay: e2, controller: s3, namespaces: i4, expiry: r3 } = t;
      if (!fs(e2)) {
        const { message: l8 } = Et2("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
        throw new Error(l8);
      }
      const n5 = va(s3, "onSessionSettleRequest()");
      if (n5)
        throw new Error(n5.message);
      const a3 = is(i4, "onSessionSettleRequest()");
      if (a3)
        throw new Error(a3.message);
      if (fi(r3)) {
        const { message: l8 } = Et2("EXPIRED", "onSessionSettleRequest()");
        throw new Error(l8);
      }
    }), c5(this, "isValidUpdate", async (t) => {
      if (!Aa(t)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", `update() params: ${t}`);
        throw new Error(a3);
      }
      const { topic: e2, namespaces: s3 } = t;
      this.checkRecentlyDeleted(e2), await this.isValidSessionTopic(e2);
      const i4 = this.client.session.get(e2), r3 = is(s3, "update()");
      if (r3)
        throw new Error(r3.message);
      const n5 = cs(i4.requiredNamespaces, s3, "update()");
      if (n5)
        throw new Error(n5.message);
    }), c5(this, "isValidExtend", async (t) => {
      if (!Aa(t)) {
        const { message: s3 } = Et2("MISSING_OR_INVALID", `extend() params: ${t}`);
        throw new Error(s3);
      }
      const { topic: e2 } = t;
      this.checkRecentlyDeleted(e2), await this.isValidSessionTopic(e2);
    }), c5(this, "isValidRequest", async (t) => {
      if (!Aa(t)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", `request() params: ${t}`);
        throw new Error(a3);
      }
      const { topic: e2, request: s3, chainId: i4, expiry: r3 } = t;
      this.checkRecentlyDeleted(e2), await this.isValidSessionTopic(e2);
      const { namespaces: n5 } = this.client.session.get(e2);
      if (!_a(n5, i4)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", `request() chainId: ${i4}`);
        throw new Error(a3);
      }
      if (!Na(s3)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", `request() ${JSON.stringify(s3)}`);
        throw new Error(a3);
      }
      if (!Ta(n5, i4, s3.method)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", `request() method: ${s3.method}`);
        throw new Error(a3);
      }
      if (r3 && !La(r3, _e4)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", `request() expiry: ${r3}. Expiry must be a number (in seconds) between ${_e4.min} and ${_e4.max}`);
        throw new Error(a3);
      }
    }), c5(this, "isValidRespond", async (t) => {
      var e2;
      if (!Aa(t)) {
        const { message: r3 } = Et2("MISSING_OR_INVALID", `respond() params: ${t}`);
        throw new Error(r3);
      }
      const { topic: s3, response: i4 } = t;
      try {
        await this.isValidSessionTopic(s3);
      } catch (r3) {
        throw (e2 = t == null ? void 0 : t.response) != null && e2.id && this.cleanupAfterResponse(t), r3;
      }
      if (!Oa(i4)) {
        const { message: r3 } = Et2("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(i4)}`);
        throw new Error(r3);
      }
    }), c5(this, "isValidPing", async (t) => {
      if (!Aa(t)) {
        const { message: s3 } = Et2("MISSING_OR_INVALID", `ping() params: ${t}`);
        throw new Error(s3);
      }
      const { topic: e2 } = t;
      await this.isValidSessionOrPairingTopic(e2);
    }), c5(this, "isValidEmit", async (t) => {
      if (!Aa(t)) {
        const { message: n5 } = Et2("MISSING_OR_INVALID", `emit() params: ${t}`);
        throw new Error(n5);
      }
      const { topic: e2, event: s3, chainId: i4 } = t;
      await this.isValidSessionTopic(e2);
      const { namespaces: r3 } = this.client.session.get(e2);
      if (!_a(r3, i4)) {
        const { message: n5 } = Et2("MISSING_OR_INVALID", `emit() chainId: ${i4}`);
        throw new Error(n5);
      }
      if (!Ua(s3)) {
        const { message: n5 } = Et2("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s3)}`);
        throw new Error(n5);
      }
      if (!Ra(r3, i4, s3.name)) {
        const { message: n5 } = Et2("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s3)}`);
        throw new Error(n5);
      }
    }), c5(this, "isValidDisconnect", async (t) => {
      if (!Aa(t)) {
        const { message: s3 } = Et2("MISSING_OR_INVALID", `disconnect() params: ${t}`);
        throw new Error(s3);
      }
      const { topic: e2 } = t;
      await this.isValidSessionOrPairingTopic(e2);
    }), c5(this, "isValidAuthenticate", (t) => {
      const { chains: e2, uri: s3, domain: i4, nonce: r3 } = t;
      if (!Array.isArray(e2) || e2.length === 0)
        throw new Error("chains is required and must be a non-empty array");
      if (!it2(s3, false))
        throw new Error("uri is required parameter");
      if (!it2(i4, false))
        throw new Error("domain is required parameter");
      if (!it2(r3, false))
        throw new Error("nonce is required parameter");
      if ([...new Set(e2.map((a3) => Fe(a3).namespace))].length > 1)
        throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");
      const { namespace: n5 } = Fe(e2[0]);
      if (n5 !== "eip155")
        throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.");
    }), c5(this, "getVerifyContext", async (t) => {
      const { attestationId: e2, hash: s3, encryptedId: i4, metadata: r3, transportType: n5 } = t, a3 = { verified: { verifyUrl: r3.verifyUrl || ue2, validation: "UNKNOWN", origin: r3.url || "" } };
      try {
        if (n5 === Q3.link_mode) {
          const p5 = this.getAppLinkIfEnabled(r3, n5);
          return a3.verified.validation = p5 && new URL(p5).origin === new URL(r3.url).origin ? "VALID" : "INVALID", a3;
        }
        const l8 = await this.client.core.verify.resolve({ attestationId: e2, hash: s3, encryptedId: i4, verifyUrl: r3.verifyUrl });
        l8 && (a3.verified.origin = l8.origin, a3.verified.isScam = l8.isScam, a3.verified.validation = l8.origin === new URL(r3.url).origin ? "VALID" : "INVALID");
      } catch (l8) {
        this.client.logger.warn(l8);
      }
      return this.client.logger.debug(`Verify context: ${JSON.stringify(a3)}`), a3;
    }), c5(this, "validateSessionProps", (t, e2) => {
      Object.values(t).forEach((s3, i4) => {
        if (s3 == null) {
          const { message: r3 } = Et2("MISSING_OR_INVALID", `${e2} must contain an existing value for each key. Received: ${s3} for key ${Object.keys(t)[i4]}`);
          throw new Error(r3);
        }
      });
    }), c5(this, "getPendingAuthRequest", (t) => {
      const e2 = this.client.auth.requests.get(t);
      return typeof e2 == "object" ? e2 : void 0;
    }), c5(this, "addToRecentlyDeleted", (t, e2) => {
      if (this.recentlyDeletedMap.set(t, e2), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {
        let s3 = 0;
        const i4 = this.recentlyDeletedLimit / 2;
        for (const r3 of this.recentlyDeletedMap.keys()) {
          if (s3++ >= i4)
            break;
          this.recentlyDeletedMap.delete(r3);
        }
      }
    }), c5(this, "checkRecentlyDeleted", (t) => {
      const e2 = this.recentlyDeletedMap.get(t);
      if (e2) {
        const { message: s3 } = Et2("MISSING_OR_INVALID", `Record was recently deleted - ${e2}: ${t}`);
        throw new Error(s3);
      }
    }), c5(this, "isLinkModeEnabled", (t, e2) => {
      var s3, i4, r3, n5, a3, l8, p5, h6, u3;
      return !t || e2 !== Q3.link_mode ? false : ((i4 = (s3 = this.client.metadata) == null ? void 0 : s3.redirect) == null ? void 0 : i4.linkMode) === true && ((n5 = (r3 = this.client.metadata) == null ? void 0 : r3.redirect) == null ? void 0 : n5.universal) !== void 0 && ((l8 = (a3 = this.client.metadata) == null ? void 0 : a3.redirect) == null ? void 0 : l8.universal) !== "" && ((p5 = t == null ? void 0 : t.redirect) == null ? void 0 : p5.universal) !== void 0 && ((h6 = t == null ? void 0 : t.redirect) == null ? void 0 : h6.universal) !== "" && ((u3 = t == null ? void 0 : t.redirect) == null ? void 0 : u3.linkMode) === true && this.client.core.linkModeSupportedApps.includes(t.redirect.universal) && typeof (global == null ? void 0 : global.Linking) < "u";
    }), c5(this, "getAppLinkIfEnabled", (t, e2) => {
      var s3;
      return this.isLinkModeEnabled(t, e2) ? (s3 = t == null ? void 0 : t.redirect) == null ? void 0 : s3.universal : void 0;
    }), c5(this, "handleLinkModeMessage", ({ url: t }) => {
      if (!t || !t.includes("wc_ev") || !t.includes("topic"))
        return;
      const e2 = li(t, "topic") || "", s3 = decodeURIComponent(li(t, "wc_ev") || ""), i4 = this.client.session.keys.includes(e2);
      i4 && this.client.session.update(e2, { transportType: Q3.link_mode }), this.client.core.dispatchEnvelope({ topic: e2, message: s3, sessionExists: i4 });
    }), c5(this, "registerLinkModeListeners", async () => {
      var t;
      if (hi() || Bt2() && (t = this.client.metadata.redirect) != null && t.linkMode) {
        const e2 = global == null ? void 0 : global.Linking;
        if (typeof e2 < "u") {
          e2.addEventListener("url", this.handleLinkModeMessage, this.client.name);
          const s3 = await e2.getInitialURL();
          s3 && setTimeout(() => {
            this.handleLinkModeMessage({ url: s3 });
          }, 50);
        }
      }
    }), c5(this, "getTVFParams", (t, e2, s3) => {
      var i4, r3, n5;
      if (!((i4 = e2.request) != null && i4.method))
        return {};
      const a3 = { correlationId: t, rpcMethods: [e2.request.method], chainId: e2.chainId };
      try {
        const l8 = this.extractTxHashesFromResult(e2.request, s3);
        a3.txHashes = l8, a3.contractAddresses = this.isValidContractData(e2.request.params) ? [(n5 = (r3 = e2.request.params) == null ? void 0 : r3[0]) == null ? void 0 : n5.to] : [];
      } catch (l8) {
        this.client.logger.warn("Error getting TVF params", l8);
      }
      return a3;
    }), c5(this, "isValidContractData", (t) => {
      var e2;
      if (!t)
        return false;
      try {
        const s3 = (t == null ? void 0 : t.data) || ((e2 = t == null ? void 0 : t[0]) == null ? void 0 : e2.data);
        if (!s3.startsWith("0x"))
          return false;
        const i4 = s3.slice(2);
        return /^[0-9a-fA-F]*$/.test(i4) ? i4.length % 2 === 0 : false;
      } catch {
      }
      return false;
    }), c5(this, "extractTxHashesFromResult", (t, e2) => {
      var s3;
      try {
        if (!e2)
          return [];
        const i4 = t.method, r3 = gt3[i4];
        if (i4 === "sui_signTransaction")
          return [ff(e2.transactionBytes)];
        if (i4 === "near_signTransaction")
          return [cf(e2)];
        if (i4 === "near_signTransactions")
          return e2.map((a3) => cf(a3));
        if (i4 === "xrpl_signTransactionFor" || i4 === "xrpl_signTransaction")
          return [(s3 = e2.tx_json) == null ? void 0 : s3.hash];
        if (i4 === "polkadot_signTransaction")
          return [Ka({ transaction: t.params.transactionPayload, signature: e2.signature })];
        if (i4 === "algo_signTxn")
          return me2(e2) ? e2.map((a3) => af(a3)) : [af(e2)];
        if (i4 === "cosmos_signDirect")
          return [uf(e2)];
        if (typeof e2 == "string")
          return [e2];
        const n5 = e2[r3.key];
        if (me2(n5))
          return i4 === "solana_signAllTransactions" ? n5.map((a3) => sf(a3)) : n5;
        if (typeof n5 == "string")
          return [n5];
      } catch (i4) {
        this.client.logger.warn("Error extracting tx hashes from result", i4);
      }
      return [];
    });
  }
  async processPendingMessageEvents() {
    try {
      const o5 = this.client.session.keys, t = this.client.core.relayer.messages.getWithoutAck(o5);
      for (const [e2, s3] of Object.entries(t))
        for (const i4 of s3)
          try {
            await this.onProviderMessageEvent({ topic: e2, message: i4, publishedAt: Date.now() });
          } catch {
            this.client.logger.warn(`Error processing pending message event for topic: ${e2}, message: ${i4}`);
          }
    } catch (o5) {
      this.client.logger.warn("processPendingMessageEvents failed", o5);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: o5 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(o5);
    }
  }
  async confirmOnlineStateOrThrow() {
    await this.client.core.relayer.confirmOnlineStateOrThrow();
  }
  registerRelayerEvents() {
    this.client.core.relayer.on(C3.message, (o5) => {
      this.onProviderMessageEvent(o5);
    });
  }
  async onRelayMessage(o5) {
    const { topic: t, message: e2, attestation: s3, transportType: i4 } = o5, { publicKey: r3 } = this.client.auth.authKeys.keys.includes(ce2) ? this.client.auth.authKeys.get(ce2) : { responseTopic: void 0, publicKey: void 0 };
    try {
      const n5 = await this.client.core.crypto.decode(t, e2, { receiverPublicKey: r3, encoding: i4 === Q3.link_mode ? De2 : Qt2 });
      isJsonRpcRequest(n5) ? (this.client.core.history.set(t, n5), await this.onRelayEventRequest({ topic: t, payload: n5, attestation: s3, transportType: i4, encryptedId: zc(e2) })) : isJsonRpcResponse(n5) ? (await this.client.core.history.resolve(n5), await this.onRelayEventResponse({ topic: t, payload: n5, transportType: i4 }), this.client.core.history.delete(t, n5.id)) : await this.onRelayEventUnknownPayload({ topic: t, payload: n5, transportType: i4 }), await this.client.core.relayer.messages.ack(t, e2);
    } catch (n5) {
      this.client.logger.error(n5);
    }
  }
  registerExpirerEvents() {
    this.client.core.expirer.on(M3.expired, async (o5) => {
      const { topic: t, id: e2 } = si(o5.target);
      if (e2 && this.client.pendingRequest.keys.includes(e2))
        return await this.deletePendingSessionRequest(e2, Et2("EXPIRED"), true);
      if (e2 && this.client.auth.requests.keys.includes(e2))
        return await this.deletePendingAuthRequest(e2, Et2("EXPIRED"), true);
      t ? this.client.session.keys.includes(t) && (await this.deleteSession({ topic: t, expirerHasDeleted: true }), this.client.events.emit("session_expire", { topic: t })) : e2 && (await this.deleteProposal(e2, true), this.client.events.emit("proposal_expire", { id: e2 }));
    });
  }
  registerPairingEvents() {
    this.client.core.pairing.events.on(re.create, (o5) => this.onPairingCreated(o5)), this.client.core.pairing.events.on(re.delete, (o5) => {
      this.addToRecentlyDeleted(o5.topic, "pairing");
    });
  }
  isValidPairingTopic(o5) {
    if (!it2(o5, false)) {
      const { message: t } = Et2("MISSING_OR_INVALID", `pairing topic should be a string: ${o5}`);
      throw new Error(t);
    }
    if (!this.client.core.pairing.pairings.keys.includes(o5)) {
      const { message: t } = Et2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${o5}`);
      throw new Error(t);
    }
    if (fi(this.client.core.pairing.pairings.get(o5).expiry)) {
      const { message: t } = Et2("EXPIRED", `pairing topic: ${o5}`);
      throw new Error(t);
    }
  }
  async isValidSessionTopic(o5) {
    if (!it2(o5, false)) {
      const { message: t } = Et2("MISSING_OR_INVALID", `session topic should be a string: ${o5}`);
      throw new Error(t);
    }
    if (this.checkRecentlyDeleted(o5), !this.client.session.keys.includes(o5)) {
      const { message: t } = Et2("NO_MATCHING_KEY", `session topic doesn't exist: ${o5}`);
      throw new Error(t);
    }
    if (fi(this.client.session.get(o5).expiry)) {
      await this.deleteSession({ topic: o5 });
      const { message: t } = Et2("EXPIRED", `session topic: ${o5}`);
      throw new Error(t);
    }
    if (!this.client.core.crypto.keychain.has(o5)) {
      const { message: t } = Et2("MISSING_OR_INVALID", `session topic does not exist in keychain: ${o5}`);
      throw await this.deleteSession({ topic: o5 }), new Error(t);
    }
  }
  async isValidSessionOrPairingTopic(o5) {
    if (this.checkRecentlyDeleted(o5), this.client.session.keys.includes(o5))
      await this.isValidSessionTopic(o5);
    else if (this.client.core.pairing.pairings.keys.includes(o5))
      this.isValidPairingTopic(o5);
    else if (it2(o5, false)) {
      const { message: t } = Et2("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${o5}`);
      throw new Error(t);
    } else {
      const { message: t } = Et2("MISSING_OR_INVALID", `session or pairing topic should be a string: ${o5}`);
      throw new Error(t);
    }
  }
  async isValidProposalId(o5) {
    if (!Ia(o5)) {
      const { message: t } = Et2("MISSING_OR_INVALID", `proposal id should be a number: ${o5}`);
      throw new Error(t);
    }
    if (!this.client.proposal.keys.includes(o5)) {
      const { message: t } = Et2("NO_MATCHING_KEY", `proposal id doesn't exist: ${o5}`);
      throw new Error(t);
    }
    if (fi(this.client.proposal.get(o5).expiryTimestamp)) {
      await this.deleteProposal(o5);
      const { message: t } = Et2("EXPIRED", `proposal id: ${o5}`);
      throw new Error(t);
    }
  }
};
var ks2 = class extends Li2 {
  constructor(o5, t) {
    super(o5, t, ht3, me3), this.core = o5, this.logger = t;
  }
};
var vt3 = class extends Li2 {
  constructor(o5, t) {
    super(o5, t, dt3, me3), this.core = o5, this.logger = t;
  }
};
var Ds = class extends Li2 {
  constructor(o5, t) {
    super(o5, t, yt2, me3, (e2) => e2.id), this.core = o5, this.logger = t;
  }
};
var Ls2 = class extends Li2 {
  constructor(o5, t) {
    super(o5, t, Et4, ae2, () => ce2), this.core = o5, this.logger = t;
  }
};
var Ms2 = class extends Li2 {
  constructor(o5, t) {
    super(o5, t, ft2, ae2), this.core = o5, this.logger = t;
  }
};
var $s2 = class extends Li2 {
  constructor(o5, t) {
    super(o5, t, St4, ae2, (e2) => e2.id), this.core = o5, this.logger = t;
  }
};
var Ks2 = Object.defineProperty;
var Us = (S5, o5, t) => o5 in S5 ? Ks2(S5, o5, { enumerable: true, configurable: true, writable: true, value: t }) : S5[o5] = t;
var Ke4 = (S5, o5, t) => Us(S5, typeof o5 != "symbol" ? o5 + "" : o5, t);
var Gs2 = class {
  constructor(o5, t) {
    this.core = o5, this.logger = t, Ke4(this, "authKeys"), Ke4(this, "pairingTopics"), Ke4(this, "requests"), this.authKeys = new Ls2(this.core, this.logger), this.pairingTopics = new Ms2(this.core, this.logger), this.requests = new $s2(this.core, this.logger);
  }
  async init() {
    await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();
  }
};
var js2 = Object.defineProperty;
var Fs = (S5, o5, t) => o5 in S5 ? js2(S5, o5, { enumerable: true, configurable: true, writable: true, value: t }) : S5[o5] = t;
var f5 = (S5, o5, t) => Fs(S5, typeof o5 != "symbol" ? o5 + "" : o5, t);
var Ee3 = class _Ee extends J {
  constructor(o5) {
    super(o5), f5(this, "protocol", Ce4), f5(this, "version", ke4), f5(this, "name", we3.name), f5(this, "metadata"), f5(this, "core"), f5(this, "logger"), f5(this, "events", new import_events8.EventEmitter()), f5(this, "engine"), f5(this, "session"), f5(this, "proposal"), f5(this, "pendingRequest"), f5(this, "auth"), f5(this, "signConfig"), f5(this, "on", (e2, s3) => this.events.on(e2, s3)), f5(this, "once", (e2, s3) => this.events.once(e2, s3)), f5(this, "off", (e2, s3) => this.events.off(e2, s3)), f5(this, "removeListener", (e2, s3) => this.events.removeListener(e2, s3)), f5(this, "removeAllListeners", (e2) => this.events.removeAllListeners(e2)), f5(this, "connect", async (e2) => {
      try {
        return await this.engine.connect(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f5(this, "pair", async (e2) => {
      try {
        return await this.engine.pair(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f5(this, "approve", async (e2) => {
      try {
        return await this.engine.approve(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f5(this, "reject", async (e2) => {
      try {
        return await this.engine.reject(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f5(this, "update", async (e2) => {
      try {
        return await this.engine.update(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f5(this, "extend", async (e2) => {
      try {
        return await this.engine.extend(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f5(this, "request", async (e2) => {
      try {
        return await this.engine.request(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f5(this, "respond", async (e2) => {
      try {
        return await this.engine.respond(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f5(this, "ping", async (e2) => {
      try {
        return await this.engine.ping(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f5(this, "emit", async (e2) => {
      try {
        return await this.engine.emit(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f5(this, "disconnect", async (e2) => {
      try {
        return await this.engine.disconnect(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f5(this, "find", (e2) => {
      try {
        return this.engine.find(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f5(this, "getPendingSessionRequests", () => {
      try {
        return this.engine.getPendingSessionRequests();
      } catch (e2) {
        throw this.logger.error(e2.message), e2;
      }
    }), f5(this, "authenticate", async (e2, s3) => {
      try {
        return await this.engine.authenticate(e2, s3);
      } catch (i4) {
        throw this.logger.error(i4.message), i4;
      }
    }), f5(this, "formatAuthMessage", (e2) => {
      try {
        return this.engine.formatAuthMessage(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f5(this, "approveSessionAuthenticate", async (e2) => {
      try {
        return await this.engine.approveSessionAuthenticate(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f5(this, "rejectSessionAuthenticate", async (e2) => {
      try {
        return await this.engine.rejectSessionAuthenticate(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), this.name = (o5 == null ? void 0 : o5.name) || we3.name, this.metadata = Ks(o5 == null ? void 0 : o5.metadata), this.signConfig = o5 == null ? void 0 : o5.signConfig;
    const t = typeof (o5 == null ? void 0 : o5.logger) < "u" && typeof (o5 == null ? void 0 : o5.logger) != "string" ? o5.logger : (0, import_pino2.default)(k2({ level: (o5 == null ? void 0 : o5.logger) || we3.logger }));
    this.core = (o5 == null ? void 0 : o5.core) || new Zo3(o5), this.logger = E2(t, this.name), this.session = new vt3(this.core, this.logger), this.proposal = new ks2(this.core, this.logger), this.pendingRequest = new Ds(this.core, this.logger), this.engine = new Cs2(this), this.auth = new Gs2(this.core, this.logger);
  }
  static async init(o5) {
    const t = new _Ee(o5);
    return await t.initialize(), t;
  }
  get context() {
    return y2(this.logger);
  }
  get pairing() {
    return this.core.pairing.pairings;
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info("SignClient Initialization Success");
    } catch (o5) {
      throw this.logger.info("SignClient Initialization Failure"), this.logger.error(o5.message), o5;
    }
  }
};

// node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js
var import_events9 = __toESM(require_events());
var import_cross_fetch = __toESM(require_browser_ponyfill());
var P4 = Object.defineProperty;
var w4 = Object.defineProperties;
var E4 = Object.getOwnPropertyDescriptors;
var c6 = Object.getOwnPropertySymbols;
var L3 = Object.prototype.hasOwnProperty;
var O5 = Object.prototype.propertyIsEnumerable;
var l6 = (r3, t, e2) => t in r3 ? P4(r3, t, { enumerable: true, configurable: true, writable: true, value: e2 }) : r3[t] = e2;
var p4 = (r3, t) => {
  for (var e2 in t || (t = {}))
    L3.call(t, e2) && l6(r3, e2, t[e2]);
  if (c6)
    for (var e2 of c6(t))
      O5.call(t, e2) && l6(r3, e2, t[e2]);
  return r3;
};
var v5 = (r3, t) => w4(r3, E4(t));
var j3 = { Accept: "application/json", "Content-Type": "application/json" };
var T3 = "POST";
var d4 = { headers: j3, method: T3 };
var g3 = 10;
var f6 = class {
  constructor(t, e2 = false) {
    if (this.url = t, this.disableProviderPing = e2, this.events = new import_events9.EventEmitter(), this.isAvailable = false, this.registering = false, !isHttpUrl(t))
      throw new Error(`Provided URL is not compatible with HTTP connection: ${t}`);
    this.url = t, this.disableProviderPing = e2;
  }
  get connected() {
    return this.isAvailable;
  }
  get connecting() {
    return this.registering;
  }
  on(t, e2) {
    this.events.on(t, e2);
  }
  once(t, e2) {
    this.events.once(t, e2);
  }
  off(t, e2) {
    this.events.off(t, e2);
  }
  removeListener(t, e2) {
    this.events.removeListener(t, e2);
  }
  async open(t = this.url) {
    await this.register(t);
  }
  async close() {
    if (!this.isAvailable)
      throw new Error("Connection already closed");
    this.onClose();
  }
  async send(t) {
    this.isAvailable || await this.register();
    try {
      const e2 = safeJsonStringify(t), s3 = await (await (0, import_cross_fetch.default)(this.url, v5(p4({}, d4), { body: e2 }))).json();
      this.onPayload({ data: s3 });
    } catch (e2) {
      this.onError(t.id, e2);
    }
  }
  async register(t = this.url) {
    if (!isHttpUrl(t))
      throw new Error(`Provided URL is not compatible with HTTP connection: ${t}`);
    if (this.registering) {
      const e2 = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= e2 || this.events.listenerCount("open") >= e2) && this.events.setMaxListeners(e2 + 1), new Promise((s3, i4) => {
        this.events.once("register_error", (n5) => {
          this.resetMaxListeners(), i4(n5);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.isAvailable > "u")
            return i4(new Error("HTTP connection is missing or invalid"));
          s3();
        });
      });
    }
    this.url = t, this.registering = true;
    try {
      if (!this.disableProviderPing) {
        const e2 = safeJsonStringify({ id: 1, jsonrpc: "2.0", method: "test", params: [] });
        await (0, import_cross_fetch.default)(t, v5(p4({}, d4), { body: e2 }));
      }
      this.onOpen();
    } catch (e2) {
      const s3 = this.parseError(e2);
      throw this.events.emit("register_error", s3), this.onClose(), s3;
    }
  }
  onOpen() {
    this.isAvailable = true, this.registering = false, this.events.emit("open");
  }
  onClose() {
    this.isAvailable = false, this.registering = false, this.events.emit("close");
  }
  onPayload(t) {
    if (typeof t.data > "u")
      return;
    const e2 = typeof t.data == "string" ? safeJsonParse(t.data) : t.data;
    this.events.emit("payload", e2);
  }
  onError(t, e2) {
    const s3 = this.parseError(e2), i4 = s3.message || s3.toString(), n5 = formatJsonRpcError(t, i4);
    this.events.emit("payload", n5);
  }
  parseError(t, e2 = this.url) {
    return parseConnectionError(t, e2, "HTTP");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > g3 && this.events.setMaxListeners(g3);
  }
};

// node_modules/@walletconnect/universal-provider/dist/index.es.js
var import_events10 = __toESM(require_events());
var rt3 = "error";
var Lt4 = "wss://relay.walletconnect.org";
var Mt4 = "wc";
var Bt4 = "universal_provider";
var U3 = `${Mt4}@2:${Bt4}:`;
var nt3 = "https://rpc.walletconnect.org/v1/";
var I4 = "generic";
var Gt4 = `${nt3}bundler`;
var l7 = { DEFAULT_CHAIN_CHANGED: "default_chain_changed" };
function W4(i4) {
  return i4 == null || typeof i4 != "object" && typeof i4 != "function";
}
function at2(i4) {
  return Object.getOwnPropertySymbols(i4).filter((t) => Object.prototype.propertyIsEnumerable.call(i4, t));
}
function ct4(i4) {
  return i4 == null ? i4 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(i4);
}
var Jt4 = "[object RegExp]";
var ot2 = "[object String]";
var ht4 = "[object Number]";
var pt3 = "[object Boolean]";
var dt4 = "[object Arguments]";
var zt4 = "[object Symbol]";
var kt4 = "[object Date]";
var Wt4 = "[object Map]";
var Kt4 = "[object Set]";
var Vt4 = "[object Array]";
var Xt4 = "[object ArrayBuffer]";
var Yt4 = "[object Object]";
var Qt4 = "[object DataView]";
var Zt4 = "[object Uint8Array]";
var Tt4 = "[object Uint8ClampedArray]";
var te3 = "[object Uint16Array]";
var ee3 = "[object Uint32Array]";
var ie3 = "[object Int8Array]";
var se3 = "[object Int16Array]";
var re2 = "[object Int32Array]";
var ne3 = "[object Float32Array]";
var ae3 = "[object Float64Array]";
function K4(i4) {
  return ArrayBuffer.isView(i4) && !(i4 instanceof DataView);
}
function ce3(i4, t) {
  return $3(i4, void 0, i4, /* @__PURE__ */ new Map(), t);
}
function $3(i4, t, e2, s3 = /* @__PURE__ */ new Map(), n5 = void 0) {
  const a3 = n5 == null ? void 0 : n5(i4, t, e2, s3);
  if (a3 != null)
    return a3;
  if (W4(i4))
    return i4;
  if (s3.has(i4))
    return s3.get(i4);
  if (Array.isArray(i4)) {
    const r3 = new Array(i4.length);
    s3.set(i4, r3);
    for (let c7 = 0; c7 < i4.length; c7++)
      r3[c7] = $3(i4[c7], c7, e2, s3, n5);
    return Object.hasOwn(i4, "index") && (r3.index = i4.index), Object.hasOwn(i4, "input") && (r3.input = i4.input), r3;
  }
  if (i4 instanceof Date)
    return new Date(i4.getTime());
  if (i4 instanceof RegExp) {
    const r3 = new RegExp(i4.source, i4.flags);
    return r3.lastIndex = i4.lastIndex, r3;
  }
  if (i4 instanceof Map) {
    const r3 = /* @__PURE__ */ new Map();
    s3.set(i4, r3);
    for (const [c7, o5] of i4)
      r3.set(c7, $3(o5, c7, e2, s3, n5));
    return r3;
  }
  if (i4 instanceof Set) {
    const r3 = /* @__PURE__ */ new Set();
    s3.set(i4, r3);
    for (const c7 of i4)
      r3.add($3(c7, void 0, e2, s3, n5));
    return r3;
  }
  if (typeof Buffer < "u" && Buffer.isBuffer(i4))
    return i4.subarray();
  if (K4(i4)) {
    const r3 = new (Object.getPrototypeOf(i4)).constructor(i4.length);
    s3.set(i4, r3);
    for (let c7 = 0; c7 < i4.length; c7++)
      r3[c7] = $3(i4[c7], c7, e2, s3, n5);
    return r3;
  }
  if (i4 instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && i4 instanceof SharedArrayBuffer)
    return i4.slice(0);
  if (i4 instanceof DataView) {
    const r3 = new DataView(i4.buffer.slice(0), i4.byteOffset, i4.byteLength);
    return s3.set(i4, r3), y5(r3, i4, e2, s3, n5), r3;
  }
  if (typeof File < "u" && i4 instanceof File) {
    const r3 = new File([i4], i4.name, { type: i4.type });
    return s3.set(i4, r3), y5(r3, i4, e2, s3, n5), r3;
  }
  if (i4 instanceof Blob) {
    const r3 = new Blob([i4], { type: i4.type });
    return s3.set(i4, r3), y5(r3, i4, e2, s3, n5), r3;
  }
  if (i4 instanceof Error) {
    const r3 = new i4.constructor();
    return s3.set(i4, r3), r3.message = i4.message, r3.name = i4.name, r3.stack = i4.stack, r3.cause = i4.cause, y5(r3, i4, e2, s3, n5), r3;
  }
  if (typeof i4 == "object" && oe(i4)) {
    const r3 = Object.create(Object.getPrototypeOf(i4));
    return s3.set(i4, r3), y5(r3, i4, e2, s3, n5), r3;
  }
  return i4;
}
function y5(i4, t, e2 = i4, s3, n5) {
  const a3 = [...Object.keys(t), ...at2(t)];
  for (let r3 = 0; r3 < a3.length; r3++) {
    const c7 = a3[r3], o5 = Object.getOwnPropertyDescriptor(i4, c7);
    (o5 == null || o5.writable) && (i4[c7] = $3(t[c7], c7, e2, s3, n5));
  }
}
function oe(i4) {
  switch (ct4(i4)) {
    case dt4:
    case Vt4:
    case Xt4:
    case Qt4:
    case pt3:
    case kt4:
    case ne3:
    case ae3:
    case ie3:
    case se3:
    case re2:
    case Wt4:
    case ht4:
    case Yt4:
    case Jt4:
    case Kt4:
    case ot2:
    case zt4:
    case Zt4:
    case Tt4:
    case te3:
    case ee3:
      return true;
    default:
      return false;
  }
}
function he4(i4, t) {
  return ce3(i4, (e2, s3, n5, a3) => {
    const r3 = t == null ? void 0 : t(e2, s3, n5, a3);
    if (r3 != null)
      return r3;
    if (typeof i4 == "object")
      switch (Object.prototype.toString.call(i4)) {
        case ht4:
        case ot2:
        case pt3: {
          const c7 = new i4.constructor(i4 == null ? void 0 : i4.valueOf());
          return y5(c7, i4), c7;
        }
        case dt4: {
          const c7 = {};
          return y5(c7, i4), c7.length = i4.length, c7[Symbol.iterator] = i4[Symbol.iterator], c7;
        }
        default:
          return;
      }
  });
}
function ut4(i4) {
  return he4(i4);
}
function lt4(i4) {
  return i4 !== null && typeof i4 == "object" && ct4(i4) === "[object Arguments]";
}
function ft3(i4) {
  return typeof i4 == "object" && i4 !== null;
}
function pe4() {
}
function de4(i4) {
  return K4(i4);
}
function ue3(i4) {
  var _a2;
  if (typeof i4 != "object" || i4 == null)
    return false;
  if (Object.getPrototypeOf(i4) === null)
    return true;
  if (Object.prototype.toString.call(i4) !== "[object Object]") {
    const e2 = i4[Symbol.toStringTag];
    return e2 == null || !((_a2 = Object.getOwnPropertyDescriptor(i4, Symbol.toStringTag)) == null ? void 0 : _a2.writable) ? false : i4.toString() === `[object ${e2}]`;
  }
  let t = i4;
  for (; Object.getPrototypeOf(t) !== null; )
    t = Object.getPrototypeOf(t);
  return Object.getPrototypeOf(i4) === t;
}
function le4(i4) {
  if (W4(i4))
    return i4;
  if (Array.isArray(i4) || K4(i4) || i4 instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && i4 instanceof SharedArrayBuffer)
    return i4.slice(0);
  const t = Object.getPrototypeOf(i4), e2 = t.constructor;
  if (i4 instanceof Date || i4 instanceof Map || i4 instanceof Set)
    return new e2(i4);
  if (i4 instanceof RegExp) {
    const s3 = new e2(i4);
    return s3.lastIndex = i4.lastIndex, s3;
  }
  if (i4 instanceof DataView)
    return new e2(i4.buffer.slice(0));
  if (i4 instanceof Error) {
    const s3 = new e2(i4.message);
    return s3.stack = i4.stack, s3.name = i4.name, s3.cause = i4.cause, s3;
  }
  if (typeof File < "u" && i4 instanceof File)
    return new e2([i4], i4.name, { type: i4.type, lastModified: i4.lastModified });
  if (typeof i4 == "object") {
    const s3 = Object.create(t);
    return Object.assign(s3, i4);
  }
  return i4;
}
function fe4(i4, ...t) {
  const e2 = t.slice(0, -1), s3 = t[t.length - 1];
  let n5 = i4;
  for (let a3 = 0; a3 < e2.length; a3++) {
    const r3 = e2[a3];
    n5 = x5(n5, r3, s3, /* @__PURE__ */ new Map());
  }
  return n5;
}
function x5(i4, t, e2, s3) {
  if (W4(i4) && (i4 = Object(i4)), t == null || typeof t != "object")
    return i4;
  if (s3.has(t))
    return le4(s3.get(t));
  if (s3.set(t, i4), Array.isArray(t)) {
    t = t.slice();
    for (let a3 = 0; a3 < t.length; a3++)
      t[a3] = t[a3] ?? void 0;
  }
  const n5 = [...Object.keys(t), ...at2(t)];
  for (let a3 = 0; a3 < n5.length; a3++) {
    const r3 = n5[a3];
    let c7 = t[r3], o5 = i4[r3];
    if (lt4(c7) && (c7 = { ...c7 }), lt4(o5) && (o5 = { ...o5 }), typeof Buffer < "u" && Buffer.isBuffer(c7) && (c7 = ut4(c7)), Array.isArray(c7))
      if (typeof o5 == "object" && o5 != null) {
        const v6 = [], w5 = Reflect.ownKeys(o5);
        for (let P6 = 0; P6 < w5.length; P6++) {
          const d5 = w5[P6];
          v6[d5] = o5[d5];
        }
        o5 = v6;
      } else
        o5 = [];
    const p5 = e2(o5, c7, r3, i4, t, s3);
    p5 != null ? i4[r3] = p5 : Array.isArray(c7) || ft3(o5) && ft3(c7) ? i4[r3] = x5(o5, c7, e2, s3) : o5 == null && ue3(c7) ? i4[r3] = x5({}, c7, e2, s3) : o5 == null && de4(c7) ? i4[r3] = ut4(c7) : (o5 === void 0 || c7 !== void 0) && (i4[r3] = c7);
  }
  return i4;
}
function me4(i4, ...t) {
  return fe4(i4, ...t, pe4);
}
var ve3 = Object.defineProperty;
var ge4 = Object.defineProperties;
var Pe4 = Object.getOwnPropertyDescriptors;
var mt3 = Object.getOwnPropertySymbols;
var we4 = Object.prototype.hasOwnProperty;
var ye4 = Object.prototype.propertyIsEnumerable;
var vt4 = (i4, t, e2) => t in i4 ? ve3(i4, t, { enumerable: true, configurable: true, writable: true, value: e2 }) : i4[t] = e2;
var L4 = (i4, t) => {
  for (var e2 in t || (t = {}))
    we4.call(t, e2) && vt4(i4, e2, t[e2]);
  if (mt3)
    for (var e2 of mt3(t))
      ye4.call(t, e2) && vt4(i4, e2, t[e2]);
  return i4;
};
var be4 = (i4, t) => ge4(i4, Pe4(t));
function u2(i4, t, e2) {
  var s3;
  const n5 = Fe(i4);
  return ((s3 = t.rpcMap) == null ? void 0 : s3[n5.reference]) || `${nt3}?chainId=${n5.namespace}:${n5.reference}&projectId=${e2}`;
}
function b4(i4) {
  return i4.includes(":") ? i4.split(":")[1] : i4;
}
function gt4(i4) {
  return i4.map((t) => `${t.split(":")[0]}:${t.split(":")[1]}`);
}
function Ie4(i4, t) {
  const e2 = Object.keys(t.namespaces).filter((n5) => n5.includes(i4));
  if (!e2.length)
    return [];
  const s3 = [];
  return e2.forEach((n5) => {
    const a3 = t.namespaces[n5].accounts;
    s3.push(...a3);
  }), s3;
}
function Pt4(i4) {
  return Object.fromEntries(Object.entries(i4).filter(([t, e2]) => {
    var s3, n5;
    return ((s3 = e2 == null ? void 0 : e2.chains) == null ? void 0 : s3.length) && ((n5 = e2 == null ? void 0 : e2.chains) == null ? void 0 : n5.length) > 0;
  }));
}
function M4(i4 = {}, t = {}) {
  const e2 = Pt4(wt4(i4)), s3 = Pt4(wt4(t));
  return me4(e2, s3);
}
function wt4(i4) {
  var t, e2, s3, n5, a3;
  const r3 = {};
  if (!Ve2(i4))
    return r3;
  for (const [c7, o5] of Object.entries(i4)) {
    const p5 = Pn2(c7) ? [c7] : o5.chains, v6 = o5.methods || [], w5 = o5.events || [], P6 = o5.rpcMap || {}, d5 = Yo2(c7);
    r3[d5] = be4(L4(L4({}, r3[d5]), o5), { chains: ct2(p5, (t = r3[d5]) == null ? void 0 : t.chains), methods: ct2(v6, (e2 = r3[d5]) == null ? void 0 : e2.methods), events: ct2(w5, (s3 = r3[d5]) == null ? void 0 : s3.events) }), (Ve2(P6) || Ve2(((n5 = r3[d5]) == null ? void 0 : n5.rpcMap) || {})) && (r3[d5].rpcMap = L4(L4({}, P6), (a3 = r3[d5]) == null ? void 0 : a3.rpcMap));
  }
  return r3;
}
function yt3(i4) {
  return i4.includes(":") ? i4.split(":")[2] : i4;
}
function bt3(i4) {
  const t = {};
  for (const [e2, s3] of Object.entries(i4)) {
    const n5 = s3.methods || [], a3 = s3.events || [], r3 = s3.accounts || [], c7 = Pn2(e2) ? [e2] : s3.chains ? s3.chains : gt4(s3.accounts);
    t[e2] = { chains: c7, methods: n5, events: a3, accounts: r3 };
  }
  return t;
}
function V3(i4) {
  return typeof i4 == "number" ? i4 : i4.includes("0x") ? parseInt(i4, 16) : (i4 = i4.includes(":") ? i4.split(":")[1] : i4, isNaN(Number(i4)) ? i4 : Number(i4));
}
var It4 = {};
var h5 = (i4) => It4[i4];
var X3 = (i4, t) => {
  It4[i4] = t;
};
var $e4 = Object.defineProperty;
var $t4 = Object.getOwnPropertySymbols;
var Oe3 = Object.prototype.hasOwnProperty;
var Ae3 = Object.prototype.propertyIsEnumerable;
var Ot4 = (i4, t, e2) => t in i4 ? $e4(i4, t, { enumerable: true, configurable: true, writable: true, value: e2 }) : i4[t] = e2;
var At3 = (i4, t) => {
  for (var e2 in t || (t = {}))
    Oe3.call(t, e2) && Ot4(i4, e2, t[e2]);
  if ($t4)
    for (var e2 of $t4(t))
      Ae3.call(t, e2) && Ot4(i4, e2, t[e2]);
  return i4;
};
var Ct3 = "eip155";
var Ce5 = ["atomic", "flow-control", "paymasterService", "sessionKeys", "auxiliaryFunds"];
var Ee4 = (i4) => i4 && i4.startsWith("0x") ? BigInt(i4).toString(10) : i4;
var Y3 = (i4) => i4 && i4.startsWith("0x") ? i4 : `0x${BigInt(i4).toString(16)}`;
var Et5 = (i4) => Object.keys(i4).filter((t) => Ce5.includes(t)).reduce((t, e2) => (t[e2] = i4[e2], t), {});
var He4 = (i4, t, e2) => {
  const { sessionProperties: s3 = {}, scopedProperties: n5 = {} } = i4, a3 = {};
  if (!Ve2(n5) && !Ve2(s3))
    return;
  const r3 = Et5(s3);
  for (const c7 of e2) {
    const o5 = Ee4(c7);
    if (!o5)
      continue;
    a3[Y3(o5)] = r3;
    const p5 = n5 == null ? void 0 : n5[`${Ct3}:${o5}`];
    if (p5) {
      const v6 = p5 == null ? void 0 : p5[`${Ct3}:${o5}:${t}`];
      a3[Y3(o5)] = At3(At3({}, a3[Y3(o5)]), Et5(v6 || p5));
    }
  }
  for (const [c7, o5] of Object.entries(a3))
    Object.keys(o5).length === 0 && delete a3[c7];
  return Object.keys(a3).length > 0 ? a3 : void 0;
};
var Se4 = Object.defineProperty;
var Ne3 = (i4, t, e2) => t in i4 ? Se4(i4, t, { enumerable: true, configurable: true, writable: true, value: e2 }) : i4[t] = e2;
var O6 = (i4, t, e2) => Ne3(i4, typeof t != "symbol" ? t + "" : t, e2);
var De4 = class {
  constructor(t) {
    O6(this, "name", "polkadot"), O6(this, "client"), O6(this, "httpProviders"), O6(this, "events"), O6(this, "namespace"), O6(this, "chainId"), this.namespace = t.namespace, this.events = h5("events"), this.client = h5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t)
      throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e2) {
    this.httpProviders[t] || this.setHttpProvider(t, e2), this.chainId = t, this.events.emit(l7.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? t.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e2) => {
      var s3;
      const n5 = b4(e2);
      t[n5] = this.createHttpProvider(n5, (s3 = this.namespace.rpcMap) == null ? void 0 : s3[e2]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e2 = this.httpProviders[t];
    if (typeof e2 > "u")
      throw new Error(`JSON-RPC provider for ${t} not found`);
    return e2;
  }
  setHttpProvider(t, e2) {
    const s3 = this.createHttpProvider(t, e2);
    s3 && (this.httpProviders[t] = s3);
  }
  createHttpProvider(t, e2) {
    const s3 = e2 || u2(t, this.namespace, this.client.core.projectId);
    if (!s3)
      throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o3(new f6(s3, h5("disableProviderPing")));
  }
};
var qe4 = Object.defineProperty;
var je4 = Object.defineProperties;
var Re3 = Object.getOwnPropertyDescriptors;
var Ht4 = Object.getOwnPropertySymbols;
var _e5 = Object.prototype.hasOwnProperty;
var Fe3 = Object.prototype.propertyIsEnumerable;
var Q4 = (i4, t, e2) => t in i4 ? qe4(i4, t, { enumerable: true, configurable: true, writable: true, value: e2 }) : i4[t] = e2;
var St5 = (i4, t) => {
  for (var e2 in t || (t = {}))
    _e5.call(t, e2) && Q4(i4, e2, t[e2]);
  if (Ht4)
    for (var e2 of Ht4(t))
      Fe3.call(t, e2) && Q4(i4, e2, t[e2]);
  return i4;
};
var Nt4 = (i4, t) => je4(i4, Re3(t));
var A4 = (i4, t, e2) => Q4(i4, typeof t != "symbol" ? t + "" : t, e2);
var Ue4 = class {
  constructor(t) {
    A4(this, "name", "eip155"), A4(this, "client"), A4(this, "chainId"), A4(this, "namespace"), A4(this, "httpProviders"), A4(this, "events"), this.namespace = t.namespace, this.events = h5("events"), this.client = h5("client"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain());
  }
  async request(t) {
    switch (t.request.method) {
      case "eth_requestAccounts":
        return this.getAccounts();
      case "eth_accounts":
        return this.getAccounts();
      case "wallet_switchEthereumChain":
        return await this.handleSwitchChain(t);
      case "eth_chainId":
        return parseInt(this.getDefaultChain());
      case "wallet_getCapabilities":
        return await this.getCapabilities(t);
      case "wallet_getCallsStatus":
        return await this.getCallStatus(t);
    }
    return this.namespace.methods.includes(t.request.method) ? await this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  setDefaultChain(t, e2) {
    this.httpProviders[t] || this.setHttpProvider(parseInt(t), e2), this.chainId = parseInt(t), this.events.emit(l7.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId.toString();
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t)
      throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  createHttpProvider(t, e2) {
    const s3 = e2 || u2(`${this.name}:${t}`, this.namespace, this.client.core.projectId);
    if (!s3)
      throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o3(new f6(s3, h5("disableProviderPing")));
  }
  setHttpProvider(t, e2) {
    const s3 = this.createHttpProvider(t, e2);
    s3 && (this.httpProviders[t] = s3);
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e2) => {
      var s3;
      const n5 = parseInt(b4(e2));
      t[n5] = this.createHttpProvider(n5, (s3 = this.namespace.rpcMap) == null ? void 0 : s3[e2]);
    }), t;
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]))] : [];
  }
  getHttpProvider() {
    const t = this.chainId, e2 = this.httpProviders[t];
    if (typeof e2 > "u")
      throw new Error(`JSON-RPC provider for ${t} not found`);
    return e2;
  }
  async handleSwitchChain(t) {
    var e2, s3;
    let n5 = t.request.params ? (e2 = t.request.params[0]) == null ? void 0 : e2.chainId : "0x0";
    n5 = n5.startsWith("0x") ? n5 : `0x${n5}`;
    const a3 = parseInt(n5, 16);
    if (this.isChainApproved(a3))
      this.setDefaultChain(`${a3}`);
    else if (this.namespace.methods.includes("wallet_switchEthereumChain"))
      await this.client.request({ topic: t.topic, request: { method: t.request.method, params: [{ chainId: n5 }] }, chainId: (s3 = this.namespace.chains) == null ? void 0 : s3[0] }), this.setDefaultChain(`${a3}`);
    else
      throw new Error(`Failed to switch to chain 'eip155:${a3}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`);
    return null;
  }
  isChainApproved(t) {
    return this.namespace.chains.includes(`${this.name}:${t}`);
  }
  async getCapabilities(t) {
    var e2, s3, n5, a3, r3;
    const c7 = (s3 = (e2 = t.request) == null ? void 0 : e2.params) == null ? void 0 : s3[0], o5 = ((a3 = (n5 = t.request) == null ? void 0 : n5.params) == null ? void 0 : a3[1]) || [];
    if (!c7)
      throw new Error("Missing address parameter in `wallet_getCapabilities` request");
    const p5 = this.client.session.get(t.topic), v6 = ((r3 = p5 == null ? void 0 : p5.sessionProperties) == null ? void 0 : r3.capabilities) || {}, w5 = `${c7}${o5.join(",")}`, P6 = v6 == null ? void 0 : v6[w5];
    if (P6)
      return P6;
    let d5;
    try {
      d5 = He4(p5, c7, o5);
    } catch (J4) {
      console.warn("Failed to extract capabilities from session", J4);
    }
    if (d5)
      return d5;
    const tt3 = await this.client.request(t);
    try {
      await this.client.session.update(t.topic, { sessionProperties: Nt4(St5({}, p5.sessionProperties || {}), { capabilities: Nt4(St5({}, v6 || {}), { [w5]: tt3 }) }) });
    } catch (J4) {
      console.warn("Failed to update session with capabilities", J4);
    }
    return tt3;
  }
  async getCallStatus(t) {
    var e2, s3;
    const n5 = this.client.session.get(t.topic), a3 = (e2 = n5.sessionProperties) == null ? void 0 : e2.bundler_name;
    if (a3) {
      const c7 = this.getBundlerUrl(t.chainId, a3);
      try {
        return await this.getUserOperationReceipt(c7, t);
      } catch (o5) {
        console.warn("Failed to fetch call status from bundler", o5, c7);
      }
    }
    const r3 = (s3 = n5.sessionProperties) == null ? void 0 : s3.bundler_url;
    if (r3)
      try {
        return await this.getUserOperationReceipt(r3, t);
      } catch (c7) {
        console.warn("Failed to fetch call status from custom bundler", c7, r3);
      }
    if (this.namespace.methods.includes(t.request.method))
      return await this.client.request(t);
    throw new Error("Fetching call status not approved by the wallet.");
  }
  async getUserOperationReceipt(t, e2) {
    var s3;
    const n5 = new URL(t), a3 = await fetch(n5, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(formatJsonRpcRequest("eth_getUserOperationReceipt", [(s3 = e2.request.params) == null ? void 0 : s3[0]])) });
    if (!a3.ok)
      throw new Error(`Failed to fetch user operation receipt - ${a3.status}`);
    return await a3.json();
  }
  getBundlerUrl(t, e2) {
    return `${Gt4}?projectId=${this.client.core.projectId}&chainId=${t}&bundler=${e2}`;
  }
};
var xe3 = Object.defineProperty;
var Le5 = (i4, t, e2) => t in i4 ? xe3(i4, t, { enumerable: true, configurable: true, writable: true, value: e2 }) : i4[t] = e2;
var C4 = (i4, t, e2) => Le5(i4, typeof t != "symbol" ? t + "" : t, e2);
var Me5 = class {
  constructor(t) {
    C4(this, "name", "solana"), C4(this, "client"), C4(this, "httpProviders"), C4(this, "events"), C4(this, "namespace"), C4(this, "chainId"), this.namespace = t.namespace, this.events = h5("events"), this.client = h5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e2) {
    this.httpProviders[t] || this.setHttpProvider(t, e2), this.chainId = t, this.events.emit(l7.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t)
      throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e2) => {
      var s3;
      const n5 = b4(e2);
      t[n5] = this.createHttpProvider(n5, (s3 = this.namespace.rpcMap) == null ? void 0 : s3[e2]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e2 = this.httpProviders[t];
    if (typeof e2 > "u")
      throw new Error(`JSON-RPC provider for ${t} not found`);
    return e2;
  }
  setHttpProvider(t, e2) {
    const s3 = this.createHttpProvider(t, e2);
    s3 && (this.httpProviders[t] = s3);
  }
  createHttpProvider(t, e2) {
    const s3 = e2 || u2(t, this.namespace, this.client.core.projectId);
    if (!s3)
      throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o3(new f6(s3, h5("disableProviderPing")));
  }
};
var Be4 = Object.defineProperty;
var Ge3 = (i4, t, e2) => t in i4 ? Be4(i4, t, { enumerable: true, configurable: true, writable: true, value: e2 }) : i4[t] = e2;
var E5 = (i4, t, e2) => Ge3(i4, typeof t != "symbol" ? t + "" : t, e2);
var Je3 = class {
  constructor(t) {
    E5(this, "name", "cosmos"), E5(this, "client"), E5(this, "httpProviders"), E5(this, "events"), E5(this, "namespace"), E5(this, "chainId"), this.namespace = t.namespace, this.events = h5("events"), this.client = h5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t)
      throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e2) {
    this.httpProviders[t] || this.setHttpProvider(t, e2), this.chainId = t, this.events.emit(l7.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e2) => {
      var s3;
      const n5 = b4(e2);
      t[n5] = this.createHttpProvider(n5, (s3 = this.namespace.rpcMap) == null ? void 0 : s3[e2]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e2 = this.httpProviders[t];
    if (typeof e2 > "u")
      throw new Error(`JSON-RPC provider for ${t} not found`);
    return e2;
  }
  setHttpProvider(t, e2) {
    const s3 = this.createHttpProvider(t, e2);
    s3 && (this.httpProviders[t] = s3);
  }
  createHttpProvider(t, e2) {
    const s3 = e2 || u2(t, this.namespace, this.client.core.projectId);
    if (!s3)
      throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o3(new f6(s3, h5("disableProviderPing")));
  }
};
var ze3 = Object.defineProperty;
var ke5 = (i4, t, e2) => t in i4 ? ze3(i4, t, { enumerable: true, configurable: true, writable: true, value: e2 }) : i4[t] = e2;
var H2 = (i4, t, e2) => ke5(i4, typeof t != "symbol" ? t + "" : t, e2);
var We3 = class {
  constructor(t) {
    H2(this, "name", "algorand"), H2(this, "client"), H2(this, "httpProviders"), H2(this, "events"), H2(this, "namespace"), H2(this, "chainId"), this.namespace = t.namespace, this.events = h5("events"), this.client = h5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e2) {
    if (!this.httpProviders[t]) {
      const s3 = e2 || u2(`${this.name}:${t}`, this.namespace, this.client.core.projectId);
      if (!s3)
        throw new Error(`No RPC url provided for chainId: ${t}`);
      this.setHttpProvider(t, s3);
    }
    this.chainId = t, this.events.emit(l7.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t)
      throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e2) => {
      var s3;
      t[e2] = this.createHttpProvider(e2, (s3 = this.namespace.rpcMap) == null ? void 0 : s3[e2]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e2 = this.httpProviders[t];
    if (typeof e2 > "u")
      throw new Error(`JSON-RPC provider for ${t} not found`);
    return e2;
  }
  setHttpProvider(t, e2) {
    const s3 = this.createHttpProvider(t, e2);
    s3 && (this.httpProviders[t] = s3);
  }
  createHttpProvider(t, e2) {
    const s3 = e2 || u2(t, this.namespace, this.client.core.projectId);
    return typeof s3 > "u" ? void 0 : new o3(new f6(s3, h5("disableProviderPing")));
  }
};
var Ke5 = Object.defineProperty;
var Ve4 = (i4, t, e2) => t in i4 ? Ke5(i4, t, { enumerable: true, configurable: true, writable: true, value: e2 }) : i4[t] = e2;
var S4 = (i4, t, e2) => Ve4(i4, typeof t != "symbol" ? t + "" : t, e2);
var Xe4 = class {
  constructor(t) {
    S4(this, "name", "cip34"), S4(this, "client"), S4(this, "httpProviders"), S4(this, "events"), S4(this, "namespace"), S4(this, "chainId"), this.namespace = t.namespace, this.events = h5("events"), this.client = h5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t)
      throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e2) {
    this.httpProviders[t] || this.setHttpProvider(t, e2), this.chainId = t, this.events.emit(l7.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e2) => {
      const s3 = this.getCardanoRPCUrl(e2), n5 = b4(e2);
      t[n5] = this.createHttpProvider(n5, s3);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e2 = this.httpProviders[t];
    if (typeof e2 > "u")
      throw new Error(`JSON-RPC provider for ${t} not found`);
    return e2;
  }
  getCardanoRPCUrl(t) {
    const e2 = this.namespace.rpcMap;
    if (e2)
      return e2[t];
  }
  setHttpProvider(t, e2) {
    const s3 = this.createHttpProvider(t, e2);
    s3 && (this.httpProviders[t] = s3);
  }
  createHttpProvider(t, e2) {
    const s3 = e2 || this.getCardanoRPCUrl(t);
    if (!s3)
      throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o3(new f6(s3, h5("disableProviderPing")));
  }
};
var Ye4 = Object.defineProperty;
var Qe4 = (i4, t, e2) => t in i4 ? Ye4(i4, t, { enumerable: true, configurable: true, writable: true, value: e2 }) : i4[t] = e2;
var N12 = (i4, t, e2) => Qe4(i4, typeof t != "symbol" ? t + "" : t, e2);
var Ze4 = class {
  constructor(t) {
    N12(this, "name", "elrond"), N12(this, "client"), N12(this, "httpProviders"), N12(this, "events"), N12(this, "namespace"), N12(this, "chainId"), this.namespace = t.namespace, this.events = h5("events"), this.client = h5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e2) {
    this.httpProviders[t] || this.setHttpProvider(t, e2), this.chainId = t, this.events.emit(l7.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t)
      throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e2) => {
      var s3;
      const n5 = b4(e2);
      t[n5] = this.createHttpProvider(n5, (s3 = this.namespace.rpcMap) == null ? void 0 : s3[e2]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e2 = this.httpProviders[t];
    if (typeof e2 > "u")
      throw new Error(`JSON-RPC provider for ${t} not found`);
    return e2;
  }
  setHttpProvider(t, e2) {
    const s3 = this.createHttpProvider(t, e2);
    s3 && (this.httpProviders[t] = s3);
  }
  createHttpProvider(t, e2) {
    const s3 = e2 || u2(t, this.namespace, this.client.core.projectId);
    if (!s3)
      throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o3(new f6(s3, h5("disableProviderPing")));
  }
};
var Te4 = Object.defineProperty;
var ti2 = (i4, t, e2) => t in i4 ? Te4(i4, t, { enumerable: true, configurable: true, writable: true, value: e2 }) : i4[t] = e2;
var D3 = (i4, t, e2) => ti2(i4, typeof t != "symbol" ? t + "" : t, e2);
var ei3 = class {
  constructor(t) {
    D3(this, "name", "multiversx"), D3(this, "client"), D3(this, "httpProviders"), D3(this, "events"), D3(this, "namespace"), D3(this, "chainId"), this.namespace = t.namespace, this.events = h5("events"), this.client = h5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e2) {
    this.httpProviders[t] || this.setHttpProvider(t, e2), this.chainId = t, this.events.emit(l7.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t)
      throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e2) => {
      var s3;
      const n5 = b4(e2);
      t[n5] = this.createHttpProvider(n5, (s3 = this.namespace.rpcMap) == null ? void 0 : s3[e2]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e2 = this.httpProviders[t];
    if (typeof e2 > "u")
      throw new Error(`JSON-RPC provider for ${t} not found`);
    return e2;
  }
  setHttpProvider(t, e2) {
    const s3 = this.createHttpProvider(t, e2);
    s3 && (this.httpProviders[t] = s3);
  }
  createHttpProvider(t, e2) {
    const s3 = e2 || u2(t, this.namespace, this.client.core.projectId);
    if (!s3)
      throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o3(new f6(s3, h5("disableProviderPing")));
  }
};
var ii3 = Object.defineProperty;
var si3 = (i4, t, e2) => t in i4 ? ii3(i4, t, { enumerable: true, configurable: true, writable: true, value: e2 }) : i4[t] = e2;
var q = (i4, t, e2) => si3(i4, typeof t != "symbol" ? t + "" : t, e2);
var ri3 = class {
  constructor(t) {
    q(this, "name", "near"), q(this, "client"), q(this, "httpProviders"), q(this, "events"), q(this, "namespace"), q(this, "chainId"), this.namespace = t.namespace, this.events = h5("events"), this.client = h5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t)
      throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e2) {
    if (this.chainId = t, !this.httpProviders[t]) {
      const s3 = e2 || u2(`${this.name}:${t}`, this.namespace);
      if (!s3)
        throw new Error(`No RPC url provided for chainId: ${t}`);
      this.setHttpProvider(t, s3);
    }
    this.events.emit(l7.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? t.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e2) => {
      var s3;
      t[e2] = this.createHttpProvider(e2, (s3 = this.namespace.rpcMap) == null ? void 0 : s3[e2]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e2 = this.httpProviders[t];
    if (typeof e2 > "u")
      throw new Error(`JSON-RPC provider for ${t} not found`);
    return e2;
  }
  setHttpProvider(t, e2) {
    const s3 = this.createHttpProvider(t, e2);
    s3 && (this.httpProviders[t] = s3);
  }
  createHttpProvider(t, e2) {
    const s3 = e2 || u2(t, this.namespace);
    return typeof s3 > "u" ? void 0 : new o3(new f6(s3, h5("disableProviderPing")));
  }
};
var ni3 = Object.defineProperty;
var ai3 = (i4, t, e2) => t in i4 ? ni3(i4, t, { enumerable: true, configurable: true, writable: true, value: e2 }) : i4[t] = e2;
var j4 = (i4, t, e2) => ai3(i4, typeof t != "symbol" ? t + "" : t, e2);
var ci3 = class {
  constructor(t) {
    j4(this, "name", "tezos"), j4(this, "client"), j4(this, "httpProviders"), j4(this, "events"), j4(this, "namespace"), j4(this, "chainId"), this.namespace = t.namespace, this.events = h5("events"), this.client = h5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t)
      throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e2) {
    if (this.chainId = t, !this.httpProviders[t]) {
      const s3 = e2 || u2(`${this.name}:${t}`, this.namespace);
      if (!s3)
        throw new Error(`No RPC url provided for chainId: ${t}`);
      this.setHttpProvider(t, s3);
    }
    this.events.emit(l7.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? t.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e2) => {
      t[e2] = this.createHttpProvider(e2);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e2 = this.httpProviders[t];
    if (typeof e2 > "u")
      throw new Error(`JSON-RPC provider for ${t} not found`);
    return e2;
  }
  setHttpProvider(t, e2) {
    const s3 = this.createHttpProvider(t, e2);
    s3 && (this.httpProviders[t] = s3);
  }
  createHttpProvider(t, e2) {
    const s3 = e2 || u2(t, this.namespace);
    return typeof s3 > "u" ? void 0 : new o3(new f6(s3));
  }
};
var oi3 = Object.defineProperty;
var hi3 = (i4, t, e2) => t in i4 ? oi3(i4, t, { enumerable: true, configurable: true, writable: true, value: e2 }) : i4[t] = e2;
var R3 = (i4, t, e2) => hi3(i4, typeof t != "symbol" ? t + "" : t, e2);
var pi3 = class {
  constructor(t) {
    R3(this, "name", I4), R3(this, "client"), R3(this, "httpProviders"), R3(this, "events"), R3(this, "namespace"), R3(this, "chainId"), this.namespace = t.namespace, this.events = h5("events"), this.client = h5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace.chains = [...new Set((this.namespace.chains || []).concat(t.chains || []))], this.namespace.accounts = [...new Set((this.namespace.accounts || []).concat(t.accounts || []))], this.namespace.methods = [...new Set((this.namespace.methods || []).concat(t.methods || []))], this.namespace.events = [...new Set((this.namespace.events || []).concat(t.events || []))], this.httpProviders = this.createHttpProviders();
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider(t.chainId).request(t.request);
  }
  setDefaultChain(t, e2) {
    this.httpProviders[t] || this.setHttpProvider(t, e2), this.chainId = t, this.events.emit(l7.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t)
      throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]))] : [];
  }
  createHttpProviders() {
    var t, e2;
    const s3 = {};
    return (e2 = (t = this.namespace) == null ? void 0 : t.accounts) == null || e2.forEach((n5) => {
      const a3 = Fe(n5);
      s3[`${a3.namespace}:${a3.reference}`] = this.createHttpProvider(n5);
    }), s3;
  }
  getHttpProvider(t) {
    const e2 = this.httpProviders[t];
    if (typeof e2 > "u")
      throw new Error(`JSON-RPC provider for ${t} not found`);
    return e2;
  }
  setHttpProvider(t, e2) {
    const s3 = this.createHttpProvider(t, e2);
    s3 && (this.httpProviders[t] = s3);
  }
  createHttpProvider(t, e2) {
    const s3 = e2 || u2(t, this.namespace, this.client.core.projectId);
    if (!s3)
      throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o3(new f6(s3, h5("disableProviderPing")));
  }
};
var di3 = Object.defineProperty;
var ui3 = Object.defineProperties;
var li3 = Object.getOwnPropertyDescriptors;
var Dt3 = Object.getOwnPropertySymbols;
var fi3 = Object.prototype.hasOwnProperty;
var mi3 = Object.prototype.propertyIsEnumerable;
var Z2 = (i4, t, e2) => t in i4 ? di3(i4, t, { enumerable: true, configurable: true, writable: true, value: e2 }) : i4[t] = e2;
var B3 = (i4, t) => {
  for (var e2 in t || (t = {}))
    fi3.call(t, e2) && Z2(i4, e2, t[e2]);
  if (Dt3)
    for (var e2 of Dt3(t))
      mi3.call(t, e2) && Z2(i4, e2, t[e2]);
  return i4;
};
var T4 = (i4, t) => ui3(i4, li3(t));
var f7 = (i4, t, e2) => Z2(i4, typeof t != "symbol" ? t + "" : t, e2);
var G4 = class _G {
  constructor(t) {
    f7(this, "client"), f7(this, "namespaces"), f7(this, "optionalNamespaces"), f7(this, "sessionProperties"), f7(this, "scopedProperties"), f7(this, "events", new import_events10.default()), f7(this, "rpcProviders", {}), f7(this, "session"), f7(this, "providerOpts"), f7(this, "logger"), f7(this, "uri"), f7(this, "disableProviderPing", false), this.providerOpts = t, this.logger = typeof (t == null ? void 0 : t.logger) < "u" && typeof (t == null ? void 0 : t.logger) != "string" ? t.logger : (0, import_pino2.default)(k2({ level: (t == null ? void 0 : t.logger) || rt3 })), this.disableProviderPing = (t == null ? void 0 : t.disableProviderPing) || false;
  }
  static async init(t) {
    const e2 = new _G(t);
    return await e2.initialize(), e2;
  }
  async request(t, e2, s3) {
    const [n5, a3] = this.validateChain(e2);
    if (!this.session)
      throw new Error("Please call connect() before request()");
    return await this.getProvider(n5).request({ request: B3({}, t), chainId: `${n5}:${a3}`, topic: this.session.topic, expiry: s3 });
  }
  sendAsync(t, e2, s3, n5) {
    const a3 = (/* @__PURE__ */ new Date()).getTime();
    this.request(t, s3, n5).then((r3) => e2(null, formatJsonRpcResult(a3, r3))).catch((r3) => e2(r3, void 0));
  }
  async enable() {
    if (!this.client)
      throw new Error("Sign Client not initialized");
    return this.session || await this.connect({ namespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties }), await this.requestAccounts();
  }
  async disconnect() {
    var t;
    if (!this.session)
      throw new Error("Please call connect() before enable()");
    await this.client.disconnect({ topic: (t = this.session) == null ? void 0 : t.topic, reason: Kt2("USER_DISCONNECTED") }), await this.cleanup();
  }
  async connect(t) {
    if (!this.client)
      throw new Error("Sign Client not initialized");
    if (this.setNamespaces(t), await this.cleanupPendingPairings(), !t.skipPairing)
      return await this.pair(t.pairingTopic);
  }
  async authenticate(t, e2) {
    if (!this.client)
      throw new Error("Sign Client not initialized");
    this.setNamespaces(t), await this.cleanupPendingPairings();
    const { uri: s3, response: n5 } = await this.client.authenticate(t, e2);
    s3 && (this.uri = s3, this.events.emit("display_uri", s3));
    const a3 = await n5();
    if (this.session = a3.session, this.session) {
      const r3 = bt3(this.session.namespaces);
      this.namespaces = M4(this.namespaces, r3), await this.persist("namespaces", this.namespaces), this.onConnect();
    }
    return a3;
  }
  on(t, e2) {
    this.events.on(t, e2);
  }
  once(t, e2) {
    this.events.once(t, e2);
  }
  removeListener(t, e2) {
    this.events.removeListener(t, e2);
  }
  off(t, e2) {
    this.events.off(t, e2);
  }
  get isWalletConnect() {
    return true;
  }
  async pair(t) {
    const { uri: e2, approval: s3 } = await this.client.connect({ pairingTopic: t, requiredNamespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties });
    e2 && (this.uri = e2, this.events.emit("display_uri", e2));
    const n5 = await s3();
    this.session = n5;
    const a3 = bt3(n5.namespaces);
    return this.namespaces = M4(this.namespaces, a3), await this.persist("namespaces", this.namespaces), await this.persist("optionalNamespaces", this.optionalNamespaces), this.onConnect(), this.session;
  }
  setDefaultChain(t, e2) {
    try {
      if (!this.session)
        return;
      const [s3, n5] = this.validateChain(t), a3 = this.getProvider(s3);
      a3.name === I4 ? a3.setDefaultChain(`${s3}:${n5}`, e2) : a3.setDefaultChain(n5, e2);
    } catch (s3) {
      if (!/Please call connect/.test(s3.message))
        throw s3;
    }
  }
  async cleanupPendingPairings(t = {}) {
    this.logger.info("Cleaning up inactive pairings...");
    const e2 = this.client.pairing.getAll();
    if (me2(e2)) {
      for (const s3 of e2)
        t.deletePairings ? this.client.core.expirer.set(s3.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(s3.topic);
      this.logger.info(`Inactive pairings cleared: ${e2.length}`);
    }
  }
  abortPairingAttempt() {
    this.logger.warn("abortPairingAttempt is deprecated. This is now a no-op.");
  }
  async checkStorage() {
    this.namespaces = await this.getFromStore("namespaces") || {}, this.optionalNamespaces = await this.getFromStore("optionalNamespaces") || {}, this.session && this.createProviders();
  }
  async initialize() {
    this.logger.trace("Initialized"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();
  }
  async createClient() {
    var t, e2;
    if (this.client = this.providerOpts.client || await Ee3.init({ core: this.providerOpts.core, logger: this.providerOpts.logger || rt3, relayUrl: this.providerOpts.relayUrl || Lt4, projectId: this.providerOpts.projectId, metadata: this.providerOpts.metadata, storageOptions: this.providerOpts.storageOptions, storage: this.providerOpts.storage, name: this.providerOpts.name, customStoragePrefix: this.providerOpts.customStoragePrefix, telemetryEnabled: this.providerOpts.telemetryEnabled }), this.providerOpts.session)
      try {
        this.session = this.client.session.get(this.providerOpts.session.topic);
      } catch (s3) {
        throw this.logger.error("Failed to get session", s3), new Error(`The provided session: ${(e2 = (t = this.providerOpts) == null ? void 0 : t.session) == null ? void 0 : e2.topic} doesn't exist in the Sign client`);
      }
    else {
      const s3 = this.client.session.getAll();
      this.session = s3[0];
    }
    this.logger.trace("SignClient Initialized");
  }
  createProviders() {
    if (!this.client)
      throw new Error("Sign Client not initialized");
    if (!this.session)
      throw new Error("Session not initialized. Please call connect() before enable()");
    const t = [...new Set(Object.keys(this.session.namespaces).map((e2) => Yo2(e2)))];
    X3("client", this.client), X3("events", this.events), X3("disableProviderPing", this.disableProviderPing), t.forEach((e2) => {
      if (!this.session)
        return;
      const s3 = Ie4(e2, this.session);
      if ((s3 == null ? void 0 : s3.length) === 0)
        return;
      const n5 = gt4(s3), a3 = M4(this.namespaces, this.optionalNamespaces), r3 = T4(B3({}, a3[e2]), { accounts: s3, chains: n5 });
      switch (e2) {
        case "eip155":
          this.rpcProviders[e2] = new Ue4({ namespace: r3 });
          break;
        case "algorand":
          this.rpcProviders[e2] = new We3({ namespace: r3 });
          break;
        case "solana":
          this.rpcProviders[e2] = new Me5({ namespace: r3 });
          break;
        case "cosmos":
          this.rpcProviders[e2] = new Je3({ namespace: r3 });
          break;
        case "polkadot":
          this.rpcProviders[e2] = new De4({ namespace: r3 });
          break;
        case "cip34":
          this.rpcProviders[e2] = new Xe4({ namespace: r3 });
          break;
        case "elrond":
          this.rpcProviders[e2] = new Ze4({ namespace: r3 });
          break;
        case "multiversx":
          this.rpcProviders[e2] = new ei3({ namespace: r3 });
          break;
        case "near":
          this.rpcProviders[e2] = new ri3({ namespace: r3 });
          break;
        case "tezos":
          this.rpcProviders[e2] = new ci3({ namespace: r3 });
          break;
        default:
          this.rpcProviders[I4] ? this.rpcProviders[I4].updateNamespace(r3) : this.rpcProviders[I4] = new pi3({ namespace: r3 });
      }
    });
  }
  registerEventListeners() {
    if (typeof this.client > "u")
      throw new Error("Sign Client is not initialized");
    this.client.on("session_ping", (t) => {
      var e2;
      const { topic: s3 } = t;
      s3 === ((e2 = this.session) == null ? void 0 : e2.topic) && this.events.emit("session_ping", t);
    }), this.client.on("session_event", (t) => {
      var e2;
      const { params: s3, topic: n5 } = t;
      if (n5 !== ((e2 = this.session) == null ? void 0 : e2.topic))
        return;
      const { event: a3 } = s3;
      if (a3.name === "accountsChanged") {
        const r3 = a3.data;
        r3 && me2(r3) && this.events.emit("accountsChanged", r3.map(yt3));
      } else if (a3.name === "chainChanged") {
        const r3 = s3.chainId, c7 = s3.event.data, o5 = Yo2(r3), p5 = V3(r3) !== V3(c7) ? `${o5}:${V3(c7)}` : r3;
        this.onChainChanged(p5);
      } else
        this.events.emit(a3.name, a3.data);
      this.events.emit("session_event", t);
    }), this.client.on("session_update", ({ topic: t, params: e2 }) => {
      var s3, n5;
      if (t !== ((s3 = this.session) == null ? void 0 : s3.topic))
        return;
      const { namespaces: a3 } = e2, r3 = (n5 = this.client) == null ? void 0 : n5.session.get(t);
      this.session = T4(B3({}, r3), { namespaces: a3 }), this.onSessionUpdate(), this.events.emit("session_update", { topic: t, params: e2 });
    }), this.client.on("session_delete", async (t) => {
      var e2;
      t.topic === ((e2 = this.session) == null ? void 0 : e2.topic) && (await this.cleanup(), this.events.emit("session_delete", t), this.events.emit("disconnect", T4(B3({}, Kt2("USER_DISCONNECTED")), { data: t.topic })));
    }), this.on(l7.DEFAULT_CHAIN_CHANGED, (t) => {
      this.onChainChanged(t, true);
    });
  }
  getProvider(t) {
    return this.rpcProviders[t] || this.rpcProviders[I4];
  }
  onSessionUpdate() {
    Object.keys(this.rpcProviders).forEach((t) => {
      var e2;
      this.getProvider(t).updateNamespace((e2 = this.session) == null ? void 0 : e2.namespaces[t]);
    });
  }
  setNamespaces(t) {
    const { namespaces: e2 = {}, optionalNamespaces: s3 = {}, sessionProperties: n5, scopedProperties: a3 } = t;
    this.optionalNamespaces = M4(e2, s3), this.sessionProperties = n5, this.scopedProperties = a3;
  }
  validateChain(t) {
    const [e2, s3] = (t == null ? void 0 : t.split(":")) || ["", ""];
    if (!this.namespaces || !Object.keys(this.namespaces).length)
      return [e2, s3];
    if (e2 && !Object.keys(this.namespaces || {}).map((r3) => Yo2(r3)).includes(e2))
      throw new Error(`Namespace '${e2}' is not configured. Please call connect() first with namespace config.`);
    if (e2 && s3)
      return [e2, s3];
    const n5 = Yo2(Object.keys(this.namespaces)[0]), a3 = this.rpcProviders[n5].getDefaultChain();
    return [n5, a3];
  }
  async requestAccounts() {
    const [t] = this.validateChain();
    return await this.getProvider(t).requestAccounts();
  }
  async onChainChanged(t, e2 = false) {
    if (!this.namespaces)
      return;
    const [s3, n5] = this.validateChain(t);
    if (!n5)
      return;
    this.updateNamespaceChain(s3, n5), this.events.emit("chainChanged", n5);
    const a3 = this.getProvider(s3).getDefaultChain();
    e2 || this.getProvider(s3).setDefaultChain(n5), this.emitAccountsChangedOnChainChange({ namespace: s3, previousChainId: a3, newChainId: t }), await this.persist("namespaces", this.namespaces);
  }
  emitAccountsChangedOnChainChange({ namespace: t, previousChainId: e2, newChainId: s3 }) {
    var n5, a3;
    try {
      if (e2 === s3)
        return;
      const r3 = (a3 = (n5 = this.session) == null ? void 0 : n5.namespaces[t]) == null ? void 0 : a3.accounts;
      if (!r3)
        return;
      const c7 = r3.filter((o5) => o5.includes(`${s3}:`)).map(yt3);
      if (!me2(c7))
        return;
      this.events.emit("accountsChanged", c7);
    } catch (r3) {
      this.logger.warn("Failed to emit accountsChanged on chain change", r3);
    }
  }
  updateNamespaceChain(t, e2) {
    if (!this.namespaces)
      return;
    const s3 = this.namespaces[t] ? t : `${t}:${e2}`, n5 = { chains: [], methods: [], events: [], defaultChain: e2 };
    this.namespaces[s3] ? this.namespaces[s3] && (this.namespaces[s3].defaultChain = e2) : this.namespaces[s3] = n5;
  }
  onConnect() {
    this.createProviders(), this.events.emit("connect", { session: this.session });
  }
  async cleanup() {
    this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, await this.deleteFromStore("namespaces"), await this.deleteFromStore("optionalNamespaces"), await this.deleteFromStore("sessionProperties"), this.session = void 0, await this.cleanupPendingPairings({ deletePairings: true }), await this.cleanupStorage();
  }
  async persist(t, e2) {
    var s3;
    const n5 = ((s3 = this.session) == null ? void 0 : s3.topic) || "";
    await this.client.core.storage.setItem(`${U3}/${t}${n5}`, e2);
  }
  async getFromStore(t) {
    var e2;
    const s3 = ((e2 = this.session) == null ? void 0 : e2.topic) || "";
    return await this.client.core.storage.getItem(`${U3}/${t}${s3}`);
  }
  async deleteFromStore(t) {
    var e2;
    const s3 = ((e2 = this.session) == null ? void 0 : e2.topic) || "";
    await this.client.core.storage.removeItem(`${U3}/${t}${s3}`);
  }
  async cleanupStorage() {
    var t;
    try {
      if (((t = this.client) == null ? void 0 : t.session.length) > 0)
        return;
      const e2 = await this.client.core.storage.getKeys();
      for (const s3 of e2)
        s3.startsWith(U3) && await this.client.core.storage.removeItem(s3);
    } catch (e2) {
      this.logger.warn("Failed to cleanup storage", e2);
    }
  }
};
var vi3 = G4;

// node_modules/@reown/appkit-common/dist/esm/src/utils/ConstantsUtil.js
var ConstantsUtil = {
  WC_NAME_SUFFIX: ".reown.id",
  WC_NAME_SUFFIX_LEGACY: ".wcn.id",
  BLOCKCHAIN_API_RPC_URL: "https://rpc.walletconnect.org",
  PULSE_API_URL: "https://pulse.walletconnect.org",
  W3M_API_URL: "https://api.web3modal.org",
  CONNECTOR_ID: {
    WALLET_CONNECT: "walletConnect",
    INJECTED: "injected",
    WALLET_STANDARD: "announced",
    COINBASE: "coinbaseWallet",
    COINBASE_SDK: "coinbaseWalletSDK",
    SAFE: "safe",
    LEDGER: "ledger",
    OKX: "okx",
    EIP6963: "eip6963",
    AUTH: "ID_AUTH"
  },
  CONNECTOR_NAMES: {
    AUTH: "Auth"
  },
  AUTH_CONNECTOR_SUPPORTED_CHAINS: ["eip155", "solana"],
  LIMITS: {
    PENDING_TRANSACTIONS: 99
  },
  CHAIN: {
    EVM: "eip155",
    SOLANA: "solana",
    POLKADOT: "polkadot",
    BITCOIN: "bip122"
  },
  CHAIN_NAME_MAP: {
    eip155: "EVM Networks",
    solana: "Solana",
    polkadot: "Polkadot",
    bip122: "Bitcoin",
    cosmos: "Cosmos",
    sui: "Sui",
    stacks: "Stacks"
  },
  ADAPTER_TYPES: {
    BITCOIN: "bitcoin",
    SOLANA: "solana",
    WAGMI: "wagmi",
    ETHERS: "ethers",
    ETHERS5: "ethers5"
  },
  USDT_CONTRACT_ADDRESSES: [
    "0xdac17f958d2ee523a2206206994597c13d831ec7",
    "0xc2132d05d31c914a87c6611c10748aeb04b58e8f",
    "0x9702230a8ea53601f5cd2dc00fdbc13d4df4a8c7",
    "0x919C1c267BC06a7039e03fcc2eF738525769109c",
    "0x48065fbBE25f71C9282ddf5e1cD6D6A887483D5e",
    "0x55d398326f99059fF775485246999027B3197955",
    "0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9"
  ],
  HTTP_STATUS_CODES: {
    SERVER_ERROR: 500,
    TOO_MANY_REQUESTS: 429,
    SERVICE_UNAVAILABLE: 503,
    FORBIDDEN: 403
  },
  UNSUPPORTED_NETWORK_NAME: "Unknown Network",
  SECURE_SITE_SDK_ORIGIN: (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_ORIGIN"] : void 0) || "https://secure.walletconnect.org",
  REMOTE_FEATURES_ALERTS: {
    MULTI_WALLET_NOT_ENABLED: {
      DEFAULT: {
        displayMessage: "Multi-Wallet Not Enabled",
        debugMessage: "Multi-wallet support is not enabled. Please enable it in your AppKit configuration at cloud.reown.com."
      },
      CONNECTIONS_HOOK: {
        displayMessage: "Multi-Wallet Not Enabled",
        debugMessage: "Multi-wallet support is not enabled. Please enable it in your AppKit configuration at cloud.reown.com to use the useAppKitConnections hook."
      },
      CONNECTION_HOOK: {
        displayMessage: "Multi-Wallet Not Enabled",
        debugMessage: "Multi-wallet support is not enabled. Please enable it in your AppKit configuration at cloud.reown.com to use the useAppKitConnection hook."
      }
    }
  }
};

// node_modules/@reown/appkit-common/dist/esm/src/utils/NetworkUtil.js
var NetworkUtil = {
  caipNetworkIdToNumber(caipnetworkId) {
    return caipnetworkId ? Number(caipnetworkId.split(":")[1]) : void 0;
  },
  parseEvmChainId(chainId) {
    return typeof chainId === "string" ? this.caipNetworkIdToNumber(chainId) : chainId;
  },
  getNetworksByNamespace(networks, namespace) {
    return (networks == null ? void 0 : networks.filter((network) => network.chainNamespace === namespace)) || [];
  },
  getFirstNetworkByNamespace(networks, namespace) {
    return this.getNetworksByNamespace(networks, namespace)[0];
  },
  getNetworkNameByCaipNetworkId(caipNetworks, caipNetworkId) {
    var _a2;
    if (!caipNetworkId) {
      return void 0;
    }
    const caipNetwork = caipNetworks.find((network) => network.caipNetworkId === caipNetworkId);
    if (caipNetwork) {
      return caipNetwork.name;
    }
    const [namespace] = caipNetworkId.split(":");
    return ((_a2 = ConstantsUtil.CHAIN_NAME_MAP) == null ? void 0 : _a2[namespace]) || void 0;
  }
};
var AVAILABLE_NAMESPACES = [
  "eip155",
  "solana",
  "polkadot",
  "bip122",
  "cosmos",
  "sui",
  "stacks"
];

// node_modules/@reown/appkit-common/dist/esm/src/utils/ParseUtil.js
var ParseUtil = {
  validateCaipAddress(address) {
    var _a2;
    if (((_a2 = address.split(":")) == null ? void 0 : _a2.length) !== 3) {
      throw new Error("Invalid CAIP Address");
    }
    return address;
  },
  parseCaipAddress(caipAddress) {
    const parts = caipAddress.split(":");
    if (parts.length !== 3) {
      throw new Error(`Invalid CAIP-10 address: ${caipAddress}`);
    }
    const [chainNamespace, chainId, address] = parts;
    if (!chainNamespace || !chainId || !address) {
      throw new Error(`Invalid CAIP-10 address: ${caipAddress}`);
    }
    return {
      chainNamespace,
      chainId,
      address
    };
  },
  parseCaipNetworkId(caipNetworkId) {
    const parts = caipNetworkId.split(":");
    if (parts.length !== 2) {
      throw new Error(`Invalid CAIP-2 network id: ${caipNetworkId}`);
    }
    const [chainNamespace, chainId] = parts;
    if (!chainNamespace || !chainId) {
      throw new Error(`Invalid CAIP-2 network id: ${caipNetworkId}`);
    }
    return {
      chainNamespace,
      chainId
    };
  }
};

// node_modules/@reown/appkit-common/dist/esm/src/utils/DateUtil.js
var import_dayjs = __toESM(require_dayjs_min(), 1);
var import_en = __toESM(require_en(), 1);
var import_relativeTime = __toESM(require_relativeTime(), 1);
var import_updateLocale = __toESM(require_updateLocale(), 1);
import_dayjs.default.extend(import_relativeTime.default);
import_dayjs.default.extend(import_updateLocale.default);
var localeObject = {
  ...import_en.default,
  name: "en-web3-modal",
  relativeTime: {
    future: "in %s",
    past: "%s ago",
    s: "%d sec",
    m: "1 min",
    mm: "%d min",
    h: "1 hr",
    hh: "%d hrs",
    d: "1 d",
    dd: "%d d",
    M: "1 mo",
    MM: "%d mo",
    y: "1 yr",
    yy: "%d yr"
  }
};
import_dayjs.default.locale("en-web3-modal", localeObject);

// node_modules/big.js/big.mjs
var DP = 20;
var RM = 1;
var MAX_DP = 1e6;
var MAX_POWER = 1e6;
var NE = -7;
var PE = 21;
var STRICT = false;
var NAME = "[big.js] ";
var INVALID = NAME + "Invalid ";
var INVALID_DP = INVALID + "decimal places";
var INVALID_RM = INVALID + "rounding mode";
var DIV_BY_ZERO = NAME + "Division by zero";
var P5 = {};
var UNDEFINED = void 0;
var NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
function _Big_() {
  function Big2(n5) {
    var x6 = this;
    if (!(x6 instanceof Big2))
      return n5 === UNDEFINED ? _Big_() : new Big2(n5);
    if (n5 instanceof Big2) {
      x6.s = n5.s;
      x6.e = n5.e;
      x6.c = n5.c.slice();
    } else {
      if (typeof n5 !== "string") {
        if (Big2.strict === true && typeof n5 !== "bigint") {
          throw TypeError(INVALID + "value");
        }
        n5 = n5 === 0 && 1 / n5 < 0 ? "-0" : String(n5);
      }
      parse(x6, n5);
    }
    x6.constructor = Big2;
  }
  Big2.prototype = P5;
  Big2.DP = DP;
  Big2.RM = RM;
  Big2.NE = NE;
  Big2.PE = PE;
  Big2.strict = STRICT;
  Big2.roundDown = 0;
  Big2.roundHalfUp = 1;
  Big2.roundHalfEven = 2;
  Big2.roundUp = 3;
  return Big2;
}
function parse(x6, n5) {
  var e2, i4, nl;
  if (!NUMERIC.test(n5)) {
    throw Error(INVALID + "number");
  }
  x6.s = n5.charAt(0) == "-" ? (n5 = n5.slice(1), -1) : 1;
  if ((e2 = n5.indexOf(".")) > -1)
    n5 = n5.replace(".", "");
  if ((i4 = n5.search(/e/i)) > 0) {
    if (e2 < 0)
      e2 = i4;
    e2 += +n5.slice(i4 + 1);
    n5 = n5.substring(0, i4);
  } else if (e2 < 0) {
    e2 = n5.length;
  }
  nl = n5.length;
  for (i4 = 0; i4 < nl && n5.charAt(i4) == "0"; )
    ++i4;
  if (i4 == nl) {
    x6.c = [x6.e = 0];
  } else {
    for (; nl > 0 && n5.charAt(--nl) == "0"; )
      ;
    x6.e = e2 - i4 - 1;
    x6.c = [];
    for (e2 = 0; i4 <= nl; )
      x6.c[e2++] = +n5.charAt(i4++);
  }
  return x6;
}
function round(x6, sd, rm, more) {
  var xc2 = x6.c;
  if (rm === UNDEFINED)
    rm = x6.constructor.RM;
  if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {
    throw Error(INVALID_RM);
  }
  if (sd < 1) {
    more = rm === 3 && (more || !!xc2[0]) || sd === 0 && (rm === 1 && xc2[0] >= 5 || rm === 2 && (xc2[0] > 5 || xc2[0] === 5 && (more || xc2[1] !== UNDEFINED)));
    xc2.length = 1;
    if (more) {
      x6.e = x6.e - sd + 1;
      xc2[0] = 1;
    } else {
      xc2[0] = x6.e = 0;
    }
  } else if (sd < xc2.length) {
    more = rm === 1 && xc2[sd] >= 5 || rm === 2 && (xc2[sd] > 5 || xc2[sd] === 5 && (more || xc2[sd + 1] !== UNDEFINED || xc2[sd - 1] & 1)) || rm === 3 && (more || !!xc2[0]);
    xc2.length = sd;
    if (more) {
      for (; ++xc2[--sd] > 9; ) {
        xc2[sd] = 0;
        if (sd === 0) {
          ++x6.e;
          xc2.unshift(1);
          break;
        }
      }
    }
    for (sd = xc2.length; !xc2[--sd]; )
      xc2.pop();
  }
  return x6;
}
function stringify6(x6, doExponential, isNonzero) {
  var e2 = x6.e, s3 = x6.c.join(""), n5 = s3.length;
  if (doExponential) {
    s3 = s3.charAt(0) + (n5 > 1 ? "." + s3.slice(1) : "") + (e2 < 0 ? "e" : "e+") + e2;
  } else if (e2 < 0) {
    for (; ++e2; )
      s3 = "0" + s3;
    s3 = "0." + s3;
  } else if (e2 > 0) {
    if (++e2 > n5) {
      for (e2 -= n5; e2--; )
        s3 += "0";
    } else if (e2 < n5) {
      s3 = s3.slice(0, e2) + "." + s3.slice(e2);
    }
  } else if (n5 > 1) {
    s3 = s3.charAt(0) + "." + s3.slice(1);
  }
  return x6.s < 0 && isNonzero ? "-" + s3 : s3;
}
P5.abs = function() {
  var x6 = new this.constructor(this);
  x6.s = 1;
  return x6;
};
P5.cmp = function(y6) {
  var isneg, x6 = this, xc2 = x6.c, yc2 = (y6 = new x6.constructor(y6)).c, i4 = x6.s, j5 = y6.s, k6 = x6.e, l8 = y6.e;
  if (!xc2[0] || !yc2[0])
    return !xc2[0] ? !yc2[0] ? 0 : -j5 : i4;
  if (i4 != j5)
    return i4;
  isneg = i4 < 0;
  if (k6 != l8)
    return k6 > l8 ^ isneg ? 1 : -1;
  j5 = (k6 = xc2.length) < (l8 = yc2.length) ? k6 : l8;
  for (i4 = -1; ++i4 < j5; ) {
    if (xc2[i4] != yc2[i4])
      return xc2[i4] > yc2[i4] ^ isneg ? 1 : -1;
  }
  return k6 == l8 ? 0 : k6 > l8 ^ isneg ? 1 : -1;
};
P5.div = function(y6) {
  var x6 = this, Big2 = x6.constructor, a3 = x6.c, b5 = (y6 = new Big2(y6)).c, k6 = x6.s == y6.s ? 1 : -1, dp = Big2.DP;
  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
    throw Error(INVALID_DP);
  }
  if (!b5[0]) {
    throw Error(DIV_BY_ZERO);
  }
  if (!a3[0]) {
    y6.s = k6;
    y6.c = [y6.e = 0];
    return y6;
  }
  var bl, bt4, n5, cmp, ri4, bz = b5.slice(), ai4 = bl = b5.length, al = a3.length, r3 = a3.slice(0, bl), rl = r3.length, q2 = y6, qc2 = q2.c = [], qi3 = 0, p5 = dp + (q2.e = x6.e - y6.e) + 1;
  q2.s = k6;
  k6 = p5 < 0 ? 0 : p5;
  bz.unshift(0);
  for (; rl++ < bl; )
    r3.push(0);
  do {
    for (n5 = 0; n5 < 10; n5++) {
      if (bl != (rl = r3.length)) {
        cmp = bl > rl ? 1 : -1;
      } else {
        for (ri4 = -1, cmp = 0; ++ri4 < bl; ) {
          if (b5[ri4] != r3[ri4]) {
            cmp = b5[ri4] > r3[ri4] ? 1 : -1;
            break;
          }
        }
      }
      if (cmp < 0) {
        for (bt4 = rl == bl ? b5 : bz; rl; ) {
          if (r3[--rl] < bt4[rl]) {
            ri4 = rl;
            for (; ri4 && !r3[--ri4]; )
              r3[ri4] = 9;
            --r3[ri4];
            r3[rl] += 10;
          }
          r3[rl] -= bt4[rl];
        }
        for (; !r3[0]; )
          r3.shift();
      } else {
        break;
      }
    }
    qc2[qi3++] = cmp ? n5 : ++n5;
    if (r3[0] && cmp)
      r3[rl] = a3[ai4] || 0;
    else
      r3 = [a3[ai4]];
  } while ((ai4++ < al || r3[0] !== UNDEFINED) && k6--);
  if (!qc2[0] && qi3 != 1) {
    qc2.shift();
    q2.e--;
    p5--;
  }
  if (qi3 > p5)
    round(q2, p5, Big2.RM, r3[0] !== UNDEFINED);
  return q2;
};
P5.eq = function(y6) {
  return this.cmp(y6) === 0;
};
P5.gt = function(y6) {
  return this.cmp(y6) > 0;
};
P5.gte = function(y6) {
  return this.cmp(y6) > -1;
};
P5.lt = function(y6) {
  return this.cmp(y6) < 0;
};
P5.lte = function(y6) {
  return this.cmp(y6) < 1;
};
P5.minus = P5.sub = function(y6) {
  var i4, j5, t, xlty, x6 = this, Big2 = x6.constructor, a3 = x6.s, b5 = (y6 = new Big2(y6)).s;
  if (a3 != b5) {
    y6.s = -b5;
    return x6.plus(y6);
  }
  var xc2 = x6.c.slice(), xe4 = x6.e, yc2 = y6.c, ye5 = y6.e;
  if (!xc2[0] || !yc2[0]) {
    if (yc2[0]) {
      y6.s = -b5;
    } else if (xc2[0]) {
      y6 = new Big2(x6);
    } else {
      y6.s = 1;
    }
    return y6;
  }
  if (a3 = xe4 - ye5) {
    if (xlty = a3 < 0) {
      a3 = -a3;
      t = xc2;
    } else {
      ye5 = xe4;
      t = yc2;
    }
    t.reverse();
    for (b5 = a3; b5--; )
      t.push(0);
    t.reverse();
  } else {
    j5 = ((xlty = xc2.length < yc2.length) ? xc2 : yc2).length;
    for (a3 = b5 = 0; b5 < j5; b5++) {
      if (xc2[b5] != yc2[b5]) {
        xlty = xc2[b5] < yc2[b5];
        break;
      }
    }
  }
  if (xlty) {
    t = xc2;
    xc2 = yc2;
    yc2 = t;
    y6.s = -y6.s;
  }
  if ((b5 = (j5 = yc2.length) - (i4 = xc2.length)) > 0)
    for (; b5--; )
      xc2[i4++] = 0;
  for (b5 = i4; j5 > a3; ) {
    if (xc2[--j5] < yc2[j5]) {
      for (i4 = j5; i4 && !xc2[--i4]; )
        xc2[i4] = 9;
      --xc2[i4];
      xc2[j5] += 10;
    }
    xc2[j5] -= yc2[j5];
  }
  for (; xc2[--b5] === 0; )
    xc2.pop();
  for (; xc2[0] === 0; ) {
    xc2.shift();
    --ye5;
  }
  if (!xc2[0]) {
    y6.s = 1;
    xc2 = [ye5 = 0];
  }
  y6.c = xc2;
  y6.e = ye5;
  return y6;
};
P5.mod = function(y6) {
  var ygtx, x6 = this, Big2 = x6.constructor, a3 = x6.s, b5 = (y6 = new Big2(y6)).s;
  if (!y6.c[0]) {
    throw Error(DIV_BY_ZERO);
  }
  x6.s = y6.s = 1;
  ygtx = y6.cmp(x6) == 1;
  x6.s = a3;
  y6.s = b5;
  if (ygtx)
    return new Big2(x6);
  a3 = Big2.DP;
  b5 = Big2.RM;
  Big2.DP = Big2.RM = 0;
  x6 = x6.div(y6);
  Big2.DP = a3;
  Big2.RM = b5;
  return this.minus(x6.times(y6));
};
P5.neg = function() {
  var x6 = new this.constructor(this);
  x6.s = -x6.s;
  return x6;
};
P5.plus = P5.add = function(y6) {
  var e2, k6, t, x6 = this, Big2 = x6.constructor;
  y6 = new Big2(y6);
  if (x6.s != y6.s) {
    y6.s = -y6.s;
    return x6.minus(y6);
  }
  var xe4 = x6.e, xc2 = x6.c, ye5 = y6.e, yc2 = y6.c;
  if (!xc2[0] || !yc2[0]) {
    if (!yc2[0]) {
      if (xc2[0]) {
        y6 = new Big2(x6);
      } else {
        y6.s = x6.s;
      }
    }
    return y6;
  }
  xc2 = xc2.slice();
  if (e2 = xe4 - ye5) {
    if (e2 > 0) {
      ye5 = xe4;
      t = yc2;
    } else {
      e2 = -e2;
      t = xc2;
    }
    t.reverse();
    for (; e2--; )
      t.push(0);
    t.reverse();
  }
  if (xc2.length - yc2.length < 0) {
    t = yc2;
    yc2 = xc2;
    xc2 = t;
  }
  e2 = yc2.length;
  for (k6 = 0; e2; xc2[e2] %= 10)
    k6 = (xc2[--e2] = xc2[e2] + yc2[e2] + k6) / 10 | 0;
  if (k6) {
    xc2.unshift(k6);
    ++ye5;
  }
  for (e2 = xc2.length; xc2[--e2] === 0; )
    xc2.pop();
  y6.c = xc2;
  y6.e = ye5;
  return y6;
};
P5.pow = function(n5) {
  var x6 = this, one = new x6.constructor("1"), y6 = one, isneg = n5 < 0;
  if (n5 !== ~~n5 || n5 < -MAX_POWER || n5 > MAX_POWER) {
    throw Error(INVALID + "exponent");
  }
  if (isneg)
    n5 = -n5;
  for (; ; ) {
    if (n5 & 1)
      y6 = y6.times(x6);
    n5 >>= 1;
    if (!n5)
      break;
    x6 = x6.times(x6);
  }
  return isneg ? one.div(y6) : y6;
};
P5.prec = function(sd, rm) {
  if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
    throw Error(INVALID + "precision");
  }
  return round(new this.constructor(this), sd, rm);
};
P5.round = function(dp, rm) {
  if (dp === UNDEFINED)
    dp = 0;
  else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {
    throw Error(INVALID_DP);
  }
  return round(new this.constructor(this), dp + this.e + 1, rm);
};
P5.sqrt = function() {
  var r3, c7, t, x6 = this, Big2 = x6.constructor, s3 = x6.s, e2 = x6.e, half = new Big2("0.5");
  if (!x6.c[0])
    return new Big2(x6);
  if (s3 < 0) {
    throw Error(NAME + "No square root");
  }
  s3 = Math.sqrt(+stringify6(x6, true, true));
  if (s3 === 0 || s3 === 1 / 0) {
    c7 = x6.c.join("");
    if (!(c7.length + e2 & 1))
      c7 += "0";
    s3 = Math.sqrt(c7);
    e2 = ((e2 + 1) / 2 | 0) - (e2 < 0 || e2 & 1);
    r3 = new Big2((s3 == 1 / 0 ? "5e" : (s3 = s3.toExponential()).slice(0, s3.indexOf("e") + 1)) + e2);
  } else {
    r3 = new Big2(s3 + "");
  }
  e2 = r3.e + (Big2.DP += 4);
  do {
    t = r3;
    r3 = half.times(t.plus(x6.div(t)));
  } while (t.c.slice(0, e2).join("") !== r3.c.slice(0, e2).join(""));
  return round(r3, (Big2.DP -= 4) + r3.e + 1, Big2.RM);
};
P5.times = P5.mul = function(y6) {
  var c7, x6 = this, Big2 = x6.constructor, xc2 = x6.c, yc2 = (y6 = new Big2(y6)).c, a3 = xc2.length, b5 = yc2.length, i4 = x6.e, j5 = y6.e;
  y6.s = x6.s == y6.s ? 1 : -1;
  if (!xc2[0] || !yc2[0]) {
    y6.c = [y6.e = 0];
    return y6;
  }
  y6.e = i4 + j5;
  if (a3 < b5) {
    c7 = xc2;
    xc2 = yc2;
    yc2 = c7;
    j5 = a3;
    a3 = b5;
    b5 = j5;
  }
  for (c7 = new Array(j5 = a3 + b5); j5--; )
    c7[j5] = 0;
  for (i4 = b5; i4--; ) {
    b5 = 0;
    for (j5 = a3 + i4; j5 > i4; ) {
      b5 = c7[j5] + yc2[i4] * xc2[j5 - i4 - 1] + b5;
      c7[j5--] = b5 % 10;
      b5 = b5 / 10 | 0;
    }
    c7[j5] = b5;
  }
  if (b5)
    ++y6.e;
  else
    c7.shift();
  for (i4 = c7.length; !c7[--i4]; )
    c7.pop();
  y6.c = c7;
  return y6;
};
P5.toExponential = function(dp, rm) {
  var x6 = this, n5 = x6.c[0];
  if (dp !== UNDEFINED) {
    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
      throw Error(INVALID_DP);
    }
    x6 = round(new x6.constructor(x6), ++dp, rm);
    for (; x6.c.length < dp; )
      x6.c.push(0);
  }
  return stringify6(x6, true, !!n5);
};
P5.toFixed = function(dp, rm) {
  var x6 = this, n5 = x6.c[0];
  if (dp !== UNDEFINED) {
    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
      throw Error(INVALID_DP);
    }
    x6 = round(new x6.constructor(x6), dp + x6.e + 1, rm);
    for (dp = dp + x6.e + 1; x6.c.length < dp; )
      x6.c.push(0);
  }
  return stringify6(x6, false, !!n5);
};
P5[Symbol.for("nodejs.util.inspect.custom")] = P5.toJSON = P5.toString = function() {
  var x6 = this, Big2 = x6.constructor;
  return stringify6(x6, x6.e <= Big2.NE || x6.e >= Big2.PE, !!x6.c[0]);
};
P5.toNumber = function() {
  var n5 = +stringify6(this, true, true);
  if (this.constructor.strict === true && !this.eq(n5.toString())) {
    throw Error(NAME + "Imprecise conversion");
  }
  return n5;
};
P5.toPrecision = function(sd, rm) {
  var x6 = this, Big2 = x6.constructor, n5 = x6.c[0];
  if (sd !== UNDEFINED) {
    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
      throw Error(INVALID + "precision");
    }
    x6 = round(new Big2(x6), sd, rm);
    for (; x6.c.length < sd; )
      x6.c.push(0);
  }
  return stringify6(x6, sd <= x6.e || x6.e <= Big2.NE || x6.e >= Big2.PE, !!n5);
};
P5.valueOf = function() {
  var x6 = this, Big2 = x6.constructor;
  if (Big2.strict === true) {
    throw Error(NAME + "valueOf disallowed");
  }
  return stringify6(x6, x6.e <= Big2.NE || x6.e >= Big2.PE, true);
};
var Big = _Big_();
var big_default = Big;

// node_modules/@reown/appkit-common/dist/esm/src/utils/NumberUtil.js
var NumberUtil = {
  bigNumber(value) {
    if (!value) {
      return new big_default(0);
    }
    return new big_default(value);
  },
  multiply(a3, b5) {
    if (a3 === void 0 || b5 === void 0) {
      return new big_default(0);
    }
    const aBigNumber = new big_default(a3);
    const bBigNumber = new big_default(b5);
    return aBigNumber.times(bBigNumber);
  },
  formatNumberToLocalString(value, decimals = 2) {
    if (value === void 0) {
      return "0.00";
    }
    if (typeof value === "number") {
      return value.toLocaleString("en-US", {
        maximumFractionDigits: decimals,
        minimumFractionDigits: decimals
      });
    }
    return parseFloat(value).toLocaleString("en-US", {
      maximumFractionDigits: decimals,
      minimumFractionDigits: decimals
    });
  },
  parseLocalStringToNumber(value) {
    if (value === void 0) {
      return 0;
    }
    return parseFloat(value.replace(/,/gu, ""));
  }
};

// node_modules/@reown/appkit-common/dist/esm/src/contracts/erc20.js
var erc20ABI = [
  {
    type: "function",
    name: "transfer",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "_to",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ]
  },
  {
    type: "function",
    name: "transferFrom",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "_from",
        type: "address"
      },
      {
        name: "_to",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ]
  }
];

// node_modules/@reown/appkit-common/dist/esm/src/contracts/swap.js
var swapABI = [
  {
    type: "function",
    name: "approve",
    stateMutability: "nonpayable",
    inputs: [
      { name: "spender", type: "address" },
      { name: "amount", type: "uint256" }
    ],
    outputs: [{ type: "bool" }]
  }
];

// node_modules/@reown/appkit-common/dist/esm/src/contracts/usdt.js
var usdtABI = [
  {
    type: "function",
    name: "transfer",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "recipient",
        type: "address"
      },
      {
        name: "amount",
        type: "uint256"
      }
    ],
    outputs: []
  },
  {
    type: "function",
    name: "transferFrom",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "sender",
        type: "address"
      },
      {
        name: "recipient",
        type: "address"
      },
      {
        name: "amount",
        type: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ]
  }
];

// node_modules/@reown/appkit-common/dist/esm/src/utils/ContractUtil.js
var ContractUtil = {
  getERC20Abi: (tokenAddress) => {
    if (ConstantsUtil.USDT_CONTRACT_ADDRESSES.includes(tokenAddress)) {
      return usdtABI;
    }
    return erc20ABI;
  },
  getSwapAbi: () => swapABI
};

// node_modules/@reown/appkit-common/dist/esm/src/utils/EmitterUtil.js
var Emitter = class _Emitter {
  on(eventName, callback) {
    var _a2;
    if (!_Emitter.eventListeners.has(eventName)) {
      _Emitter.eventListeners.set(eventName, /* @__PURE__ */ new Set());
    }
    (_a2 = _Emitter.eventListeners.get(eventName)) == null ? void 0 : _a2.add(callback);
  }
  off(eventName, callback) {
    const listeners = _Emitter.eventListeners.get(eventName);
    if (listeners) {
      listeners.delete(callback);
    }
  }
  emit(eventName, data) {
    const listeners = _Emitter.eventListeners.get(eventName);
    if (listeners) {
      listeners.forEach((callback) => callback(data));
    }
  }
  clear(eventName) {
    _Emitter.eventListeners.delete(eventName);
  }
  clearAll() {
    _Emitter.eventListeners.clear();
  }
};
Emitter.eventListeners = /* @__PURE__ */ new Map();

// node_modules/@reown/appkit-common/dist/esm/src/utils/SafeLocalStorage.js
var SafeLocalStorageKeys = {
  WALLET_ID: "@appkit/wallet_id",
  WALLET_NAME: "@appkit/wallet_name",
  SOLANA_WALLET: "@appkit/solana_wallet",
  SOLANA_CAIP_CHAIN: "@appkit/solana_caip_chain",
  ACTIVE_CAIP_NETWORK_ID: "@appkit/active_caip_network_id",
  CONNECTED_SOCIAL: "@appkit/connected_social",
  CONNECTED_SOCIAL_USERNAME: "@appkit-wallet/SOCIAL_USERNAME",
  RECENT_WALLETS: "@appkit/recent_wallets",
  DEEPLINK_CHOICE: "WALLETCONNECT_DEEPLINK_CHOICE",
  ACTIVE_NAMESPACE: "@appkit/active_namespace",
  CONNECTED_NAMESPACES: "@appkit/connected_namespaces",
  CONNECTION_STATUS: "@appkit/connection_status",
  SIWX_AUTH_TOKEN: "@appkit/siwx-auth-token",
  SIWX_NONCE_TOKEN: "@appkit/siwx-nonce-token",
  TELEGRAM_SOCIAL_PROVIDER: "@appkit/social_provider",
  NATIVE_BALANCE_CACHE: "@appkit/native_balance_cache",
  PORTFOLIO_CACHE: "@appkit/portfolio_cache",
  ENS_CACHE: "@appkit/ens_cache",
  IDENTITY_CACHE: "@appkit/identity_cache",
  PREFERRED_ACCOUNT_TYPES: "@appkit/preferred_account_types",
  CONNECTIONS: "@appkit/connections",
  DISCONNECTED_CONNECTOR_IDS: "@appkit/disconnected_connector_ids",
  HISTORY_TRANSACTIONS_CACHE: "@appkit/history_transactions_cache",
  TOKEN_PRICE_CACHE: "@appkit/token_price_cache",
  RECENT_EMAILS: "@appkit/recent_emails"
};
function getSafeConnectorIdKey(namespace) {
  if (!namespace) {
    throw new Error("Namespace is required for CONNECTED_CONNECTOR_ID");
  }
  return `@appkit/${namespace}:connected_connector_id`;
}
var SafeLocalStorage = {
  setItem(key, value) {
    if (isSafe() && value !== void 0) {
      localStorage.setItem(key, value);
    }
  },
  getItem(key) {
    if (isSafe()) {
      return localStorage.getItem(key) || void 0;
    }
    return void 0;
  },
  removeItem(key) {
    if (isSafe()) {
      localStorage.removeItem(key);
    }
  },
  clear() {
    if (isSafe()) {
      localStorage.clear();
    }
  }
};
function isSafe() {
  return typeof window !== "undefined" && typeof localStorage !== "undefined";
}

// node_modules/@reown/appkit-common/dist/esm/src/utils/ThemeUtil.js
function getW3mThemeVariables(themeVariables, themeType) {
  if (themeType === "light") {
    return {
      "--w3m-accent": (themeVariables == null ? void 0 : themeVariables["--w3m-accent"]) || "hsla(231, 100%, 70%, 1)",
      "--w3m-background": "#fff"
    };
  }
  return {
    "--w3m-accent": (themeVariables == null ? void 0 : themeVariables["--w3m-accent"]) || "hsla(230, 100%, 67%, 1)",
    "--w3m-background": "#121313"
  };
}

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/StorageUtil.js
var StorageUtil = {
  // Cache expiry in milliseconds
  cacheExpiry: {
    portfolio: 3e4,
    nativeBalance: 3e4,
    ens: 3e5,
    identity: 3e5,
    transactionsHistory: 15e3,
    tokenPrice: 15e3
  },
  isCacheExpired(timestamp, cacheExpiry) {
    return Date.now() - timestamp > cacheExpiry;
  },
  getActiveNetworkProps() {
    const namespace = StorageUtil.getActiveNamespace();
    const caipNetworkId = StorageUtil.getActiveCaipNetworkId();
    const stringChainId = caipNetworkId ? caipNetworkId.split(":")[1] : void 0;
    const chainId = stringChainId ? isNaN(Number(stringChainId)) ? stringChainId : Number(stringChainId) : void 0;
    return {
      namespace,
      caipNetworkId,
      chainId
    };
  },
  setWalletConnectDeepLink({ name: name2, href }) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.DEEPLINK_CHOICE, JSON.stringify({ href, name: name2 }));
    } catch {
      console.info("Unable to set WalletConnect deep link");
    }
  },
  getWalletConnectDeepLink() {
    try {
      const deepLink = SafeLocalStorage.getItem(SafeLocalStorageKeys.DEEPLINK_CHOICE);
      if (deepLink) {
        return JSON.parse(deepLink);
      }
    } catch {
      console.info("Unable to get WalletConnect deep link");
    }
    return void 0;
  },
  deleteWalletConnectDeepLink() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.DEEPLINK_CHOICE);
    } catch {
      console.info("Unable to delete WalletConnect deep link");
    }
  },
  setActiveNamespace(namespace) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ACTIVE_NAMESPACE, namespace);
    } catch {
      console.info("Unable to set active namespace");
    }
  },
  setActiveCaipNetworkId(caipNetworkId) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID, caipNetworkId);
      StorageUtil.setActiveNamespace(caipNetworkId.split(":")[0]);
    } catch {
      console.info("Unable to set active caip network id");
    }
  },
  getActiveCaipNetworkId() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID);
    } catch {
      console.info("Unable to get active caip network id");
      return void 0;
    }
  },
  deleteActiveCaipNetworkId() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID);
    } catch {
      console.info("Unable to delete active caip network id");
    }
  },
  deleteConnectedConnectorId(namespace) {
    try {
      const key = getSafeConnectorIdKey(namespace);
      SafeLocalStorage.removeItem(key);
    } catch {
      console.info("Unable to delete connected connector id");
    }
  },
  setAppKitRecent(wallet) {
    try {
      const recentWallets = StorageUtil.getRecentWallets();
      const exists = recentWallets.find((w5) => w5.id === wallet.id);
      if (!exists) {
        recentWallets.unshift(wallet);
        if (recentWallets.length > 2) {
          recentWallets.pop();
        }
        SafeLocalStorage.setItem(SafeLocalStorageKeys.RECENT_WALLETS, JSON.stringify(recentWallets));
      }
    } catch {
      console.info("Unable to set AppKit recent");
    }
  },
  getRecentWallets() {
    try {
      const recent = SafeLocalStorage.getItem(SafeLocalStorageKeys.RECENT_WALLETS);
      return recent ? JSON.parse(recent) : [];
    } catch {
      console.info("Unable to get AppKit recent");
    }
    return [];
  },
  setConnectedConnectorId(namespace, connectorId) {
    try {
      const key = getSafeConnectorIdKey(namespace);
      SafeLocalStorage.setItem(key, connectorId);
    } catch {
      console.info("Unable to set Connected Connector Id");
    }
  },
  getActiveNamespace() {
    try {
      const activeNamespace = SafeLocalStorage.getItem(SafeLocalStorageKeys.ACTIVE_NAMESPACE);
      return activeNamespace;
    } catch {
      console.info("Unable to get active namespace");
    }
    return void 0;
  },
  getConnectedConnectorId(namespace) {
    if (!namespace) {
      return void 0;
    }
    try {
      const key = getSafeConnectorIdKey(namespace);
      return SafeLocalStorage.getItem(key);
    } catch (e2) {
      console.info("Unable to get connected connector id in namespace", namespace);
    }
    return void 0;
  },
  setConnectedSocialProvider(socialProvider) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTED_SOCIAL, socialProvider);
    } catch {
      console.info("Unable to set connected social provider");
    }
  },
  getConnectedSocialProvider() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTED_SOCIAL);
    } catch {
      console.info("Unable to get connected social provider");
    }
    return void 0;
  },
  deleteConnectedSocialProvider() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.CONNECTED_SOCIAL);
    } catch {
      console.info("Unable to delete connected social provider");
    }
  },
  getConnectedSocialUsername() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTED_SOCIAL_USERNAME);
    } catch {
      console.info("Unable to get connected social username");
    }
    return void 0;
  },
  getStoredActiveCaipNetworkId() {
    var _a2;
    const storedCaipNetworkId = SafeLocalStorage.getItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID);
    const networkId = (_a2 = storedCaipNetworkId == null ? void 0 : storedCaipNetworkId.split(":")) == null ? void 0 : _a2[1];
    return networkId;
  },
  setConnectionStatus(status) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTION_STATUS, status);
    } catch {
      console.info("Unable to set connection status");
    }
  },
  getConnectionStatus() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTION_STATUS);
    } catch {
      return void 0;
    }
  },
  getConnectedNamespaces() {
    try {
      const namespaces = SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTED_NAMESPACES);
      if (!(namespaces == null ? void 0 : namespaces.length)) {
        return [];
      }
      return namespaces.split(",");
    } catch {
      return [];
    }
  },
  setConnectedNamespaces(namespaces) {
    try {
      const uniqueNamespaces = Array.from(new Set(namespaces));
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTED_NAMESPACES, uniqueNamespaces.join(","));
    } catch {
      console.info("Unable to set namespaces in storage");
    }
  },
  addConnectedNamespace(namespace) {
    try {
      const namespaces = StorageUtil.getConnectedNamespaces();
      if (!namespaces.includes(namespace)) {
        namespaces.push(namespace);
        StorageUtil.setConnectedNamespaces(namespaces);
      }
    } catch {
      console.info("Unable to add connected namespace");
    }
  },
  removeConnectedNamespace(namespace) {
    try {
      const namespaces = StorageUtil.getConnectedNamespaces();
      const index2 = namespaces.indexOf(namespace);
      if (index2 > -1) {
        namespaces.splice(index2, 1);
        StorageUtil.setConnectedNamespaces(namespaces);
      }
    } catch {
      console.info("Unable to remove connected namespace");
    }
  },
  getTelegramSocialProvider() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.TELEGRAM_SOCIAL_PROVIDER);
    } catch {
      console.info("Unable to get telegram social provider");
      return null;
    }
  },
  setTelegramSocialProvider(socialProvider) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.TELEGRAM_SOCIAL_PROVIDER, socialProvider);
    } catch {
      console.info("Unable to set telegram social provider");
    }
  },
  removeTelegramSocialProvider() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.TELEGRAM_SOCIAL_PROVIDER);
    } catch {
      console.info("Unable to remove telegram social provider");
    }
  },
  getBalanceCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.PORTFOLIO_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get balance cache");
    }
    return cache;
  },
  removeAddressFromBalanceCache(caipAddress) {
    try {
      const cache = StorageUtil.getBalanceCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.PORTFOLIO_CACHE, JSON.stringify({ ...cache, [caipAddress]: void 0 }));
    } catch {
      console.info("Unable to remove address from balance cache", caipAddress);
    }
  },
  getBalanceCacheForCaipAddress(caipAddress) {
    try {
      const cache = StorageUtil.getBalanceCache();
      const balanceCache = cache[caipAddress];
      if (balanceCache && !this.isCacheExpired(balanceCache.timestamp, this.cacheExpiry.portfolio)) {
        return balanceCache.balance;
      }
      StorageUtil.removeAddressFromBalanceCache(caipAddress);
    } catch {
      console.info("Unable to get balance cache for address", caipAddress);
    }
    return void 0;
  },
  updateBalanceCache(params) {
    try {
      const cache = StorageUtil.getBalanceCache();
      cache[params.caipAddress] = params;
      SafeLocalStorage.setItem(SafeLocalStorageKeys.PORTFOLIO_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update balance cache", params);
    }
  },
  getNativeBalanceCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get balance cache");
    }
    return cache;
  },
  removeAddressFromNativeBalanceCache(caipAddress) {
    try {
      const cache = StorageUtil.getBalanceCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE, JSON.stringify({ ...cache, [caipAddress]: void 0 }));
    } catch {
      console.info("Unable to remove address from balance cache", caipAddress);
    }
  },
  getNativeBalanceCacheForCaipAddress(caipAddress) {
    try {
      const cache = StorageUtil.getNativeBalanceCache();
      const nativeBalanceCache = cache[caipAddress];
      if (nativeBalanceCache && !this.isCacheExpired(nativeBalanceCache.timestamp, this.cacheExpiry.nativeBalance)) {
        return nativeBalanceCache;
      }
      console.info("Discarding cache for address", caipAddress);
      StorageUtil.removeAddressFromBalanceCache(caipAddress);
    } catch {
      console.info("Unable to get balance cache for address", caipAddress);
    }
    return void 0;
  },
  updateNativeBalanceCache(params) {
    try {
      const cache = StorageUtil.getNativeBalanceCache();
      cache[params.caipAddress] = params;
      SafeLocalStorage.setItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update balance cache", params);
    }
  },
  getEnsCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.ENS_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get ens name cache");
    }
    return cache;
  },
  getEnsFromCacheForAddress(address) {
    try {
      const cache = StorageUtil.getEnsCache();
      const ensCache = cache[address];
      if (ensCache && !this.isCacheExpired(ensCache.timestamp, this.cacheExpiry.ens)) {
        return ensCache.ens;
      }
      StorageUtil.removeEnsFromCache(address);
    } catch {
      console.info("Unable to get ens name from cache", address);
    }
    return void 0;
  },
  updateEnsCache(params) {
    try {
      const cache = StorageUtil.getEnsCache();
      cache[params.address] = params;
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ENS_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update ens name cache", params);
    }
  },
  removeEnsFromCache(address) {
    try {
      const cache = StorageUtil.getEnsCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ENS_CACHE, JSON.stringify({ ...cache, [address]: void 0 }));
    } catch {
      console.info("Unable to remove ens name from cache", address);
    }
  },
  getIdentityCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.IDENTITY_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get identity cache");
    }
    return cache;
  },
  getIdentityFromCacheForAddress(address) {
    try {
      const cache = StorageUtil.getIdentityCache();
      const identityCache = cache[address];
      if (identityCache && !this.isCacheExpired(identityCache.timestamp, this.cacheExpiry.identity)) {
        return identityCache.identity;
      }
      StorageUtil.removeIdentityFromCache(address);
    } catch {
      console.info("Unable to get identity from cache", address);
    }
    return void 0;
  },
  updateIdentityCache(params) {
    try {
      const cache = StorageUtil.getIdentityCache();
      cache[params.address] = {
        identity: params.identity,
        timestamp: params.timestamp
      };
      SafeLocalStorage.setItem(SafeLocalStorageKeys.IDENTITY_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update identity cache", params);
    }
  },
  removeIdentityFromCache(address) {
    try {
      const cache = StorageUtil.getIdentityCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.IDENTITY_CACHE, JSON.stringify({ ...cache, [address]: void 0 }));
    } catch {
      console.info("Unable to remove identity from cache", address);
    }
  },
  clearAddressCache() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.PORTFOLIO_CACHE);
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE);
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.ENS_CACHE);
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.IDENTITY_CACHE);
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.HISTORY_TRANSACTIONS_CACHE);
    } catch {
      console.info("Unable to clear address cache");
    }
  },
  setPreferredAccountTypes(accountTypes) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.PREFERRED_ACCOUNT_TYPES, JSON.stringify(accountTypes));
    } catch {
      console.info("Unable to set preferred account types", accountTypes);
    }
  },
  getPreferredAccountTypes() {
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.PREFERRED_ACCOUNT_TYPES);
      if (!result) {
        return {};
      }
      return JSON.parse(result);
    } catch {
      console.info("Unable to get preferred account types");
    }
    return {};
  },
  setConnections(connections, chainNamespace) {
    try {
      const existingConnections = StorageUtil.getConnections();
      const existing = existingConnections[chainNamespace] ?? [];
      const connectorConnectionMap = /* @__PURE__ */ new Map();
      for (const conn of existing) {
        connectorConnectionMap.set(conn.connectorId, { ...conn });
      }
      for (const conn of connections) {
        const existingConn = connectorConnectionMap.get(conn.connectorId);
        const isAuth = conn.connectorId === ConstantsUtil.CONNECTOR_ID.AUTH;
        if (existingConn && !isAuth) {
          const existingAddrs = new Set(existingConn.accounts.map((a3) => a3.address.toLowerCase()));
          const newAccounts = conn.accounts.filter((a3) => !existingAddrs.has(a3.address.toLowerCase()));
          existingConn.accounts.push(...newAccounts);
        } else {
          connectorConnectionMap.set(conn.connectorId, { ...conn });
        }
      }
      const dedupedConnections = {
        ...existingConnections,
        [chainNamespace]: Array.from(connectorConnectionMap.values())
      };
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTIONS, JSON.stringify(dedupedConnections));
    } catch (error) {
      console.error("Unable to sync connections to storage", error);
    }
  },
  getConnections() {
    try {
      const connectionsStorage = SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTIONS);
      if (!connectionsStorage) {
        return {};
      }
      return JSON.parse(connectionsStorage);
    } catch (error) {
      console.error("Unable to get connections from storage", error);
      return {};
    }
  },
  deleteAddressFromConnection({ connectorId, address, namespace }) {
    try {
      const connections = StorageUtil.getConnections();
      const namespaceConnections = connections[namespace] ?? [];
      const connectionMap = new Map(namespaceConnections.map((conn) => [conn.connectorId, conn]));
      const connector = connectionMap.get(connectorId);
      if (connector) {
        const updatedAccounts = connector.accounts.filter((acc) => acc.address.toLowerCase() !== address.toLowerCase());
        if (updatedAccounts.length === 0) {
          connectionMap.delete(connectorId);
        } else {
          connectionMap.set(connectorId, {
            ...connector,
            accounts: connector.accounts.filter((acc) => acc.address.toLowerCase() !== address.toLowerCase())
          });
        }
      }
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTIONS, JSON.stringify({
        ...connections,
        [namespace]: Array.from(connectionMap.values())
      }));
    } catch {
      console.error(`Unable to remove address "${address}" from connector "${connectorId}" in namespace "${namespace}"`);
    }
  },
  getDisconnectedConnectorIds() {
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.DISCONNECTED_CONNECTOR_IDS);
      if (!result) {
        return {};
      }
      return JSON.parse(result);
    } catch {
      console.info("Unable to get disconnected connector ids");
    }
    return {};
  },
  addDisconnectedConnectorId(connectorId, chainNamespace) {
    try {
      const currentDisconnectedConnectorIds = StorageUtil.getDisconnectedConnectorIds();
      const disconnectedConnectorIdsByNamespace = currentDisconnectedConnectorIds[chainNamespace] ?? [];
      disconnectedConnectorIdsByNamespace.push(connectorId);
      SafeLocalStorage.setItem(SafeLocalStorageKeys.DISCONNECTED_CONNECTOR_IDS, JSON.stringify({
        ...currentDisconnectedConnectorIds,
        [chainNamespace]: Array.from(new Set(disconnectedConnectorIdsByNamespace))
      }));
    } catch {
      console.error(`Unable to set disconnected connector id "${connectorId}" for namespace "${chainNamespace}"`);
    }
  },
  removeDisconnectedConnectorId(connectorId, chainNamespace) {
    try {
      const currentDisconnectedConnectorIds = StorageUtil.getDisconnectedConnectorIds();
      let disconnectedConnectorIdsByNamespace = currentDisconnectedConnectorIds[chainNamespace] ?? [];
      disconnectedConnectorIdsByNamespace = disconnectedConnectorIdsByNamespace.filter((id) => id.toLowerCase() !== connectorId.toLowerCase());
      SafeLocalStorage.setItem(SafeLocalStorageKeys.DISCONNECTED_CONNECTOR_IDS, JSON.stringify({
        ...currentDisconnectedConnectorIds,
        [chainNamespace]: Array.from(new Set(disconnectedConnectorIdsByNamespace))
      }));
    } catch {
      console.error(`Unable to remove disconnected connector id "${connectorId}" for namespace "${chainNamespace}"`);
    }
  },
  isConnectorDisconnected(connectorId, chainNamespace) {
    try {
      const currentDisconnectedConnectorIds = StorageUtil.getDisconnectedConnectorIds();
      const disconnectedConnectorIdsByNamespace = currentDisconnectedConnectorIds[chainNamespace] ?? [];
      return disconnectedConnectorIdsByNamespace.some((id) => id.toLowerCase() === connectorId.toLowerCase());
    } catch {
      console.info(`Unable to get disconnected connector id "${connectorId}" for namespace "${chainNamespace}"`);
    }
    return false;
  },
  getTransactionsCache() {
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.HISTORY_TRANSACTIONS_CACHE);
      return result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get transactions cache");
    }
    return {};
  },
  getTransactionsCacheForAddress({ address, chainId = "" }) {
    var _a2;
    try {
      const cache = StorageUtil.getTransactionsCache();
      const transactionsCache = (_a2 = cache[address]) == null ? void 0 : _a2[chainId];
      if (transactionsCache && !this.isCacheExpired(transactionsCache.timestamp, this.cacheExpiry.transactionsHistory)) {
        return transactionsCache.transactions;
      }
      StorageUtil.removeTransactionsCache({ address, chainId });
    } catch {
      console.info("Unable to get transactions cache");
    }
    return void 0;
  },
  updateTransactionsCache({ address, chainId = "", timestamp, transactions }) {
    try {
      const cache = StorageUtil.getTransactionsCache();
      cache[address] = {
        ...cache[address],
        [chainId]: {
          timestamp,
          transactions
        }
      };
      SafeLocalStorage.setItem(SafeLocalStorageKeys.HISTORY_TRANSACTIONS_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update transactions cache", {
        address,
        chainId,
        timestamp,
        transactions
      });
    }
  },
  removeTransactionsCache({ address, chainId }) {
    try {
      const cache = StorageUtil.getTransactionsCache();
      const addressCache = (cache == null ? void 0 : cache[address]) || {};
      const { [chainId]: _removed, ...updatedChainData } = addressCache;
      SafeLocalStorage.setItem(SafeLocalStorageKeys.HISTORY_TRANSACTIONS_CACHE, JSON.stringify({
        ...cache,
        [address]: updatedChainData
      }));
    } catch {
      console.info("Unable to remove transactions cache", { address, chainId });
    }
  },
  getTokenPriceCache() {
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.TOKEN_PRICE_CACHE);
      return result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get token price cache");
    }
    return {};
  },
  getTokenPriceCacheForAddresses(addresses) {
    try {
      const cache = StorageUtil.getTokenPriceCache();
      const tokenPriceCache = cache[addresses.join(",")];
      if (tokenPriceCache && !this.isCacheExpired(tokenPriceCache.timestamp, this.cacheExpiry.tokenPrice)) {
        return tokenPriceCache.tokenPrice;
      }
      StorageUtil.removeTokenPriceCache(addresses);
    } catch {
      console.info("Unable to get token price cache for addresses", addresses);
    }
    return void 0;
  },
  updateTokenPriceCache(params) {
    try {
      const cache = StorageUtil.getTokenPriceCache();
      cache[params.addresses.join(",")] = {
        timestamp: params.timestamp,
        tokenPrice: params.tokenPrice
      };
      SafeLocalStorage.setItem(SafeLocalStorageKeys.TOKEN_PRICE_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update token price cache", params);
    }
  },
  removeTokenPriceCache(addresses) {
    try {
      const cache = StorageUtil.getTokenPriceCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.TOKEN_PRICE_CACHE, JSON.stringify({ ...cache, [addresses.join(",")]: void 0 }));
    } catch {
      console.info("Unable to remove token price cache", addresses);
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConstantsUtil.js
var SECURE_SITE = (
  // eslint-disable-next-line @typescript-eslint/prefer-optional-chain
  (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_ORIGIN"] : void 0) || "https://secure.walletconnect.org"
);
var ONRAMP_PROVIDERS = [
  {
    label: "Meld.io",
    name: "meld",
    feeRange: "1-2%",
    url: "https://meldcrypto.com",
    supportedChains: ["eip155", "solana"]
  }
];
var MELD_PUBLIC_KEY = "WXETMuFUQmqqybHuRkSgxv:25B8LJHSfpG6LVjR2ytU5Cwh7Z4Sch2ocoU";
var ConstantsUtil2 = {
  FOUR_MINUTES_MS: 24e4,
  TEN_SEC_MS: 1e4,
  FIVE_SEC_MS: 5e3,
  THREE_SEC_MS: 3e3,
  ONE_SEC_MS: 1e3,
  SECURE_SITE,
  SECURE_SITE_DASHBOARD: `${SECURE_SITE}/dashboard`,
  SECURE_SITE_FAVICON: `${SECURE_SITE}/images/favicon.png`,
  RESTRICTED_TIMEZONES: [
    "ASIA/SHANGHAI",
    "ASIA/URUMQI",
    "ASIA/CHONGQING",
    "ASIA/HARBIN",
    "ASIA/KASHGAR",
    "ASIA/MACAU",
    "ASIA/HONG_KONG",
    "ASIA/MACAO",
    "ASIA/BEIJING",
    "ASIA/HARBIN"
  ],
  SWAP_SUGGESTED_TOKENS: [
    "ETH",
    "UNI",
    "1INCH",
    "AAVE",
    "SOL",
    "ADA",
    "AVAX",
    "DOT",
    "LINK",
    "NITRO",
    "GAIA",
    "MILK",
    "TRX",
    "NEAR",
    "GNO",
    "WBTC",
    "DAI",
    "WETH",
    "USDC",
    "USDT",
    "ARB",
    "BAL",
    "BICO",
    "CRV",
    "ENS",
    "MATIC",
    "OP"
  ],
  SWAP_POPULAR_TOKENS: [
    "ETH",
    "UNI",
    "1INCH",
    "AAVE",
    "SOL",
    "ADA",
    "AVAX",
    "DOT",
    "LINK",
    "NITRO",
    "GAIA",
    "MILK",
    "TRX",
    "NEAR",
    "GNO",
    "WBTC",
    "DAI",
    "WETH",
    "USDC",
    "USDT",
    "ARB",
    "BAL",
    "BICO",
    "CRV",
    "ENS",
    "MATIC",
    "OP",
    "METAL",
    "DAI",
    "CHAMP",
    "WOLF",
    "SALE",
    "BAL",
    "BUSD",
    "MUST",
    "BTCpx",
    "ROUTE",
    "HEX",
    "WELT",
    "amDAI",
    "VSQ",
    "VISION",
    "AURUM",
    "pSP",
    "SNX",
    "VC",
    "LINK",
    "CHP",
    "amUSDT",
    "SPHERE",
    "FOX",
    "GIDDY",
    "GFC",
    "OMEN",
    "OX_OLD",
    "DE",
    "WNT"
  ],
  BALANCE_SUPPORTED_CHAINS: [
    ConstantsUtil.CHAIN.EVM,
    ConstantsUtil.CHAIN.SOLANA
  ],
  SWAP_SUPPORTED_NETWORKS: [
    // Ethereum'
    "eip155:1",
    // Arbitrum One'
    "eip155:42161",
    // Optimism'
    "eip155:10",
    // ZKSync Era'
    "eip155:324",
    // Base'
    "eip155:8453",
    // BNB Smart Chain'
    "eip155:56",
    // Polygon'
    "eip155:137",
    // Gnosis'
    "eip155:100",
    // Avalanche'
    "eip155:43114",
    // Fantom'
    "eip155:250",
    // Klaytn'
    "eip155:8217",
    // Aurora
    "eip155:1313161554"
  ],
  NAMES_SUPPORTED_CHAIN_NAMESPACES: [ConstantsUtil.CHAIN.EVM],
  ONRAMP_SUPPORTED_CHAIN_NAMESPACES: [
    ConstantsUtil.CHAIN.EVM,
    ConstantsUtil.CHAIN.SOLANA
  ],
  ACTIVITY_ENABLED_CHAIN_NAMESPACES: [ConstantsUtil.CHAIN.EVM],
  NATIVE_TOKEN_ADDRESS: {
    eip155: "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
    solana: "So11111111111111111111111111111111111111111",
    polkadot: "0x",
    bip122: "0x",
    cosmos: "0x",
    sui: "0x",
    stacks: "0x"
  },
  CONVERT_SLIPPAGE_TOLERANCE: 1,
  CONNECT_LABELS: {
    MOBILE: "Open and continue in the wallet app",
    WEB: "Open and continue in the wallet app"
  },
  SEND_SUPPORTED_NAMESPACES: [
    ConstantsUtil.CHAIN.EVM,
    ConstantsUtil.CHAIN.SOLANA
  ],
  DEFAULT_REMOTE_FEATURES: {
    swaps: ["1inch"],
    onramp: ["meld"],
    email: true,
    socials: [
      "google",
      "x",
      "discord",
      "farcaster",
      "github",
      "apple",
      "facebook"
    ],
    activity: true,
    reownBranding: true,
    multiWallet: false,
    emailCapture: false
  },
  DEFAULT_REMOTE_FEATURES_DISABLED: {
    email: false,
    socials: false,
    swaps: false,
    onramp: false,
    activity: false,
    reownBranding: false,
    emailCapture: false
  },
  DEFAULT_FEATURES: {
    receive: true,
    send: true,
    emailShowWallets: true,
    connectorTypeOrder: [
      "walletConnect",
      "recent",
      "injected",
      "featured",
      "custom",
      "external",
      "recommended"
    ],
    analytics: true,
    allWallets: true,
    legalCheckbox: false,
    smartSessions: false,
    collapseWallets: false,
    walletFeaturesOrder: ["onramp", "swaps", "receive", "send"],
    connectMethodsOrder: void 0,
    pay: false
  },
  DEFAULT_SOCIALS: [
    "google",
    "x",
    "farcaster",
    "discord",
    "apple",
    "github",
    "facebook"
  ],
  DEFAULT_ACCOUNT_TYPES: {
    bip122: "payment",
    eip155: "smartAccount",
    polkadot: "eoa",
    solana: "eoa"
  },
  ADAPTER_TYPES: {
    UNIVERSAL: "universal",
    SOLANA: "solana",
    WAGMI: "wagmi",
    ETHERS: "ethers",
    ETHERS5: "ethers5",
    BITCOIN: "bitcoin"
  },
  SIWX_DEFAULTS: {
    signOutOnDisconnect: true
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js
var CoreHelperUtil = {
  isMobile() {
    var _a2;
    if (this.isClient()) {
      return Boolean((window == null ? void 0 : window.matchMedia) && typeof window.matchMedia === "function" && ((_a2 = window.matchMedia("(pointer:coarse)")) == null ? void 0 : _a2.matches) || /Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent));
    }
    return false;
  },
  checkCaipNetwork(network, networkName = "") {
    return network == null ? void 0 : network.caipNetworkId.toLocaleLowerCase().includes(networkName.toLowerCase());
  },
  isAndroid() {
    if (!this.isMobile()) {
      return false;
    }
    const ua2 = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return CoreHelperUtil.isMobile() && ua2.includes("android");
  },
  isIos() {
    if (!this.isMobile()) {
      return false;
    }
    const ua2 = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return ua2.includes("iphone") || ua2.includes("ipad");
  },
  isSafari() {
    if (!this.isClient()) {
      return false;
    }
    const ua2 = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return ua2.includes("safari");
  },
  isClient() {
    return typeof window !== "undefined";
  },
  isPairingExpired(expiry) {
    return expiry ? expiry - Date.now() <= ConstantsUtil2.TEN_SEC_MS : true;
  },
  isAllowedRetry(lastRetry, differenceMs = ConstantsUtil2.ONE_SEC_MS) {
    return Date.now() - lastRetry >= differenceMs;
  },
  copyToClopboard(text) {
    navigator.clipboard.writeText(text);
  },
  isIframe() {
    try {
      return (window == null ? void 0 : window.self) !== (window == null ? void 0 : window.top);
    } catch (e2) {
      return false;
    }
  },
  isSafeApp() {
    var _a2, _b;
    if (CoreHelperUtil.isClient() && window.self !== window.top) {
      try {
        const ancestor = (_b = (_a2 = window == null ? void 0 : window.location) == null ? void 0 : _a2.ancestorOrigins) == null ? void 0 : _b[0];
        const safeAppUrl = "https://app.safe.global";
        if (ancestor) {
          const ancestorUrl = new URL(ancestor);
          const safeUrl = new URL(safeAppUrl);
          return ancestorUrl.hostname === safeUrl.hostname;
        }
      } catch {
        return false;
      }
    }
    return false;
  },
  getPairingExpiry() {
    return Date.now() + ConstantsUtil2.FOUR_MINUTES_MS;
  },
  getNetworkId(caipAddress) {
    return caipAddress == null ? void 0 : caipAddress.split(":")[1];
  },
  getPlainAddress(caipAddress) {
    return caipAddress == null ? void 0 : caipAddress.split(":")[2];
  },
  async wait(milliseconds) {
    return new Promise((resolve) => {
      setTimeout(resolve, milliseconds);
    });
  },
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  debounce(func, timeout = 500) {
    let timer = void 0;
    return (...args) => {
      function next() {
        func(...args);
      }
      if (timer) {
        clearTimeout(timer);
      }
      timer = setTimeout(next, timeout);
    };
  },
  isHttpUrl(url) {
    return url.startsWith("http://") || url.startsWith("https://");
  },
  formatNativeUrl(appUrl, wcUri, universalLink = null) {
    if (CoreHelperUtil.isHttpUrl(appUrl)) {
      return this.formatUniversalUrl(appUrl, wcUri);
    }
    let safeAppUrl = appUrl;
    let safeUniversalLink = universalLink;
    if (!safeAppUrl.includes("://")) {
      safeAppUrl = appUrl.replaceAll("/", "").replaceAll(":", "");
      safeAppUrl = `${safeAppUrl}://`;
    }
    if (!safeAppUrl.endsWith("/")) {
      safeAppUrl = `${safeAppUrl}/`;
    }
    if (safeUniversalLink && !(safeUniversalLink == null ? void 0 : safeUniversalLink.endsWith("/"))) {
      safeUniversalLink = `${safeUniversalLink}/`;
    }
    if (this.isTelegram() && this.isAndroid()) {
      wcUri = encodeURIComponent(wcUri);
    }
    const encodedWcUrl = encodeURIComponent(wcUri);
    return {
      redirect: `${safeAppUrl}wc?uri=${encodedWcUrl}`,
      redirectUniversalLink: safeUniversalLink ? `${safeUniversalLink}wc?uri=${encodedWcUrl}` : void 0,
      href: safeAppUrl
    };
  },
  formatUniversalUrl(appUrl, wcUri) {
    if (!CoreHelperUtil.isHttpUrl(appUrl)) {
      return this.formatNativeUrl(appUrl, wcUri);
    }
    let safeAppUrl = appUrl;
    if (!safeAppUrl.endsWith("/")) {
      safeAppUrl = `${safeAppUrl}/`;
    }
    const encodedWcUrl = encodeURIComponent(wcUri);
    return {
      redirect: `${safeAppUrl}wc?uri=${encodedWcUrl}`,
      href: safeAppUrl
    };
  },
  getOpenTargetForPlatform(target) {
    if (target === "popupWindow") {
      return target;
    }
    if (this.isTelegram()) {
      if (StorageUtil.getTelegramSocialProvider()) {
        return "_top";
      }
      return "_blank";
    }
    return target;
  },
  openHref(href, target, features) {
    window == null ? void 0 : window.open(href, this.getOpenTargetForPlatform(target), features || "noreferrer noopener");
  },
  returnOpenHref(href, target, features) {
    return window == null ? void 0 : window.open(href, this.getOpenTargetForPlatform(target), features || "noreferrer noopener");
  },
  isTelegram() {
    return typeof window !== "undefined" && // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (Boolean(window.TelegramWebviewProxy) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Boolean(window.Telegram) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Boolean(window.TelegramWebviewProxyProto));
  },
  isPWA() {
    var _a2, _b;
    if (typeof window === "undefined") {
      return false;
    }
    const isStandaloneDisplayMode = (window == null ? void 0 : window.matchMedia) && typeof window.matchMedia === "function" ? (_a2 = window.matchMedia("(display-mode: standalone)")) == null ? void 0 : _a2.matches : false;
    const isIOSStandalone = (_b = window == null ? void 0 : window.navigator) == null ? void 0 : _b.standalone;
    return Boolean(isStandaloneDisplayMode || isIOSStandalone);
  },
  async preloadImage(src2) {
    const imagePromise = new Promise((resolve, reject) => {
      const image = new Image();
      image.onload = resolve;
      image.onerror = reject;
      image.crossOrigin = "anonymous";
      image.src = src2;
    });
    return Promise.race([imagePromise, CoreHelperUtil.wait(2e3)]);
  },
  formatBalance(balance, symbol) {
    let formattedBalance = "0.000";
    if (typeof balance === "string") {
      const number = Number(balance);
      if (number) {
        const formattedValue = Math.floor(number * 1e3) / 1e3;
        if (formattedValue) {
          formattedBalance = formattedValue.toString();
        }
      }
    }
    return `${formattedBalance}${symbol ? ` ${symbol}` : ""}`;
  },
  formatBalance2(balance, symbol) {
    var _a2;
    let formattedBalance = void 0;
    if (balance === "0") {
      formattedBalance = "0";
    } else if (typeof balance === "string") {
      const number = Number(balance);
      if (number) {
        formattedBalance = (_a2 = number.toString().match(/^-?\d+(?:\.\d{0,3})?/u)) == null ? void 0 : _a2[0];
      }
    }
    return {
      value: formattedBalance ?? "0",
      rest: formattedBalance === "0" ? "000" : "",
      symbol
    };
  },
  getApiUrl() {
    return ConstantsUtil.W3M_API_URL;
  },
  getBlockchainApiUrl() {
    return ConstantsUtil.BLOCKCHAIN_API_RPC_URL;
  },
  getAnalyticsUrl() {
    return ConstantsUtil.PULSE_API_URL;
  },
  getUUID() {
    if (crypto == null ? void 0 : crypto.randomUUID) {
      return crypto.randomUUID();
    }
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (c7) => {
      const r3 = Math.random() * 16 | 0;
      const v6 = c7 === "x" ? r3 : r3 & 3 | 8;
      return v6.toString(16);
    });
  },
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  parseError(error) {
    var _a2, _b;
    if (typeof error === "string") {
      return error;
    } else if (typeof ((_b = (_a2 = error == null ? void 0 : error.issues) == null ? void 0 : _a2[0]) == null ? void 0 : _b.message) === "string") {
      return error.issues[0].message;
    } else if (error instanceof Error) {
      return error.message;
    }
    return "Unknown error";
  },
  sortRequestedNetworks(approvedIds, requestedNetworks = []) {
    const approvedIndexMap = {};
    if (requestedNetworks && approvedIds) {
      approvedIds.forEach((id, index2) => {
        approvedIndexMap[id] = index2;
      });
      requestedNetworks.sort((a3, b5) => {
        const indexA = approvedIndexMap[a3.id];
        const indexB = approvedIndexMap[b5.id];
        if (indexA !== void 0 && indexB !== void 0) {
          return indexA - indexB;
        } else if (indexA !== void 0) {
          return -1;
        } else if (indexB !== void 0) {
          return 1;
        }
        return 0;
      });
    }
    return requestedNetworks;
  },
  calculateBalance(array) {
    let sum = 0;
    for (const item of array) {
      sum += item.value ?? 0;
    }
    return sum;
  },
  formatTokenBalance(number) {
    const roundedNumber = number.toFixed(2);
    const [dollars, pennies] = roundedNumber.split(".");
    return { dollars, pennies };
  },
  isAddress(address, chain2 = "eip155") {
    switch (chain2) {
      case "eip155":
        if (!/^(?:0x)?[0-9a-f]{40}$/iu.test(address)) {
          return false;
        } else if (/^(?:0x)?[0-9a-f]{40}$/iu.test(address) || /^(?:0x)?[0-9A-F]{40}$/iu.test(address)) {
          return true;
        }
        return false;
      case "solana":
        return /[1-9A-HJ-NP-Za-km-z]{32,44}$/iu.test(address);
      default:
        return false;
    }
  },
  uniqueBy(arr, key) {
    const set2 = /* @__PURE__ */ new Set();
    return arr.filter((item) => {
      const keyValue = item[key];
      if (set2.has(keyValue)) {
        return false;
      }
      set2.add(keyValue);
      return true;
    });
  },
  generateSdkVersion(adapters, platform, version2) {
    const hasNoAdapters = adapters.length === 0;
    const adapterNames = hasNoAdapters ? ConstantsUtil2.ADAPTER_TYPES.UNIVERSAL : adapters.map((adapter) => adapter.adapterType).join(",");
    return `${platform}-${adapterNames}-${version2}`;
  },
  // eslint-disable-next-line max-params
  createAccount(namespace, address, type, publicKey, path) {
    return {
      namespace,
      address,
      type,
      publicKey,
      path
    };
  },
  isCaipAddress(address) {
    if (typeof address !== "string") {
      return false;
    }
    const sections = address.split(":");
    const namespace = sections[0];
    return sections.filter(Boolean).length === 3 && namespace in ConstantsUtil.CHAIN_NAME_MAP;
  },
  getAccount(account) {
    if (!account) {
      return {
        address: void 0,
        chainId: void 0
      };
    }
    if (typeof account === "string") {
      return {
        address: account,
        chainId: void 0
      };
    }
    return {
      address: account.address,
      chainId: account.chainId
    };
  },
  isMac() {
    const ua2 = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return ua2.includes("macintosh") && !ua2.includes("safari");
  },
  formatTelegramSocialLoginUrl(url) {
    const valueToInject = `--${encodeURIComponent(window == null ? void 0 : window.location.href)}`;
    const paramToInject = "state=";
    const parsedUrl = new URL(url);
    if (parsedUrl.host === "auth.magic.link") {
      const providerParam = "provider_authorization_url=";
      const providerUrl = url.substring(url.indexOf(providerParam) + providerParam.length);
      const resultUrl = this.injectIntoUrl(decodeURIComponent(providerUrl), paramToInject, valueToInject);
      return url.replace(providerUrl, encodeURIComponent(resultUrl));
    }
    return this.injectIntoUrl(url, paramToInject, valueToInject);
  },
  injectIntoUrl(url, key, appendString) {
    const keyIndex = url.indexOf(key);
    if (keyIndex === -1) {
      throw new Error(`${key} parameter not found in the URL: ${url}`);
    }
    const keyEndIndex = url.indexOf("&", keyIndex);
    const keyLength = key.length;
    const keyParamEnd = keyEndIndex !== -1 ? keyEndIndex : url.length;
    const beforeKeyValue = url.substring(0, keyIndex + keyLength);
    const currentKeyValue = url.substring(keyIndex + keyLength, keyParamEnd);
    const afterKeyValue = url.substring(keyEndIndex);
    const newKeyValue = currentKeyValue + appendString;
    const newUrl = beforeKeyValue + newKeyValue + afterKeyValue;
    return newUrl;
  }
};

// node_modules/proxy-compare/dist/index.js
var TRACK_MEMO_SYMBOL = Symbol();
var GET_ORIGINAL_SYMBOL = Symbol();
var getProto = Object.getPrototypeOf;
var objectsToTrack = /* @__PURE__ */ new WeakMap();
var isObjectToTrack = (obj) => obj && (objectsToTrack.has(obj) ? objectsToTrack.get(obj) : getProto(obj) === Object.prototype || getProto(obj) === Array.prototype);
var getUntracked = (obj) => {
  if (isObjectToTrack(obj)) {
    return obj[GET_ORIGINAL_SYMBOL] || null;
  }
  return null;
};
var markToTrack = (obj, mark = true) => {
  objectsToTrack.set(obj, mark);
};

// node_modules/valtio/esm/vanilla.mjs
var isObject = (x6) => typeof x6 === "object" && x6 !== null;
var canProxyDefault = (x6) => isObject(x6) && !refSet.has(x6) && (Array.isArray(x6) || !(Symbol.iterator in x6)) && !(x6 instanceof WeakMap) && !(x6 instanceof WeakSet) && !(x6 instanceof Error) && !(x6 instanceof Number) && !(x6 instanceof Date) && !(x6 instanceof String) && !(x6 instanceof RegExp) && !(x6 instanceof ArrayBuffer) && !(x6 instanceof Promise);
var createSnapshotDefault = (target, version2) => {
  const cache = snapCache.get(target);
  if ((cache == null ? void 0 : cache[0]) === version2) {
    return cache[1];
  }
  const snap = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));
  markToTrack(snap, true);
  snapCache.set(target, [version2, snap]);
  Reflect.ownKeys(target).forEach((key) => {
    if (Object.getOwnPropertyDescriptor(snap, key)) {
      return;
    }
    const value = Reflect.get(target, key);
    const { enumerable } = Reflect.getOwnPropertyDescriptor(
      target,
      key
    );
    const desc = {
      value,
      enumerable,
      // This is intentional to avoid copying with proxy-compare.
      // It's still non-writable, so it avoids assigning a value.
      configurable: true
    };
    if (refSet.has(value)) {
      markToTrack(value, false);
    } else if (proxyStateMap.has(value)) {
      const [target2, ensureVersion] = proxyStateMap.get(
        value
      );
      desc.value = createSnapshotDefault(target2, ensureVersion());
    }
    Object.defineProperty(snap, key, desc);
  });
  return Object.preventExtensions(snap);
};
var createHandlerDefault = (isInitializing, addPropListener, removePropListener, notifyUpdate) => ({
  deleteProperty(target, prop) {
    const prevValue = Reflect.get(target, prop);
    removePropListener(prop);
    const deleted = Reflect.deleteProperty(target, prop);
    if (deleted) {
      notifyUpdate(["delete", [prop], prevValue]);
    }
    return deleted;
  },
  set(target, prop, value, receiver) {
    const hasPrevValue = !isInitializing() && Reflect.has(target, prop);
    const prevValue = Reflect.get(target, prop, receiver);
    if (hasPrevValue && (objectIs(prevValue, value) || proxyCache.has(value) && objectIs(prevValue, proxyCache.get(value)))) {
      return true;
    }
    removePropListener(prop);
    if (isObject(value)) {
      value = getUntracked(value) || value;
    }
    const nextValue = !proxyStateMap.has(value) && canProxy(value) ? proxy(value) : value;
    addPropListener(prop, nextValue);
    Reflect.set(target, prop, nextValue, receiver);
    notifyUpdate(["set", [prop], value, prevValue]);
    return true;
  }
});
var proxyStateMap = /* @__PURE__ */ new WeakMap();
var refSet = /* @__PURE__ */ new WeakSet();
var snapCache = /* @__PURE__ */ new WeakMap();
var versionHolder = [1, 1];
var proxyCache = /* @__PURE__ */ new WeakMap();
var objectIs = Object.is;
var newProxy = (target, handler) => new Proxy(target, handler);
var canProxy = canProxyDefault;
var createSnapshot = createSnapshotDefault;
var createHandler = createHandlerDefault;
function proxy(baseObject = {}) {
  if (!isObject(baseObject)) {
    throw new Error("object required");
  }
  const found = proxyCache.get(baseObject);
  if (found) {
    return found;
  }
  let version2 = versionHolder[0];
  const listeners = /* @__PURE__ */ new Set();
  const notifyUpdate = (op, nextVersion = ++versionHolder[0]) => {
    if (version2 !== nextVersion) {
      version2 = nextVersion;
      listeners.forEach((listener) => listener(op, nextVersion));
    }
  };
  let checkVersion = versionHolder[1];
  const ensureVersion = (nextCheckVersion = ++versionHolder[1]) => {
    if (checkVersion !== nextCheckVersion && !listeners.size) {
      checkVersion = nextCheckVersion;
      propProxyStates.forEach(([propProxyState]) => {
        const propVersion = propProxyState[1](nextCheckVersion);
        if (propVersion > version2) {
          version2 = propVersion;
        }
      });
    }
    return version2;
  };
  const createPropListener = (prop) => (op, nextVersion) => {
    const newOp = [...op];
    newOp[1] = [prop, ...newOp[1]];
    notifyUpdate(newOp, nextVersion);
  };
  const propProxyStates = /* @__PURE__ */ new Map();
  const addPropListener = (prop, propValue) => {
    const propProxyState = !refSet.has(propValue) && proxyStateMap.get(propValue);
    if (propProxyState) {
      if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && propProxyStates.has(prop)) {
        throw new Error("prop listener already exists");
      }
      if (listeners.size) {
        const remove = propProxyState[2](createPropListener(prop));
        propProxyStates.set(prop, [propProxyState, remove]);
      } else {
        propProxyStates.set(prop, [propProxyState]);
      }
    }
  };
  const removePropListener = (prop) => {
    var _a2;
    const entry = propProxyStates.get(prop);
    if (entry) {
      propProxyStates.delete(prop);
      (_a2 = entry[1]) == null ? void 0 : _a2.call(entry);
    }
  };
  const addListener = (listener) => {
    listeners.add(listener);
    if (listeners.size === 1) {
      propProxyStates.forEach(([propProxyState, prevRemove], prop) => {
        if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && prevRemove) {
          throw new Error("remove already exists");
        }
        const remove = propProxyState[2](createPropListener(prop));
        propProxyStates.set(prop, [propProxyState, remove]);
      });
    }
    const removeListener = () => {
      listeners.delete(listener);
      if (listeners.size === 0) {
        propProxyStates.forEach(([propProxyState, remove], prop) => {
          if (remove) {
            remove();
            propProxyStates.set(prop, [propProxyState]);
          }
        });
      }
    };
    return removeListener;
  };
  let initializing = true;
  const handler = createHandler(
    () => initializing,
    addPropListener,
    removePropListener,
    notifyUpdate
  );
  const proxyObject = newProxy(baseObject, handler);
  proxyCache.set(baseObject, proxyObject);
  const proxyState = [baseObject, ensureVersion, addListener];
  proxyStateMap.set(proxyObject, proxyState);
  Reflect.ownKeys(baseObject).forEach((key) => {
    const desc = Object.getOwnPropertyDescriptor(
      baseObject,
      key
    );
    if ("value" in desc && desc.writable) {
      proxyObject[key] = baseObject[key];
    }
  });
  initializing = false;
  return proxyObject;
}
function subscribe(proxyObject, callback, notifyInSync) {
  const proxyState = proxyStateMap.get(proxyObject);
  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && !proxyState) {
    console.warn("Please use proxy object");
  }
  let promise;
  const ops = [];
  const addListener = proxyState[2];
  let isListenerActive = false;
  const listener = (op) => {
    ops.push(op);
    if (notifyInSync) {
      callback(ops.splice(0));
      return;
    }
    if (!promise) {
      promise = Promise.resolve().then(() => {
        promise = void 0;
        if (isListenerActive) {
          callback(ops.splice(0));
        }
      });
    }
  };
  const removeListener = addListener(listener);
  isListenerActive = true;
  return () => {
    isListenerActive = false;
    removeListener();
  };
}
function snapshot2(proxyObject) {
  const proxyState = proxyStateMap.get(proxyObject);
  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && !proxyState) {
    console.warn("Please use proxy object");
  }
  const [target, ensureVersion] = proxyState;
  return createSnapshot(target, ensureVersion());
}
function ref(obj) {
  refSet.add(obj);
  return obj;
}
function unstable_getInternalStates() {
  return {
    proxyStateMap,
    refSet,
    snapCache,
    versionHolder,
    proxyCache
  };
}

// node_modules/valtio/esm/vanilla/utils.mjs
function subscribeKey(proxyObject, key, callback, notifyInSync) {
  let prevValue = proxyObject[key];
  return subscribe(
    proxyObject,
    () => {
      const nextValue = proxyObject[key];
      if (!Object.is(prevValue, nextValue)) {
        callback(prevValue = nextValue);
      }
    },
    notifyInSync
  );
}
var DEVTOOLS = Symbol();
var { proxyStateMap: proxyStateMap$1, snapCache: snapCache$1 } = unstable_getInternalStates();
var isProxy$1 = (x6) => proxyStateMap$1.has(x6);
function proxyMap(entries2) {
  const initialData = [];
  let initialIndex = 0;
  const indexMap = /* @__PURE__ */ new Map();
  const snapMapCache = /* @__PURE__ */ new WeakMap();
  const registerSnapMap = () => {
    const cache = snapCache$1.get(vObject);
    const latestSnap = cache == null ? void 0 : cache[1];
    if (latestSnap && !snapMapCache.has(latestSnap)) {
      const clonedMap = new Map(indexMap);
      snapMapCache.set(latestSnap, clonedMap);
    }
  };
  const getMapForThis = (x6) => snapMapCache.get(x6) || indexMap;
  if (entries2) {
    if (typeof entries2[Symbol.iterator] !== "function") {
      throw new TypeError(
        "proxyMap:\n	initial state must be iterable\n		tip: structure should be [[key, value]]"
      );
    }
    for (const [key, value] of entries2) {
      indexMap.set(key, initialIndex);
      initialData[initialIndex++] = value;
    }
  }
  const vObject = {
    data: initialData,
    index: initialIndex,
    epoch: 0,
    get size() {
      if (!isProxy$1(this)) {
        registerSnapMap();
      }
      const map = getMapForThis(this);
      return map.size;
    },
    get(key) {
      const map = getMapForThis(this);
      const index2 = map.get(key);
      if (index2 === void 0) {
        this.epoch;
        return void 0;
      }
      return this.data[index2];
    },
    has(key) {
      const map = getMapForThis(this);
      this.epoch;
      return map.has(key);
    },
    set(key, value) {
      if (!isProxy$1(this)) {
        throw new Error("Cannot perform mutations on a snapshot");
      }
      const index2 = indexMap.get(key);
      if (index2 === void 0) {
        indexMap.set(key, this.index);
        this.data[this.index++] = value;
      } else {
        this.data[index2] = value;
      }
      this.epoch++;
      return this;
    },
    delete(key) {
      if (!isProxy$1(this)) {
        throw new Error("Cannot perform mutations on a snapshot");
      }
      const index2 = indexMap.get(key);
      if (index2 === void 0) {
        return false;
      }
      delete this.data[index2];
      indexMap.delete(key);
      this.epoch++;
      return true;
    },
    clear() {
      if (!isProxy$1(this)) {
        throw new Error("Cannot perform mutations on a snapshot");
      }
      this.data.length = 0;
      this.index = 0;
      this.epoch++;
      indexMap.clear();
    },
    forEach(cb) {
      this.epoch;
      const map = getMapForThis(this);
      map.forEach((index2, key) => {
        cb(this.data[index2], key, this);
      });
    },
    *entries() {
      this.epoch;
      const map = getMapForThis(this);
      for (const [key, index2] of map) {
        yield [key, this.data[index2]];
      }
    },
    *keys() {
      this.epoch;
      const map = getMapForThis(this);
      for (const key of map.keys()) {
        yield key;
      }
    },
    *values() {
      this.epoch;
      const map = getMapForThis(this);
      for (const index2 of map.values()) {
        yield this.data[index2];
      }
    },
    [Symbol.iterator]() {
      return this.entries();
    },
    get [Symbol.toStringTag]() {
      return "Map";
    },
    toJSON() {
      return new Map(this.entries());
    }
  };
  const proxiedObject = proxy(vObject);
  Object.defineProperties(proxiedObject, {
    size: { enumerable: false },
    index: { enumerable: false },
    epoch: { enumerable: false },
    data: { enumerable: false },
    toJSON: { enumerable: false }
  });
  Object.seal(proxiedObject);
  return proxiedObject;
}
var { proxyStateMap: proxyStateMap2, snapCache: snapCache2 } = unstable_getInternalStates();

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/OptionsUtil.js
var OptionsUtil = {
  getFeatureValue(key, features) {
    const optionValue = features == null ? void 0 : features[key];
    if (optionValue === void 0) {
      return ConstantsUtil2.DEFAULT_FEATURES[key];
    }
    return optionValue;
  },
  filterSocialsByPlatform(socials) {
    if (!socials || !socials.length) {
      return socials;
    }
    if (CoreHelperUtil.isTelegram()) {
      if (CoreHelperUtil.isIos()) {
        return socials.filter((s3) => s3 !== "google");
      }
      if (CoreHelperUtil.isMac()) {
        return socials.filter((s3) => s3 !== "x");
      }
      if (CoreHelperUtil.isAndroid()) {
        return socials.filter((s3) => !["facebook", "x"].includes(s3));
      }
    }
    return socials;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js
var state = proxy({
  features: ConstantsUtil2.DEFAULT_FEATURES,
  projectId: "",
  sdkType: "appkit",
  sdkVersion: "html-wagmi-undefined",
  defaultAccountTypes: ConstantsUtil2.DEFAULT_ACCOUNT_TYPES,
  enableNetworkSwitch: true,
  experimental_preferUniversalLinks: false,
  remoteFeatures: {}
});
var OptionsController = {
  state,
  subscribeKey(key, callback) {
    return subscribeKey(state, key, callback);
  },
  setOptions(options) {
    Object.assign(state, options);
  },
  setRemoteFeatures(remoteFeatures) {
    var _a2, _b;
    if (!remoteFeatures) {
      return;
    }
    const newRemoteFeatures = { ...state.remoteFeatures, ...remoteFeatures };
    state.remoteFeatures = newRemoteFeatures;
    if ((_a2 = state.remoteFeatures) == null ? void 0 : _a2.socials) {
      state.remoteFeatures.socials = OptionsUtil.filterSocialsByPlatform(state.remoteFeatures.socials);
    }
    if ((_b = state.features) == null ? void 0 : _b.pay) {
      state.remoteFeatures.email = false;
      state.remoteFeatures.socials = false;
    }
  },
  setFeatures(features) {
    var _a2;
    if (!features) {
      return;
    }
    if (!state.features) {
      state.features = ConstantsUtil2.DEFAULT_FEATURES;
    }
    const newFeatures = { ...state.features, ...features };
    state.features = newFeatures;
    if (((_a2 = state.features) == null ? void 0 : _a2.pay) && state.remoteFeatures) {
      state.remoteFeatures.email = false;
      state.remoteFeatures.socials = false;
    }
  },
  setProjectId(projectId) {
    state.projectId = projectId;
  },
  setCustomRpcUrls(customRpcUrls) {
    state.customRpcUrls = customRpcUrls;
  },
  setAllWallets(allWallets) {
    state.allWallets = allWallets;
  },
  setIncludeWalletIds(includeWalletIds) {
    state.includeWalletIds = includeWalletIds;
  },
  setExcludeWalletIds(excludeWalletIds) {
    state.excludeWalletIds = excludeWalletIds;
  },
  setFeaturedWalletIds(featuredWalletIds) {
    state.featuredWalletIds = featuredWalletIds;
  },
  setTokens(tokens) {
    state.tokens = tokens;
  },
  setTermsConditionsUrl(termsConditionsUrl) {
    state.termsConditionsUrl = termsConditionsUrl;
  },
  setPrivacyPolicyUrl(privacyPolicyUrl) {
    state.privacyPolicyUrl = privacyPolicyUrl;
  },
  setCustomWallets(customWallets) {
    state.customWallets = customWallets;
  },
  setIsSiweEnabled(isSiweEnabled) {
    state.isSiweEnabled = isSiweEnabled;
  },
  setIsUniversalProvider(isUniversalProvider) {
    state.isUniversalProvider = isUniversalProvider;
  },
  setSdkVersion(sdkVersion) {
    state.sdkVersion = sdkVersion;
  },
  setMetadata(metadata) {
    state.metadata = metadata;
  },
  setDisableAppend(disableAppend) {
    state.disableAppend = disableAppend;
  },
  setEIP6963Enabled(enableEIP6963) {
    state.enableEIP6963 = enableEIP6963;
  },
  setDebug(debug) {
    state.debug = debug;
  },
  setEnableWalletConnect(enableWalletConnect) {
    state.enableWalletConnect = enableWalletConnect;
  },
  setEnableWalletGuide(enableWalletGuide) {
    state.enableWalletGuide = enableWalletGuide;
  },
  setEnableAuthLogger(enableAuthLogger) {
    state.enableAuthLogger = enableAuthLogger;
  },
  setEnableWallets(enableWallets) {
    state.enableWallets = enableWallets;
  },
  setPreferUniversalLinks(preferUniversalLinks) {
    state.experimental_preferUniversalLinks = preferUniversalLinks;
  },
  setSIWX(siwx) {
    if (siwx) {
      for (const [key, isVal] of Object.entries(ConstantsUtil2.SIWX_DEFAULTS)) {
        siwx[key] ?? (siwx[key] = isVal);
      }
    }
    state.siwx = siwx;
  },
  setConnectMethodsOrder(connectMethodsOrder) {
    state.features = {
      ...state.features,
      connectMethodsOrder
    };
  },
  setWalletFeaturesOrder(walletFeaturesOrder) {
    state.features = {
      ...state.features,
      walletFeaturesOrder
    };
  },
  setSocialsOrder(socialsOrder) {
    state.remoteFeatures = {
      ...state.remoteFeatures,
      socials: socialsOrder
    };
  },
  setCollapseWallets(collapseWallets) {
    state.features = {
      ...state.features,
      collapseWallets
    };
  },
  setEnableEmbedded(enableEmbedded) {
    state.enableEmbedded = enableEmbedded;
  },
  setAllowUnsupportedChain(allowUnsupportedChain) {
    state.allowUnsupportedChain = allowUnsupportedChain;
  },
  setManualWCControl(manualWCControl) {
    state.manualWCControl = manualWCControl;
  },
  setEnableNetworkSwitch(enableNetworkSwitch) {
    state.enableNetworkSwitch = enableNetworkSwitch;
  },
  setEnableReconnect(enableReconnect) {
    state.enableReconnect = enableReconnect;
  },
  setDefaultAccountTypes(defaultAccountType = {}) {
    Object.entries(defaultAccountType).forEach(([namespace, accountType]) => {
      if (accountType) {
        state.defaultAccountTypes[namespace] = accountType;
      }
    });
  },
  setUniversalProviderConfigOverride(universalProviderConfigOverride) {
    state.universalProviderConfigOverride = universalProviderConfigOverride;
  },
  getUniversalProviderConfigOverride() {
    return state.universalProviderConfigOverride;
  },
  getSnapshot() {
    return snapshot2(state);
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/FetchUtil.js
async function fetchData(...args) {
  const response = await fetch(...args);
  if (!response.ok) {
    const err = new Error(`HTTP status code: ${response.status}`, {
      cause: response
    });
    throw err;
  }
  return response;
}
var FetchUtil = class {
  constructor({ baseUrl: baseUrl4, clientId }) {
    this.baseUrl = baseUrl4;
    this.clientId = clientId;
  }
  async get({ headers, signal, cache, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, { method: "GET", headers, signal, cache });
    return response.json();
  }
  async getBlob({ headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, { method: "GET", headers, signal });
    return response.blob();
  }
  async post({ body, headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, {
      method: "POST",
      headers,
      body: body ? JSON.stringify(body) : void 0,
      signal
    });
    return response.json();
  }
  async put({ body, headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, {
      method: "PUT",
      headers,
      body: body ? JSON.stringify(body) : void 0,
      signal
    });
    return response.json();
  }
  async delete({ body, headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, {
      method: "DELETE",
      headers,
      body: body ? JSON.stringify(body) : void 0,
      signal
    });
    return response.json();
  }
  createUrl({ path, params }) {
    const url = new URL(path, this.baseUrl);
    if (params) {
      Object.entries(params).forEach(([key, value]) => {
        if (value) {
          url.searchParams.append(key, value);
        }
      });
    }
    if (this.clientId) {
      url.searchParams.append("clientId", this.clientId);
    }
    return url;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/TelemetryController.js
var DEFAULT_STATE = Object.freeze({
  enabled: true,
  events: []
});
var api = new FetchUtil({ baseUrl: CoreHelperUtil.getAnalyticsUrl(), clientId: null });
var MAX_ERRORS_PER_MINUTE = 5;
var ONE_MINUTE_MS = 60 * 1e3;
var state2 = proxy({
  ...DEFAULT_STATE
});
var TelemetryController = {
  state: state2,
  subscribeKey(key, callback) {
    return subscribeKey(state2, key, callback);
  },
  async sendError(error, category) {
    if (!state2.enabled) {
      return;
    }
    const now = Date.now();
    const recentErrors = state2.events.filter((event) => {
      const eventTime = new Date(event.properties.timestamp || "").getTime();
      return now - eventTime < ONE_MINUTE_MS;
    });
    if (recentErrors.length >= MAX_ERRORS_PER_MINUTE) {
      return;
    }
    const errorEvent = {
      type: "error",
      event: category,
      properties: {
        errorType: error.name,
        errorMessage: error.message,
        stackTrace: error.stack,
        timestamp: (/* @__PURE__ */ new Date()).toISOString()
      }
    };
    state2.events.push(errorEvent);
    try {
      if (typeof window === "undefined") {
        return;
      }
      const { projectId, sdkType, sdkVersion } = OptionsController.state;
      await api.post({
        path: "/e",
        params: {
          projectId,
          st: sdkType,
          sv: sdkVersion || "html-wagmi-4.2.2"
        },
        body: {
          eventId: CoreHelperUtil.getUUID(),
          url: window.location.href,
          domain: window.location.hostname,
          timestamp: (/* @__PURE__ */ new Date()).toISOString(),
          props: {
            type: "error",
            event: category,
            errorType: error.name,
            errorMessage: error.message,
            stackTrace: error.stack
          }
        }
      });
    } catch {
    }
  },
  enable() {
    state2.enabled = true;
  },
  disable() {
    state2.enabled = false;
  },
  clearEvents() {
    state2.events = [];
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/withErrorBoundary.js
var AppKitError = class _AppKitError extends Error {
  constructor(message, category, originalError) {
    super(message);
    this.name = "AppKitError";
    this.category = category;
    this.originalError = originalError;
    Object.setPrototypeOf(this, _AppKitError.prototype);
    let isStackConstructedFromOriginal = false;
    if (originalError instanceof Error && typeof originalError.stack === "string" && originalError.stack) {
      const originalErrorStack = originalError.stack;
      const firstNewlineIndex = originalErrorStack.indexOf("\n");
      if (firstNewlineIndex > -1) {
        const originalFrames = originalErrorStack.substring(firstNewlineIndex + 1);
        this.stack = `${this.name}: ${this.message}
${originalFrames}`;
        isStackConstructedFromOriginal = true;
      }
    }
    if (!isStackConstructedFromOriginal) {
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, _AppKitError);
      } else if (!this.stack) {
        this.stack = `${this.name}: ${this.message}`;
      }
    }
  }
};
function errorHandler(err, defaultCategory) {
  const error = err instanceof AppKitError ? err : new AppKitError(err instanceof Error ? err.message : String(err), defaultCategory, err);
  TelemetryController.sendError(error, error.category);
  throw error;
}
function withErrorBoundary(controller17, defaultCategory = "INTERNAL_SDK_ERROR") {
  const newController = {};
  Object.keys(controller17).forEach((key) => {
    const original = controller17[key];
    if (typeof original === "function") {
      let wrapped = original;
      if (original.constructor.name === "AsyncFunction") {
        wrapped = async (...args) => {
          try {
            return await original(...args);
          } catch (err) {
            return errorHandler(err, defaultCategory);
          }
        };
      } else {
        wrapped = (...args) => {
          try {
            return original(...args);
          } catch (err) {
            return errorHandler(err, defaultCategory);
          }
        };
      }
      newController[key] = wrapped;
    } else {
      newController[key] = original;
    }
  });
  return newController;
}

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AssetController.js
var state3 = proxy({
  walletImages: {},
  networkImages: {},
  chainImages: {},
  connectorImages: {},
  tokenImages: {},
  currencyImages: {}
});
var controller = {
  state: state3,
  subscribeNetworkImages(callback) {
    return subscribe(state3.networkImages, () => callback(state3.networkImages));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state3, key, callback);
  },
  subscribe(callback) {
    return subscribe(state3, () => callback(state3));
  },
  setWalletImage(key, value) {
    state3.walletImages[key] = value;
  },
  setNetworkImage(key, value) {
    state3.networkImages[key] = value;
  },
  setChainImage(key, value) {
    state3.chainImages[key] = value;
  },
  setConnectorImage(key, value) {
    state3.connectorImages = { ...state3.connectorImages, [key]: value };
  },
  setTokenImage(key, value) {
    state3.tokenImages[key] = value;
  },
  setCurrencyImage(key, value) {
    state3.currencyImages[key] = value;
  }
};
var AssetController = withErrorBoundary(controller);

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/AssetUtil.js
var namespaceImageIds = {
  // Ethereum
  eip155: "ba0ba0cd-17c6-4806-ad93-f9d174f17900",
  // Solana
  solana: "a1b58899-f671-4276-6a5e-56ca5bd59700",
  // Polkadot
  polkadot: "",
  // Bitcoin
  bip122: "0b4838db-0161-4ffe-022d-532bf03dba00",
  // Cosmos
  cosmos: "",
  // Sui
  sui: "",
  // Stacks
  stacks: ""
};
var state4 = proxy({
  networkImagePromises: {}
});
var AssetUtil = {
  async fetchWalletImage(imageId) {
    if (!imageId) {
      return void 0;
    }
    await ApiController._fetchWalletImage(imageId);
    return this.getWalletImageById(imageId);
  },
  async fetchNetworkImage(imageId) {
    if (!imageId) {
      return void 0;
    }
    const existingImage = this.getNetworkImageById(imageId);
    if (existingImage) {
      return existingImage;
    }
    if (!state4.networkImagePromises[imageId]) {
      state4.networkImagePromises[imageId] = ApiController._fetchNetworkImage(imageId);
    }
    await state4.networkImagePromises[imageId];
    return this.getNetworkImageById(imageId);
  },
  getWalletImageById(imageId) {
    if (!imageId) {
      return void 0;
    }
    return AssetController.state.walletImages[imageId];
  },
  getWalletImage(wallet) {
    if (wallet == null ? void 0 : wallet.image_url) {
      return wallet == null ? void 0 : wallet.image_url;
    }
    if (wallet == null ? void 0 : wallet.image_id) {
      return AssetController.state.walletImages[wallet.image_id];
    }
    return void 0;
  },
  getNetworkImage(network) {
    var _a2, _b, _c2;
    if ((_a2 = network == null ? void 0 : network.assets) == null ? void 0 : _a2.imageUrl) {
      return (_b = network == null ? void 0 : network.assets) == null ? void 0 : _b.imageUrl;
    }
    if ((_c2 = network == null ? void 0 : network.assets) == null ? void 0 : _c2.imageId) {
      return AssetController.state.networkImages[network.assets.imageId];
    }
    return void 0;
  },
  getNetworkImageById(imageId) {
    if (!imageId) {
      return void 0;
    }
    return AssetController.state.networkImages[imageId];
  },
  getConnectorImage(connector) {
    var _a2;
    if (connector == null ? void 0 : connector.imageUrl) {
      return connector.imageUrl;
    }
    if ((_a2 = connector == null ? void 0 : connector.info) == null ? void 0 : _a2.icon) {
      return connector.info.icon;
    }
    if (connector == null ? void 0 : connector.imageId) {
      return AssetController.state.connectorImages[connector.imageId];
    }
    return void 0;
  },
  getChainImage(chain2) {
    return AssetController.state.networkImages[namespaceImageIds[chain2]];
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/MobileWallet.js
var CUSTOM_DEEPLINK_WALLETS = {
  PHANTOM: {
    id: "a797aa35c0fadbfc1a53e7f675162ed5226968b44a19ee3d24385c64d1d3c393",
    url: "https://phantom.app"
  },
  SOLFLARE: {
    id: "1ca0bdd4747578705b1939af023d120677c64fe6ca76add81fda36e350605e79",
    url: "https://solflare.com"
  },
  COINBASE: {
    id: "fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa",
    url: "https://go.cb-w.com"
  }
};
var MobileWalletUtil = {
  /**
   * Handles mobile wallet redirection for wallets that have Universal Links and doesn't support WalletConnect Deep Links.
   *
   * @param {string} id - The id of the wallet.
   * @param {ChainNamespace} namespace - The namespace of the chain.
   */
  handleMobileDeeplinkRedirect(id, namespace) {
    const href = window.location.href;
    const encodedHref = encodeURIComponent(href);
    if (id === CUSTOM_DEEPLINK_WALLETS.PHANTOM.id && !("phantom" in window)) {
      const protocol = href.startsWith("https") ? "https" : "http";
      const host = href.split("/")[2];
      const encodedRef = encodeURIComponent(`${protocol}://${host}`);
      window.location.href = `${CUSTOM_DEEPLINK_WALLETS.PHANTOM.url}/ul/browse/${encodedHref}?ref=${encodedRef}`;
    }
    if (id === CUSTOM_DEEPLINK_WALLETS.SOLFLARE.id && !("solflare" in window)) {
      window.location.href = `${CUSTOM_DEEPLINK_WALLETS.SOLFLARE.url}/ul/v1/browse/${encodedHref}?ref=${encodedHref}`;
    }
    if (namespace === ConstantsUtil.CHAIN.SOLANA) {
      if (id === CUSTOM_DEEPLINK_WALLETS.COINBASE.id && !("coinbaseSolana" in window)) {
        window.location.href = `${CUSTOM_DEEPLINK_WALLETS.COINBASE.url}/dapp?cb_url=${encodedHref}`;
      }
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SnackController.js
var DEFAULT_STATE2 = Object.freeze({
  message: "",
  variant: "success",
  svg: void 0,
  open: false,
  autoClose: true
});
var state5 = proxy({
  ...DEFAULT_STATE2
});
var controller2 = {
  state: state5,
  subscribeKey(key, callback) {
    return subscribeKey(state5, key, callback);
  },
  showLoading(message, options = {}) {
    this._showMessage({ message, variant: "loading", ...options });
  },
  showSuccess(message) {
    this._showMessage({ message, variant: "success" });
  },
  showSvg(message, svg) {
    this._showMessage({ message, svg });
  },
  showError(message) {
    const errorMessage = CoreHelperUtil.parseError(message);
    this._showMessage({ message: errorMessage, variant: "error" });
  },
  hide() {
    state5.message = DEFAULT_STATE2.message;
    state5.variant = DEFAULT_STATE2.variant;
    state5.svg = DEFAULT_STATE2.svg;
    state5.open = DEFAULT_STATE2.open;
    state5.autoClose = DEFAULT_STATE2.autoClose;
  },
  _showMessage({ message, svg, variant = "success", autoClose = DEFAULT_STATE2.autoClose }) {
    if (state5.open) {
      state5.open = false;
      setTimeout(() => {
        state5.message = message;
        state5.variant = variant;
        state5.svg = svg;
        state5.open = true;
        state5.autoClose = autoClose;
      }, 150);
    } else {
      state5.message = message;
      state5.variant = variant;
      state5.svg = svg;
      state5.open = true;
      state5.autoClose = autoClose;
    }
  }
};
var SnackController = controller2;

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/BlockchainApiController.js
var DEFAULT_OPTIONS = {
  purchaseCurrencies: [
    {
      id: "2b92315d-eab7-5bef-84fa-089a131333f5",
      name: "USD Coin",
      symbol: "USDC",
      networks: [
        {
          name: "ethereum-mainnet",
          display_name: "Ethereum",
          chain_id: "1",
          contract_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
        },
        {
          name: "polygon-mainnet",
          display_name: "Polygon",
          chain_id: "137",
          contract_address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
        }
      ]
    },
    {
      id: "2b92315d-eab7-5bef-84fa-089a131333f5",
      name: "Ether",
      symbol: "ETH",
      networks: [
        {
          name: "ethereum-mainnet",
          display_name: "Ethereum",
          chain_id: "1",
          contract_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
        },
        {
          name: "polygon-mainnet",
          display_name: "Polygon",
          chain_id: "137",
          contract_address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
        }
      ]
    }
  ],
  paymentCurrencies: [
    {
      id: "USD",
      payment_method_limits: [
        {
          id: "card",
          min: "10.00",
          max: "7500.00"
        },
        {
          id: "ach_bank_account",
          min: "10.00",
          max: "25000.00"
        }
      ]
    },
    {
      id: "EUR",
      payment_method_limits: [
        {
          id: "card",
          min: "10.00",
          max: "7500.00"
        },
        {
          id: "ach_bank_account",
          min: "10.00",
          max: "25000.00"
        }
      ]
    }
  ]
};
var baseUrl = CoreHelperUtil.getBlockchainApiUrl();
var state6 = proxy({
  clientId: null,
  api: new FetchUtil({ baseUrl, clientId: null }),
  supportedChains: { http: [], ws: [] }
});
var BlockchainApiController = {
  state: state6,
  async get(request) {
    const { st, sv } = BlockchainApiController.getSdkProperties();
    const projectId = OptionsController.state.projectId;
    const params = {
      ...request.params || {},
      st,
      sv,
      projectId
    };
    return state6.api.get({
      ...request,
      params
    });
  },
  getSdkProperties() {
    const { sdkType, sdkVersion } = OptionsController.state;
    return {
      st: sdkType || "unknown",
      sv: sdkVersion || "unknown"
    };
  },
  async isNetworkSupported(networkId) {
    if (!networkId) {
      return false;
    }
    try {
      if (!state6.supportedChains.http.length) {
        await BlockchainApiController.getSupportedNetworks();
      }
    } catch (e2) {
      return false;
    }
    return state6.supportedChains.http.includes(networkId);
  },
  async getSupportedNetworks() {
    try {
      const supportedChains = await BlockchainApiController.get({
        path: "v1/supported-chains"
      });
      state6.supportedChains = supportedChains;
      return supportedChains;
    } catch {
      return state6.supportedChains;
    }
  },
  async fetchIdentity({ address, caipNetworkId }) {
    const isSupported = await BlockchainApiController.isNetworkSupported(caipNetworkId);
    if (!isSupported) {
      return { avatar: "", name: "" };
    }
    const identityCache = StorageUtil.getIdentityFromCacheForAddress(address);
    if (identityCache) {
      return identityCache;
    }
    const result = await BlockchainApiController.get({
      path: `/v1/identity/${address}`,
      params: {
        sender: ChainController.state.activeCaipAddress ? CoreHelperUtil.getPlainAddress(ChainController.state.activeCaipAddress) : void 0
      }
    });
    StorageUtil.updateIdentityCache({
      address,
      identity: result,
      timestamp: Date.now()
    });
    return result;
  },
  async fetchTransactions({ account, cursor, signal, cache, chainId }) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { data: [], next: void 0 };
    }
    const transactionsCache = StorageUtil.getTransactionsCacheForAddress({
      address: account,
      chainId
    });
    if (transactionsCache) {
      return transactionsCache;
    }
    const result = await BlockchainApiController.get({
      path: `/v1/account/${account}/history`,
      params: {
        cursor,
        chainId
      },
      signal,
      cache
    });
    StorageUtil.updateTransactionsCache({
      address: account,
      chainId,
      timestamp: Date.now(),
      transactions: result
    });
    return result;
  },
  async fetchSwapQuote({ amount, userAddress, from: from21, to: to4, gasPrice }) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { quotes: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/convert/quotes`,
      headers: {
        "Content-Type": "application/json"
      },
      params: {
        amount,
        userAddress,
        from: from21,
        to: to4,
        gasPrice
      }
    });
  },
  async fetchSwapTokens({ chainId }) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { tokens: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/convert/tokens`,
      params: { chainId }
    });
  },
  async fetchTokenPrice({ addresses }) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { fungibles: [] };
    }
    const tokenPriceCache = StorageUtil.getTokenPriceCacheForAddresses(addresses);
    if (tokenPriceCache) {
      return tokenPriceCache;
    }
    const result = await state6.api.post({
      path: "/v1/fungible/price",
      body: {
        currency: "usd",
        addresses,
        projectId: OptionsController.state.projectId
      },
      headers: {
        "Content-Type": "application/json"
      }
    });
    StorageUtil.updateTokenPriceCache({
      addresses,
      timestamp: Date.now(),
      tokenPrice: result
    });
    return result;
  },
  async fetchSwapAllowance({ tokenAddress, userAddress }) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { allowance: "0" };
    }
    return BlockchainApiController.get({
      path: `/v1/convert/allowance`,
      params: {
        tokenAddress,
        userAddress
      },
      headers: {
        "Content-Type": "application/json"
      }
    });
  },
  async fetchGasPrice({ chainId }) {
    var _a2;
    const { st, sv } = BlockchainApiController.getSdkProperties();
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      throw new Error("Network not supported for Gas Price");
    }
    return BlockchainApiController.get({
      path: `/v1/convert/gas-price`,
      headers: {
        "Content-Type": "application/json"
      },
      params: {
        chainId,
        st,
        sv
      }
    });
  },
  async generateSwapCalldata({ amount, from: from21, to: to4, userAddress, disableEstimate }) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      throw new Error("Network not supported for Swaps");
    }
    return state6.api.post({
      path: "/v1/convert/build-transaction",
      headers: {
        "Content-Type": "application/json"
      },
      body: {
        amount,
        eip155: {
          slippage: ConstantsUtil2.CONVERT_SLIPPAGE_TOLERANCE
        },
        projectId: OptionsController.state.projectId,
        from: from21,
        to: to4,
        userAddress,
        disableEstimate
      }
    });
  },
  async generateApproveCalldata({ from: from21, to: to4, userAddress }) {
    var _a2;
    const { st, sv } = BlockchainApiController.getSdkProperties();
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      throw new Error("Network not supported for Swaps");
    }
    return BlockchainApiController.get({
      path: `/v1/convert/build-approve`,
      headers: {
        "Content-Type": "application/json"
      },
      params: {
        userAddress,
        from: from21,
        to: to4,
        st,
        sv
      }
    });
  },
  async getBalance(address, chainId, forceUpdate) {
    var _a2;
    const { st, sv } = BlockchainApiController.getSdkProperties();
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      SnackController.showError("Token Balance Unavailable");
      return { balances: [] };
    }
    const caipAddress = `${chainId}:${address}`;
    const cachedBalance = StorageUtil.getBalanceCacheForCaipAddress(caipAddress);
    if (cachedBalance) {
      return cachedBalance;
    }
    const balance = await BlockchainApiController.get({
      path: `/v1/account/${address}/balance`,
      params: {
        currency: "usd",
        chainId,
        forceUpdate,
        st,
        sv
      }
    });
    StorageUtil.updateBalanceCache({
      caipAddress,
      balance,
      timestamp: Date.now()
    });
    return balance;
  },
  async lookupEnsName(name2) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { addresses: {}, attributes: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/profile/account/${name2}`,
      params: { apiVersion: "2" }
    });
  },
  async reverseLookupEnsName({ address }) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return [];
    }
    return BlockchainApiController.get({
      path: `/v1/profile/reverse/${address}`,
      params: {
        sender: AccountController.state.address,
        apiVersion: "2"
      }
    });
  },
  async getEnsNameSuggestions(name2) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { suggestions: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/profile/suggestions/${name2}`,
      params: { zone: "reown.id" }
    });
  },
  async registerEnsName({ coinType, address, message, signature }) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { success: false };
    }
    return state6.api.post({
      path: `/v1/profile/account`,
      body: { coin_type: coinType, address, message, signature },
      headers: {
        "Content-Type": "application/json"
      }
    });
  },
  async generateOnRampURL({ destinationWallets, partnerUserId, defaultNetwork, purchaseAmount, paymentAmount }) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return "";
    }
    const response = await state6.api.post({
      path: `/v1/generators/onrampurl`,
      params: {
        projectId: OptionsController.state.projectId
      },
      body: {
        destinationWallets,
        defaultNetwork,
        partnerUserId,
        defaultExperience: "buy",
        presetCryptoAmount: purchaseAmount,
        presetFiatAmount: paymentAmount
      }
    });
    return response.url;
  },
  async getOnrampOptions() {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { paymentCurrencies: [], purchaseCurrencies: [] };
    }
    try {
      const response = await BlockchainApiController.get({
        path: `/v1/onramp/options`
      });
      return response;
    } catch (e2) {
      return DEFAULT_OPTIONS;
    }
  },
  async getOnrampQuote({ purchaseCurrency, paymentCurrency, amount, network }) {
    var _a2;
    try {
      const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
      if (!isSupported) {
        return null;
      }
      const response = await state6.api.post({
        path: `/v1/onramp/quote`,
        params: {
          projectId: OptionsController.state.projectId
        },
        body: {
          purchaseCurrency,
          paymentCurrency,
          amount,
          network
        }
      });
      return response;
    } catch (e2) {
      return {
        networkFee: { amount, currency: paymentCurrency.id },
        paymentSubtotal: { amount, currency: paymentCurrency.id },
        paymentTotal: { amount, currency: paymentCurrency.id },
        purchaseAmount: { amount, currency: paymentCurrency.id },
        quoteId: "mocked-quote-id"
      };
    }
  },
  async getSmartSessions(caipAddress) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return [];
    }
    return BlockchainApiController.get({
      path: `/v1/sessions/${caipAddress}`
    });
  },
  async revokeSmartSession(address, pci, signature) {
    var _a2;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    if (!isSupported) {
      return { success: false };
    }
    return state6.api.post({
      path: `/v1/sessions/${address}/revoke`,
      params: {
        projectId: OptionsController.state.projectId
      },
      body: {
        pci,
        signature
      }
    });
  },
  setClientId(clientId) {
    state6.clientId = clientId;
    state6.api = new FetchUtil({ baseUrl, clientId });
  }
};

// node_modules/@reown/appkit-wallet/dist/esm/src/W3mFrameConstants.js
var DEFAULT_SDK_URL = "https://secure.walletconnect.org/sdk";
var SECURE_SITE_SDK = (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_SDK_URL"] : void 0) || DEFAULT_SDK_URL;
var DEFAULT_LOG_LEVEL = (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_DEFAULT_LOG_LEVEL"] : void 0) || "error";
var SECURE_SITE_SDK_VERSION = (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_SDK_VERSION"] : void 0) || "4";
var W3mFrameRpcConstants = {
  SAFE_RPC_METHODS: [
    "eth_accounts",
    "eth_blockNumber",
    "eth_call",
    "eth_chainId",
    "eth_estimateGas",
    "eth_feeHistory",
    "eth_gasPrice",
    "eth_getAccount",
    "eth_getBalance",
    "eth_getBlockByHash",
    "eth_getBlockByNumber",
    "eth_getBlockReceipts",
    "eth_getBlockTransactionCountByHash",
    "eth_getBlockTransactionCountByNumber",
    "eth_getCode",
    "eth_getFilterChanges",
    "eth_getFilterLogs",
    "eth_getLogs",
    "eth_getProof",
    "eth_getStorageAt",
    "eth_getTransactionByBlockHashAndIndex",
    "eth_getTransactionByBlockNumberAndIndex",
    "eth_getTransactionByHash",
    "eth_getTransactionCount",
    "eth_getTransactionReceipt",
    "eth_getUncleCountByBlockHash",
    "eth_getUncleCountByBlockNumber",
    "eth_maxPriorityFeePerGas",
    "eth_newBlockFilter",
    "eth_newFilter",
    "eth_newPendingTransactionFilter",
    "eth_sendRawTransaction",
    "eth_syncing",
    "eth_uninstallFilter",
    "wallet_getCapabilities",
    "wallet_getCallsStatus",
    "eth_getUserOperationReceipt",
    "eth_estimateUserOperationGas",
    "eth_getUserOperationByHash",
    "eth_supportedEntryPoints",
    "wallet_getAssets"
  ],
  NOT_SAFE_RPC_METHODS: [
    "personal_sign",
    "eth_signTypedData_v4",
    "eth_sendTransaction",
    "solana_signMessage",
    "solana_signTransaction",
    "solana_signAllTransactions",
    "solana_signAndSendTransaction",
    "wallet_sendCalls",
    "wallet_grantPermissions",
    "wallet_revokePermissions",
    "eth_sendUserOperation"
  ],
  GET_CHAIN_ID: "eth_chainId",
  RPC_METHOD_NOT_ALLOWED_MESSAGE: "Requested RPC call is not allowed",
  RPC_METHOD_NOT_ALLOWED_UI_MESSAGE: "Action not allowed",
  ACCOUNT_TYPES: {
    EOA: "eoa",
    SMART_ACCOUNT: "smartAccount"
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/NetworkUtil.js
var NetworkUtil2 = {
  /**
   * Function to handle the network switch.
   * This function has variety of conditions to handle the network switch depending on the connectors or namespace's connection states.
   * @param args.network - The network to switch to.
   * @param args.shouldConfirmSwitch - Whether to confirm the switch. If true, the user will be asked to confirm the switch if necessary.
   * @returns void
   */
  onSwitchNetwork({ network, ignoreSwitchConfirmation = false }) {
    const currentNetwork = ChainController.state.activeCaipNetwork;
    const routerData = RouterController.state.data;
    const isSameNetwork = network.id === (currentNetwork == null ? void 0 : currentNetwork.id);
    if (isSameNetwork) {
      return;
    }
    const isCurrentNamespaceConnected = AccountController.getCaipAddress(ChainController.state.activeChain);
    const isDifferentNamespace = network.chainNamespace !== ChainController.state.activeChain;
    const isNextNamespaceConnected = AccountController.getCaipAddress(network.chainNamespace);
    const connectorId = ConnectorController.getConnectorId(ChainController.state.activeChain);
    const isConnectedWithAuth = connectorId === ConstantsUtil.CONNECTOR_ID.AUTH;
    const isSupportedForAuthConnector = ConstantsUtil.AUTH_CONNECTOR_SUPPORTED_CHAINS.find((c7) => c7 === network.chainNamespace);
    if (ignoreSwitchConfirmation || isConnectedWithAuth && isSupportedForAuthConnector) {
      RouterController.push("SwitchNetwork", { ...routerData, network });
    } else if (
      /**
       * If user switching to a different namespace and next namespace is not connected, we need to show switch active chain view for confirmation first.
       */
      isCurrentNamespaceConnected && isDifferentNamespace && !isNextNamespaceConnected
    ) {
      RouterController.push("SwitchActiveChain", {
        switchToChain: network.chainNamespace,
        navigateTo: "Connect",
        navigateWithReplace: true,
        network
      });
    } else {
      RouterController.push("SwitchNetwork", { ...routerData, network });
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AlertController.js
var state7 = proxy({
  message: "",
  variant: "info",
  open: false
});
var controller3 = {
  state: state7,
  subscribeKey(key, callback) {
    return subscribeKey(state7, key, callback);
  },
  open(message, variant) {
    const { debug } = OptionsController.state;
    const { code: code2, displayMessage, debugMessage } = message;
    if (displayMessage && debug) {
      state7.message = displayMessage;
      state7.variant = variant;
      state7.open = true;
    }
    if (debugMessage) {
      console.error(typeof debugMessage === "function" ? debugMessage() : debugMessage, code2 ? { code: code2 } : void 0);
    }
  },
  close() {
    state7.open = false;
    state7.message = "";
    state7.variant = "info";
  }
};
var AlertController = withErrorBoundary(controller3);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EventsController.js
var baseUrl2 = CoreHelperUtil.getAnalyticsUrl();
var api2 = new FetchUtil({ baseUrl: baseUrl2, clientId: null });
var excluded = ["MODAL_CREATED"];
var state8 = proxy({
  timestamp: Date.now(),
  reportedErrors: {},
  data: {
    type: "track",
    event: "MODAL_CREATED"
  }
});
var EventsController = {
  state: state8,
  subscribe(callback) {
    return subscribe(state8, () => callback(state8));
  },
  getSdkProperties() {
    const { projectId, sdkType, sdkVersion } = OptionsController.state;
    return {
      projectId,
      st: sdkType,
      sv: sdkVersion || "html-wagmi-4.2.2"
    };
  },
  async _sendAnalyticsEvent(payload) {
    try {
      const address = AccountController.state.address;
      if (excluded.includes(payload.data.event) || typeof window === "undefined") {
        return;
      }
      await api2.post({
        path: "/e",
        params: EventsController.getSdkProperties(),
        body: {
          eventId: CoreHelperUtil.getUUID(),
          url: window.location.href,
          domain: window.location.hostname,
          timestamp: payload.timestamp,
          props: { ...payload.data, address }
        }
      });
      state8.reportedErrors["FORBIDDEN"] = false;
    } catch (err) {
      const isForbiddenError = err instanceof Error && err.cause instanceof Response && err.cause.status === ConstantsUtil.HTTP_STATUS_CODES.FORBIDDEN && !state8.reportedErrors["FORBIDDEN"];
      if (isForbiddenError) {
        AlertController.open({
          displayMessage: "Invalid App Configuration",
          debugMessage: `Origin ${isSafe() ? window.origin : "uknown"} not found on Allowlist - update configuration on cloud.reown.com`
        }, "error");
        state8.reportedErrors["FORBIDDEN"] = true;
      }
    }
  },
  sendEvent(data) {
    var _a2;
    state8.timestamp = Date.now();
    state8.data = data;
    if (((_a2 = OptionsController.state.features) == null ? void 0 : _a2.analytics) || data.event === "INITIALIZE") {
      EventsController._sendAnalyticsEvent(state8);
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/PublicStateController.js
var state9 = proxy({
  loading: false,
  open: false,
  selectedNetworkId: void 0,
  activeChain: void 0,
  initialized: false
});
var PublicStateController = {
  state: state9,
  subscribe(callback) {
    return subscribe(state9, () => callback(state9));
  },
  subscribeOpen(callback) {
    return subscribeKey(state9, "open", callback);
  },
  set(newState) {
    Object.assign(state9, { ...state9, ...newState });
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ModalController.js
var state10 = proxy({
  loading: false,
  loadingNamespaceMap: /* @__PURE__ */ new Map(),
  open: false,
  shake: false,
  namespace: void 0
});
var controller4 = {
  state: state10,
  subscribe(callback) {
    return subscribe(state10, () => callback(state10));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state10, key, callback);
  },
  async open(options) {
    var _a2, _b;
    const namespace = options == null ? void 0 : options.namespace;
    const currentNamespace = ChainController.state.activeChain;
    const isSwitchingNamespace = namespace && namespace !== currentNamespace;
    const caipAddress = (_a2 = ChainController.getAccountData(options == null ? void 0 : options.namespace)) == null ? void 0 : _a2.caipAddress;
    if (ConnectionController.state.wcBasic) {
      ApiController.prefetch({ fetchNetworkImages: false, fetchConnectorImages: false });
    } else {
      await ApiController.prefetch();
    }
    ConnectorController.setFilterByNamespace(options == null ? void 0 : options.namespace);
    ModalController.setLoading(true, namespace);
    if (namespace && isSwitchingNamespace) {
      const namespaceNetwork = ((_b = ChainController.getNetworkData(namespace)) == null ? void 0 : _b.caipNetwork) || ChainController.getRequestedCaipNetworks(namespace)[0];
      if (namespaceNetwork) {
        NetworkUtil2.onSwitchNetwork({ network: namespaceNetwork, ignoreSwitchConfirmation: true });
      }
    } else {
      const hasNoAdapters = ChainController.state.noAdapters;
      if (OptionsController.state.manualWCControl || hasNoAdapters && !caipAddress) {
        if (CoreHelperUtil.isMobile()) {
          RouterController.reset("AllWallets");
        } else {
          RouterController.reset("ConnectingWalletConnectBasic");
        }
      } else if (options == null ? void 0 : options.view) {
        RouterController.reset(options.view, options.data);
      } else if (caipAddress) {
        RouterController.reset("Account");
      } else {
        RouterController.reset("Connect");
      }
    }
    state10.open = true;
    PublicStateController.set({ open: true });
    EventsController.sendEvent({
      type: "track",
      event: "MODAL_OPEN",
      properties: { connected: Boolean(caipAddress) }
    });
  },
  close() {
    const isEmbeddedEnabled = OptionsController.state.enableEmbedded;
    const isConnected = Boolean(ChainController.state.activeCaipAddress);
    if (state10.open) {
      EventsController.sendEvent({
        type: "track",
        event: "MODAL_CLOSE",
        properties: { connected: isConnected }
      });
    }
    state10.open = false;
    RouterController.reset("Connect");
    ModalController.clearLoading();
    if (isEmbeddedEnabled) {
      if (isConnected) {
        RouterController.replace("Account");
      } else {
        RouterController.push("Connect");
      }
    } else {
      PublicStateController.set({ open: false });
    }
    ConnectionController.resetUri();
  },
  setLoading(loading, namespace) {
    if (namespace) {
      state10.loadingNamespaceMap.set(namespace, loading);
    }
    state10.loading = loading;
    PublicStateController.set({ loading });
  },
  clearLoading() {
    state10.loadingNamespaceMap.clear();
    state10.loading = false;
    PublicStateController.set({ loading: false });
  },
  shake() {
    if (state10.shake) {
      return;
    }
    state10.shake = true;
    setTimeout(() => {
      state10.shake = false;
    }, 500);
  }
};
var ModalController = withErrorBoundary(controller4);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/RouterController.js
var state11 = proxy({
  view: "Connect",
  history: ["Connect"],
  transactionStack: []
});
var controller5 = {
  state: state11,
  subscribeKey(key, callback) {
    return subscribeKey(state11, key, callback);
  },
  pushTransactionStack(action) {
    state11.transactionStack.push(action);
  },
  popTransactionStack(status) {
    const action = state11.transactionStack.pop();
    if (!action) {
      return;
    }
    const { onSuccess, onError, onCancel } = action;
    switch (status) {
      case "success":
        onSuccess == null ? void 0 : onSuccess();
        break;
      case "error":
        onError == null ? void 0 : onError();
        RouterController.goBack();
        break;
      case "cancel":
        onCancel == null ? void 0 : onCancel();
        RouterController.goBack();
        break;
      default:
    }
  },
  push(view, data) {
    if (view !== state11.view) {
      state11.view = view;
      state11.history.push(view);
      state11.data = data;
    }
  },
  reset(view, data) {
    state11.view = view;
    state11.history = [view];
    state11.data = data;
  },
  replace(view, data) {
    const lastView = state11.history.at(-1);
    const isSameView = lastView === view;
    if (!isSameView) {
      state11.view = view;
      state11.history[state11.history.length - 1] = view;
      state11.data = data;
    }
  },
  goBack() {
    var _a2;
    const isConnected = ChainController.state.activeCaipAddress;
    const isFarcasterView = RouterController.state.view === "ConnectingFarcaster";
    const shouldReload = !isConnected && isFarcasterView;
    if (state11.history.length > 1) {
      state11.history.pop();
      const [last] = state11.history.slice(-1);
      if (last) {
        const isConnectView = last === "Connect";
        if (isConnected && isConnectView) {
          state11.view = "Account";
        } else {
          state11.view = last;
        }
      }
    } else {
      ModalController.close();
    }
    if ((_a2 = state11.data) == null ? void 0 : _a2.wallet) {
      state11.data.wallet = void 0;
    }
    setTimeout(() => {
      var _a3, _b, _c2;
      if (shouldReload) {
        AccountController.setFarcasterUrl(void 0, ChainController.state.activeChain);
        const authConnector = ConnectorController.getAuthConnector();
        (_a3 = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _a3.reload();
        const optionsState = snapshot2(OptionsController.state);
        (_c2 = (_b = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _b.syncDappData) == null ? void 0 : _c2.call(_b, {
          metadata: optionsState.metadata,
          sdkVersion: optionsState.sdkVersion,
          projectId: optionsState.projectId,
          sdkType: optionsState.sdkType
        });
      }
    }, 100);
  },
  goBackToIndex(historyIndex) {
    if (state11.history.length > 1) {
      state11.history = state11.history.slice(0, historyIndex + 1);
      const [last] = state11.history.slice(-1);
      if (last) {
        state11.view = last;
      }
    }
  },
  goBackOrCloseModal() {
    if (RouterController.state.history.length > 1) {
      RouterController.goBack();
    } else {
      ModalController.close();
    }
  }
};
var RouterController = withErrorBoundary(controller5);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ThemeController.js
var state12 = proxy({
  themeMode: "dark",
  themeVariables: {},
  w3mThemeVariables: void 0
});
var controller6 = {
  state: state12,
  subscribe(callback) {
    return subscribe(state12, () => callback(state12));
  },
  setThemeMode(themeMode) {
    state12.themeMode = themeMode;
    try {
      const authConnector = ConnectorController.getAuthConnector();
      if (authConnector) {
        const themeVariables = controller6.getSnapshot().themeVariables;
        authConnector.provider.syncTheme({
          themeMode,
          themeVariables,
          w3mThemeVariables: getW3mThemeVariables(themeVariables, themeMode)
        });
      }
    } catch {
      console.info("Unable to sync theme to auth connector");
    }
  },
  setThemeVariables(themeVariables) {
    state12.themeVariables = { ...state12.themeVariables, ...themeVariables };
    try {
      const authConnector = ConnectorController.getAuthConnector();
      if (authConnector) {
        const themeVariablesSnapshot = controller6.getSnapshot().themeVariables;
        authConnector.provider.syncTheme({
          themeVariables: themeVariablesSnapshot,
          w3mThemeVariables: getW3mThemeVariables(state12.themeVariables, state12.themeMode)
        });
      }
    } catch {
      console.info("Unable to sync theme to auth connector");
    }
  },
  getSnapshot() {
    return snapshot2(state12);
  }
};
var ThemeController = withErrorBoundary(controller6);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectorController.js
var defaultActiveConnectors = Object.fromEntries(AVAILABLE_NAMESPACES.map((namespace) => [namespace, void 0]));
var defaultFilterByNamespaceMap = Object.fromEntries(AVAILABLE_NAMESPACES.map((namespace) => [namespace, true]));
var state13 = proxy({
  allConnectors: [],
  connectors: [],
  activeConnector: void 0,
  filterByNamespace: void 0,
  activeConnectorIds: defaultActiveConnectors,
  filterByNamespaceMap: defaultFilterByNamespaceMap
});
var controller7 = {
  state: state13,
  subscribe(callback) {
    return subscribe(state13, () => {
      callback(state13);
    });
  },
  subscribeKey(key, callback) {
    return subscribeKey(state13, key, callback);
  },
  initialize(namespaces) {
    namespaces.forEach((namespace) => {
      const connectorId = StorageUtil.getConnectedConnectorId(namespace);
      if (connectorId) {
        ConnectorController.setConnectorId(connectorId, namespace);
      }
    });
  },
  setActiveConnector(connector) {
    if (connector) {
      state13.activeConnector = ref(connector);
    }
  },
  setConnectors(connectors) {
    const newConnectors = connectors.filter((newConnector) => !state13.allConnectors.some((existingConnector) => existingConnector.id === newConnector.id && ConnectorController.getConnectorName(existingConnector.name) === ConnectorController.getConnectorName(newConnector.name) && existingConnector.chain === newConnector.chain));
    newConnectors.forEach((connector) => {
      if (connector.type !== "MULTI_CHAIN") {
        state13.allConnectors.push(ref(connector));
      }
    });
    const enabledNamespaces = ConnectorController.getEnabledNamespaces();
    const connectorsFilteredByNamespaces = ConnectorController.getEnabledConnectors(enabledNamespaces);
    state13.connectors = ConnectorController.mergeMultiChainConnectors(connectorsFilteredByNamespaces);
  },
  filterByNamespaces(enabledNamespaces) {
    Object.keys(state13.filterByNamespaceMap).forEach((namespace) => {
      state13.filterByNamespaceMap[namespace] = false;
    });
    enabledNamespaces.forEach((namespace) => {
      state13.filterByNamespaceMap[namespace] = true;
    });
    ConnectorController.updateConnectorsForEnabledNamespaces();
  },
  filterByNamespace(namespace, enabled) {
    state13.filterByNamespaceMap[namespace] = enabled;
    ConnectorController.updateConnectorsForEnabledNamespaces();
  },
  updateConnectorsForEnabledNamespaces() {
    const enabledNamespaces = ConnectorController.getEnabledNamespaces();
    const enabledConnectors = ConnectorController.getEnabledConnectors(enabledNamespaces);
    const areAllNamespacesEnabled = ConnectorController.areAllNamespacesEnabled();
    state13.connectors = ConnectorController.mergeMultiChainConnectors(enabledConnectors);
    if (areAllNamespacesEnabled) {
      ApiController.clearFilterByNamespaces();
    } else {
      ApiController.filterByNamespaces(enabledNamespaces);
    }
  },
  getEnabledNamespaces() {
    return Object.entries(state13.filterByNamespaceMap).filter(([_3, enabled]) => enabled).map(([namespace]) => namespace);
  },
  getEnabledConnectors(enabledNamespaces) {
    return state13.allConnectors.filter((connector) => enabledNamespaces.includes(connector.chain));
  },
  areAllNamespacesEnabled() {
    return Object.values(state13.filterByNamespaceMap).every((enabled) => enabled);
  },
  mergeMultiChainConnectors(connectors) {
    const connectorsByNameMap = ConnectorController.generateConnectorMapByName(connectors);
    const mergedConnectors = [];
    connectorsByNameMap.forEach((keyConnectors) => {
      const firstItem = keyConnectors[0];
      const isAuthConnector = (firstItem == null ? void 0 : firstItem.id) === ConstantsUtil.CONNECTOR_ID.AUTH;
      if (keyConnectors.length > 1 && firstItem) {
        mergedConnectors.push({
          name: firstItem.name,
          imageUrl: firstItem.imageUrl,
          imageId: firstItem.imageId,
          connectors: [...keyConnectors],
          type: isAuthConnector ? "AUTH" : "MULTI_CHAIN",
          // These values are just placeholders, we don't use them in multi-chain connector select screen
          chain: "eip155",
          id: (firstItem == null ? void 0 : firstItem.id) || ""
        });
      } else if (firstItem) {
        mergedConnectors.push(firstItem);
      }
    });
    return mergedConnectors;
  },
  generateConnectorMapByName(connectors) {
    const connectorsByNameMap = /* @__PURE__ */ new Map();
    connectors.forEach((connector) => {
      const { name: name2 } = connector;
      const connectorName = ConnectorController.getConnectorName(name2);
      if (!connectorName) {
        return;
      }
      const connectorsByName = connectorsByNameMap.get(connectorName) || [];
      const haveSameConnector = connectorsByName.find((c7) => c7.chain === connector.chain);
      if (!haveSameConnector) {
        connectorsByName.push(connector);
      }
      connectorsByNameMap.set(connectorName, connectorsByName);
    });
    return connectorsByNameMap;
  },
  getConnectorName(name2) {
    if (!name2) {
      return name2;
    }
    const nameOverrideMap = {
      "Trust Wallet": "Trust"
    };
    return nameOverrideMap[name2] || name2;
  },
  getUniqueConnectorsByName(connectors) {
    const uniqueConnectors = [];
    connectors.forEach((c7) => {
      if (!uniqueConnectors.find((uc2) => uc2.chain === c7.chain)) {
        uniqueConnectors.push(c7);
      }
    });
    return uniqueConnectors;
  },
  addConnector(connector) {
    var _a2, _b, _c2;
    if (connector.id === ConstantsUtil.CONNECTOR_ID.AUTH) {
      const authConnector = connector;
      const optionsState = snapshot2(OptionsController.state);
      const themeMode = ThemeController.getSnapshot().themeMode;
      const themeVariables = ThemeController.getSnapshot().themeVariables;
      (_b = (_a2 = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _a2.syncDappData) == null ? void 0 : _b.call(_a2, {
        metadata: optionsState.metadata,
        sdkVersion: optionsState.sdkVersion,
        projectId: optionsState.projectId,
        sdkType: optionsState.sdkType
      });
      (_c2 = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _c2.syncTheme({
        themeMode,
        themeVariables,
        w3mThemeVariables: getW3mThemeVariables(themeVariables, themeMode)
      });
      ConnectorController.setConnectors([connector]);
    } else {
      ConnectorController.setConnectors([connector]);
    }
  },
  getAuthConnector(chainNamespace) {
    var _a2;
    const activeNamespace = chainNamespace || ChainController.state.activeChain;
    const authConnector = state13.connectors.find((c7) => c7.id === ConstantsUtil.CONNECTOR_ID.AUTH);
    if (!authConnector) {
      return void 0;
    }
    if ((_a2 = authConnector == null ? void 0 : authConnector.connectors) == null ? void 0 : _a2.length) {
      const connector = authConnector.connectors.find((c7) => c7.chain === activeNamespace);
      return connector;
    }
    return authConnector;
  },
  getAnnouncedConnectorRdns() {
    return state13.connectors.filter((c7) => c7.type === "ANNOUNCED").map((c7) => {
      var _a2;
      return (_a2 = c7.info) == null ? void 0 : _a2.rdns;
    });
  },
  getConnectorById(id) {
    return state13.allConnectors.find((c7) => c7.id === id);
  },
  getConnector({ id, rdns, namespace }) {
    const namespaceToUse = namespace || ChainController.state.activeChain;
    const connectorsByNamespace = state13.allConnectors.filter((c7) => c7.chain === namespaceToUse);
    return connectorsByNamespace.find((c7) => {
      var _a2;
      return c7.explorerId === id || ((_a2 = c7.info) == null ? void 0 : _a2.rdns) === rdns;
    });
  },
  syncIfAuthConnector(connector) {
    var _a2, _b;
    if (connector.id !== "ID_AUTH") {
      return;
    }
    const authConnector = connector;
    const optionsState = snapshot2(OptionsController.state);
    const themeMode = ThemeController.getSnapshot().themeMode;
    const themeVariables = ThemeController.getSnapshot().themeVariables;
    (_b = (_a2 = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _a2.syncDappData) == null ? void 0 : _b.call(_a2, {
      metadata: optionsState.metadata,
      sdkVersion: optionsState.sdkVersion,
      sdkType: optionsState.sdkType,
      projectId: optionsState.projectId
    });
    authConnector.provider.syncTheme({
      themeMode,
      themeVariables,
      w3mThemeVariables: getW3mThemeVariables(themeVariables, themeMode)
    });
  },
  /**
   * Returns the connectors filtered by namespace.
   * @param namespace - The namespace to filter the connectors by.
   * @returns ConnectorWithProviders[].
   */
  getConnectorsByNamespace(namespace) {
    const namespaceConnectors = state13.allConnectors.filter((connector) => connector.chain === namespace);
    return ConnectorController.mergeMultiChainConnectors(namespaceConnectors);
  },
  canSwitchToSmartAccount(namespace) {
    const isSmartAccountEnabled = ChainController.checkIfSmartAccountEnabled();
    return isSmartAccountEnabled && getPreferredAccountType(namespace) === W3mFrameRpcConstants.ACCOUNT_TYPES.EOA;
  },
  selectWalletConnector(wallet) {
    const connector = ConnectorController.getConnector({
      id: wallet.id,
      rdns: wallet.rdns
    });
    MobileWalletUtil.handleMobileDeeplinkRedirect((connector == null ? void 0 : connector.explorerId) || wallet.id, ChainController.state.activeChain);
    if (connector) {
      RouterController.push("ConnectingExternal", { connector, wallet });
    } else {
      RouterController.push("ConnectingWalletConnect", { wallet });
    }
  },
  /**
   * Returns the connectors. If a namespace is provided, the connectors are filtered by namespace.
   * @param namespace - The namespace to filter the connectors by. If not provided, all connectors are returned.
   * @returns ConnectorWithProviders[].
   */
  getConnectors(namespace) {
    if (namespace) {
      return ConnectorController.getConnectorsByNamespace(namespace);
    }
    return ConnectorController.mergeMultiChainConnectors(state13.allConnectors);
  },
  /**
   * Sets the filter by namespace and updates the connectors.
   * @param namespace - The namespace to filter the connectors by.
   */
  setFilterByNamespace(namespace) {
    state13.filterByNamespace = namespace;
    state13.connectors = ConnectorController.getConnectors(namespace);
    ApiController.setFilterByNamespace(namespace);
  },
  setConnectorId(connectorId, namespace) {
    if (connectorId) {
      state13.activeConnectorIds = {
        ...state13.activeConnectorIds,
        [namespace]: connectorId
      };
      StorageUtil.setConnectedConnectorId(namespace, connectorId);
    }
  },
  removeConnectorId(namespace) {
    state13.activeConnectorIds = {
      ...state13.activeConnectorIds,
      [namespace]: void 0
    };
    StorageUtil.deleteConnectedConnectorId(namespace);
  },
  getConnectorId(namespace) {
    if (!namespace) {
      return void 0;
    }
    return state13.activeConnectorIds[namespace];
  },
  isConnected(namespace) {
    if (!namespace) {
      return Object.values(state13.activeConnectorIds).some((id) => Boolean(id));
    }
    return Boolean(state13.activeConnectorIds[namespace]);
  },
  resetConnectorIds() {
    state13.activeConnectorIds = { ...defaultActiveConnectors };
  }
};
var ConnectorController = withErrorBoundary(controller7);

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConnectorControllerUtil.js
var UPDATE_EMAIL_INTERVAL_MS = 1e3;
var ConnectorControllerUtil = {
  checkNamespaceConnectorId(namespace, connectorId) {
    return ConnectorController.getConnectorId(namespace) === connectorId;
  },
  isSocialProvider(socialProvider) {
    return ConstantsUtil2.DEFAULT_REMOTE_FEATURES.socials.includes(socialProvider);
  },
  connectWalletConnect({ walletConnect, connector, closeModalOnConnect = true, redirectViewOnModalClose = "Connect", onOpen, onConnect }) {
    return new Promise((resolve, reject) => {
      if (walletConnect) {
        ConnectorController.setActiveConnector(connector);
      }
      onOpen == null ? void 0 : onOpen(CoreHelperUtil.isMobile() && walletConnect);
      if (redirectViewOnModalClose) {
        const unsubscribeModalController = ModalController.subscribeKey("open", (val) => {
          if (!val) {
            if (RouterController.state.view !== redirectViewOnModalClose) {
              RouterController.replace(redirectViewOnModalClose);
            }
            unsubscribeModalController();
            reject(new Error("Modal closed"));
          }
        });
      }
      const unsubscribeChainController = ChainController.subscribeKey("activeCaipAddress", (val) => {
        if (val) {
          onConnect == null ? void 0 : onConnect();
          if (closeModalOnConnect) {
            ModalController.close();
          }
          unsubscribeChainController();
          resolve(ParseUtil.parseCaipAddress(val));
        }
      });
    });
  },
  connectExternal(connector) {
    return new Promise((resolve, reject) => {
      const unsubscribeChainController = ChainController.subscribeKey("activeCaipAddress", (val) => {
        if (val) {
          ModalController.close();
          unsubscribeChainController();
          resolve(ParseUtil.parseCaipAddress(val));
        }
      });
      ConnectionController.connectExternal(connector, connector.chain).catch(() => {
        unsubscribeChainController();
        reject(new Error("Connection rejected"));
      });
    });
  },
  connectSocial({ social, namespace, closeModalOnConnect = true, onOpenFarcaster, onConnect }) {
    let socialWindow = AccountController.state.socialWindow;
    let socialProvider = AccountController.state.socialProvider;
    let connectingSocial = false;
    let popupWindow = null;
    const namespaceToUse = namespace || ChainController.state.activeChain;
    const unsubscribeChainController = ChainController.subscribeKey("activeCaipAddress", (val) => {
      if (val) {
        if (closeModalOnConnect) {
          ModalController.close();
        }
        unsubscribeChainController();
      }
    });
    return new Promise((resolve, reject) => {
      async function handleSocialConnection(event) {
        var _a2, _b;
        if ((_a2 = event.data) == null ? void 0 : _a2.resultUri) {
          if (event.origin === ConstantsUtil.SECURE_SITE_SDK_ORIGIN) {
            window.removeEventListener("message", handleSocialConnection, false);
            try {
              const authConnector = ConnectorController.getAuthConnector(namespaceToUse);
              if (authConnector && !connectingSocial) {
                if (socialWindow) {
                  socialWindow.close();
                  AccountController.setSocialWindow(void 0, namespaceToUse);
                  socialWindow = AccountController.state.socialWindow;
                }
                connectingSocial = true;
                const uri = event.data.resultUri;
                if (socialProvider) {
                  EventsController.sendEvent({
                    type: "track",
                    event: "SOCIAL_LOGIN_REQUEST_USER_DATA",
                    properties: { provider: socialProvider }
                  });
                }
                if (socialProvider) {
                  StorageUtil.setConnectedSocialProvider(socialProvider);
                  await ConnectionController.connectExternal({
                    id: authConnector.id,
                    type: authConnector.type,
                    socialUri: uri
                  }, authConnector.chain);
                  const caipAddress = ChainController.state.activeCaipAddress;
                  if (!caipAddress) {
                    reject(new Error("Failed to connect"));
                    return;
                  }
                  resolve(ParseUtil.parseCaipAddress(caipAddress));
                  EventsController.sendEvent({
                    type: "track",
                    event: "SOCIAL_LOGIN_SUCCESS",
                    properties: {
                      provider: socialProvider,
                      caipNetworkId: (_b = ChainController.getActiveCaipNetwork()) == null ? void 0 : _b.caipNetworkId
                    }
                  });
                }
              }
            } catch (err) {
              if (socialProvider) {
                EventsController.sendEvent({
                  type: "track",
                  event: "SOCIAL_LOGIN_ERROR",
                  properties: { provider: socialProvider }
                });
              }
              reject(new Error("Failed to connect"));
            }
          } else if (socialProvider) {
            EventsController.sendEvent({
              type: "track",
              event: "SOCIAL_LOGIN_ERROR",
              properties: { provider: socialProvider }
            });
          }
        }
      }
      async function connectSocial() {
        if (social) {
          AccountController.setSocialProvider(social, namespaceToUse);
          socialProvider = AccountController.state.socialProvider;
          EventsController.sendEvent({
            type: "track",
            event: "SOCIAL_LOGIN_STARTED",
            properties: { provider: socialProvider }
          });
        }
        if (socialProvider === "farcaster") {
          onOpenFarcaster == null ? void 0 : onOpenFarcaster();
          const unsubscribeModalController = ModalController.subscribeKey("open", (val) => {
            if (!val && social === "farcaster") {
              reject(new Error("Popup closed"));
              onConnect == null ? void 0 : onConnect();
              unsubscribeModalController();
            }
          });
          const authConnector = ConnectorController.getAuthConnector();
          if (authConnector) {
            if (!AccountController.state.farcasterUrl) {
              try {
                const { url } = await authConnector.provider.getFarcasterUri();
                AccountController.setFarcasterUrl(url, namespaceToUse);
              } catch {
                reject(new Error("Failed to connect to farcaster"));
              }
            }
          }
        } else {
          const authConnector = ConnectorController.getAuthConnector();
          popupWindow = CoreHelperUtil.returnOpenHref(`${ConstantsUtil.SECURE_SITE_SDK_ORIGIN}/loading`, "popupWindow", "width=600,height=800,scrollbars=yes");
          try {
            if (authConnector && socialProvider) {
              const { uri } = await authConnector.provider.getSocialRedirectUri({
                provider: socialProvider
              });
              if (popupWindow && uri) {
                AccountController.setSocialWindow(popupWindow, namespaceToUse);
                socialWindow = AccountController.state.socialWindow;
                popupWindow.location.href = uri;
                const interval = setInterval(() => {
                  if ((socialWindow == null ? void 0 : socialWindow.closed) && !connectingSocial) {
                    reject(new Error("Popup closed"));
                    clearInterval(interval);
                  }
                }, 1e3);
                window.addEventListener("message", handleSocialConnection, false);
              } else {
                popupWindow == null ? void 0 : popupWindow.close();
                reject(new Error("Failed to initiate social connection"));
              }
            }
          } catch {
            reject(new Error("Failed to initiate social connection"));
            popupWindow == null ? void 0 : popupWindow.close();
          }
        }
      }
      connectSocial();
    });
  },
  connectEmail({ closeModalOnConnect = true, redirectViewOnModalClose = "Connect", onOpen, onConnect }) {
    return new Promise((resolve, reject) => {
      onOpen == null ? void 0 : onOpen();
      if (redirectViewOnModalClose) {
        const unsubscribeModalController = ModalController.subscribeKey("open", (val) => {
          if (!val) {
            if (RouterController.state.view !== redirectViewOnModalClose) {
              RouterController.replace(redirectViewOnModalClose);
            }
            unsubscribeModalController();
            reject(new Error("Modal closed"));
          }
        });
      }
      const unsubscribeChainController = ChainController.subscribeKey("activeCaipAddress", (val) => {
        if (val) {
          onConnect == null ? void 0 : onConnect();
          if (closeModalOnConnect) {
            ModalController.close();
          }
          unsubscribeChainController();
          resolve(ParseUtil.parseCaipAddress(val));
        }
      });
    });
  },
  async updateEmail() {
    const connectorId = StorageUtil.getConnectedConnectorId(ChainController.state.activeChain);
    const authConnector = ConnectorController.getAuthConnector();
    if (!authConnector) {
      throw new Error("No auth connector found");
    }
    if (connectorId !== ConstantsUtil.CONNECTOR_ID.AUTH) {
      throw new Error("Not connected to email or social");
    }
    const initialEmail = authConnector.provider.getEmail() ?? "";
    await ModalController.open({
      view: "UpdateEmailWallet",
      data: {
        email: initialEmail,
        redirectView: void 0
      }
    });
    return new Promise((resolve, reject) => {
      const interval = setInterval(() => {
        const newEmail = authConnector.provider.getEmail() ?? "";
        if (newEmail !== initialEmail) {
          ModalController.close();
          clearInterval(interval);
          unsubscribeModalController();
          resolve({ email: newEmail });
        }
      }, UPDATE_EMAIL_INTERVAL_MS);
      const unsubscribeModalController = ModalController.subscribeKey("open", (val) => {
        if (!val) {
          if (RouterController.state.view !== "Connect") {
            RouterController.push("Connect");
          }
          clearInterval(interval);
          unsubscribeModalController();
          reject(new Error("Modal closed"));
        }
      });
    });
  },
  canSwitchToSmartAccount(namespace) {
    const isSmartAccountEnabled = ChainController.checkIfSmartAccountEnabled();
    return isSmartAccountEnabled && getPreferredAccountType(namespace) === W3mFrameRpcConstants.ACCOUNT_TYPES.EOA;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ChainControllerUtil.js
function getActiveNetworkTokenAddress() {
  var _a2, _b;
  const namespace = ((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.chainNamespace) || "eip155";
  const chainId = ((_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.id) || 1;
  const address = ConstantsUtil2.NATIVE_TOKEN_ADDRESS[namespace];
  return `${namespace}:${chainId}:${address}`;
}
function getPreferredAccountType(namespace) {
  var _a2;
  const preferredAccountType = (_a2 = ChainController.getAccountData(namespace)) == null ? void 0 : _a2.preferredAccountType;
  return preferredAccountType;
}
function getActiveCaipNetwork(chainNamespace) {
  var _a2, _b;
  if (chainNamespace) {
    return (_b = (_a2 = ChainController.state.chains.get(chainNamespace)) == null ? void 0 : _a2.networkState) == null ? void 0 : _b.caipNetwork;
  }
  return ChainController.state.activeCaipNetwork;
}

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConnectionControllerUtil.js
var ConnectionControllerUtil = {
  getConnectionStatus(connection, namespace) {
    const connectedConnectorId = ConnectorController.state.activeConnectorIds[namespace];
    const connections = ConnectionController.getConnections(namespace);
    const isConnectorConnected = Boolean(connectedConnectorId) && connection.connectorId === connectedConnectorId;
    if (isConnectorConnected) {
      return "connected";
    }
    const isConnectionConnected = connections.some((c7) => c7.connectorId.toLowerCase() === connection.connectorId.toLowerCase());
    if (isConnectionConnected) {
      return "active";
    }
    return "disconnected";
  },
  excludeConnectorAddressFromConnections({ connections, connectorId, addresses }) {
    return connections.map((connection) => {
      const isConnectorMatch = connectorId ? connection.connectorId.toLowerCase() === connectorId.toLowerCase() : false;
      if (isConnectorMatch && addresses) {
        const filteredAccounts = connection.accounts.filter((account) => {
          const isAddressIncluded = addresses.some((address) => address.toLowerCase() === account.address.toLowerCase());
          return !isAddressIncluded;
        });
        return { ...connection, accounts: filteredAccounts };
      }
      return connection;
    });
  },
  excludeExistingConnections(connectorIds, newConnections) {
    const existingConnectorIds = new Set(connectorIds);
    return newConnections.filter((c7) => !existingConnectorIds.has(c7.connectorId));
  },
  getConnectionsByConnectorId(connections, connectorId) {
    return connections.filter((c7) => c7.connectorId.toLowerCase() === connectorId.toLowerCase());
  },
  getConnectionsData(namespace) {
    var _a2;
    const isMultiWalletEnabled = Boolean((_a2 = OptionsController.state.remoteFeatures) == null ? void 0 : _a2.multiWallet);
    const activeConnectorId = ConnectorController.state.activeConnectorIds[namespace];
    const connections = ConnectionController.getConnections(namespace);
    const recentConnections = ConnectionController.state.recentConnections.get(namespace) ?? [];
    const recentConnectionsWithCurrentActiveConnectors = recentConnections.filter((connection) => ConnectorController.getConnectorById(connection.connectorId));
    const dedupedRecentConnections = ConnectionControllerUtil.excludeExistingConnections([...connections.map((c7) => c7.connectorId), ...activeConnectorId ? [activeConnectorId] : []], recentConnectionsWithCurrentActiveConnectors);
    if (!isMultiWalletEnabled) {
      return {
        connections: connections.filter((c7) => c7.connectorId.toLowerCase() === (activeConnectorId == null ? void 0 : activeConnectorId.toLowerCase())),
        recentConnections: []
      };
    }
    return {
      connections,
      recentConnections: dedupedRecentConnections
    };
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/TransactionsController.js
var state14 = proxy({
  transactions: [],
  transactionsByYear: {},
  lastNetworkInView: void 0,
  loading: false,
  empty: false,
  next: void 0
});
var controller8 = {
  state: state14,
  subscribe(callback) {
    return subscribe(state14, () => callback(state14));
  },
  setLastNetworkInView(lastNetworkInView) {
    state14.lastNetworkInView = lastNetworkInView;
  },
  async fetchTransactions(accountAddress) {
    var _a2;
    if (!accountAddress) {
      throw new Error("Transactions can't be fetched without an accountAddress");
    }
    state14.loading = true;
    try {
      const response = await BlockchainApiController.fetchTransactions({
        account: accountAddress,
        cursor: state14.next,
        chainId: (_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId
      });
      const nonSpamTransactions = TransactionsController.filterSpamTransactions(response.data);
      const sameChainTransactions = TransactionsController.filterByConnectedChain(nonSpamTransactions);
      const filteredTransactions = [...state14.transactions, ...sameChainTransactions];
      state14.loading = false;
      state14.transactions = filteredTransactions;
      state14.transactionsByYear = TransactionsController.groupTransactionsByYearAndMonth(state14.transactionsByYear, sameChainTransactions);
      state14.empty = filteredTransactions.length === 0;
      state14.next = response.next ? response.next : void 0;
    } catch (error) {
      const activeChainNamespace = ChainController.state.activeChain;
      EventsController.sendEvent({
        type: "track",
        event: "ERROR_FETCH_TRANSACTIONS",
        properties: {
          address: accountAddress,
          projectId: OptionsController.state.projectId,
          cursor: state14.next,
          isSmartAccount: getPreferredAccountType(activeChainNamespace) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
      SnackController.showError("Failed to fetch transactions");
      state14.loading = false;
      state14.empty = true;
      state14.next = void 0;
    }
  },
  groupTransactionsByYearAndMonth(transactionsMap = {}, transactions = []) {
    const grouped = transactionsMap;
    transactions.forEach((transaction) => {
      const year = new Date(transaction.metadata.minedAt).getFullYear();
      const month = new Date(transaction.metadata.minedAt).getMonth();
      const yearTransactions = grouped[year] ?? {};
      const monthTransactions = yearTransactions[month] ?? [];
      const newMonthTransactions = monthTransactions.filter((tx) => tx.id !== transaction.id);
      grouped[year] = {
        ...yearTransactions,
        [month]: [...newMonthTransactions, transaction].sort((a3, b5) => new Date(b5.metadata.minedAt).getTime() - new Date(a3.metadata.minedAt).getTime())
      };
    });
    return grouped;
  },
  filterSpamTransactions(transactions) {
    return transactions.filter((transaction) => {
      const isAllSpam = transaction.transfers.every((transfer) => {
        var _a2;
        return ((_a2 = transfer.nft_info) == null ? void 0 : _a2.flags.is_spam) === true;
      });
      return !isAllSpam;
    });
  },
  filterByConnectedChain(transactions) {
    var _a2;
    const chainId = (_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId;
    const filteredTransactions = transactions.filter((transaction) => transaction.metadata.chain === chainId);
    return filteredTransactions;
  },
  clearCursor() {
    state14.next = void 0;
  },
  resetTransactions() {
    state14.transactions = [];
    state14.transactionsByYear = {};
    state14.lastNetworkInView = void 0;
    state14.loading = false;
    state14.empty = false;
    state14.next = void 0;
  }
};
var TransactionsController = withErrorBoundary(controller8, "API_ERROR");

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectionController.js
var state15 = proxy({
  connections: /* @__PURE__ */ new Map(),
  recentConnections: /* @__PURE__ */ new Map(),
  isSwitchingConnection: false,
  wcError: false,
  buffering: false,
  status: "disconnected"
});
var wcConnectionPromise;
var controller9 = {
  state: state15,
  subscribe(callback) {
    return subscribe(state15, () => callback(state15));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state15, key, callback);
  },
  _getClient() {
    return state15._client;
  },
  setClient(client) {
    state15._client = ref(client);
  },
  initialize(adapters) {
    const namespaces = adapters.filter((a3) => Boolean(a3.namespace)).map((a3) => a3.namespace);
    ConnectionController.syncStorageConnections(namespaces);
  },
  syncStorageConnections(namespaces) {
    const storageConnections = StorageUtil.getConnections();
    const namespacesToSync = namespaces ?? Array.from(ChainController.state.chains.keys());
    for (const namespace of namespacesToSync) {
      const storageConnectionsByNamespace = storageConnections[namespace] ?? [];
      const recentConnectionsMap = new Map(state15.recentConnections);
      recentConnectionsMap.set(namespace, storageConnectionsByNamespace);
      state15.recentConnections = recentConnectionsMap;
    }
  },
  getConnections(namespace) {
    return namespace ? state15.connections.get(namespace) ?? [] : [];
  },
  hasAnyConnection(connectorId) {
    const connections = ConnectionController.state.connections;
    return Array.from(connections.values()).flatMap((_connections) => _connections).some(({ connectorId: _connectorId }) => _connectorId === connectorId);
  },
  async connectWalletConnect() {
    var _a2, _b, _c2, _d;
    if (CoreHelperUtil.isTelegram() || CoreHelperUtil.isSafari() && CoreHelperUtil.isIos()) {
      if (wcConnectionPromise) {
        await wcConnectionPromise;
        wcConnectionPromise = void 0;
        return;
      }
      if (!CoreHelperUtil.isPairingExpired(state15 == null ? void 0 : state15.wcPairingExpiry)) {
        const link = state15.wcUri;
        state15.wcUri = link;
        return;
      }
      wcConnectionPromise = (_b = (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.connectWalletConnect) == null ? void 0 : _b.call(_a2).catch(() => void 0);
      ConnectionController.state.status = "connecting";
      await wcConnectionPromise;
      wcConnectionPromise = void 0;
      state15.wcPairingExpiry = void 0;
      ConnectionController.state.status = "connected";
    } else {
      await ((_d = (_c2 = ConnectionController._getClient()) == null ? void 0 : _c2.connectWalletConnect) == null ? void 0 : _d.call(_c2));
    }
  },
  async connectExternal(options, chain2, setChain = true) {
    var _a2, _b;
    const connectData = await ((_b = (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.connectExternal) == null ? void 0 : _b.call(_a2, options));
    if (setChain) {
      ChainController.setActiveNamespace(chain2);
    }
    return connectData;
  },
  async reconnectExternal(options) {
    var _a2, _b;
    await ((_b = (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.reconnectExternal) == null ? void 0 : _b.call(_a2, options));
    const namespace = options.chain || ChainController.state.activeChain;
    if (namespace) {
      ConnectorController.setConnectorId(options.id, namespace);
    }
  },
  async setPreferredAccountType(accountType, namespace) {
    var _a2;
    if (!namespace) {
      return;
    }
    ModalController.setLoading(true, ChainController.state.activeChain);
    const authConnector = ConnectorController.getAuthConnector();
    if (!authConnector) {
      return;
    }
    AccountController.setPreferredAccountType(accountType, namespace);
    await authConnector.provider.setPreferredAccount(accountType);
    StorageUtil.setPreferredAccountTypes(Object.entries(ChainController.state.chains).reduce((acc, [key, _3]) => {
      const namespace2 = key;
      const accountType2 = getPreferredAccountType(namespace2);
      if (accountType2 !== void 0) {
        ;
        acc[namespace2] = accountType2;
      }
      return acc;
    }, {}));
    await ConnectionController.reconnectExternal(authConnector);
    ModalController.setLoading(false, ChainController.state.activeChain);
    EventsController.sendEvent({
      type: "track",
      event: "SET_PREFERRED_ACCOUNT_TYPE",
      properties: {
        accountType,
        network: ((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId) || ""
      }
    });
  },
  async signMessage(message) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.signMessage(message);
  },
  parseUnits(value, decimals) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.parseUnits(value, decimals);
  },
  formatUnits(value, decimals) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.formatUnits(value, decimals);
  },
  async sendTransaction(args) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.sendTransaction(args);
  },
  async getCapabilities(params) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.getCapabilities(params);
  },
  async grantPermissions(params) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.grantPermissions(params);
  },
  async walletGetAssets(params) {
    var _a2;
    return ((_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.walletGetAssets(params)) ?? {};
  },
  async estimateGas(args) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.estimateGas(args);
  },
  async writeContract(args) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.writeContract(args);
  },
  async getEnsAddress(value) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.getEnsAddress(value);
  },
  async getEnsAvatar(value) {
    var _a2;
    return (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.getEnsAvatar(value);
  },
  checkInstalled(ids) {
    var _a2, _b;
    return ((_b = (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.checkInstalled) == null ? void 0 : _b.call(_a2, ids)) || false;
  },
  resetWcConnection() {
    state15.wcUri = void 0;
    state15.wcPairingExpiry = void 0;
    state15.wcLinking = void 0;
    state15.recentWallet = void 0;
    state15.status = "disconnected";
    TransactionsController.resetTransactions();
    StorageUtil.deleteWalletConnectDeepLink();
  },
  resetUri() {
    state15.wcUri = void 0;
    state15.wcPairingExpiry = void 0;
    wcConnectionPromise = void 0;
  },
  finalizeWcConnection() {
    var _a2, _b, _c2;
    const { wcLinking, recentWallet } = ConnectionController.state;
    if (wcLinking) {
      StorageUtil.setWalletConnectDeepLink(wcLinking);
    }
    if (recentWallet) {
      StorageUtil.setAppKitRecent(recentWallet);
    }
    EventsController.sendEvent({
      type: "track",
      event: "CONNECT_SUCCESS",
      properties: {
        method: wcLinking ? "mobile" : "qrcode",
        name: ((_b = (_a2 = RouterController.state.data) == null ? void 0 : _a2.wallet) == null ? void 0 : _b.name) || "Unknown",
        caipNetworkId: (_c2 = ChainController.getActiveCaipNetwork()) == null ? void 0 : _c2.caipNetworkId
      }
    });
  },
  setWcBasic(wcBasic) {
    state15.wcBasic = wcBasic;
  },
  setUri(uri) {
    state15.wcUri = uri;
    state15.wcPairingExpiry = CoreHelperUtil.getPairingExpiry();
  },
  setWcLinking(wcLinking) {
    state15.wcLinking = wcLinking;
  },
  setWcError(wcError) {
    state15.wcError = wcError;
    state15.buffering = false;
  },
  setRecentWallet(wallet) {
    state15.recentWallet = wallet;
  },
  setBuffering(buffering) {
    state15.buffering = buffering;
  },
  setStatus(status) {
    state15.status = status;
  },
  setIsSwitchingConnection(isSwitchingConnection) {
    state15.isSwitchingConnection = isSwitchingConnection;
  },
  async disconnect({ id, namespace, initialDisconnect } = {}) {
    var _a2;
    try {
      await ((_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.disconnect({
        id,
        chainNamespace: namespace,
        initialDisconnect
      }));
    } catch (error) {
      throw new AppKitError("Failed to disconnect", "INTERNAL_SDK_ERROR", error);
    }
  },
  setConnections(connections, chainNamespace) {
    const connectionsMap = new Map(state15.connections);
    connectionsMap.set(chainNamespace, connections);
    state15.connections = connectionsMap;
  },
  async handleAuthAccountSwitch({ address, namespace }) {
    var _a2, _b;
    const smartAccount = (_b = (_a2 = AccountController.state.user) == null ? void 0 : _a2.accounts) == null ? void 0 : _b.find((c7) => c7.type === "smartAccount");
    const accountType = smartAccount && smartAccount.address.toLowerCase() === address.toLowerCase() && ConnectorControllerUtil.canSwitchToSmartAccount(namespace) ? "smartAccount" : "eoa";
    await ConnectionController.setPreferredAccountType(accountType, namespace);
  },
  async handleActiveConnection({ connection, namespace, address }) {
    const connector = ConnectorController.getConnectorById(connection.connectorId);
    const isAuthConnector = connection.connectorId === ConstantsUtil.CONNECTOR_ID.AUTH;
    if (!connector) {
      throw new Error(`No connector found for connection: ${connection.connectorId}`);
    }
    if (!isAuthConnector) {
      const connectData = await ConnectionController.connectExternal({
        id: connector.id,
        type: connector.type,
        provider: connector.provider,
        address,
        chain: namespace
      }, namespace);
      return connectData == null ? void 0 : connectData.address;
    } else if (isAuthConnector && address) {
      await ConnectionController.handleAuthAccountSwitch({ address, namespace });
    }
    return address;
  },
  async handleDisconnectedConnection({ connection, namespace, address, closeModalOnConnect }) {
    var _a2, _b;
    const connector = ConnectorController.getConnectorById(connection.connectorId);
    const authName = (_b = (_a2 = connection.auth) == null ? void 0 : _a2.name) == null ? void 0 : _b.toLowerCase();
    const isAuthConnector = connection.connectorId === ConstantsUtil.CONNECTOR_ID.AUTH;
    const isWCConnector = connection.connectorId === ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT;
    if (!connector) {
      throw new Error(`No connector found for connection: ${connection.connectorId}`);
    }
    let newAddress = void 0;
    if (isAuthConnector) {
      if (authName && ConnectorControllerUtil.isSocialProvider(authName)) {
        const { address: socialAddress } = await ConnectorControllerUtil.connectSocial({
          social: authName,
          closeModalOnConnect,
          onOpenFarcaster() {
            ModalController.open({ view: "ConnectingFarcaster" });
          },
          onConnect() {
            RouterController.replace("ProfileWallets");
          }
        });
        newAddress = socialAddress;
      } else {
        const { address: emailAddress } = await ConnectorControllerUtil.connectEmail({
          closeModalOnConnect,
          onOpen() {
            ModalController.open({ view: "EmailLogin" });
          },
          onConnect() {
            RouterController.replace("ProfileWallets");
          }
        });
        newAddress = emailAddress;
      }
    } else if (isWCConnector) {
      const { address: wcAddress } = await ConnectorControllerUtil.connectWalletConnect({
        walletConnect: true,
        connector,
        closeModalOnConnect,
        onOpen(isMobile) {
          ModalController.open({ view: isMobile ? "AllWallets" : "ConnectingWalletConnect" });
        },
        onConnect() {
          RouterController.replace("ProfileWallets");
        }
      });
      newAddress = wcAddress;
    } else {
      const connectData = await ConnectionController.connectExternal({
        id: connector.id,
        type: connector.type,
        provider: connector.provider,
        chain: namespace
      }, namespace);
      if (connectData) {
        newAddress = connectData.address;
      }
    }
    if (isAuthConnector && address) {
      await ConnectionController.handleAuthAccountSwitch({ address, namespace });
    }
    return newAddress;
  },
  async switchConnection({ connection, address, namespace, closeModalOnConnect, onChange }) {
    let currentAddress = void 0;
    const caipAddress = AccountController.getCaipAddress(namespace);
    if (caipAddress) {
      const { address: currentAddressParsed } = ParseUtil.parseCaipAddress(caipAddress);
      currentAddress = currentAddressParsed;
    }
    const status = ConnectionControllerUtil.getConnectionStatus(connection, namespace);
    switch (status) {
      case "connected":
      case "active": {
        const newAddress = await ConnectionController.handleActiveConnection({
          connection,
          namespace,
          address
        });
        if (currentAddress && newAddress) {
          const hasSwitchedAccount = newAddress.toLowerCase() !== currentAddress.toLowerCase();
          onChange == null ? void 0 : onChange({
            address: newAddress,
            namespace,
            hasSwitchedAccount,
            hasSwitchedWallet: status === "active"
          });
        }
        break;
      }
      case "disconnected": {
        const newAddress = await ConnectionController.handleDisconnectedConnection({
          connection,
          namespace,
          address,
          closeModalOnConnect
        });
        if (newAddress) {
          onChange == null ? void 0 : onChange({
            address: newAddress,
            namespace,
            hasSwitchedAccount: true,
            hasSwitchedWallet: true
          });
        }
        break;
      }
      default:
        throw new Error(`Invalid connection status: ${status}`);
    }
  }
};
var ConnectionController = withErrorBoundary(controller9);

// node_modules/viem/_esm/utils/getAction.js
function getAction2(client, actionFn, name2) {
  const action_implicit = client[actionFn.name];
  if (typeof action_implicit === "function")
    return action_implicit;
  const action_explicit = client[name2];
  if (typeof action_explicit === "function")
    return action_explicit;
  return (params) => actionFn(client, params);
}

// node_modules/viem/_esm/utils/errors/getContractError.js
var EXECUTION_REVERTED_ERROR_CODE = 3;
function getContractError2(err, { abi, address, args, docsPath, functionName, sender }) {
  const error = err instanceof RawContractError ? err : err instanceof BaseError2 ? err.walk((err2) => "data" in err2) || err.walk() : {};
  const { code: code2, data, details, message, shortMessage } = error;
  const cause = (() => {
    if (err instanceof AbiDecodingZeroDataError)
      return new ContractFunctionZeroDataError({ functionName });
    if ([EXECUTION_REVERTED_ERROR_CODE, InternalRpcError.code].includes(code2) && (data || details || message || shortMessage)) {
      return new ContractFunctionRevertedError({
        abi,
        data: typeof data === "object" ? data.data : data,
        functionName,
        message: error instanceof RpcRequestError ? details : shortMessage ?? message
      });
    }
    return err;
  })();
  return new ContractFunctionExecutionError(cause, {
    abi,
    args,
    contractAddress: address,
    docsPath,
    functionName,
    sender
  });
}

// node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js
function publicKeyToAddress2(publicKey) {
  const address = keccak2562(`0x${publicKey.substring(4)}`).substring(26);
  return checksumAddress2(`0x${address}`);
}

// node_modules/viem/_esm/utils/signature/recoverPublicKey.js
async function recoverPublicKey2({ hash: hash2, signature }) {
  const hashHex = isHex2(hash2) ? hash2 : toHex2(hash2);
  const { secp256k1: secp256k14 } = await import("./secp256k1-GER23VM6.js");
  const signature_ = (() => {
    if (typeof signature === "object" && "r" in signature && "s" in signature) {
      const { r: r3, s: s3, v: v6, yParity } = signature;
      const yParityOrV2 = Number(yParity ?? v6);
      const recoveryBit2 = toRecoveryBit2(yParityOrV2);
      return new secp256k14.Signature(hexToBigInt2(r3), hexToBigInt2(s3)).addRecoveryBit(recoveryBit2);
    }
    const signatureHex = isHex2(signature) ? signature : toHex2(signature);
    if (size3(signatureHex) !== 65)
      throw new Error("invalid signature length");
    const yParityOrV = hexToNumber2(`0x${signatureHex.slice(130)}`);
    const recoveryBit = toRecoveryBit2(yParityOrV);
    return secp256k14.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);
  })();
  const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);
  return `0x${publicKey}`;
}
function toRecoveryBit2(yParityOrV) {
  if (yParityOrV === 0 || yParityOrV === 1)
    return yParityOrV;
  if (yParityOrV === 27)
    return 0;
  if (yParityOrV === 28)
    return 1;
  throw new Error("Invalid yParityOrV value");
}

// node_modules/viem/_esm/utils/signature/recoverAddress.js
async function recoverAddress2({ hash: hash2, signature }) {
  return publicKeyToAddress2(await recoverPublicKey2({ hash: hash2, signature }));
}

// node_modules/viem/_esm/utils/encoding/toRlp.js
function toRlp2(bytes, to4 = "hex") {
  const encodable = getEncodable(bytes);
  const cursor = createCursor(new Uint8Array(encodable.length));
  encodable.encode(cursor);
  if (to4 === "hex")
    return bytesToHex(cursor.bytes);
  return cursor.bytes;
}
function getEncodable(bytes) {
  if (Array.isArray(bytes))
    return getEncodableList(bytes.map((x6) => getEncodable(x6)));
  return getEncodableBytes(bytes);
}
function getEncodableList(list) {
  const bodyLength = list.reduce((acc, x6) => acc + x6.length, 0);
  const sizeOfBodyLength = getSizeOfLength(bodyLength);
  const length2 = (() => {
    if (bodyLength <= 55)
      return 1 + bodyLength;
    return 1 + sizeOfBodyLength + bodyLength;
  })();
  return {
    length: length2,
    encode(cursor) {
      if (bodyLength <= 55) {
        cursor.pushByte(192 + bodyLength);
      } else {
        cursor.pushByte(192 + 55 + sizeOfBodyLength);
        if (sizeOfBodyLength === 1)
          cursor.pushUint8(bodyLength);
        else if (sizeOfBodyLength === 2)
          cursor.pushUint16(bodyLength);
        else if (sizeOfBodyLength === 3)
          cursor.pushUint24(bodyLength);
        else
          cursor.pushUint32(bodyLength);
      }
      for (const { encode: encode12 } of list) {
        encode12(cursor);
      }
    }
  };
}
function getEncodableBytes(bytesOrHex) {
  const bytes = typeof bytesOrHex === "string" ? hexToBytes(bytesOrHex) : bytesOrHex;
  const sizeOfBytesLength = getSizeOfLength(bytes.length);
  const length2 = (() => {
    if (bytes.length === 1 && bytes[0] < 128)
      return 1;
    if (bytes.length <= 55)
      return 1 + bytes.length;
    return 1 + sizeOfBytesLength + bytes.length;
  })();
  return {
    length: length2,
    encode(cursor) {
      if (bytes.length === 1 && bytes[0] < 128) {
        cursor.pushBytes(bytes);
      } else if (bytes.length <= 55) {
        cursor.pushByte(128 + bytes.length);
        cursor.pushBytes(bytes);
      } else {
        cursor.pushByte(128 + 55 + sizeOfBytesLength);
        if (sizeOfBytesLength === 1)
          cursor.pushUint8(bytes.length);
        else if (sizeOfBytesLength === 2)
          cursor.pushUint16(bytes.length);
        else if (sizeOfBytesLength === 3)
          cursor.pushUint24(bytes.length);
        else
          cursor.pushUint32(bytes.length);
        cursor.pushBytes(bytes);
      }
    }
  };
}
function getSizeOfLength(length2) {
  if (length2 < 2 ** 8)
    return 1;
  if (length2 < 2 ** 16)
    return 2;
  if (length2 < 2 ** 24)
    return 3;
  if (length2 < 2 ** 32)
    return 4;
  throw new BaseError2("Length is too large.");
}

// node_modules/viem/_esm/utils/authorization/hashAuthorization.js
function hashAuthorization2(parameters) {
  const { chainId, nonce, to: to4 } = parameters;
  const address = parameters.contractAddress ?? parameters.address;
  const hash2 = keccak2562(concatHex([
    "0x05",
    toRlp2([
      chainId ? numberToHex2(chainId) : "0x",
      address,
      nonce ? numberToHex2(nonce) : "0x"
    ])
  ]));
  if (to4 === "bytes")
    return hexToBytes(hash2);
  return hash2;
}

// node_modules/viem/_esm/utils/authorization/recoverAuthorizationAddress.js
async function recoverAuthorizationAddress2(parameters) {
  const { authorization, signature } = parameters;
  return recoverAddress2({
    hash: hashAuthorization2(authorization),
    signature: signature ?? authorization
  });
}

// node_modules/viem/_esm/errors/estimateGas.js
var EstimateGasExecutionError2 = class extends BaseError2 {
  constructor(cause, { account, docsPath, chain: chain2, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to: to4, value }) {
    var _a2;
    const prettyArgs = prettyPrint({
      from: account == null ? void 0 : account.address,
      to: to4,
      value: typeof value !== "undefined" && `${formatEther(value)} ${((_a2 = chain2 == null ? void 0 : chain2.nativeCurrency) == null ? void 0 : _a2.symbol) || "ETH"}`,
      data,
      gas,
      gasPrice: typeof gasPrice !== "undefined" && `${formatGwei(gasPrice)} gwei`,
      maxFeePerGas: typeof maxFeePerGas !== "undefined" && `${formatGwei(maxFeePerGas)} gwei`,
      maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== "undefined" && `${formatGwei(maxPriorityFeePerGas)} gwei`,
      nonce
    });
    super(cause.shortMessage, {
      cause,
      docsPath,
      metaMessages: [
        ...cause.metaMessages ? [...cause.metaMessages, " "] : [],
        "Estimate Gas Arguments:",
        prettyArgs
      ].filter(Boolean),
      name: "EstimateGasExecutionError"
    });
    Object.defineProperty(this, "cause", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.cause = cause;
  }
};

// node_modules/viem/_esm/utils/errors/getEstimateGasError.js
function getEstimateGasError2(err, { docsPath, ...args }) {
  const cause = (() => {
    const cause2 = getNodeError(err, args);
    if (cause2 instanceof UnknownNodeError)
      return err;
    return cause2;
  })();
  return new EstimateGasExecutionError2(cause, {
    docsPath,
    ...args
  });
}

// node_modules/viem/_esm/errors/fee.js
var BaseFeeScalarError2 = class extends BaseError2 {
  constructor() {
    super("`baseFeeMultiplier` must be greater than 1.", {
      name: "BaseFeeScalarError"
    });
  }
};
var Eip1559FeesNotSupportedError2 = class extends BaseError2 {
  constructor() {
    super("Chain does not support EIP-1559 fees.", {
      name: "Eip1559FeesNotSupportedError"
    });
  }
};
var MaxFeePerGasTooLowError2 = class extends BaseError2 {
  constructor({ maxPriorityFeePerGas }) {
    super(`\`maxFeePerGas\` cannot be less than the \`maxPriorityFeePerGas\` (${formatGwei(maxPriorityFeePerGas)} gwei).`, { name: "MaxFeePerGasTooLowError" });
  }
};

// node_modules/viem/_esm/errors/block.js
var BlockNotFoundError2 = class extends BaseError2 {
  constructor({ blockHash, blockNumber }) {
    let identifier = "Block";
    if (blockHash)
      identifier = `Block at hash "${blockHash}"`;
    if (blockNumber)
      identifier = `Block at number "${blockNumber}"`;
    super(`${identifier} could not be found.`, { name: "BlockNotFoundError" });
  }
};

// node_modules/viem/_esm/utils/formatters/transaction.js
var transactionType2 = {
  "0x0": "legacy",
  "0x1": "eip2930",
  "0x2": "eip1559",
  "0x3": "eip4844",
  "0x4": "eip7702"
};
function formatTransaction2(transaction, _3) {
  const transaction_ = {
    ...transaction,
    blockHash: transaction.blockHash ? transaction.blockHash : null,
    blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
    chainId: transaction.chainId ? hexToNumber2(transaction.chainId) : void 0,
    gas: transaction.gas ? BigInt(transaction.gas) : void 0,
    gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
    maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
    maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
    nonce: transaction.nonce ? hexToNumber2(transaction.nonce) : void 0,
    to: transaction.to ? transaction.to : null,
    transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
    type: transaction.type ? transactionType2[transaction.type] : void 0,
    typeHex: transaction.type ? transaction.type : void 0,
    value: transaction.value ? BigInt(transaction.value) : void 0,
    v: transaction.v ? BigInt(transaction.v) : void 0
  };
  if (transaction.authorizationList)
    transaction_.authorizationList = formatAuthorizationList2(transaction.authorizationList);
  transaction_.yParity = (() => {
    if (transaction.yParity)
      return Number(transaction.yParity);
    if (typeof transaction_.v === "bigint") {
      if (transaction_.v === 0n || transaction_.v === 27n)
        return 0;
      if (transaction_.v === 1n || transaction_.v === 28n)
        return 1;
      if (transaction_.v >= 35n)
        return transaction_.v % 2n === 0n ? 1 : 0;
    }
    return void 0;
  })();
  if (transaction_.type === "legacy") {
    delete transaction_.accessList;
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
    delete transaction_.yParity;
  }
  if (transaction_.type === "eip2930") {
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
  }
  if (transaction_.type === "eip1559") {
    delete transaction_.maxFeePerBlobGas;
  }
  return transaction_;
}
var defineTransaction2 = defineFormatter2("transaction", formatTransaction2);
function formatAuthorizationList2(authorizationList) {
  return authorizationList.map((authorization) => ({
    address: authorization.address,
    chainId: Number(authorization.chainId),
    nonce: Number(authorization.nonce),
    r: authorization.r,
    s: authorization.s,
    yParity: Number(authorization.yParity)
  }));
}

// node_modules/viem/_esm/utils/formatters/block.js
function formatBlock2(block, _3) {
  const transactions = (block.transactions ?? []).map((transaction) => {
    if (typeof transaction === "string")
      return transaction;
    return formatTransaction2(transaction);
  });
  return {
    ...block,
    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
    difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
    excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
    hash: block.hash ? block.hash : null,
    logsBloom: block.logsBloom ? block.logsBloom : null,
    nonce: block.nonce ? block.nonce : null,
    number: block.number ? BigInt(block.number) : null,
    size: block.size ? BigInt(block.size) : void 0,
    timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
    transactions,
    totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
  };
}
var defineBlock2 = defineFormatter2("block", formatBlock2);

// node_modules/viem/_esm/actions/public/getBlock.js
async function getBlock2(client, { blockHash, blockNumber, blockTag = client.experimental_blockTag ?? "latest", includeTransactions: includeTransactions_ } = {}) {
  var _a2, _b, _c2;
  const includeTransactions = includeTransactions_ ?? false;
  const blockNumberHex = blockNumber !== void 0 ? numberToHex2(blockNumber) : void 0;
  let block = null;
  if (blockHash) {
    block = await client.request({
      method: "eth_getBlockByHash",
      params: [blockHash, includeTransactions]
    }, { dedupe: true });
  } else {
    block = await client.request({
      method: "eth_getBlockByNumber",
      params: [blockNumberHex || blockTag, includeTransactions]
    }, { dedupe: Boolean(blockNumberHex) });
  }
  if (!block)
    throw new BlockNotFoundError2({ blockHash, blockNumber });
  const format = ((_c2 = (_b = (_a2 = client.chain) == null ? void 0 : _a2.formatters) == null ? void 0 : _b.block) == null ? void 0 : _c2.format) || formatBlock2;
  return format(block, "getBlock");
}

// node_modules/viem/_esm/actions/public/getGasPrice.js
async function getGasPrice2(client) {
  const gasPrice = await client.request({
    method: "eth_gasPrice"
  });
  return BigInt(gasPrice);
}

// node_modules/viem/_esm/actions/public/estimateMaxPriorityFeePerGas.js
async function internal_estimateMaxPriorityFeePerGas2(client, args) {
  var _a2, _b;
  const { block: block_, chain: chain2 = client.chain, request } = args || {};
  try {
    const maxPriorityFeePerGas = ((_a2 = chain2 == null ? void 0 : chain2.fees) == null ? void 0 : _a2.maxPriorityFeePerGas) ?? ((_b = chain2 == null ? void 0 : chain2.fees) == null ? void 0 : _b.defaultPriorityFee);
    if (typeof maxPriorityFeePerGas === "function") {
      const block = block_ || await getAction2(client, getBlock2, "getBlock")({});
      const maxPriorityFeePerGas_ = await maxPriorityFeePerGas({
        block,
        client,
        request
      });
      if (maxPriorityFeePerGas_ === null)
        throw new Error();
      return maxPriorityFeePerGas_;
    }
    if (typeof maxPriorityFeePerGas !== "undefined")
      return maxPriorityFeePerGas;
    const maxPriorityFeePerGasHex = await client.request({
      method: "eth_maxPriorityFeePerGas"
    });
    return hexToBigInt2(maxPriorityFeePerGasHex);
  } catch {
    const [block, gasPrice] = await Promise.all([
      block_ ? Promise.resolve(block_) : getAction2(client, getBlock2, "getBlock")({}),
      getAction2(client, getGasPrice2, "getGasPrice")({})
    ]);
    if (typeof block.baseFeePerGas !== "bigint")
      throw new Eip1559FeesNotSupportedError2();
    const maxPriorityFeePerGas = gasPrice - block.baseFeePerGas;
    if (maxPriorityFeePerGas < 0n)
      return 0n;
    return maxPriorityFeePerGas;
  }
}

// node_modules/viem/_esm/actions/public/estimateFeesPerGas.js
async function internal_estimateFeesPerGas2(client, args) {
  var _a2, _b;
  const { block: block_, chain: chain2 = client.chain, request, type = "eip1559" } = args || {};
  const baseFeeMultiplier = await (async () => {
    var _a3, _b2;
    if (typeof ((_a3 = chain2 == null ? void 0 : chain2.fees) == null ? void 0 : _a3.baseFeeMultiplier) === "function")
      return chain2.fees.baseFeeMultiplier({
        block: block_,
        client,
        request
      });
    return ((_b2 = chain2 == null ? void 0 : chain2.fees) == null ? void 0 : _b2.baseFeeMultiplier) ?? 1.2;
  })();
  if (baseFeeMultiplier < 1)
    throw new BaseFeeScalarError2();
  const decimals = ((_a2 = baseFeeMultiplier.toString().split(".")[1]) == null ? void 0 : _a2.length) ?? 0;
  const denominator = 10 ** decimals;
  const multiply = (base3) => base3 * BigInt(Math.ceil(baseFeeMultiplier * denominator)) / BigInt(denominator);
  const block = block_ ? block_ : await getAction2(client, getBlock2, "getBlock")({});
  if (typeof ((_b = chain2 == null ? void 0 : chain2.fees) == null ? void 0 : _b.estimateFeesPerGas) === "function") {
    const fees = await chain2.fees.estimateFeesPerGas({
      block: block_,
      client,
      multiply,
      request,
      type
    });
    if (fees !== null)
      return fees;
  }
  if (type === "eip1559") {
    if (typeof block.baseFeePerGas !== "bigint")
      throw new Eip1559FeesNotSupportedError2();
    const maxPriorityFeePerGas = typeof (request == null ? void 0 : request.maxPriorityFeePerGas) === "bigint" ? request.maxPriorityFeePerGas : await internal_estimateMaxPriorityFeePerGas2(client, {
      block,
      chain: chain2,
      request
    });
    const baseFeePerGas = multiply(block.baseFeePerGas);
    const maxFeePerGas = (request == null ? void 0 : request.maxFeePerGas) ?? baseFeePerGas + maxPriorityFeePerGas;
    return {
      maxFeePerGas,
      maxPriorityFeePerGas
    };
  }
  const gasPrice = (request == null ? void 0 : request.gasPrice) ?? multiply(await getAction2(client, getGasPrice2, "getGasPrice")({}));
  return {
    gasPrice
  };
}

// node_modules/viem/_esm/actions/public/getTransactionCount.js
async function getTransactionCount2(client, { address, blockTag = "latest", blockNumber }) {
  const count = await client.request({
    method: "eth_getTransactionCount",
    params: [
      address,
      typeof blockNumber === "bigint" ? numberToHex2(blockNumber) : blockTag
    ]
  }, {
    dedupe: Boolean(blockNumber)
  });
  return hexToNumber2(count);
}

// node_modules/viem/_esm/utils/blob/blobsToCommitments.js
function blobsToCommitments2(parameters) {
  const { kzg } = parameters;
  const to4 = parameters.to ?? (typeof parameters.blobs[0] === "string" ? "hex" : "bytes");
  const blobs = typeof parameters.blobs[0] === "string" ? parameters.blobs.map((x6) => hexToBytes(x6)) : parameters.blobs;
  const commitments = [];
  for (const blob of blobs)
    commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)));
  return to4 === "bytes" ? commitments : commitments.map((x6) => bytesToHex(x6));
}

// node_modules/viem/_esm/utils/blob/blobsToProofs.js
function blobsToProofs2(parameters) {
  const { kzg } = parameters;
  const to4 = parameters.to ?? (typeof parameters.blobs[0] === "string" ? "hex" : "bytes");
  const blobs = typeof parameters.blobs[0] === "string" ? parameters.blobs.map((x6) => hexToBytes(x6)) : parameters.blobs;
  const commitments = typeof parameters.commitments[0] === "string" ? parameters.commitments.map((x6) => hexToBytes(x6)) : parameters.commitments;
  const proofs = [];
  for (let i4 = 0; i4 < blobs.length; i4++) {
    const blob = blobs[i4];
    const commitment = commitments[i4];
    proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)));
  }
  return to4 === "bytes" ? proofs : proofs.map((x6) => bytesToHex(x6));
}

// node_modules/viem/node_modules/@noble/hashes/esm/sha256.js
var sha2566 = sha256;

// node_modules/viem/_esm/utils/hash/sha256.js
function sha2567(value, to_) {
  const to4 = to_ || "hex";
  const bytes = sha2566(isHex2(value, { strict: false }) ? toBytes(value) : value);
  if (to4 === "bytes")
    return bytes;
  return toHex2(bytes);
}

// node_modules/viem/_esm/utils/blob/commitmentToVersionedHash.js
function commitmentToVersionedHash2(parameters) {
  const { commitment, version: version2 = 1 } = parameters;
  const to4 = parameters.to ?? (typeof commitment === "string" ? "hex" : "bytes");
  const versionedHash = sha2567(commitment, "bytes");
  versionedHash.set([version2], 0);
  return to4 === "bytes" ? versionedHash : bytesToHex(versionedHash);
}

// node_modules/viem/_esm/utils/blob/commitmentsToVersionedHashes.js
function commitmentsToVersionedHashes2(parameters) {
  const { commitments, version: version2 } = parameters;
  const to4 = parameters.to ?? (typeof commitments[0] === "string" ? "hex" : "bytes");
  const hashes2 = [];
  for (const commitment of commitments) {
    hashes2.push(commitmentToVersionedHash2({
      commitment,
      to: to4,
      version: version2
    }));
  }
  return hashes2;
}

// node_modules/viem/_esm/constants/blob.js
var blobsPerTransaction2 = 6;
var bytesPerFieldElement2 = 32;
var fieldElementsPerBlob2 = 4096;
var bytesPerBlob2 = bytesPerFieldElement2 * fieldElementsPerBlob2;
var maxBytesPerTransaction2 = bytesPerBlob2 * blobsPerTransaction2 - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * fieldElementsPerBlob2 * blobsPerTransaction2;

// node_modules/viem/_esm/constants/kzg.js
var versionedHashVersionKzg2 = 1;

// node_modules/viem/_esm/errors/blob.js
var BlobSizeTooLargeError2 = class extends BaseError2 {
  constructor({ maxSize, size: size8 }) {
    super("Blob size is too large.", {
      metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size8} bytes`],
      name: "BlobSizeTooLargeError"
    });
  }
};
var EmptyBlobError2 = class extends BaseError2 {
  constructor() {
    super("Blob data must not be empty.", { name: "EmptyBlobError" });
  }
};
var InvalidVersionedHashSizeError2 = class extends BaseError2 {
  constructor({ hash: hash2, size: size8 }) {
    super(`Versioned hash "${hash2}" size is invalid.`, {
      metaMessages: ["Expected: 32", `Received: ${size8}`],
      name: "InvalidVersionedHashSizeError"
    });
  }
};
var InvalidVersionedHashVersionError2 = class extends BaseError2 {
  constructor({ hash: hash2, version: version2 }) {
    super(`Versioned hash "${hash2}" version is invalid.`, {
      metaMessages: [
        `Expected: ${versionedHashVersionKzg2}`,
        `Received: ${version2}`
      ],
      name: "InvalidVersionedHashVersionError"
    });
  }
};

// node_modules/viem/_esm/utils/blob/toBlobs.js
function toBlobs2(parameters) {
  const to4 = parameters.to ?? (typeof parameters.data === "string" ? "hex" : "bytes");
  const data = typeof parameters.data === "string" ? hexToBytes(parameters.data) : parameters.data;
  const size_ = size3(data);
  if (!size_)
    throw new EmptyBlobError2();
  if (size_ > maxBytesPerTransaction2)
    throw new BlobSizeTooLargeError2({
      maxSize: maxBytesPerTransaction2,
      size: size_
    });
  const blobs = [];
  let active = true;
  let position = 0;
  while (active) {
    const blob = createCursor(new Uint8Array(bytesPerBlob2));
    let size8 = 0;
    while (size8 < fieldElementsPerBlob2) {
      const bytes = data.slice(position, position + (bytesPerFieldElement2 - 1));
      blob.pushByte(0);
      blob.pushBytes(bytes);
      if (bytes.length < 31) {
        blob.pushByte(128);
        active = false;
        break;
      }
      size8++;
      position += 31;
    }
    blobs.push(blob);
  }
  return to4 === "bytes" ? blobs.map((x6) => x6.bytes) : blobs.map((x6) => bytesToHex(x6.bytes));
}

// node_modules/viem/_esm/utils/blob/toBlobSidecars.js
function toBlobSidecars2(parameters) {
  const { data, kzg, to: to4 } = parameters;
  const blobs = parameters.blobs ?? toBlobs2({ data, to: to4 });
  const commitments = parameters.commitments ?? blobsToCommitments2({ blobs, kzg, to: to4 });
  const proofs = parameters.proofs ?? blobsToProofs2({ blobs, commitments, kzg, to: to4 });
  const sidecars = [];
  for (let i4 = 0; i4 < blobs.length; i4++)
    sidecars.push({
      blob: blobs[i4],
      commitment: commitments[i4],
      proof: proofs[i4]
    });
  return sidecars;
}

// node_modules/viem/_esm/utils/transaction/getTransactionType.js
function getTransactionType2(transaction) {
  if (transaction.type)
    return transaction.type;
  if (typeof transaction.authorizationList !== "undefined")
    return "eip7702";
  if (typeof transaction.blobs !== "undefined" || typeof transaction.blobVersionedHashes !== "undefined" || typeof transaction.maxFeePerBlobGas !== "undefined" || typeof transaction.sidecars !== "undefined")
    return "eip4844";
  if (typeof transaction.maxFeePerGas !== "undefined" || typeof transaction.maxPriorityFeePerGas !== "undefined") {
    return "eip1559";
  }
  if (typeof transaction.gasPrice !== "undefined") {
    if (typeof transaction.accessList !== "undefined")
      return "eip2930";
    return "legacy";
  }
  throw new InvalidSerializableTransactionError({ transaction });
}

// node_modules/viem/_esm/actions/public/getChainId.js
async function getChainId2(client) {
  const chainIdHex = await client.request({
    method: "eth_chainId"
  }, { dedupe: true });
  return hexToNumber2(chainIdHex);
}

// node_modules/viem/_esm/actions/wallet/prepareTransactionRequest.js
var defaultParameters2 = [
  "blobVersionedHashes",
  "chainId",
  "fees",
  "gas",
  "nonce",
  "type"
];
var eip1559NetworkCache = /* @__PURE__ */ new Map();
async function prepareTransactionRequest2(client, args) {
  const { account: account_ = client.account, blobs, chain: chain2, gas, kzg, nonce, nonceManager: nonceManager3, parameters = defaultParameters2, type } = args;
  const account = account_ ? parseAccount(account_) : account_;
  const request = { ...args, ...account ? { from: account == null ? void 0 : account.address } : {} };
  let block;
  async function getBlock3() {
    if (block)
      return block;
    block = await getAction2(client, getBlock2, "getBlock")({ blockTag: "latest" });
    return block;
  }
  let chainId;
  async function getChainId3() {
    if (chainId)
      return chainId;
    if (chain2)
      return chain2.id;
    if (typeof args.chainId !== "undefined")
      return args.chainId;
    const chainId_ = await getAction2(client, getChainId2, "getChainId")({});
    chainId = chainId_;
    return chainId;
  }
  if (parameters.includes("nonce") && typeof nonce === "undefined" && account) {
    if (nonceManager3) {
      const chainId2 = await getChainId3();
      request.nonce = await nonceManager3.consume({
        address: account.address,
        chainId: chainId2,
        client
      });
    } else {
      request.nonce = await getAction2(client, getTransactionCount2, "getTransactionCount")({
        address: account.address,
        blockTag: "pending"
      });
    }
  }
  if ((parameters.includes("blobVersionedHashes") || parameters.includes("sidecars")) && blobs && kzg) {
    const commitments = blobsToCommitments2({ blobs, kzg });
    if (parameters.includes("blobVersionedHashes")) {
      const versionedHashes = commitmentsToVersionedHashes2({
        commitments,
        to: "hex"
      });
      request.blobVersionedHashes = versionedHashes;
    }
    if (parameters.includes("sidecars")) {
      const proofs = blobsToProofs2({ blobs, commitments, kzg });
      const sidecars = toBlobSidecars2({
        blobs,
        commitments,
        proofs,
        to: "hex"
      });
      request.sidecars = sidecars;
    }
  }
  if (parameters.includes("chainId"))
    request.chainId = await getChainId3();
  if ((parameters.includes("fees") || parameters.includes("type")) && typeof type === "undefined") {
    try {
      request.type = getTransactionType2(request);
    } catch {
      let isEip1559Network = eip1559NetworkCache.get(client.uid);
      if (typeof isEip1559Network === "undefined") {
        const block2 = await getBlock3();
        isEip1559Network = typeof (block2 == null ? void 0 : block2.baseFeePerGas) === "bigint";
        eip1559NetworkCache.set(client.uid, isEip1559Network);
      }
      request.type = isEip1559Network ? "eip1559" : "legacy";
    }
  }
  if (parameters.includes("fees")) {
    if (request.type !== "legacy" && request.type !== "eip2930") {
      if (typeof request.maxFeePerGas === "undefined" || typeof request.maxPriorityFeePerGas === "undefined") {
        const block2 = await getBlock3();
        const { maxFeePerGas, maxPriorityFeePerGas } = await internal_estimateFeesPerGas2(client, {
          block: block2,
          chain: chain2,
          request
        });
        if (typeof args.maxPriorityFeePerGas === "undefined" && args.maxFeePerGas && args.maxFeePerGas < maxPriorityFeePerGas)
          throw new MaxFeePerGasTooLowError2({
            maxPriorityFeePerGas
          });
        request.maxPriorityFeePerGas = maxPriorityFeePerGas;
        request.maxFeePerGas = maxFeePerGas;
      }
    } else {
      if (typeof args.maxFeePerGas !== "undefined" || typeof args.maxPriorityFeePerGas !== "undefined")
        throw new Eip1559FeesNotSupportedError2();
      if (typeof args.gasPrice === "undefined") {
        const block2 = await getBlock3();
        const { gasPrice: gasPrice_ } = await internal_estimateFeesPerGas2(client, {
          block: block2,
          chain: chain2,
          request,
          type: "legacy"
        });
        request.gasPrice = gasPrice_;
      }
    }
  }
  if (parameters.includes("gas") && typeof gas === "undefined")
    request.gas = await getAction2(client, estimateGas2, "estimateGas")({
      ...request,
      account,
      prepare: (account == null ? void 0 : account.type) === "local" ? [] : ["blobVersionedHashes"]
    });
  assertRequest(request);
  delete request.parameters;
  return request;
}

// node_modules/viem/_esm/actions/public/estimateGas.js
async function estimateGas2(client, args) {
  var _a2, _b, _c2;
  const { account: account_ = client.account, prepare = true } = args;
  const account = account_ ? parseAccount(account_) : void 0;
  const parameters = (() => {
    if (Array.isArray(prepare))
      return prepare;
    if ((account == null ? void 0 : account.type) !== "local")
      return ["blobVersionedHashes"];
    return void 0;
  })();
  try {
    const { accessList, authorizationList, blobs, blobVersionedHashes, blockNumber, blockTag, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, value, stateOverride, ...rest } = prepare ? await prepareTransactionRequest2(client, {
      ...args,
      parameters
    }) : args;
    const blockNumberHex = typeof blockNumber === "bigint" ? numberToHex2(blockNumber) : void 0;
    const block = blockNumberHex || blockTag;
    const rpcStateOverride = serializeStateOverride(stateOverride);
    const to4 = await (async () => {
      if (rest.to)
        return rest.to;
      if (authorizationList && authorizationList.length > 0)
        return await recoverAuthorizationAddress2({
          authorization: authorizationList[0]
        }).catch(() => {
          throw new BaseError2("`to` is required. Could not infer from `authorizationList`");
        });
      return void 0;
    })();
    assertRequest(args);
    const chainFormat = (_c2 = (_b = (_a2 = client.chain) == null ? void 0 : _a2.formatters) == null ? void 0 : _b.transactionRequest) == null ? void 0 : _c2.format;
    const format = chainFormat || formatTransactionRequest;
    const request = format({
      // Pick out extra data that might exist on the chain's transaction request type.
      ...extract(rest, { format: chainFormat }),
      account,
      accessList,
      authorizationList,
      blobs,
      blobVersionedHashes,
      data,
      gas,
      gasPrice,
      maxFeePerBlobGas,
      maxFeePerGas,
      maxPriorityFeePerGas,
      nonce,
      to: to4,
      value
    }, "estimateGas");
    return BigInt(await client.request({
      method: "eth_estimateGas",
      params: rpcStateOverride ? [
        request,
        block ?? client.experimental_blockTag ?? "latest",
        rpcStateOverride
      ] : block ? [request, block] : [request]
    }));
  } catch (err) {
    throw getEstimateGasError2(err, {
      ...args,
      account,
      chain: client.chain
    });
  }
}

// node_modules/viem/_esm/utils/formatters/log.js
function formatLog2(log, { args, eventName } = {}) {
  return {
    ...log,
    blockHash: log.blockHash ? log.blockHash : null,
    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
    logIndex: log.logIndex ? Number(log.logIndex) : null,
    transactionHash: log.transactionHash ? log.transactionHash : null,
    transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
    ...eventName ? { args, eventName } : {}
  };
}

// node_modules/viem/_esm/utils/wait.js
async function wait2(time) {
  return new Promise((res) => setTimeout(res, time));
}

// node_modules/viem/_esm/errors/account.js
var AccountNotFoundError2 = class extends BaseError2 {
  constructor({ docsPath } = {}) {
    super([
      "Could not find an Account to execute with this Action.",
      "Please provide an Account with the `account` argument on the Action, or by supplying an `account` to the Client."
    ].join("\n"), {
      docsPath,
      docsSlug: "account",
      name: "AccountNotFoundError"
    });
  }
};
var AccountTypeNotSupportedError2 = class extends BaseError2 {
  constructor({ docsPath, metaMessages, type }) {
    super(`Account type "${type}" is not supported.`, {
      docsPath,
      metaMessages,
      name: "AccountTypeNotSupportedError"
    });
  }
};

// node_modules/viem/_esm/utils/chain/assertCurrentChain.js
function assertCurrentChain2({ chain: chain2, currentChainId }) {
  if (!chain2)
    throw new ChainNotFoundError();
  if (currentChainId !== chain2.id)
    throw new ChainMismatchError({ chain: chain2, currentChainId });
}

// node_modules/viem/_esm/utils/errors/getTransactionError.js
function getTransactionError2(err, { docsPath, ...args }) {
  const cause = (() => {
    const cause2 = getNodeError(err, args);
    if (cause2 instanceof UnknownNodeError)
      return err;
    return cause2;
  })();
  return new TransactionExecutionError(cause, {
    docsPath,
    ...args
  });
}

// node_modules/viem/_esm/actions/wallet/sendRawTransaction.js
async function sendRawTransaction2(client, { serializedTransaction }) {
  return client.request({
    method: "eth_sendRawTransaction",
    params: [serializedTransaction]
  }, { retryCount: 0 });
}

// node_modules/viem/_esm/actions/wallet/sendTransaction.js
var supportsWalletNamespace2 = new LruMap2(128);
async function sendTransaction2(client, parameters) {
  var _a2, _b, _c2, _d;
  const { account: account_ = client.account, chain: chain2 = client.chain, accessList, authorizationList, blobs, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, type, value, ...rest } = parameters;
  if (typeof account_ === "undefined")
    throw new AccountNotFoundError2({
      docsPath: "/docs/actions/wallet/sendTransaction"
    });
  const account = account_ ? parseAccount(account_) : null;
  try {
    assertRequest(parameters);
    const to4 = await (async () => {
      if (parameters.to)
        return parameters.to;
      if (parameters.to === null)
        return void 0;
      if (authorizationList && authorizationList.length > 0)
        return await recoverAuthorizationAddress2({
          authorization: authorizationList[0]
        }).catch(() => {
          throw new BaseError2("`to` is required. Could not infer from `authorizationList`.");
        });
      return void 0;
    })();
    if ((account == null ? void 0 : account.type) === "json-rpc" || account === null) {
      let chainId;
      if (chain2 !== null) {
        chainId = await getAction2(client, getChainId2, "getChainId")({});
        assertCurrentChain2({
          currentChainId: chainId,
          chain: chain2
        });
      }
      const chainFormat = (_c2 = (_b = (_a2 = client.chain) == null ? void 0 : _a2.formatters) == null ? void 0 : _b.transactionRequest) == null ? void 0 : _c2.format;
      const format = chainFormat || formatTransactionRequest;
      const request = format({
        // Pick out extra data that might exist on the chain's transaction request type.
        ...extract(rest, { format: chainFormat }),
        accessList,
        account,
        authorizationList,
        blobs,
        chainId,
        data,
        gas,
        gasPrice,
        maxFeePerBlobGas,
        maxFeePerGas,
        maxPriorityFeePerGas,
        nonce,
        to: to4,
        type,
        value
      }, "sendTransaction");
      const isWalletNamespaceSupported = supportsWalletNamespace2.get(client.uid);
      const method = isWalletNamespaceSupported ? "wallet_sendTransaction" : "eth_sendTransaction";
      try {
        return await client.request({
          method,
          params: [request]
        }, { retryCount: 0 });
      } catch (e2) {
        if (isWalletNamespaceSupported === false)
          throw e2;
        const error = e2;
        if (error.name === "InvalidInputRpcError" || error.name === "InvalidParamsRpcError" || error.name === "MethodNotFoundRpcError" || error.name === "MethodNotSupportedRpcError") {
          return await client.request({
            method: "wallet_sendTransaction",
            params: [request]
          }, { retryCount: 0 }).then((hash2) => {
            supportsWalletNamespace2.set(client.uid, true);
            return hash2;
          }).catch((e3) => {
            const walletNamespaceError = e3;
            if (walletNamespaceError.name === "MethodNotFoundRpcError" || walletNamespaceError.name === "MethodNotSupportedRpcError") {
              supportsWalletNamespace2.set(client.uid, false);
              throw error;
            }
            throw walletNamespaceError;
          });
        }
        throw error;
      }
    }
    if ((account == null ? void 0 : account.type) === "local") {
      const request = await getAction2(client, prepareTransactionRequest2, "prepareTransactionRequest")({
        account,
        accessList,
        authorizationList,
        blobs,
        chain: chain2,
        data,
        gas,
        gasPrice,
        maxFeePerBlobGas,
        maxFeePerGas,
        maxPriorityFeePerGas,
        nonce,
        nonceManager: account.nonceManager,
        parameters: [...defaultParameters2, "sidecars"],
        type,
        value,
        ...rest,
        to: to4
      });
      const serializer = (_d = chain2 == null ? void 0 : chain2.serializers) == null ? void 0 : _d.transaction;
      const serializedTransaction = await account.signTransaction(request, {
        serializer
      });
      return await getAction2(client, sendRawTransaction2, "sendRawTransaction")({
        serializedTransaction
      });
    }
    if ((account == null ? void 0 : account.type) === "smart")
      throw new AccountTypeNotSupportedError2({
        metaMessages: [
          "Consider using the `sendUserOperation` Action instead."
        ],
        docsPath: "/docs/actions/bundler/sendUserOperation",
        type: "smart"
      });
    throw new AccountTypeNotSupportedError2({
      docsPath: "/docs/actions/wallet/sendTransaction",
      type: account == null ? void 0 : account.type
    });
  } catch (err) {
    if (err instanceof AccountTypeNotSupportedError2)
      throw err;
    throw getTransactionError2(err, {
      ...parameters,
      account,
      chain: parameters.chain || void 0
    });
  }
}

// node_modules/viem/_esm/actions/wallet/writeContract.js
async function writeContract2(client, parameters) {
  return writeContract2.internal(client, sendTransaction2, "sendTransaction", parameters);
}
(function(writeContract3) {
  async function internal(client, actionFn, name2, parameters) {
    const { abi, account: account_ = client.account, address, args, dataSuffix, functionName, ...request } = parameters;
    if (typeof account_ === "undefined")
      throw new AccountNotFoundError2({
        docsPath: "/docs/contract/writeContract"
      });
    const account = account_ ? parseAccount(account_) : null;
    const data = encodeFunctionData({
      abi,
      args,
      functionName
    });
    try {
      return await getAction2(client, actionFn, name2)({
        data: `${data}${dataSuffix ? dataSuffix.replace("0x", "") : ""}`,
        to: address,
        account,
        ...request
      });
    } catch (error) {
      throw getContractError2(error, {
        abi,
        address,
        args,
        docsPath: "/docs/contract/writeContract",
        functionName,
        sender: account == null ? void 0 : account.address
      });
    }
  }
  writeContract3.internal = internal;
})(writeContract2 || (writeContract2 = {}));

// node_modules/viem/_esm/utils/promise/withRetry.js
function withRetry2(fn3, { delay: delay_ = 100, retryCount = 2, shouldRetry: shouldRetry2 = () => true } = {}) {
  return new Promise((resolve, reject) => {
    const attemptRetry = async ({ count = 0 } = {}) => {
      const retry = async ({ error }) => {
        const delay = typeof delay_ === "function" ? delay_({ count, error }) : delay_;
        if (delay)
          await wait2(delay);
        attemptRetry({ count: count + 1 });
      };
      try {
        const data = await fn3();
        resolve(data);
      } catch (err) {
        if (count < retryCount && await shouldRetry2({ count, error: err }))
          return retry({ error: err });
        reject(err);
      }
    };
    attemptRetry();
  });
}

// node_modules/viem/_esm/utils/formatters/transactionReceipt.js
var receiptStatuses2 = {
  "0x0": "reverted",
  "0x1": "success"
};
function formatTransactionReceipt2(transactionReceipt, _3) {
  const receipt = {
    ...transactionReceipt,
    blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
    contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
    effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
    gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
    logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => formatLog2(log)) : null,
    to: transactionReceipt.to ? transactionReceipt.to : null,
    transactionIndex: transactionReceipt.transactionIndex ? hexToNumber2(transactionReceipt.transactionIndex) : null,
    status: transactionReceipt.status ? receiptStatuses2[transactionReceipt.status] : null,
    type: transactionReceipt.type ? transactionType2[transactionReceipt.type] || transactionReceipt.type : null
  };
  if (transactionReceipt.blobGasPrice)
    receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
  if (transactionReceipt.blobGasUsed)
    receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
  return receipt;
}
var defineTransactionReceipt2 = defineFormatter2("transactionReceipt", formatTransactionReceipt2);

// node_modules/viem/_esm/actions/wallet/sendCalls.js
var fallbackTransactionErrorMagicIdentifier2 = numberToHex2(0, {
  size: 32
});

// node_modules/viem/_esm/utils/uid.js
var size7 = 256;
var index = size7;
var buffer;
function uid2(length2 = 11) {
  if (!buffer || index + length2 > size7 * 2) {
    buffer = "";
    index = 0;
    for (let i4 = 0; i4 < size7; i4++) {
      buffer += (256 + Math.random() * 256 | 0).toString(16).substring(1);
    }
  }
  return buffer.substring(index, index++ + length2);
}

// node_modules/viem/_esm/utils/transaction/assertTransaction.js
function assertTransactionEIP77022(transaction) {
  const { authorizationList } = transaction;
  if (authorizationList) {
    for (const authorization of authorizationList) {
      const { chainId } = authorization;
      const address = authorization.address;
      if (!isAddress(address))
        throw new InvalidAddressError({ address });
      if (chainId < 0)
        throw new InvalidChainIdError({ chainId });
    }
  }
  assertTransactionEIP15592(transaction);
}
function assertTransactionEIP48442(transaction) {
  const { blobVersionedHashes } = transaction;
  if (blobVersionedHashes) {
    if (blobVersionedHashes.length === 0)
      throw new EmptyBlobError2();
    for (const hash2 of blobVersionedHashes) {
      const size_ = size3(hash2);
      const version2 = hexToNumber2(slice(hash2, 0, 1));
      if (size_ !== 32)
        throw new InvalidVersionedHashSizeError2({ hash: hash2, size: size_ });
      if (version2 !== versionedHashVersionKzg2)
        throw new InvalidVersionedHashVersionError2({
          hash: hash2,
          version: version2
        });
    }
  }
  assertTransactionEIP15592(transaction);
}
function assertTransactionEIP15592(transaction) {
  const { chainId, maxPriorityFeePerGas, maxFeePerGas, to: to4 } = transaction;
  if (chainId <= 0)
    throw new InvalidChainIdError({ chainId });
  if (to4 && !isAddress(to4))
    throw new InvalidAddressError({ address: to4 });
  if (maxFeePerGas && maxFeePerGas > maxUint256)
    throw new FeeCapTooHighError({ maxFeePerGas });
  if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas)
    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });
}
function assertTransactionEIP29302(transaction) {
  const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to: to4 } = transaction;
  if (chainId <= 0)
    throw new InvalidChainIdError({ chainId });
  if (to4 && !isAddress(to4))
    throw new InvalidAddressError({ address: to4 });
  if (maxPriorityFeePerGas || maxFeePerGas)
    throw new BaseError2("`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.");
  if (gasPrice && gasPrice > maxUint256)
    throw new FeeCapTooHighError({ maxFeePerGas: gasPrice });
}
function assertTransactionLegacy2(transaction) {
  const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to: to4 } = transaction;
  if (to4 && !isAddress(to4))
    throw new InvalidAddressError({ address: to4 });
  if (typeof chainId !== "undefined" && chainId <= 0)
    throw new InvalidChainIdError({ chainId });
  if (maxPriorityFeePerGas || maxFeePerGas)
    throw new BaseError2("`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.");
  if (gasPrice && gasPrice > maxUint256)
    throw new FeeCapTooHighError({ maxFeePerGas: gasPrice });
}

// node_modules/viem/_esm/utils/transaction/serializeAccessList.js
function serializeAccessList2(accessList) {
  if (!accessList || accessList.length === 0)
    return [];
  const serializedAccessList = [];
  for (let i4 = 0; i4 < accessList.length; i4++) {
    const { address, storageKeys } = accessList[i4];
    for (let j5 = 0; j5 < storageKeys.length; j5++) {
      if (storageKeys[j5].length - 2 !== 64) {
        throw new InvalidStorageKeySizeError({ storageKey: storageKeys[j5] });
      }
    }
    if (!isAddress(address, { strict: false })) {
      throw new InvalidAddressError({ address });
    }
    serializedAccessList.push([address, storageKeys]);
  }
  return serializedAccessList;
}

// node_modules/viem/_esm/utils/transaction/serializeTransaction.js
function serializeTransaction2(transaction, signature) {
  const type = getTransactionType2(transaction);
  if (type === "eip1559")
    return serializeTransactionEIP1559(transaction, signature);
  if (type === "eip2930")
    return serializeTransactionEIP2930(transaction, signature);
  if (type === "eip4844")
    return serializeTransactionEIP4844(transaction, signature);
  if (type === "eip7702")
    return serializeTransactionEIP7702(transaction, signature);
  return serializeTransactionLegacy(transaction, signature);
}
function serializeTransactionEIP7702(transaction, signature) {
  const { authorizationList, chainId, gas, nonce, to: to4, value, maxFeePerGas, maxPriorityFeePerGas, accessList, data } = transaction;
  assertTransactionEIP77022(transaction);
  const serializedAccessList = serializeAccessList2(accessList);
  const serializedAuthorizationList = serializeAuthorizationList2(authorizationList);
  return concatHex([
    "0x04",
    toRlp2([
      numberToHex2(chainId),
      nonce ? numberToHex2(nonce) : "0x",
      maxPriorityFeePerGas ? numberToHex2(maxPriorityFeePerGas) : "0x",
      maxFeePerGas ? numberToHex2(maxFeePerGas) : "0x",
      gas ? numberToHex2(gas) : "0x",
      to4 ?? "0x",
      value ? numberToHex2(value) : "0x",
      data ?? "0x",
      serializedAccessList,
      serializedAuthorizationList,
      ...toYParitySignatureArray2(transaction, signature)
    ])
  ]);
}
function serializeTransactionEIP4844(transaction, signature) {
  const { chainId, gas, nonce, to: to4, value, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, accessList, data } = transaction;
  assertTransactionEIP48442(transaction);
  let blobVersionedHashes = transaction.blobVersionedHashes;
  let sidecars = transaction.sidecars;
  if (transaction.blobs && (typeof blobVersionedHashes === "undefined" || typeof sidecars === "undefined")) {
    const blobs2 = typeof transaction.blobs[0] === "string" ? transaction.blobs : transaction.blobs.map((x6) => bytesToHex(x6));
    const kzg = transaction.kzg;
    const commitments2 = blobsToCommitments2({
      blobs: blobs2,
      kzg
    });
    if (typeof blobVersionedHashes === "undefined")
      blobVersionedHashes = commitmentsToVersionedHashes2({
        commitments: commitments2
      });
    if (typeof sidecars === "undefined") {
      const proofs2 = blobsToProofs2({ blobs: blobs2, commitments: commitments2, kzg });
      sidecars = toBlobSidecars2({ blobs: blobs2, commitments: commitments2, proofs: proofs2 });
    }
  }
  const serializedAccessList = serializeAccessList2(accessList);
  const serializedTransaction = [
    numberToHex2(chainId),
    nonce ? numberToHex2(nonce) : "0x",
    maxPriorityFeePerGas ? numberToHex2(maxPriorityFeePerGas) : "0x",
    maxFeePerGas ? numberToHex2(maxFeePerGas) : "0x",
    gas ? numberToHex2(gas) : "0x",
    to4 ?? "0x",
    value ? numberToHex2(value) : "0x",
    data ?? "0x",
    serializedAccessList,
    maxFeePerBlobGas ? numberToHex2(maxFeePerBlobGas) : "0x",
    blobVersionedHashes ?? [],
    ...toYParitySignatureArray2(transaction, signature)
  ];
  const blobs = [];
  const commitments = [];
  const proofs = [];
  if (sidecars)
    for (let i4 = 0; i4 < sidecars.length; i4++) {
      const { blob, commitment, proof } = sidecars[i4];
      blobs.push(blob);
      commitments.push(commitment);
      proofs.push(proof);
    }
  return concatHex([
    "0x03",
    sidecars ? (
      // If sidecars are enabled, envelope turns into a "wrapper":
      toRlp2([serializedTransaction, blobs, commitments, proofs])
    ) : (
      // If sidecars are disabled, standard envelope is used:
      toRlp2(serializedTransaction)
    )
  ]);
}
function serializeTransactionEIP1559(transaction, signature) {
  const { chainId, gas, nonce, to: to4, value, maxFeePerGas, maxPriorityFeePerGas, accessList, data } = transaction;
  assertTransactionEIP15592(transaction);
  const serializedAccessList = serializeAccessList2(accessList);
  const serializedTransaction = [
    numberToHex2(chainId),
    nonce ? numberToHex2(nonce) : "0x",
    maxPriorityFeePerGas ? numberToHex2(maxPriorityFeePerGas) : "0x",
    maxFeePerGas ? numberToHex2(maxFeePerGas) : "0x",
    gas ? numberToHex2(gas) : "0x",
    to4 ?? "0x",
    value ? numberToHex2(value) : "0x",
    data ?? "0x",
    serializedAccessList,
    ...toYParitySignatureArray2(transaction, signature)
  ];
  return concatHex([
    "0x02",
    toRlp2(serializedTransaction)
  ]);
}
function serializeTransactionEIP2930(transaction, signature) {
  const { chainId, gas, data, nonce, to: to4, value, accessList, gasPrice } = transaction;
  assertTransactionEIP29302(transaction);
  const serializedAccessList = serializeAccessList2(accessList);
  const serializedTransaction = [
    numberToHex2(chainId),
    nonce ? numberToHex2(nonce) : "0x",
    gasPrice ? numberToHex2(gasPrice) : "0x",
    gas ? numberToHex2(gas) : "0x",
    to4 ?? "0x",
    value ? numberToHex2(value) : "0x",
    data ?? "0x",
    serializedAccessList,
    ...toYParitySignatureArray2(transaction, signature)
  ];
  return concatHex([
    "0x01",
    toRlp2(serializedTransaction)
  ]);
}
function serializeTransactionLegacy(transaction, signature) {
  const { chainId = 0, gas, data, nonce, to: to4, value, gasPrice } = transaction;
  assertTransactionLegacy2(transaction);
  let serializedTransaction = [
    nonce ? numberToHex2(nonce) : "0x",
    gasPrice ? numberToHex2(gasPrice) : "0x",
    gas ? numberToHex2(gas) : "0x",
    to4 ?? "0x",
    value ? numberToHex2(value) : "0x",
    data ?? "0x"
  ];
  if (signature) {
    const v6 = (() => {
      if (signature.v >= 35n) {
        const inferredChainId = (signature.v - 35n) / 2n;
        if (inferredChainId > 0)
          return signature.v;
        return 27n + (signature.v === 35n ? 0n : 1n);
      }
      if (chainId > 0)
        return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n);
      const v7 = 27n + (signature.v === 27n ? 0n : 1n);
      if (signature.v !== v7)
        throw new InvalidLegacyVError({ v: signature.v });
      return v7;
    })();
    const r3 = trim(signature.r);
    const s3 = trim(signature.s);
    serializedTransaction = [
      ...serializedTransaction,
      numberToHex2(v6),
      r3 === "0x00" ? "0x" : r3,
      s3 === "0x00" ? "0x" : s3
    ];
  } else if (chainId > 0) {
    serializedTransaction = [
      ...serializedTransaction,
      numberToHex2(chainId),
      "0x",
      "0x"
    ];
  }
  return toRlp2(serializedTransaction);
}
function toYParitySignatureArray2(transaction, signature_) {
  const signature = signature_ ?? transaction;
  const { v: v6, yParity } = signature;
  if (typeof signature.r === "undefined")
    return [];
  if (typeof signature.s === "undefined")
    return [];
  if (typeof v6 === "undefined" && typeof yParity === "undefined")
    return [];
  const r3 = trim(signature.r);
  const s3 = trim(signature.s);
  const yParity_ = (() => {
    if (typeof yParity === "number")
      return yParity ? numberToHex2(1) : "0x";
    if (v6 === 0n)
      return "0x";
    if (v6 === 1n)
      return numberToHex2(1);
    return v6 === 27n ? "0x" : numberToHex2(1);
  })();
  return [yParity_, r3 === "0x00" ? "0x" : r3, s3 === "0x00" ? "0x" : s3];
}

// node_modules/viem/_esm/utils/authorization/serializeAuthorizationList.js
function serializeAuthorizationList2(authorizationList) {
  if (!authorizationList || authorizationList.length === 0)
    return [];
  const serializedAuthorizationList = [];
  for (const authorization of authorizationList) {
    const { chainId, nonce, ...signature } = authorization;
    const contractAddress = authorization.address;
    serializedAuthorizationList.push([
      chainId ? toHex2(chainId) : "0x",
      contractAddress,
      nonce ? toHex2(nonce) : "0x",
      ...toYParitySignatureArray2({}, signature)
    ]);
  }
  return serializedAuthorizationList;
}

// node_modules/viem/_esm/utils/promise/withDedupe.js
var promiseCache2 = new LruMap2(8192);
function withDedupe2(fn3, { enabled = true, id }) {
  if (!enabled || !id)
    return fn3();
  if (promiseCache2.get(id))
    return promiseCache2.get(id);
  const promise = fn3().finally(() => promiseCache2.delete(id));
  promiseCache2.set(id, promise);
  return promise;
}

// node_modules/viem/_esm/utils/buildRequest.js
function buildRequest2(request, options = {}) {
  return async (args, overrideOptions = {}) => {
    var _a2;
    const { dedupe = false, methods, retryDelay = 150, retryCount = 3, uid: uid3 } = {
      ...options,
      ...overrideOptions
    };
    const { method } = args;
    if ((_a2 = methods == null ? void 0 : methods.exclude) == null ? void 0 : _a2.includes(method))
      throw new MethodNotSupportedRpcError(new Error("method not supported"), {
        method
      });
    if ((methods == null ? void 0 : methods.include) && !methods.include.includes(method))
      throw new MethodNotSupportedRpcError(new Error("method not supported"), {
        method
      });
    const requestId = dedupe ? stringToHex(`${uid3}.${stringify(args)}`) : void 0;
    return withDedupe2(() => withRetry2(async () => {
      try {
        return await request(args);
      } catch (err_) {
        const err = err_;
        switch (err.code) {
          case ParseRpcError.code:
            throw new ParseRpcError(err);
          case InvalidRequestRpcError.code:
            throw new InvalidRequestRpcError(err);
          case MethodNotFoundRpcError.code:
            throw new MethodNotFoundRpcError(err, { method: args.method });
          case InvalidParamsRpcError.code:
            throw new InvalidParamsRpcError(err);
          case InternalRpcError.code:
            throw new InternalRpcError(err);
          case InvalidInputRpcError.code:
            throw new InvalidInputRpcError(err);
          case ResourceNotFoundRpcError.code:
            throw new ResourceNotFoundRpcError(err);
          case ResourceUnavailableRpcError.code:
            throw new ResourceUnavailableRpcError(err);
          case TransactionRejectedRpcError.code:
            throw new TransactionRejectedRpcError(err);
          case MethodNotSupportedRpcError.code:
            throw new MethodNotSupportedRpcError(err, {
              method: args.method
            });
          case LimitExceededRpcError.code:
            throw new LimitExceededRpcError(err);
          case JsonRpcVersionUnsupportedError.code:
            throw new JsonRpcVersionUnsupportedError(err);
          case UserRejectedRequestError.code:
            throw new UserRejectedRequestError(err);
          case UnauthorizedProviderError.code:
            throw new UnauthorizedProviderError(err);
          case UnsupportedProviderMethodError.code:
            throw new UnsupportedProviderMethodError(err);
          case ProviderDisconnectedError.code:
            throw new ProviderDisconnectedError(err);
          case ChainDisconnectedError.code:
            throw new ChainDisconnectedError(err);
          case SwitchChainError.code:
            throw new SwitchChainError(err);
          case UnsupportedNonOptionalCapabilityError.code:
            throw new UnsupportedNonOptionalCapabilityError(err);
          case UnsupportedChainIdError.code:
            throw new UnsupportedChainIdError(err);
          case DuplicateIdError.code:
            throw new DuplicateIdError(err);
          case UnknownBundleIdError.code:
            throw new UnknownBundleIdError(err);
          case BundleTooLargeError.code:
            throw new BundleTooLargeError(err);
          case AtomicReadyWalletRejectedUpgradeError.code:
            throw new AtomicReadyWalletRejectedUpgradeError(err);
          case AtomicityNotSupportedError.code:
            throw new AtomicityNotSupportedError(err);
          case 5e3:
            throw new UserRejectedRequestError(err);
          default:
            if (err_ instanceof BaseError2)
              throw err_;
            throw new UnknownRpcError(err);
        }
      }
    }, {
      delay: ({ count, error }) => {
        var _a3;
        if (error && error instanceof HttpRequestError) {
          const retryAfter = (_a3 = error == null ? void 0 : error.headers) == null ? void 0 : _a3.get("Retry-After");
          if (retryAfter == null ? void 0 : retryAfter.match(/\d/))
            return Number.parseInt(retryAfter, 10) * 1e3;
        }
        return ~~(1 << count) * retryDelay;
      },
      retryCount,
      shouldRetry: ({ error }) => shouldRetry(error)
    }), { enabled: dedupe, id: requestId });
  };
}
function shouldRetry(error) {
  if ("code" in error && typeof error.code === "number") {
    if (error.code === -1)
      return true;
    if (error.code === LimitExceededRpcError.code)
      return true;
    if (error.code === InternalRpcError.code)
      return true;
    return false;
  }
  if (error instanceof HttpRequestError && error.status) {
    if (error.status === 403)
      return true;
    if (error.status === 408)
      return true;
    if (error.status === 413)
      return true;
    if (error.status === 429)
      return true;
    if (error.status === 500)
      return true;
    if (error.status === 502)
      return true;
    if (error.status === 503)
      return true;
    if (error.status === 504)
      return true;
    return false;
  }
  return true;
}

// node_modules/viem/_esm/utils/chain/defineChain.js
function defineChain2(chain2) {
  return {
    formatters: void 0,
    fees: void 0,
    serializers: void 0,
    ...chain2
  };
}

// node_modules/viem/node_modules/@noble/hashes/esm/legacy.js
var SHA1_IV2 = Uint32Array.from([
  1732584193,
  4023233417,
  2562383102,
  271733878,
  3285377520
]);
var SHA1_W2 = new Uint32Array(80);
var SHA12 = class extends HashMD2 {
  constructor() {
    super(64, 20, 8, false);
    this.A = SHA1_IV2[0] | 0;
    this.B = SHA1_IV2[1] | 0;
    this.C = SHA1_IV2[2] | 0;
    this.D = SHA1_IV2[3] | 0;
    this.E = SHA1_IV2[4] | 0;
  }
  get() {
    const { A: A5, B: B4, C: C5, D: D4, E: E6 } = this;
    return [A5, B4, C5, D4, E6];
  }
  set(A5, B4, C5, D4, E6) {
    this.A = A5 | 0;
    this.B = B4 | 0;
    this.C = C5 | 0;
    this.D = D4 | 0;
    this.E = E6 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      SHA1_W2[i4] = view.getUint32(offset, false);
    for (let i4 = 16; i4 < 80; i4++)
      SHA1_W2[i4] = rotl2(SHA1_W2[i4 - 3] ^ SHA1_W2[i4 - 8] ^ SHA1_W2[i4 - 14] ^ SHA1_W2[i4 - 16], 1);
    let { A: A5, B: B4, C: C5, D: D4, E: E6 } = this;
    for (let i4 = 0; i4 < 80; i4++) {
      let F3, K7;
      if (i4 < 20) {
        F3 = Chi2(B4, C5, D4);
        K7 = 1518500249;
      } else if (i4 < 40) {
        F3 = B4 ^ C5 ^ D4;
        K7 = 1859775393;
      } else if (i4 < 60) {
        F3 = Maj2(B4, C5, D4);
        K7 = 2400959708;
      } else {
        F3 = B4 ^ C5 ^ D4;
        K7 = 3395469782;
      }
      const T5 = rotl2(A5, 5) + F3 + E6 + K7 + SHA1_W2[i4] | 0;
      E6 = D4;
      D4 = C5;
      C5 = rotl2(B4, 30);
      B4 = A5;
      A5 = T5;
    }
    A5 = A5 + this.A | 0;
    B4 = B4 + this.B | 0;
    C5 = C5 + this.C | 0;
    D4 = D4 + this.D | 0;
    E6 = E6 + this.E | 0;
    this.set(A5, B4, C5, D4, E6);
  }
  roundClean() {
    clean2(SHA1_W2);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0);
    clean2(this.buffer);
  }
};
var sha12 = createHasher2(() => new SHA12());
var p322 = Math.pow(2, 32);
var K5 = Array.from({ length: 64 }, (_3, i4) => Math.floor(p322 * Math.abs(Math.sin(i4 + 1))));
var MD5_IV2 = SHA1_IV2.slice(0, 4);
var MD5_W2 = new Uint32Array(16);
var MD52 = class extends HashMD2 {
  constructor() {
    super(64, 16, 8, true);
    this.A = MD5_IV2[0] | 0;
    this.B = MD5_IV2[1] | 0;
    this.C = MD5_IV2[2] | 0;
    this.D = MD5_IV2[3] | 0;
  }
  get() {
    const { A: A5, B: B4, C: C5, D: D4 } = this;
    return [A5, B4, C5, D4];
  }
  set(A5, B4, C5, D4) {
    this.A = A5 | 0;
    this.B = B4 | 0;
    this.C = C5 | 0;
    this.D = D4 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      MD5_W2[i4] = view.getUint32(offset, true);
    let { A: A5, B: B4, C: C5, D: D4 } = this;
    for (let i4 = 0; i4 < 64; i4++) {
      let F3, g4, s3;
      if (i4 < 16) {
        F3 = Chi2(B4, C5, D4);
        g4 = i4;
        s3 = [7, 12, 17, 22];
      } else if (i4 < 32) {
        F3 = Chi2(D4, B4, C5);
        g4 = (5 * i4 + 1) % 16;
        s3 = [5, 9, 14, 20];
      } else if (i4 < 48) {
        F3 = B4 ^ C5 ^ D4;
        g4 = (3 * i4 + 5) % 16;
        s3 = [4, 11, 16, 23];
      } else {
        F3 = C5 ^ (B4 | ~D4);
        g4 = 7 * i4 % 16;
        s3 = [6, 10, 15, 21];
      }
      F3 = F3 + A5 + K5[i4] + MD5_W2[g4];
      A5 = D4;
      D4 = C5;
      C5 = B4;
      B4 = B4 + rotl2(F3, s3[i4 % 4]);
    }
    A5 = A5 + this.A | 0;
    B4 = B4 + this.B | 0;
    C5 = C5 + this.C | 0;
    D4 = D4 + this.D | 0;
    this.set(A5, B4, C5, D4);
  }
  roundClean() {
    clean2(MD5_W2);
  }
  destroy() {
    this.set(0, 0, 0, 0);
    clean2(this.buffer);
  }
};
var md52 = createHasher2(() => new MD52());
var Rho1602 = Uint8Array.from([
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8
]);
var Id1602 = (() => Uint8Array.from(new Array(16).fill(0).map((_3, i4) => i4)))();
var Pi1602 = (() => Id1602.map((i4) => (9 * i4 + 5) % 16))();
var idxLR2 = (() => {
  const L5 = [Id1602];
  const R4 = [Pi1602];
  const res = [L5, R4];
  for (let i4 = 0; i4 < 4; i4++)
    for (let j5 of res)
      j5.push(j5[i4].map((k6) => Rho1602[k6]));
  return res;
})();
var idxL2 = (() => idxLR2[0])();
var idxR2 = (() => idxLR2[1])();
var shifts1602 = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i4) => Uint8Array.from(i4));
var shiftsL1602 = idxL2.map((idx, i4) => idx.map((j5) => shifts1602[i4][j5]));
var shiftsR1602 = idxR2.map((idx, i4) => idx.map((j5) => shifts1602[i4][j5]));
var Kl1602 = Uint32Array.from([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr1602 = Uint32Array.from([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function ripemd_f2(group, x6, y6, z4) {
  if (group === 0)
    return x6 ^ y6 ^ z4;
  if (group === 1)
    return x6 & y6 | ~x6 & z4;
  if (group === 2)
    return (x6 | ~y6) ^ z4;
  if (group === 3)
    return x6 & z4 | y6 & ~z4;
  return x6 ^ (y6 | ~z4);
}
var BUF_1602 = new Uint32Array(16);
var RIPEMD1602 = class extends HashMD2 {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4: h42 } = this;
    return [h0, h1, h22, h32, h42];
  }
  set(h0, h1, h22, h32, h42) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h42 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      BUF_1602[i4] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar3 = al, bl = this.h1 | 0, br4 = bl, cl = this.h2 | 0, cr4 = cl, dl = this.h3 | 0, dr4 = dl, el = this.h4 | 0, er3 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl1602[group], hbr = Kr1602[group];
      const rl = idxL2[group], rr4 = idxR2[group];
      const sl = shiftsL1602[group], sr4 = shiftsR1602[group];
      for (let i4 = 0; i4 < 16; i4++) {
        const tl = rotl2(al + ripemd_f2(group, bl, cl, dl) + BUF_1602[rl[i4]] + hbl, sl[i4]) + el | 0;
        al = el, el = dl, dl = rotl2(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i4 = 0; i4 < 16; i4++) {
        const tr4 = rotl2(ar3 + ripemd_f2(rGroup, br4, cr4, dr4) + BUF_1602[rr4[i4]] + hbr, sr4[i4]) + er3 | 0;
        ar3 = er3, er3 = dr4, dr4 = rotl2(cr4, 10) | 0, cr4 = br4, br4 = tr4;
      }
    }
    this.set(this.h1 + cl + dr4 | 0, this.h2 + dl + er3 | 0, this.h3 + el + ar3 | 0, this.h4 + al + br4 | 0, this.h0 + bl + cr4 | 0);
  }
  roundClean() {
    clean2(BUF_1602);
  }
  destroy() {
    this.destroyed = true;
    clean2(this.buffer);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd1604 = createHasher2(() => new RIPEMD1602());

// node_modules/viem/_esm/utils/nonceManager.js
function createNonceManager2(parameters) {
  const { source } = parameters;
  const deltaMap = /* @__PURE__ */ new Map();
  const nonceMap = new LruMap2(8192);
  const promiseMap = /* @__PURE__ */ new Map();
  const getKey = ({ address, chainId }) => `${address}.${chainId}`;
  return {
    async consume({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      const promise = this.get({ address, chainId, client });
      this.increment({ address, chainId });
      const nonce = await promise;
      await source.set({ address, chainId }, nonce);
      nonceMap.set(key, nonce);
      return nonce;
    },
    async increment({ address, chainId }) {
      const key = getKey({ address, chainId });
      const delta = deltaMap.get(key) ?? 0;
      deltaMap.set(key, delta + 1);
    },
    async get({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      let promise = promiseMap.get(key);
      if (!promise) {
        promise = (async () => {
          try {
            const nonce = await source.get({ address, chainId, client });
            const previousNonce = nonceMap.get(key) ?? 0;
            if (previousNonce > 0 && nonce <= previousNonce)
              return previousNonce + 1;
            nonceMap.delete(key);
            return nonce;
          } finally {
            this.reset({ address, chainId });
          }
        })();
        promiseMap.set(key, promise);
      }
      const delta = deltaMap.get(key) ?? 0;
      return delta + await promise;
    },
    reset({ address, chainId }) {
      const key = getKey({ address, chainId });
      deltaMap.delete(key);
      promiseMap.delete(key);
    }
  };
}
function jsonRpc2() {
  return {
    async get(parameters) {
      const { address, client } = parameters;
      return getTransactionCount2(client, {
        address,
        blockTag: "pending"
      });
    },
    set() {
    }
  };
}
var nonceManager2 = createNonceManager2({
  source: jsonRpc2()
});

// node_modules/viem/_esm/utils/promise/withTimeout.js
function withTimeout2(fn3, { errorInstance = new Error("timed out"), timeout, signal }) {
  return new Promise((resolve, reject) => {
    ;
    (async () => {
      let timeoutId;
      try {
        const controller17 = new AbortController();
        if (timeout > 0) {
          timeoutId = setTimeout(() => {
            if (signal) {
              controller17.abort();
            } else {
              reject(errorInstance);
            }
          }, timeout);
        }
        resolve(await fn3({ signal: (controller17 == null ? void 0 : controller17.signal) || null }));
      } catch (err) {
        if ((err == null ? void 0 : err.name) === "AbortError")
          reject(errorInstance);
        reject(err);
      } finally {
        clearTimeout(timeoutId);
      }
    })();
  });
}

// node_modules/viem/_esm/utils/rpc/id.js
function createIdStore2() {
  return {
    current: 0,
    take() {
      return this.current++;
    },
    reset() {
      this.current = 0;
    }
  };
}
var idCache2 = createIdStore2();

// node_modules/viem/_esm/utils/rpc/http.js
function getHttpRpcClient2(url, options = {}) {
  return {
    async request(params) {
      var _a2;
      const { body, fetchFn = options.fetchFn ?? fetch, onRequest = options.onRequest, onResponse = options.onResponse, timeout = options.timeout ?? 1e4 } = params;
      const fetchOptions = {
        ...options.fetchOptions ?? {},
        ...params.fetchOptions ?? {}
      };
      const { headers, method, signal: signal_ } = fetchOptions;
      try {
        const response = await withTimeout2(async ({ signal }) => {
          const init = {
            ...fetchOptions,
            body: Array.isArray(body) ? stringify(body.map((body2) => ({
              jsonrpc: "2.0",
              id: body2.id ?? idCache2.take(),
              ...body2
            }))) : stringify({
              jsonrpc: "2.0",
              id: body.id ?? idCache2.take(),
              ...body
            }),
            headers: {
              "Content-Type": "application/json",
              ...headers
            },
            method: method || "POST",
            signal: signal_ || (timeout > 0 ? signal : null)
          };
          const request = new Request(url, init);
          const args = await (onRequest == null ? void 0 : onRequest(request, init)) ?? { ...init, url };
          const response2 = await fetchFn(args.url ?? url, args);
          return response2;
        }, {
          errorInstance: new TimeoutError({ body, url }),
          timeout,
          signal: true
        });
        if (onResponse)
          await onResponse(response);
        let data;
        if ((_a2 = response.headers.get("Content-Type")) == null ? void 0 : _a2.startsWith("application/json"))
          data = await response.json();
        else {
          data = await response.text();
          try {
            data = JSON.parse(data || "{}");
          } catch (err) {
            if (response.ok)
              throw err;
            data = { error: data };
          }
        }
        if (!response.ok) {
          throw new HttpRequestError({
            body,
            details: stringify(data.error) || response.statusText,
            headers: response.headers,
            status: response.status,
            url
          });
        }
        return data;
      } catch (err) {
        if (err instanceof HttpRequestError)
          throw err;
        if (err instanceof TimeoutError)
          throw err;
        throw new HttpRequestError({
          body,
          cause: err,
          url
        });
      }
    }
  };
}

// node_modules/ox/_esm/erc8010/SignatureErc8010.js
var SignatureErc8010_exports = {};
__export(SignatureErc8010_exports, {
  InvalidWrappedSignatureError: () => InvalidWrappedSignatureError,
  assert: () => assert5,
  from: () => from16,
  magicBytes: () => magicBytes,
  suffixParameters: () => suffixParameters,
  unwrap: () => unwrap,
  validate: () => validate6,
  wrap: () => wrap
});

// node_modules/ox/_esm/core/internal/lru.js
var LruMap4 = class extends Map {
  constructor(size8) {
    super();
    Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxSize = size8;
  }
  get(key) {
    const value = super.get(key);
    if (super.has(key) && value !== void 0) {
      this.delete(key);
      super.set(key, value);
    }
    return value;
  }
  set(key, value) {
    super.set(key, value);
    if (this.maxSize && this.size > this.maxSize) {
      const firstKey = this.keys().next().value;
      if (firstKey)
        this.delete(firstKey);
    }
    return this;
  }
};

// node_modules/ox/_esm/core/Caches.js
var caches2 = {
  checksum: new LruMap4(8192)
};
var checksum3 = caches2.checksum;

// node_modules/ox/node_modules/@noble/hashes/esm/crypto.js
var crypto2 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

// node_modules/ox/node_modules/@noble/hashes/esm/utils.js
function isBytes5(a3) {
  return a3 instanceof Uint8Array || ArrayBuffer.isView(a3) && a3.constructor.name === "Uint8Array";
}
function anumber2(n5) {
  if (!Number.isSafeInteger(n5) || n5 < 0)
    throw new Error("positive integer expected, got " + n5);
}
function abytes3(b5, ...lengths) {
  if (!isBytes5(b5))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b5.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b5.length);
}
function ahash(h6) {
  if (typeof h6 !== "function" || typeof h6.create !== "function")
    throw new Error("Hash should be wrapped by utils.createHasher");
  anumber2(h6.outputLen);
  anumber2(h6.blockLen);
}
function aexists(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function aoutput(out, instance) {
  abytes3(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error("digestInto() expects output buffer of length at least " + min);
  }
}
function u32(arr) {
  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
}
function clean3(...arrays) {
  for (let i4 = 0; i4 < arrays.length; i4++) {
    arrays[i4].fill(0);
  }
}
function createView(arr) {
  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
function rotr(word, shift) {
  return word << 32 - shift | word >>> shift;
}
function rotl3(word, shift) {
  return word << shift | word >>> 32 - shift >>> 0;
}
var isLE = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
function byteSwap(word) {
  return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
}
function byteSwap32(arr) {
  for (let i4 = 0; i4 < arr.length; i4++) {
    arr[i4] = byteSwap(arr[i4]);
  }
  return arr;
}
var swap32IfBE = isLE ? (u3) => u3 : byteSwap32;
var hasHexBuiltin2 = (() => (
  // @ts-ignore
  typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
))();
var hexes = Array.from({ length: 256 }, (_3, i4) => i4.toString(16).padStart(2, "0"));
function utf8ToBytes2(str) {
  if (typeof str !== "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes3(data) {
  if (typeof data === "string")
    data = utf8ToBytes2(data);
  abytes3(data);
  return data;
}
function concatBytes3(...arrays) {
  let sum = 0;
  for (let i4 = 0; i4 < arrays.length; i4++) {
    const a3 = arrays[i4];
    abytes3(a3);
    sum += a3.length;
  }
  const res = new Uint8Array(sum);
  for (let i4 = 0, pad3 = 0; i4 < arrays.length; i4++) {
    const a3 = arrays[i4];
    res.set(a3, pad3);
    pad3 += a3.length;
  }
  return res;
}
var Hash = class {
};
function createHasher3(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes3(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function createXOFer(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes3(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}
function randomBytes(bytesLength = 32) {
  if (crypto2 && typeof crypto2.getRandomValues === "function") {
    return crypto2.getRandomValues(new Uint8Array(bytesLength));
  }
  if (crypto2 && typeof crypto2.randomBytes === "function") {
    return Uint8Array.from(crypto2.randomBytes(bytesLength));
  }
  throw new Error("crypto.getRandomValues must be defined");
}

// node_modules/ox/node_modules/@noble/hashes/esm/_md.js
function setBigUint64(view, byteOffset, value, isLE2) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE2);
  const _32n2 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n2 & _u32_max);
  const wl = Number(value & _u32_max);
  const h6 = isLE2 ? 4 : 0;
  const l8 = isLE2 ? 0 : 4;
  view.setUint32(byteOffset + h6, wh, isLE2);
  view.setUint32(byteOffset + l8, wl, isLE2);
}
function Chi3(a3, b5, c7) {
  return a3 & b5 ^ ~a3 & c7;
}
function Maj3(a3, b5, c7) {
  return a3 & b5 ^ a3 & c7 ^ b5 & c7;
}
var HashMD3 = class extends Hash {
  constructor(blockLen, outputLen, padOffset, isLE2) {
    super();
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE2;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView(this.buffer);
  }
  update(data) {
    aexists(this);
    data = toBytes3(data);
    abytes3(data);
    const { view, buffer: buffer2, blockLen } = this;
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      if (take === blockLen) {
        const dataView = createView(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer2.set(data.subarray(pos, pos + take), this.pos);
      this.pos += take;
      pos += take;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    aexists(this);
    aoutput(out, this);
    this.finished = true;
    const { buffer: buffer2, view, blockLen, isLE: isLE2 } = this;
    let { pos } = this;
    buffer2[pos++] = 128;
    clean3(this.buffer.subarray(pos));
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i4 = pos; i4 < blockLen; i4++)
      buffer2[i4] = 0;
    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
    this.process(view, 0);
    const oview = createView(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state25 = this.get();
    if (outLen > state25.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i4 = 0; i4 < outLen; i4++)
      oview.setUint32(4 * i4, state25[i4], isLE2);
  }
  digest() {
    const { buffer: buffer2, outputLen } = this;
    this.digestInto(buffer2);
    const res = buffer2.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to4) {
    to4 || (to4 = new this.constructor());
    to4.set(...this.get());
    const { blockLen, buffer: buffer2, length: length2, finished, destroyed, pos } = this;
    to4.destroyed = destroyed;
    to4.finished = finished;
    to4.length = length2;
    to4.pos = pos;
    if (length2 % blockLen)
      to4.buffer.set(buffer2);
    return to4;
  }
  clone() {
    return this._cloneInto();
  }
};
var SHA256_IV = Uint32Array.from([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA224_IV = Uint32Array.from([
  3238371032,
  914150663,
  812702999,
  4144912697,
  4290775857,
  1750603025,
  1694076839,
  3204075428
]);
var SHA384_IV = Uint32Array.from([
  3418070365,
  3238371032,
  1654270250,
  914150663,
  2438529370,
  812702999,
  355462360,
  4144912697,
  1731405415,
  4290775857,
  2394180231,
  1750603025,
  3675008525,
  1694076839,
  1203062813,
  3204075428
]);
var SHA512_IV = Uint32Array.from([
  1779033703,
  4089235720,
  3144134277,
  2227873595,
  1013904242,
  4271175723,
  2773480762,
  1595750129,
  1359893119,
  2917565137,
  2600822924,
  725511199,
  528734635,
  4215389547,
  1541459225,
  327033209
]);

// node_modules/ox/node_modules/@noble/hashes/esm/legacy.js
var SHA1_IV3 = Uint32Array.from([
  1732584193,
  4023233417,
  2562383102,
  271733878,
  3285377520
]);
var SHA1_W3 = new Uint32Array(80);
var SHA13 = class extends HashMD3 {
  constructor() {
    super(64, 20, 8, false);
    this.A = SHA1_IV3[0] | 0;
    this.B = SHA1_IV3[1] | 0;
    this.C = SHA1_IV3[2] | 0;
    this.D = SHA1_IV3[3] | 0;
    this.E = SHA1_IV3[4] | 0;
  }
  get() {
    const { A: A5, B: B4, C: C5, D: D4, E: E6 } = this;
    return [A5, B4, C5, D4, E6];
  }
  set(A5, B4, C5, D4, E6) {
    this.A = A5 | 0;
    this.B = B4 | 0;
    this.C = C5 | 0;
    this.D = D4 | 0;
    this.E = E6 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      SHA1_W3[i4] = view.getUint32(offset, false);
    for (let i4 = 16; i4 < 80; i4++)
      SHA1_W3[i4] = rotl3(SHA1_W3[i4 - 3] ^ SHA1_W3[i4 - 8] ^ SHA1_W3[i4 - 14] ^ SHA1_W3[i4 - 16], 1);
    let { A: A5, B: B4, C: C5, D: D4, E: E6 } = this;
    for (let i4 = 0; i4 < 80; i4++) {
      let F3, K7;
      if (i4 < 20) {
        F3 = Chi3(B4, C5, D4);
        K7 = 1518500249;
      } else if (i4 < 40) {
        F3 = B4 ^ C5 ^ D4;
        K7 = 1859775393;
      } else if (i4 < 60) {
        F3 = Maj3(B4, C5, D4);
        K7 = 2400959708;
      } else {
        F3 = B4 ^ C5 ^ D4;
        K7 = 3395469782;
      }
      const T5 = rotl3(A5, 5) + F3 + E6 + K7 + SHA1_W3[i4] | 0;
      E6 = D4;
      D4 = C5;
      C5 = rotl3(B4, 30);
      B4 = A5;
      A5 = T5;
    }
    A5 = A5 + this.A | 0;
    B4 = B4 + this.B | 0;
    C5 = C5 + this.C | 0;
    D4 = D4 + this.D | 0;
    E6 = E6 + this.E | 0;
    this.set(A5, B4, C5, D4, E6);
  }
  roundClean() {
    clean3(SHA1_W3);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0);
    clean3(this.buffer);
  }
};
var sha13 = createHasher3(() => new SHA13());
var p323 = Math.pow(2, 32);
var K6 = Array.from({ length: 64 }, (_3, i4) => Math.floor(p323 * Math.abs(Math.sin(i4 + 1))));
var MD5_IV3 = SHA1_IV3.slice(0, 4);
var MD5_W3 = new Uint32Array(16);
var MD53 = class extends HashMD3 {
  constructor() {
    super(64, 16, 8, true);
    this.A = MD5_IV3[0] | 0;
    this.B = MD5_IV3[1] | 0;
    this.C = MD5_IV3[2] | 0;
    this.D = MD5_IV3[3] | 0;
  }
  get() {
    const { A: A5, B: B4, C: C5, D: D4 } = this;
    return [A5, B4, C5, D4];
  }
  set(A5, B4, C5, D4) {
    this.A = A5 | 0;
    this.B = B4 | 0;
    this.C = C5 | 0;
    this.D = D4 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      MD5_W3[i4] = view.getUint32(offset, true);
    let { A: A5, B: B4, C: C5, D: D4 } = this;
    for (let i4 = 0; i4 < 64; i4++) {
      let F3, g4, s3;
      if (i4 < 16) {
        F3 = Chi3(B4, C5, D4);
        g4 = i4;
        s3 = [7, 12, 17, 22];
      } else if (i4 < 32) {
        F3 = Chi3(D4, B4, C5);
        g4 = (5 * i4 + 1) % 16;
        s3 = [5, 9, 14, 20];
      } else if (i4 < 48) {
        F3 = B4 ^ C5 ^ D4;
        g4 = (3 * i4 + 5) % 16;
        s3 = [4, 11, 16, 23];
      } else {
        F3 = C5 ^ (B4 | ~D4);
        g4 = 7 * i4 % 16;
        s3 = [6, 10, 15, 21];
      }
      F3 = F3 + A5 + K6[i4] + MD5_W3[g4];
      A5 = D4;
      D4 = C5;
      C5 = B4;
      B4 = B4 + rotl3(F3, s3[i4 % 4]);
    }
    A5 = A5 + this.A | 0;
    B4 = B4 + this.B | 0;
    C5 = C5 + this.C | 0;
    D4 = D4 + this.D | 0;
    this.set(A5, B4, C5, D4);
  }
  roundClean() {
    clean3(MD5_W3);
  }
  destroy() {
    this.set(0, 0, 0, 0);
    clean3(this.buffer);
  }
};
var md53 = createHasher3(() => new MD53());
var Rho1603 = Uint8Array.from([
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8
]);
var Id1603 = (() => Uint8Array.from(new Array(16).fill(0).map((_3, i4) => i4)))();
var Pi1603 = (() => Id1603.map((i4) => (9 * i4 + 5) % 16))();
var idxLR3 = (() => {
  const L5 = [Id1603];
  const R4 = [Pi1603];
  const res = [L5, R4];
  for (let i4 = 0; i4 < 4; i4++)
    for (let j5 of res)
      j5.push(j5[i4].map((k6) => Rho1603[k6]));
  return res;
})();
var idxL3 = (() => idxLR3[0])();
var idxR3 = (() => idxLR3[1])();
var shifts1603 = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i4) => Uint8Array.from(i4));
var shiftsL1603 = idxL3.map((idx, i4) => idx.map((j5) => shifts1603[i4][j5]));
var shiftsR1603 = idxR3.map((idx, i4) => idx.map((j5) => shifts1603[i4][j5]));
var Kl1603 = Uint32Array.from([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr1603 = Uint32Array.from([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function ripemd_f3(group, x6, y6, z4) {
  if (group === 0)
    return x6 ^ y6 ^ z4;
  if (group === 1)
    return x6 & y6 | ~x6 & z4;
  if (group === 2)
    return (x6 | ~y6) ^ z4;
  if (group === 3)
    return x6 & z4 | y6 & ~z4;
  return x6 ^ (y6 | ~z4);
}
var BUF_1603 = new Uint32Array(16);
var RIPEMD1603 = class extends HashMD3 {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4: h42 } = this;
    return [h0, h1, h22, h32, h42];
  }
  set(h0, h1, h22, h32, h42) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h42 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      BUF_1603[i4] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar3 = al, bl = this.h1 | 0, br4 = bl, cl = this.h2 | 0, cr4 = cl, dl = this.h3 | 0, dr4 = dl, el = this.h4 | 0, er3 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl1603[group], hbr = Kr1603[group];
      const rl = idxL3[group], rr4 = idxR3[group];
      const sl = shiftsL1603[group], sr4 = shiftsR1603[group];
      for (let i4 = 0; i4 < 16; i4++) {
        const tl = rotl3(al + ripemd_f3(group, bl, cl, dl) + BUF_1603[rl[i4]] + hbl, sl[i4]) + el | 0;
        al = el, el = dl, dl = rotl3(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i4 = 0; i4 < 16; i4++) {
        const tr4 = rotl3(ar3 + ripemd_f3(rGroup, br4, cr4, dr4) + BUF_1603[rr4[i4]] + hbr, sr4[i4]) + er3 | 0;
        ar3 = er3, er3 = dr4, dr4 = rotl3(cr4, 10) | 0, cr4 = br4, br4 = tr4;
      }
    }
    this.set(this.h1 + cl + dr4 | 0, this.h2 + dl + er3 | 0, this.h3 + el + ar3 | 0, this.h4 + al + br4 | 0, this.h0 + bl + cr4 | 0);
  }
  roundClean() {
    clean3(BUF_1603);
  }
  destroy() {
    this.destroyed = true;
    clean3(this.buffer);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd1606 = createHasher3(() => new RIPEMD1603());

// node_modules/ox/node_modules/@noble/hashes/esm/_u64.js
var U32_MASK64 = BigInt(2 ** 32 - 1);
var _32n = BigInt(32);
function fromBig(n5, le5 = false) {
  if (le5)
    return { h: Number(n5 & U32_MASK64), l: Number(n5 >> _32n & U32_MASK64) };
  return { h: Number(n5 >> _32n & U32_MASK64) | 0, l: Number(n5 & U32_MASK64) | 0 };
}
function split(lst, le5 = false) {
  const len = lst.length;
  let Ah = new Uint32Array(len);
  let Al = new Uint32Array(len);
  for (let i4 = 0; i4 < len; i4++) {
    const { h: h6, l: l8 } = fromBig(lst[i4], le5);
    [Ah[i4], Al[i4]] = [h6, l8];
  }
  return [Ah, Al];
}
var shrSH = (h6, _l, s3) => h6 >>> s3;
var shrSL = (h6, l8, s3) => h6 << 32 - s3 | l8 >>> s3;
var rotrSH = (h6, l8, s3) => h6 >>> s3 | l8 << 32 - s3;
var rotrSL = (h6, l8, s3) => h6 << 32 - s3 | l8 >>> s3;
var rotrBH = (h6, l8, s3) => h6 << 64 - s3 | l8 >>> s3 - 32;
var rotrBL = (h6, l8, s3) => h6 >>> s3 - 32 | l8 << 64 - s3;
var rotlSH = (h6, l8, s3) => h6 << s3 | l8 >>> 32 - s3;
var rotlSL = (h6, l8, s3) => l8 << s3 | h6 >>> 32 - s3;
var rotlBH = (h6, l8, s3) => l8 << s3 - 32 | h6 >>> 64 - s3;
var rotlBL = (h6, l8, s3) => h6 << s3 - 32 | l8 >>> 64 - s3;
function add(Ah, Al, Bh, Bl) {
  const l8 = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l8 / 2 ** 32 | 0) | 0, l: l8 | 0 };
}
var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;

// node_modules/ox/node_modules/@noble/hashes/esm/sha3.js
var _0n = BigInt(0);
var _1n = BigInt(1);
var _2n = BigInt(2);
var _7n = BigInt(7);
var _256n = BigInt(256);
var _0x71n = BigInt(113);
var SHA3_PI = [];
var SHA3_ROTL = [];
var _SHA3_IOTA = [];
for (let round2 = 0, R4 = _1n, x6 = 1, y6 = 0; round2 < 24; round2++) {
  [x6, y6] = [y6, (2 * x6 + 3 * y6) % 5];
  SHA3_PI.push(2 * (5 * y6 + x6));
  SHA3_ROTL.push((round2 + 1) * (round2 + 2) / 2 % 64);
  let t = _0n;
  for (let j5 = 0; j5 < 7; j5++) {
    R4 = (R4 << _1n ^ (R4 >> _7n) * _0x71n) % _256n;
    if (R4 & _2n)
      t ^= _1n << (_1n << BigInt(j5)) - _1n;
  }
  _SHA3_IOTA.push(t);
}
var IOTAS = split(_SHA3_IOTA, true);
var SHA3_IOTA_H = IOTAS[0];
var SHA3_IOTA_L = IOTAS[1];
var rotlH = (h6, l8, s3) => s3 > 32 ? rotlBH(h6, l8, s3) : rotlSH(h6, l8, s3);
var rotlL = (h6, l8, s3) => s3 > 32 ? rotlBL(h6, l8, s3) : rotlSL(h6, l8, s3);
function keccakP(s3, rounds = 24) {
  const B4 = new Uint32Array(5 * 2);
  for (let round2 = 24 - rounds; round2 < 24; round2++) {
    for (let x6 = 0; x6 < 10; x6++)
      B4[x6] = s3[x6] ^ s3[x6 + 10] ^ s3[x6 + 20] ^ s3[x6 + 30] ^ s3[x6 + 40];
    for (let x6 = 0; x6 < 10; x6 += 2) {
      const idx1 = (x6 + 8) % 10;
      const idx0 = (x6 + 2) % 10;
      const B0 = B4[idx0];
      const B1 = B4[idx0 + 1];
      const Th = rotlH(B0, B1, 1) ^ B4[idx1];
      const Tl = rotlL(B0, B1, 1) ^ B4[idx1 + 1];
      for (let y6 = 0; y6 < 50; y6 += 10) {
        s3[x6 + y6] ^= Th;
        s3[x6 + y6 + 1] ^= Tl;
      }
    }
    let curH = s3[2];
    let curL = s3[3];
    for (let t = 0; t < 24; t++) {
      const shift = SHA3_ROTL[t];
      const Th = rotlH(curH, curL, shift);
      const Tl = rotlL(curH, curL, shift);
      const PI = SHA3_PI[t];
      curH = s3[PI];
      curL = s3[PI + 1];
      s3[PI] = Th;
      s3[PI + 1] = Tl;
    }
    for (let y6 = 0; y6 < 50; y6 += 10) {
      for (let x6 = 0; x6 < 10; x6++)
        B4[x6] = s3[y6 + x6];
      for (let x6 = 0; x6 < 10; x6++)
        s3[y6 + x6] ^= ~B4[(x6 + 2) % 10] & B4[(x6 + 4) % 10];
    }
    s3[0] ^= SHA3_IOTA_H[round2];
    s3[1] ^= SHA3_IOTA_L[round2];
  }
  clean3(B4);
}
var Keccak = class _Keccak extends Hash {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    this.enableXOF = false;
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    anumber2(outputLen);
    if (!(0 < blockLen && blockLen < 200))
      throw new Error("only keccak-f1600 function is supported");
    this.state = new Uint8Array(200);
    this.state32 = u32(this.state);
  }
  clone() {
    return this._cloneInto();
  }
  keccak() {
    swap32IfBE(this.state32);
    keccakP(this.state32, this.rounds);
    swap32IfBE(this.state32);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    aexists(this);
    data = toBytes3(data);
    abytes3(data);
    const { blockLen, state: state25 } = this;
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      for (let i4 = 0; i4 < take; i4++)
        state25[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state: state25, suffix, pos, blockLen } = this;
    state25[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state25[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    aexists(this, false);
    abytes3(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
      this.posOut += take;
      pos += take;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes) {
    anumber2(bytes);
    return this.xofInto(new Uint8Array(bytes));
  }
  digestInto(out) {
    aoutput(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    clean3(this.state);
  }
  _cloneInto(to4) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to4 || (to4 = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
    to4.state32.set(this.state32);
    to4.pos = this.pos;
    to4.posOut = this.posOut;
    to4.finished = this.finished;
    to4.rounds = rounds;
    to4.suffix = suffix;
    to4.outputLen = outputLen;
    to4.enableXOF = enableXOF;
    to4.destroyed = this.destroyed;
    return to4;
  }
};
var gen = (suffix, blockLen, outputLen) => createHasher3(() => new Keccak(blockLen, suffix, outputLen));
var sha3_224 = (() => gen(6, 144, 224 / 8))();
var sha3_256 = (() => gen(6, 136, 256 / 8))();
var sha3_384 = (() => gen(6, 104, 384 / 8))();
var sha3_512 = (() => gen(6, 72, 512 / 8))();
var keccak_224 = (() => gen(1, 144, 224 / 8))();
var keccak_2562 = (() => gen(1, 136, 256 / 8))();
var keccak_384 = (() => gen(1, 104, 384 / 8))();
var keccak_512 = (() => gen(1, 72, 512 / 8))();
var genShake = (suffix, blockLen, outputLen) => createXOFer((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
var shake128 = (() => genShake(31, 168, 128 / 8))();
var shake256 = (() => genShake(31, 136, 256 / 8))();

// node_modules/ox/node_modules/@noble/hashes/esm/sha2.js
var SHA256_K = Uint32Array.from([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var SHA256_W = new Uint32Array(64);
var SHA2563 = class extends HashMD3 {
  constructor(outputLen = 32) {
    super(64, outputLen, 8, false);
    this.A = SHA256_IV[0] | 0;
    this.B = SHA256_IV[1] | 0;
    this.C = SHA256_IV[2] | 0;
    this.D = SHA256_IV[3] | 0;
    this.E = SHA256_IV[4] | 0;
    this.F = SHA256_IV[5] | 0;
    this.G = SHA256_IV[6] | 0;
    this.H = SHA256_IV[7] | 0;
  }
  get() {
    const { A: A5, B: B4, C: C5, D: D4, E: E6, F: F3, G: G5, H: H3 } = this;
    return [A5, B4, C5, D4, E6, F3, G5, H3];
  }
  // prettier-ignore
  set(A5, B4, C5, D4, E6, F3, G5, H3) {
    this.A = A5 | 0;
    this.B = B4 | 0;
    this.C = C5 | 0;
    this.D = D4 | 0;
    this.E = E6 | 0;
    this.F = F3 | 0;
    this.G = G5 | 0;
    this.H = H3 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      SHA256_W[i4] = view.getUint32(offset, false);
    for (let i4 = 16; i4 < 64; i4++) {
      const W15 = SHA256_W[i4 - 15];
      const W22 = SHA256_W[i4 - 2];
      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
      const s1 = rotr(W22, 17) ^ rotr(W22, 19) ^ W22 >>> 10;
      SHA256_W[i4] = s1 + SHA256_W[i4 - 7] + s0 + SHA256_W[i4 - 16] | 0;
    }
    let { A: A5, B: B4, C: C5, D: D4, E: E6, F: F3, G: G5, H: H3 } = this;
    for (let i4 = 0; i4 < 64; i4++) {
      const sigma1 = rotr(E6, 6) ^ rotr(E6, 11) ^ rotr(E6, 25);
      const T1 = H3 + sigma1 + Chi3(E6, F3, G5) + SHA256_K[i4] + SHA256_W[i4] | 0;
      const sigma0 = rotr(A5, 2) ^ rotr(A5, 13) ^ rotr(A5, 22);
      const T22 = sigma0 + Maj3(A5, B4, C5) | 0;
      H3 = G5;
      G5 = F3;
      F3 = E6;
      E6 = D4 + T1 | 0;
      D4 = C5;
      C5 = B4;
      B4 = A5;
      A5 = T1 + T22 | 0;
    }
    A5 = A5 + this.A | 0;
    B4 = B4 + this.B | 0;
    C5 = C5 + this.C | 0;
    D4 = D4 + this.D | 0;
    E6 = E6 + this.E | 0;
    F3 = F3 + this.F | 0;
    G5 = G5 + this.G | 0;
    H3 = H3 + this.H | 0;
    this.set(A5, B4, C5, D4, E6, F3, G5, H3);
  }
  roundClean() {
    clean3(SHA256_W);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    clean3(this.buffer);
  }
};
var SHA2243 = class extends SHA2563 {
  constructor() {
    super(28);
    this.A = SHA224_IV[0] | 0;
    this.B = SHA224_IV[1] | 0;
    this.C = SHA224_IV[2] | 0;
    this.D = SHA224_IV[3] | 0;
    this.E = SHA224_IV[4] | 0;
    this.F = SHA224_IV[5] | 0;
    this.G = SHA224_IV[6] | 0;
    this.H = SHA224_IV[7] | 0;
  }
};
var K512 = (() => split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n5) => BigInt(n5))))();
var SHA512_Kh = (() => K512[0])();
var SHA512_Kl = (() => K512[1])();
var SHA512_W_H = new Uint32Array(80);
var SHA512_W_L = new Uint32Array(80);
var SHA512 = class extends HashMD3 {
  constructor(outputLen = 64) {
    super(128, outputLen, 16, false);
    this.Ah = SHA512_IV[0] | 0;
    this.Al = SHA512_IV[1] | 0;
    this.Bh = SHA512_IV[2] | 0;
    this.Bl = SHA512_IV[3] | 0;
    this.Ch = SHA512_IV[4] | 0;
    this.Cl = SHA512_IV[5] | 0;
    this.Dh = SHA512_IV[6] | 0;
    this.Dl = SHA512_IV[7] | 0;
    this.Eh = SHA512_IV[8] | 0;
    this.El = SHA512_IV[9] | 0;
    this.Fh = SHA512_IV[10] | 0;
    this.Fl = SHA512_IV[11] | 0;
    this.Gh = SHA512_IV[12] | 0;
    this.Gl = SHA512_IV[13] | 0;
    this.Hh = SHA512_IV[14] | 0;
    this.Hl = SHA512_IV[15] | 0;
  }
  // prettier-ignore
  get() {
    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
  // prettier-ignore
  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4) {
      SHA512_W_H[i4] = view.getUint32(offset);
      SHA512_W_L[i4] = view.getUint32(offset += 4);
    }
    for (let i4 = 16; i4 < 80; i4++) {
      const W15h = SHA512_W_H[i4 - 15] | 0;
      const W15l = SHA512_W_L[i4 - 15] | 0;
      const s0h = rotrSH(W15h, W15l, 1) ^ rotrSH(W15h, W15l, 8) ^ shrSH(W15h, W15l, 7);
      const s0l = rotrSL(W15h, W15l, 1) ^ rotrSL(W15h, W15l, 8) ^ shrSL(W15h, W15l, 7);
      const W2h = SHA512_W_H[i4 - 2] | 0;
      const W2l = SHA512_W_L[i4 - 2] | 0;
      const s1h = rotrSH(W2h, W2l, 19) ^ rotrBH(W2h, W2l, 61) ^ shrSH(W2h, W2l, 6);
      const s1l = rotrSL(W2h, W2l, 19) ^ rotrBL(W2h, W2l, 61) ^ shrSL(W2h, W2l, 6);
      const SUMl = add4L(s0l, s1l, SHA512_W_L[i4 - 7], SHA512_W_L[i4 - 16]);
      const SUMh = add4H(SUMl, s0h, s1h, SHA512_W_H[i4 - 7], SHA512_W_H[i4 - 16]);
      SHA512_W_H[i4] = SUMh | 0;
      SHA512_W_L[i4] = SUMl | 0;
    }
    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    for (let i4 = 0; i4 < 80; i4++) {
      const sigma1h = rotrSH(Eh, El, 14) ^ rotrSH(Eh, El, 18) ^ rotrBH(Eh, El, 41);
      const sigma1l = rotrSL(Eh, El, 14) ^ rotrSL(Eh, El, 18) ^ rotrBL(Eh, El, 41);
      const CHIh = Eh & Fh ^ ~Eh & Gh;
      const CHIl = El & Fl ^ ~El & Gl;
      const T1ll = add5L(Hl, sigma1l, CHIl, SHA512_Kl[i4], SHA512_W_L[i4]);
      const T1h = add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i4], SHA512_W_H[i4]);
      const T1l = T1ll | 0;
      const sigma0h = rotrSH(Ah, Al, 28) ^ rotrBH(Ah, Al, 34) ^ rotrBH(Ah, Al, 39);
      const sigma0l = rotrSL(Ah, Al, 28) ^ rotrBL(Ah, Al, 34) ^ rotrBL(Ah, Al, 39);
      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
      Hh = Gh | 0;
      Hl = Gl | 0;
      Gh = Fh | 0;
      Gl = Fl | 0;
      Fh = Eh | 0;
      Fl = El | 0;
      ({ h: Eh, l: El } = add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
      Dh = Ch | 0;
      Dl = Cl | 0;
      Ch = Bh | 0;
      Cl = Bl | 0;
      Bh = Ah | 0;
      Bl = Al | 0;
      const All = add3L(T1l, sigma0l, MAJl);
      Ah = add3H(All, T1h, sigma0h, MAJh);
      Al = All | 0;
    }
    ({ h: Ah, l: Al } = add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
    ({ h: Bh, l: Bl } = add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
    ({ h: Ch, l: Cl } = add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
    ({ h: Dh, l: Dl } = add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
    ({ h: Eh, l: El } = add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
    ({ h: Fh, l: Fl } = add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
    ({ h: Gh, l: Gl } = add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
    ({ h: Hh, l: Hl } = add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
  }
  roundClean() {
    clean3(SHA512_W_H, SHA512_W_L);
  }
  destroy() {
    clean3(this.buffer);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var SHA384 = class extends SHA512 {
  constructor() {
    super(48);
    this.Ah = SHA384_IV[0] | 0;
    this.Al = SHA384_IV[1] | 0;
    this.Bh = SHA384_IV[2] | 0;
    this.Bl = SHA384_IV[3] | 0;
    this.Ch = SHA384_IV[4] | 0;
    this.Cl = SHA384_IV[5] | 0;
    this.Dh = SHA384_IV[6] | 0;
    this.Dl = SHA384_IV[7] | 0;
    this.Eh = SHA384_IV[8] | 0;
    this.El = SHA384_IV[9] | 0;
    this.Fh = SHA384_IV[10] | 0;
    this.Fl = SHA384_IV[11] | 0;
    this.Gh = SHA384_IV[12] | 0;
    this.Gl = SHA384_IV[13] | 0;
    this.Hh = SHA384_IV[14] | 0;
    this.Hl = SHA384_IV[15] | 0;
  }
};
var T224_IV = Uint32Array.from([
  2352822216,
  424955298,
  1944164710,
  2312950998,
  502970286,
  855612546,
  1738396948,
  1479516111,
  258812777,
  2077511080,
  2011393907,
  79989058,
  1067287976,
  1780299464,
  286451373,
  2446758561
]);
var T256_IV = Uint32Array.from([
  573645204,
  4230739756,
  2673172387,
  3360449730,
  596883563,
  1867755857,
  2520282905,
  1497426621,
  2519219938,
  2827943907,
  3193839141,
  1401305490,
  721525244,
  746961066,
  246885852,
  2177182882
]);
var SHA512_224 = class extends SHA512 {
  constructor() {
    super(28);
    this.Ah = T224_IV[0] | 0;
    this.Al = T224_IV[1] | 0;
    this.Bh = T224_IV[2] | 0;
    this.Bl = T224_IV[3] | 0;
    this.Ch = T224_IV[4] | 0;
    this.Cl = T224_IV[5] | 0;
    this.Dh = T224_IV[6] | 0;
    this.Dl = T224_IV[7] | 0;
    this.Eh = T224_IV[8] | 0;
    this.El = T224_IV[9] | 0;
    this.Fh = T224_IV[10] | 0;
    this.Fl = T224_IV[11] | 0;
    this.Gh = T224_IV[12] | 0;
    this.Gl = T224_IV[13] | 0;
    this.Hh = T224_IV[14] | 0;
    this.Hl = T224_IV[15] | 0;
  }
};
var SHA512_256 = class extends SHA512 {
  constructor() {
    super(32);
    this.Ah = T256_IV[0] | 0;
    this.Al = T256_IV[1] | 0;
    this.Bh = T256_IV[2] | 0;
    this.Bl = T256_IV[3] | 0;
    this.Ch = T256_IV[4] | 0;
    this.Cl = T256_IV[5] | 0;
    this.Dh = T256_IV[6] | 0;
    this.Dl = T256_IV[7] | 0;
    this.Eh = T256_IV[8] | 0;
    this.El = T256_IV[9] | 0;
    this.Fh = T256_IV[10] | 0;
    this.Fl = T256_IV[11] | 0;
    this.Gh = T256_IV[12] | 0;
    this.Gl = T256_IV[13] | 0;
    this.Hh = T256_IV[14] | 0;
    this.Hl = T256_IV[15] | 0;
  }
};
var sha2568 = createHasher3(() => new SHA2563());
var sha2243 = createHasher3(() => new SHA2243());
var sha5122 = createHasher3(() => new SHA512());
var sha384 = createHasher3(() => new SHA384());
var sha512_256 = createHasher3(() => new SHA512_256());
var sha512_224 = createHasher3(() => new SHA512_224());

// node_modules/ox/_esm/core/Hash.js
function keccak2564(value, options = {}) {
  const { as: as2 = typeof value === "string" ? "Hex" : "Bytes" } = options;
  const bytes = keccak_2562(from2(value));
  if (as2 === "Bytes")
    return bytes;
  return fromBytes2(bytes);
}

// node_modules/ox/_esm/core/PublicKey.js
function assert2(publicKey, options = {}) {
  const { compressed } = options;
  const { prefix, x: x6, y: y6 } = publicKey;
  if (compressed === false || typeof x6 === "bigint" && typeof y6 === "bigint") {
    if (prefix !== 4)
      throw new InvalidPrefixError({
        prefix,
        cause: new InvalidUncompressedPrefixError()
      });
    return;
  }
  if (compressed === true || typeof x6 === "bigint" && typeof y6 === "undefined") {
    if (prefix !== 3 && prefix !== 2)
      throw new InvalidPrefixError({
        prefix,
        cause: new InvalidCompressedPrefixError()
      });
    return;
  }
  throw new InvalidError({ publicKey });
}
function from10(value) {
  const publicKey = (() => {
    if (validate2(value))
      return fromHex4(value);
    if (validate(value))
      return fromBytes4(value);
    const { prefix, x: x6, y: y6 } = value;
    if (typeof x6 === "bigint" && typeof y6 === "bigint")
      return { prefix: prefix ?? 4, x: x6, y: y6 };
    return { prefix, x: x6 };
  })();
  assert2(publicKey);
  return publicKey;
}
function fromBytes4(publicKey) {
  return fromHex4(fromBytes2(publicKey));
}
function fromHex4(publicKey) {
  if (publicKey.length !== 132 && publicKey.length !== 130 && publicKey.length !== 68)
    throw new InvalidSerializedSizeError({ publicKey });
  if (publicKey.length === 130) {
    const x7 = BigInt(slice3(publicKey, 0, 32));
    const y6 = BigInt(slice3(publicKey, 32, 64));
    return {
      prefix: 4,
      x: x7,
      y: y6
    };
  }
  if (publicKey.length === 132) {
    const prefix2 = Number(slice3(publicKey, 0, 1));
    const x7 = BigInt(slice3(publicKey, 1, 33));
    const y6 = BigInt(slice3(publicKey, 33, 65));
    return {
      prefix: prefix2,
      x: x7,
      y: y6
    };
  }
  const prefix = Number(slice3(publicKey, 0, 1));
  const x6 = BigInt(slice3(publicKey, 1, 33));
  return {
    prefix,
    x: x6
  };
}
function toHex4(publicKey, options = {}) {
  assert2(publicKey);
  const { prefix, x: x6, y: y6 } = publicKey;
  const { includePrefix = true } = options;
  const publicKey_ = concat2(
    includePrefix ? fromNumber2(prefix, { size: 1 }) : "0x",
    fromNumber2(x6, { size: 32 }),
    // If the public key is not compressed, add the y coordinate.
    typeof y6 === "bigint" ? fromNumber2(y6, { size: 32 }) : "0x"
  );
  return publicKey_;
}
var InvalidError = class extends BaseError3 {
  constructor({ publicKey }) {
    super(`Value \`${stringify2(publicKey)}\` is not a valid public key.`, {
      metaMessages: [
        "Public key must contain:",
        "- an `x` and `prefix` value (compressed)",
        "- an `x`, `y`, and `prefix` value (uncompressed)"
      ]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "PublicKey.InvalidError"
    });
  }
};
var InvalidPrefixError = class extends BaseError3 {
  constructor({ prefix, cause }) {
    super(`Prefix "${prefix}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "PublicKey.InvalidPrefixError"
    });
  }
};
var InvalidCompressedPrefixError = class extends BaseError3 {
  constructor() {
    super("Prefix must be 2 or 3 for compressed public keys.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "PublicKey.InvalidCompressedPrefixError"
    });
  }
};
var InvalidUncompressedPrefixError = class extends BaseError3 {
  constructor() {
    super("Prefix must be 4 for uncompressed public keys.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "PublicKey.InvalidUncompressedPrefixError"
    });
  }
};
var InvalidSerializedSizeError = class extends BaseError3 {
  constructor({ publicKey }) {
    super(`Value \`${publicKey}\` is an invalid public key size.`, {
      metaMessages: [
        "Expected: 33 bytes (compressed + prefix), 64 bytes (uncompressed) or 65 bytes (uncompressed + prefix).",
        `Received ${size5(from3(publicKey))} bytes.`
      ]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "PublicKey.InvalidSerializedSizeError"
    });
  }
};

// node_modules/ox/_esm/core/Address.js
var addressRegex2 = /^0x[a-fA-F0-9]{40}$/;
function assert3(value, options = {}) {
  const { strict = true } = options;
  if (!addressRegex2.test(value))
    throw new InvalidAddressError4({
      address: value,
      cause: new InvalidInputError2()
    });
  if (strict) {
    if (value.toLowerCase() === value)
      return;
    if (checksum4(value) !== value)
      throw new InvalidAddressError4({
        address: value,
        cause: new InvalidChecksumError2()
      });
  }
}
function checksum4(address) {
  if (checksum3.has(address))
    return checksum3.get(address);
  assert3(address, { strict: false });
  const hexAddress = address.substring(2).toLowerCase();
  const hash2 = keccak2564(fromString3(hexAddress), { as: "Bytes" });
  const characters = hexAddress.split("");
  for (let i4 = 0; i4 < 40; i4 += 2) {
    if (hash2[i4 >> 1] >> 4 >= 8 && characters[i4]) {
      characters[i4] = characters[i4].toUpperCase();
    }
    if ((hash2[i4 >> 1] & 15) >= 8 && characters[i4 + 1]) {
      characters[i4 + 1] = characters[i4 + 1].toUpperCase();
    }
  }
  const result = `0x${characters.join("")}`;
  checksum3.set(address, result);
  return result;
}
function from11(address, options = {}) {
  const { checksum: checksumVal = false } = options;
  assert3(address);
  if (checksumVal)
    return checksum4(address);
  return address;
}
function fromPublicKey(publicKey, options = {}) {
  const address = keccak2564(`0x${toHex4(publicKey).slice(4)}`).substring(26);
  return from11(`0x${address}`, options);
}
var InvalidAddressError4 = class extends BaseError3 {
  constructor({ address, cause }) {
    super(`Address "${address}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidAddressError"
    });
  }
};
var InvalidInputError2 = class extends BaseError3 {
  constructor() {
    super("Address is not a 20 byte (40 hexadecimal character) value.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidInputError"
    });
  }
};
var InvalidChecksumError2 = class extends BaseError3 {
  constructor() {
    super("Address does not match its checksum counterpart.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidChecksumError"
    });
  }
};

// node_modules/ox/_esm/core/Solidity.js
var arrayRegex4 = /^(.*)\[([0-9]*)\]$/;
var bytesRegex4 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex4 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var maxInt83 = 2n ** (8n - 1n) - 1n;
var maxInt163 = 2n ** (16n - 1n) - 1n;
var maxInt243 = 2n ** (24n - 1n) - 1n;
var maxInt323 = 2n ** (32n - 1n) - 1n;
var maxInt403 = 2n ** (40n - 1n) - 1n;
var maxInt483 = 2n ** (48n - 1n) - 1n;
var maxInt563 = 2n ** (56n - 1n) - 1n;
var maxInt643 = 2n ** (64n - 1n) - 1n;
var maxInt723 = 2n ** (72n - 1n) - 1n;
var maxInt803 = 2n ** (80n - 1n) - 1n;
var maxInt883 = 2n ** (88n - 1n) - 1n;
var maxInt963 = 2n ** (96n - 1n) - 1n;
var maxInt1043 = 2n ** (104n - 1n) - 1n;
var maxInt1123 = 2n ** (112n - 1n) - 1n;
var maxInt1203 = 2n ** (120n - 1n) - 1n;
var maxInt1283 = 2n ** (128n - 1n) - 1n;
var maxInt1363 = 2n ** (136n - 1n) - 1n;
var maxInt1443 = 2n ** (144n - 1n) - 1n;
var maxInt1523 = 2n ** (152n - 1n) - 1n;
var maxInt1603 = 2n ** (160n - 1n) - 1n;
var maxInt1683 = 2n ** (168n - 1n) - 1n;
var maxInt1763 = 2n ** (176n - 1n) - 1n;
var maxInt1843 = 2n ** (184n - 1n) - 1n;
var maxInt1923 = 2n ** (192n - 1n) - 1n;
var maxInt2003 = 2n ** (200n - 1n) - 1n;
var maxInt2083 = 2n ** (208n - 1n) - 1n;
var maxInt2163 = 2n ** (216n - 1n) - 1n;
var maxInt2243 = 2n ** (224n - 1n) - 1n;
var maxInt2323 = 2n ** (232n - 1n) - 1n;
var maxInt2403 = 2n ** (240n - 1n) - 1n;
var maxInt2483 = 2n ** (248n - 1n) - 1n;
var maxInt2563 = 2n ** (256n - 1n) - 1n;
var minInt83 = -(2n ** (8n - 1n));
var minInt163 = -(2n ** (16n - 1n));
var minInt243 = -(2n ** (24n - 1n));
var minInt323 = -(2n ** (32n - 1n));
var minInt403 = -(2n ** (40n - 1n));
var minInt483 = -(2n ** (48n - 1n));
var minInt563 = -(2n ** (56n - 1n));
var minInt643 = -(2n ** (64n - 1n));
var minInt723 = -(2n ** (72n - 1n));
var minInt803 = -(2n ** (80n - 1n));
var minInt883 = -(2n ** (88n - 1n));
var minInt963 = -(2n ** (96n - 1n));
var minInt1043 = -(2n ** (104n - 1n));
var minInt1123 = -(2n ** (112n - 1n));
var minInt1203 = -(2n ** (120n - 1n));
var minInt1283 = -(2n ** (128n - 1n));
var minInt1363 = -(2n ** (136n - 1n));
var minInt1443 = -(2n ** (144n - 1n));
var minInt1523 = -(2n ** (152n - 1n));
var minInt1603 = -(2n ** (160n - 1n));
var minInt1683 = -(2n ** (168n - 1n));
var minInt1763 = -(2n ** (176n - 1n));
var minInt1843 = -(2n ** (184n - 1n));
var minInt1923 = -(2n ** (192n - 1n));
var minInt2003 = -(2n ** (200n - 1n));
var minInt2083 = -(2n ** (208n - 1n));
var minInt2163 = -(2n ** (216n - 1n));
var minInt2243 = -(2n ** (224n - 1n));
var minInt2323 = -(2n ** (232n - 1n));
var minInt2403 = -(2n ** (240n - 1n));
var minInt2483 = -(2n ** (248n - 1n));
var minInt2563 = -(2n ** (256n - 1n));
var maxUint83 = 2n ** 8n - 1n;
var maxUint163 = 2n ** 16n - 1n;
var maxUint243 = 2n ** 24n - 1n;
var maxUint323 = 2n ** 32n - 1n;
var maxUint403 = 2n ** 40n - 1n;
var maxUint483 = 2n ** 48n - 1n;
var maxUint563 = 2n ** 56n - 1n;
var maxUint643 = 2n ** 64n - 1n;
var maxUint723 = 2n ** 72n - 1n;
var maxUint803 = 2n ** 80n - 1n;
var maxUint883 = 2n ** 88n - 1n;
var maxUint963 = 2n ** 96n - 1n;
var maxUint1043 = 2n ** 104n - 1n;
var maxUint1123 = 2n ** 112n - 1n;
var maxUint1203 = 2n ** 120n - 1n;
var maxUint1283 = 2n ** 128n - 1n;
var maxUint1363 = 2n ** 136n - 1n;
var maxUint1443 = 2n ** 144n - 1n;
var maxUint1523 = 2n ** 152n - 1n;
var maxUint1603 = 2n ** 160n - 1n;
var maxUint1683 = 2n ** 168n - 1n;
var maxUint1763 = 2n ** 176n - 1n;
var maxUint1843 = 2n ** 184n - 1n;
var maxUint1923 = 2n ** 192n - 1n;
var maxUint2003 = 2n ** 200n - 1n;
var maxUint2083 = 2n ** 208n - 1n;
var maxUint2163 = 2n ** 216n - 1n;
var maxUint2243 = 2n ** 224n - 1n;
var maxUint2323 = 2n ** 232n - 1n;
var maxUint2403 = 2n ** 240n - 1n;
var maxUint2483 = 2n ** 248n - 1n;
var maxUint2564 = 2n ** 256n - 1n;

// node_modules/ox/_esm/core/internal/abiParameters.js
function decodeParameter2(cursor, param, options) {
  const { checksumAddress: checksumAddress3, staticPosition } = options;
  const arrayComponents = getArrayComponents(param.type);
  if (arrayComponents) {
    const [length2, type] = arrayComponents;
    return decodeArray(cursor, { ...param, type }, { checksumAddress: checksumAddress3, length: length2, staticPosition });
  }
  if (param.type === "tuple")
    return decodeTuple(cursor, param, {
      checksumAddress: checksumAddress3,
      staticPosition
    });
  if (param.type === "address")
    return decodeAddress(cursor, { checksum: checksumAddress3 });
  if (param.type === "bool")
    return decodeBool(cursor);
  if (param.type.startsWith("bytes"))
    return decodeBytes(cursor, param, { staticPosition });
  if (param.type.startsWith("uint") || param.type.startsWith("int"))
    return decodeNumber(cursor, param);
  if (param.type === "string")
    return decodeString(cursor, { staticPosition });
  throw new InvalidTypeError2(param.type);
}
var sizeOfLength = 32;
var sizeOfOffset = 32;
function decodeAddress(cursor, options = {}) {
  const { checksum: checksum5 = false } = options;
  const value = cursor.readBytes(32);
  const wrap3 = (address) => checksum5 ? checksum4(address) : address;
  return [wrap3(fromBytes2(slice2(value, -20))), 32];
}
function decodeArray(cursor, param, options) {
  const { checksumAddress: checksumAddress3, length: length2, staticPosition } = options;
  if (!length2) {
    const offset = toNumber(cursor.readBytes(sizeOfOffset));
    const start = staticPosition + offset;
    const startOfData = start + sizeOfLength;
    cursor.setPosition(start);
    const length3 = toNumber(cursor.readBytes(sizeOfLength));
    const dynamicChild = hasDynamicChild(param);
    let consumed2 = 0;
    const value2 = [];
    for (let i4 = 0; i4 < length3; ++i4) {
      cursor.setPosition(startOfData + (dynamicChild ? i4 * 32 : consumed2));
      const [data, consumed_] = decodeParameter2(cursor, param, {
        checksumAddress: checksumAddress3,
        staticPosition: startOfData
      });
      consumed2 += consumed_;
      value2.push(data);
    }
    cursor.setPosition(staticPosition + 32);
    return [value2, 32];
  }
  if (hasDynamicChild(param)) {
    const offset = toNumber(cursor.readBytes(sizeOfOffset));
    const start = staticPosition + offset;
    const value2 = [];
    for (let i4 = 0; i4 < length2; ++i4) {
      cursor.setPosition(start + i4 * 32);
      const [data] = decodeParameter2(cursor, param, {
        checksumAddress: checksumAddress3,
        staticPosition: start
      });
      value2.push(data);
    }
    cursor.setPosition(staticPosition + 32);
    return [value2, 32];
  }
  let consumed = 0;
  const value = [];
  for (let i4 = 0; i4 < length2; ++i4) {
    const [data, consumed_] = decodeParameter2(cursor, param, {
      checksumAddress: checksumAddress3,
      staticPosition: staticPosition + consumed
    });
    consumed += consumed_;
    value.push(data);
  }
  return [value, consumed];
}
function decodeBool(cursor) {
  return [toBoolean(cursor.readBytes(32), { size: 32 }), 32];
}
function decodeBytes(cursor, param, { staticPosition }) {
  const [_3, size8] = param.type.split("bytes");
  if (!size8) {
    const offset = toNumber(cursor.readBytes(32));
    cursor.setPosition(staticPosition + offset);
    const length2 = toNumber(cursor.readBytes(32));
    if (length2 === 0) {
      cursor.setPosition(staticPosition + 32);
      return ["0x", 32];
    }
    const data = cursor.readBytes(length2);
    cursor.setPosition(staticPosition + 32);
    return [fromBytes2(data), 32];
  }
  const value = fromBytes2(cursor.readBytes(Number.parseInt(size8, 10), 32));
  return [value, 32];
}
function decodeNumber(cursor, param) {
  const signed = param.type.startsWith("int");
  const size8 = Number.parseInt(param.type.split("int")[1] || "256", 10);
  const value = cursor.readBytes(32);
  return [
    size8 > 48 ? toBigInt(value, { signed }) : toNumber(value, { signed }),
    32
  ];
}
function decodeTuple(cursor, param, options) {
  const { checksumAddress: checksumAddress3, staticPosition } = options;
  const hasUnnamedChild = param.components.length === 0 || param.components.some(({ name: name2 }) => !name2);
  const value = hasUnnamedChild ? [] : {};
  let consumed = 0;
  if (hasDynamicChild(param)) {
    const offset = toNumber(cursor.readBytes(sizeOfOffset));
    const start = staticPosition + offset;
    for (let i4 = 0; i4 < param.components.length; ++i4) {
      const component = param.components[i4];
      cursor.setPosition(start + consumed);
      const [data, consumed_] = decodeParameter2(cursor, component, {
        checksumAddress: checksumAddress3,
        staticPosition: start
      });
      consumed += consumed_;
      value[hasUnnamedChild ? i4 : component == null ? void 0 : component.name] = data;
    }
    cursor.setPosition(staticPosition + 32);
    return [value, 32];
  }
  for (let i4 = 0; i4 < param.components.length; ++i4) {
    const component = param.components[i4];
    const [data, consumed_] = decodeParameter2(cursor, component, {
      checksumAddress: checksumAddress3,
      staticPosition
    });
    value[hasUnnamedChild ? i4 : component == null ? void 0 : component.name] = data;
    consumed += consumed_;
  }
  return [value, consumed];
}
function decodeString(cursor, { staticPosition }) {
  const offset = toNumber(cursor.readBytes(32));
  const start = staticPosition + offset;
  cursor.setPosition(start);
  const length2 = toNumber(cursor.readBytes(32));
  if (length2 === 0) {
    cursor.setPosition(staticPosition + 32);
    return ["", 32];
  }
  const data = cursor.readBytes(length2, 32);
  const value = toString(trimLeft(data));
  cursor.setPosition(staticPosition + 32);
  return [value, 32];
}
function prepareParameters2({ checksumAddress: checksumAddress3, parameters, values }) {
  const preparedParameters = [];
  for (let i4 = 0; i4 < parameters.length; i4++) {
    preparedParameters.push(prepareParameter({
      checksumAddress: checksumAddress3,
      parameter: parameters[i4],
      value: values[i4]
    }));
  }
  return preparedParameters;
}
function prepareParameter({ checksumAddress: checksumAddress3 = false, parameter: parameter_, value }) {
  const parameter = parameter_;
  const arrayComponents = getArrayComponents(parameter.type);
  if (arrayComponents) {
    const [length2, type] = arrayComponents;
    return encodeArray(value, {
      checksumAddress: checksumAddress3,
      length: length2,
      parameter: {
        ...parameter,
        type
      }
    });
  }
  if (parameter.type === "tuple") {
    return encodeTuple(value, {
      checksumAddress: checksumAddress3,
      parameter
    });
  }
  if (parameter.type === "address") {
    return encodeAddress(value, {
      checksum: checksumAddress3
    });
  }
  if (parameter.type === "bool") {
    return encodeBoolean(value);
  }
  if (parameter.type.startsWith("uint") || parameter.type.startsWith("int")) {
    const signed = parameter.type.startsWith("int");
    const [, , size8 = "256"] = integerRegex4.exec(parameter.type) ?? [];
    return encodeNumber(value, {
      signed,
      size: Number(size8)
    });
  }
  if (parameter.type.startsWith("bytes")) {
    return encodeBytes(value, { type: parameter.type });
  }
  if (parameter.type === "string") {
    return encodeString(value);
  }
  throw new InvalidTypeError2(parameter.type);
}
function encode9(preparedParameters) {
  let staticSize = 0;
  for (let i4 = 0; i4 < preparedParameters.length; i4++) {
    const { dynamic, encoded } = preparedParameters[i4];
    if (dynamic)
      staticSize += 32;
    else
      staticSize += size5(encoded);
  }
  const staticParameters = [];
  const dynamicParameters = [];
  let dynamicSize = 0;
  for (let i4 = 0; i4 < preparedParameters.length; i4++) {
    const { dynamic, encoded } = preparedParameters[i4];
    if (dynamic) {
      staticParameters.push(fromNumber2(staticSize + dynamicSize, { size: 32 }));
      dynamicParameters.push(encoded);
      dynamicSize += size5(encoded);
    } else {
      staticParameters.push(encoded);
    }
  }
  return concat2(...staticParameters, ...dynamicParameters);
}
function encodeAddress(value, options) {
  const { checksum: checksum5 = false } = options;
  assert3(value, { strict: checksum5 });
  return {
    dynamic: false,
    encoded: padLeft2(value.toLowerCase())
  };
}
function encodeArray(value, options) {
  const { checksumAddress: checksumAddress3, length: length2, parameter } = options;
  const dynamic = length2 === null;
  if (!Array.isArray(value))
    throw new InvalidArrayError3(value);
  if (!dynamic && value.length !== length2)
    throw new ArrayLengthMismatchError2({
      expectedLength: length2,
      givenLength: value.length,
      type: `${parameter.type}[${length2}]`
    });
  let dynamicChild = false;
  const preparedParameters = [];
  for (let i4 = 0; i4 < value.length; i4++) {
    const preparedParam = prepareParameter({
      checksumAddress: checksumAddress3,
      parameter,
      value: value[i4]
    });
    if (preparedParam.dynamic)
      dynamicChild = true;
    preparedParameters.push(preparedParam);
  }
  if (dynamic || dynamicChild) {
    const data = encode9(preparedParameters);
    if (dynamic) {
      const length3 = fromNumber2(preparedParameters.length, { size: 32 });
      return {
        dynamic: true,
        encoded: preparedParameters.length > 0 ? concat2(length3, data) : length3
      };
    }
    if (dynamicChild)
      return { dynamic: true, encoded: data };
  }
  return {
    dynamic: false,
    encoded: concat2(...preparedParameters.map(({ encoded }) => encoded))
  };
}
function encodeBytes(value, { type }) {
  const [, parametersize] = type.split("bytes");
  const bytesSize = size5(value);
  if (!parametersize) {
    let value_ = value;
    if (bytesSize % 32 !== 0)
      value_ = padRight2(value_, Math.ceil((value.length - 2) / 2 / 32) * 32);
    return {
      dynamic: true,
      encoded: concat2(padLeft2(fromNumber2(bytesSize, { size: 32 })), value_)
    };
  }
  if (bytesSize !== Number.parseInt(parametersize, 10))
    throw new BytesSizeMismatchError4({
      expectedSize: Number.parseInt(parametersize, 10),
      value
    });
  return { dynamic: false, encoded: padRight2(value) };
}
function encodeBoolean(value) {
  if (typeof value !== "boolean")
    throw new BaseError3(`Invalid boolean value: "${value}" (type: ${typeof value}). Expected: \`true\` or \`false\`.`);
  return { dynamic: false, encoded: padLeft2(fromBoolean2(value)) };
}
function encodeNumber(value, { signed, size: size8 }) {
  if (typeof size8 === "number") {
    const max = 2n ** (BigInt(size8) - (signed ? 1n : 0n)) - 1n;
    const min = signed ? -max - 1n : 0n;
    if (value > max || value < min)
      throw new IntegerOutOfRangeError({
        max: max.toString(),
        min: min.toString(),
        signed,
        size: size8 / 8,
        value: value.toString()
      });
  }
  return {
    dynamic: false,
    encoded: fromNumber2(value, {
      size: 32,
      signed
    })
  };
}
function encodeString(value) {
  const hexValue = fromString4(value);
  const partsLength = Math.ceil(size5(hexValue) / 32);
  const parts = [];
  for (let i4 = 0; i4 < partsLength; i4++) {
    parts.push(padRight2(slice3(hexValue, i4 * 32, (i4 + 1) * 32)));
  }
  return {
    dynamic: true,
    encoded: concat2(padRight2(fromNumber2(size5(hexValue), { size: 32 })), ...parts)
  };
}
function encodeTuple(value, options) {
  const { checksumAddress: checksumAddress3, parameter } = options;
  let dynamic = false;
  const preparedParameters = [];
  for (let i4 = 0; i4 < parameter.components.length; i4++) {
    const param_ = parameter.components[i4];
    const index2 = Array.isArray(value) ? i4 : param_.name;
    const preparedParam = prepareParameter({
      checksumAddress: checksumAddress3,
      parameter: param_,
      value: value[index2]
    });
    preparedParameters.push(preparedParam);
    if (preparedParam.dynamic)
      dynamic = true;
  }
  return {
    dynamic,
    encoded: dynamic ? encode9(preparedParameters) : concat2(...preparedParameters.map(({ encoded }) => encoded))
  };
}
function getArrayComponents(type) {
  const matches = type.match(/^(.*)\[(\d+)?\]$/);
  return matches ? (
    // Return `null` if the array is dynamic.
    [matches[2] ? Number(matches[2]) : null, matches[1]]
  ) : void 0;
}
function hasDynamicChild(param) {
  var _a2;
  const { type } = param;
  if (type === "string")
    return true;
  if (type === "bytes")
    return true;
  if (type.endsWith("[]"))
    return true;
  if (type === "tuple")
    return (_a2 = param.components) == null ? void 0 : _a2.some(hasDynamicChild);
  const arrayComponents = getArrayComponents(param.type);
  if (arrayComponents && hasDynamicChild({
    ...param,
    type: arrayComponents[1]
  }))
    return true;
  return false;
}

// node_modules/ox/_esm/core/internal/cursor.js
var staticCursor2 = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new RecursiveReadLimitExceededError2({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(position) {
    if (position < 0 || position > this.bytes.length - 1)
      throw new PositionOutOfBoundsError4({
        length: this.bytes.length,
        position
      });
  },
  decrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError2({ offset });
    const position = this.position - offset;
    this.assertPosition(position);
    this.position = position;
  },
  getReadCount(position) {
    return this.positionReadCount.get(position || this.position) || 0;
  },
  incrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError2({ offset });
    const position = this.position + offset;
    this.assertPosition(position);
    this.position = position;
  },
  inspectByte(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectBytes(length2, position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + length2 - 1);
    return this.bytes.subarray(position, position + length2);
  },
  inspectUint8(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectUint16(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 1);
    return this.dataView.getUint16(position);
  },
  inspectUint24(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 2);
    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
  },
  inspectUint32(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 3);
    return this.dataView.getUint32(position);
  },
  pushByte(byte) {
    this.assertPosition(this.position);
    this.bytes[this.position] = byte;
    this.position++;
  },
  pushBytes(bytes) {
    this.assertPosition(this.position + bytes.length - 1);
    this.bytes.set(bytes, this.position);
    this.position += bytes.length;
  },
  pushUint8(value) {
    this.assertPosition(this.position);
    this.bytes[this.position] = value;
    this.position++;
  },
  pushUint16(value) {
    this.assertPosition(this.position + 1);
    this.dataView.setUint16(this.position, value);
    this.position += 2;
  },
  pushUint24(value) {
    this.assertPosition(this.position + 2);
    this.dataView.setUint16(this.position, value >> 8);
    this.dataView.setUint8(this.position + 2, value & ~4294967040);
    this.position += 3;
  },
  pushUint32(value) {
    this.assertPosition(this.position + 3);
    this.dataView.setUint32(this.position, value);
    this.position += 4;
  },
  readByte() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectByte();
    this.position++;
    return value;
  },
  readBytes(length2, size8) {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectBytes(length2);
    this.position += size8 ?? length2;
    return value;
  },
  readUint8() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint8();
    this.position += 1;
    return value;
  },
  readUint16() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint16();
    this.position += 2;
    return value;
  },
  readUint24() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint24();
    this.position += 3;
    return value;
  },
  readUint32() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint32();
    this.position += 4;
    return value;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(position) {
    const oldPosition = this.position;
    this.assertPosition(position);
    this.position = position;
    return () => this.position = oldPosition;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const count = this.getReadCount();
    this.positionReadCount.set(this.position, count + 1);
    if (count > 0)
      this.recursiveReadCount++;
  }
};
function create3(bytes, { recursiveReadLimit = 8192 } = {}) {
  const cursor = Object.create(staticCursor2);
  cursor.bytes = bytes;
  cursor.dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
  cursor.positionReadCount = /* @__PURE__ */ new Map();
  cursor.recursiveReadLimit = recursiveReadLimit;
  return cursor;
}
var NegativeOffsetError2 = class extends BaseError3 {
  constructor({ offset }) {
    super(`Offset \`${offset}\` cannot be negative.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.NegativeOffsetError"
    });
  }
};
var PositionOutOfBoundsError4 = class extends BaseError3 {
  constructor({ length: length2, position }) {
    super(`Position \`${position}\` is out of bounds (\`0 < position < ${length2}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.PositionOutOfBoundsError"
    });
  }
};
var RecursiveReadLimitExceededError2 = class extends BaseError3 {
  constructor({ count, limit }) {
    super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.RecursiveReadLimitExceededError"
    });
  }
};

// node_modules/ox/_esm/core/AbiParameters.js
function decode8(parameters, data, options = {}) {
  const { as: as2 = "Array", checksumAddress: checksumAddress3 = false } = options;
  const bytes = typeof data === "string" ? fromHex(data) : data;
  const cursor = create3(bytes);
  if (size4(bytes) === 0 && parameters.length > 0)
    throw new ZeroDataError();
  if (size4(bytes) && size4(bytes) < 32)
    throw new DataSizeTooSmallError({
      data: typeof data === "string" ? data : fromBytes2(data),
      parameters,
      size: size4(bytes)
    });
  let consumed = 0;
  const values = as2 === "Array" ? [] : {};
  for (let i4 = 0; i4 < parameters.length; ++i4) {
    const param = parameters[i4];
    cursor.setPosition(consumed);
    const [data2, consumed_] = decodeParameter2(cursor, param, {
      checksumAddress: checksumAddress3,
      staticPosition: 0
    });
    consumed += consumed_;
    if (as2 === "Array")
      values.push(data2);
    else
      values[param.name ?? i4] = data2;
  }
  return values;
}
function encode10(parameters, values, options) {
  const { checksumAddress: checksumAddress3 = false } = options ?? {};
  if (parameters.length !== values.length)
    throw new LengthMismatchError2({
      expectedLength: parameters.length,
      givenLength: values.length
    });
  const preparedParameters = prepareParameters2({
    checksumAddress: checksumAddress3,
    parameters,
    values
  });
  const data = encode9(preparedParameters);
  if (data.length === 0)
    return "0x";
  return data;
}
function encodePacked3(types, values) {
  if (types.length !== values.length)
    throw new LengthMismatchError2({
      expectedLength: types.length,
      givenLength: values.length
    });
  const data = [];
  for (let i4 = 0; i4 < types.length; i4++) {
    const type = types[i4];
    const value = values[i4];
    data.push(encodePacked3.encode(type, value));
  }
  return concat2(...data);
}
(function(encodePacked5) {
  function encode12(type, value, isArray = false) {
    if (type === "address") {
      const address = value;
      assert3(address);
      return padLeft2(address.toLowerCase(), isArray ? 32 : 0);
    }
    if (type === "string")
      return fromString4(value);
    if (type === "bytes")
      return value;
    if (type === "bool")
      return padLeft2(fromBoolean2(value), isArray ? 32 : 1);
    const intMatch = type.match(integerRegex4);
    if (intMatch) {
      const [_type, baseType, bits = "256"] = intMatch;
      const size8 = Number.parseInt(bits, 10) / 8;
      return fromNumber2(value, {
        size: isArray ? 32 : size8,
        signed: baseType === "int"
      });
    }
    const bytesMatch = type.match(bytesRegex4);
    if (bytesMatch) {
      const [_type, size8] = bytesMatch;
      if (Number.parseInt(size8, 10) !== (value.length - 2) / 2)
        throw new BytesSizeMismatchError4({
          expectedSize: Number.parseInt(size8, 10),
          value
        });
      return padRight2(value, isArray ? 32 : 0);
    }
    const arrayMatch = type.match(arrayRegex4);
    if (arrayMatch && Array.isArray(value)) {
      const [_type, childType] = arrayMatch;
      const data = [];
      for (let i4 = 0; i4 < value.length; i4++) {
        data.push(encode12(childType, value[i4], true));
      }
      if (data.length === 0)
        return "0x";
      return concat2(...data);
    }
    throw new InvalidTypeError2(type);
  }
  encodePacked5.encode = encode12;
})(encodePacked3 || (encodePacked3 = {}));
function from12(parameters) {
  if (Array.isArray(parameters) && typeof parameters[0] === "string")
    return parseAbiParameters(parameters);
  if (typeof parameters === "string")
    return parseAbiParameters(parameters);
  return parameters;
}
var DataSizeTooSmallError = class extends BaseError3 {
  constructor({ data, parameters, size: size8 }) {
    super(`Data size of ${size8} bytes is too small for given parameters.`, {
      metaMessages: [
        `Params: (${formatAbiParameters(parameters)})`,
        `Data:   ${data} (${size8} bytes)`
      ]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.DataSizeTooSmallError"
    });
  }
};
var ZeroDataError = class extends BaseError3 {
  constructor() {
    super('Cannot decode zero data ("0x") with ABI parameters.');
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.ZeroDataError"
    });
  }
};
var ArrayLengthMismatchError2 = class extends BaseError3 {
  constructor({ expectedLength, givenLength, type }) {
    super(`Array length mismatch for type \`${type}\`. Expected: \`${expectedLength}\`. Given: \`${givenLength}\`.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.ArrayLengthMismatchError"
    });
  }
};
var BytesSizeMismatchError4 = class extends BaseError3 {
  constructor({ expectedSize, value }) {
    super(`Size of bytes "${value}" (bytes${size5(value)}) does not match expected size (bytes${expectedSize}).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.BytesSizeMismatchError"
    });
  }
};
var LengthMismatchError2 = class extends BaseError3 {
  constructor({ expectedLength, givenLength }) {
    super([
      "ABI encoding parameters/values length mismatch.",
      `Expected length (parameters): ${expectedLength}`,
      `Given length (values): ${givenLength}`
    ].join("\n"));
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.LengthMismatchError"
    });
  }
};
var InvalidArrayError3 = class extends BaseError3 {
  constructor(value) {
    super(`Value \`${value}\` is not a valid array.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.InvalidArrayError"
    });
  }
};
var InvalidTypeError2 = class extends BaseError3 {
  constructor(type) {
    super(`Type \`${type}\` is not a valid ABI Type.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.InvalidTypeError"
    });
  }
};

// node_modules/ox/_esm/core/Rlp.js
function from13(value, options) {
  const { as: as2 } = options;
  const encodable = getEncodable2(value);
  const cursor = create3(new Uint8Array(encodable.length));
  encodable.encode(cursor);
  if (as2 === "Hex")
    return fromBytes2(cursor.bytes);
  return cursor.bytes;
}
function fromHex5(hex2, options = {}) {
  const { as: as2 = "Hex" } = options;
  return from13(hex2, { as: as2 });
}
function getEncodable2(bytes) {
  if (Array.isArray(bytes))
    return getEncodableList2(bytes.map((x6) => getEncodable2(x6)));
  return getEncodableBytes2(bytes);
}
function getEncodableList2(list) {
  const bodyLength = list.reduce((acc, x6) => acc + x6.length, 0);
  const sizeOfBodyLength = getSizeOfLength2(bodyLength);
  const length2 = (() => {
    if (bodyLength <= 55)
      return 1 + bodyLength;
    return 1 + sizeOfBodyLength + bodyLength;
  })();
  return {
    length: length2,
    encode(cursor) {
      if (bodyLength <= 55) {
        cursor.pushByte(192 + bodyLength);
      } else {
        cursor.pushByte(192 + 55 + sizeOfBodyLength);
        if (sizeOfBodyLength === 1)
          cursor.pushUint8(bodyLength);
        else if (sizeOfBodyLength === 2)
          cursor.pushUint16(bodyLength);
        else if (sizeOfBodyLength === 3)
          cursor.pushUint24(bodyLength);
        else
          cursor.pushUint32(bodyLength);
      }
      for (const { encode: encode12 } of list) {
        encode12(cursor);
      }
    }
  };
}
function getEncodableBytes2(bytesOrHex) {
  const bytes = typeof bytesOrHex === "string" ? fromHex(bytesOrHex) : bytesOrHex;
  const sizeOfBytesLength = getSizeOfLength2(bytes.length);
  const length2 = (() => {
    if (bytes.length === 1 && bytes[0] < 128)
      return 1;
    if (bytes.length <= 55)
      return 1 + bytes.length;
    return 1 + sizeOfBytesLength + bytes.length;
  })();
  return {
    length: length2,
    encode(cursor) {
      if (bytes.length === 1 && bytes[0] < 128) {
        cursor.pushBytes(bytes);
      } else if (bytes.length <= 55) {
        cursor.pushByte(128 + bytes.length);
        cursor.pushBytes(bytes);
      } else {
        cursor.pushByte(128 + 55 + sizeOfBytesLength);
        if (sizeOfBytesLength === 1)
          cursor.pushUint8(bytes.length);
        else if (sizeOfBytesLength === 2)
          cursor.pushUint16(bytes.length);
        else if (sizeOfBytesLength === 3)
          cursor.pushUint24(bytes.length);
        else
          cursor.pushUint32(bytes.length);
        cursor.pushBytes(bytes);
      }
    }
  };
}
function getSizeOfLength2(length2) {
  if (length2 < 2 ** 8)
    return 1;
  if (length2 < 2 ** 16)
    return 2;
  if (length2 < 2 ** 24)
    return 3;
  if (length2 < 2 ** 32)
    return 4;
  throw new BaseError3("Length is too large.");
}

// node_modules/ox/node_modules/@noble/hashes/esm/hmac.js
var HMAC = class extends Hash {
  constructor(hash2, _key) {
    super();
    this.finished = false;
    this.destroyed = false;
    ahash(hash2);
    const key = toBytes3(_key);
    this.iHash = hash2.create();
    if (typeof this.iHash.update !== "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen;
    this.outputLen = this.iHash.outputLen;
    const blockLen = this.blockLen;
    const pad3 = new Uint8Array(blockLen);
    pad3.set(key.length > blockLen ? hash2.create().update(key).digest() : key);
    for (let i4 = 0; i4 < pad3.length; i4++)
      pad3[i4] ^= 54;
    this.iHash.update(pad3);
    this.oHash = hash2.create();
    for (let i4 = 0; i4 < pad3.length; i4++)
      pad3[i4] ^= 54 ^ 92;
    this.oHash.update(pad3);
    clean3(pad3);
  }
  update(buf) {
    aexists(this);
    this.iHash.update(buf);
    return this;
  }
  digestInto(out) {
    aexists(this);
    abytes3(out, this.outputLen);
    this.finished = true;
    this.iHash.digestInto(out);
    this.oHash.update(out);
    this.oHash.digestInto(out);
    this.destroy();
  }
  digest() {
    const out = new Uint8Array(this.oHash.outputLen);
    this.digestInto(out);
    return out;
  }
  _cloneInto(to4) {
    to4 || (to4 = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
    to4 = to4;
    to4.finished = finished;
    to4.destroyed = destroyed;
    to4.blockLen = blockLen;
    to4.outputLen = outputLen;
    to4.oHash = oHash._cloneInto(to4.oHash);
    to4.iHash = iHash._cloneInto(to4.iHash);
    return to4;
  }
  clone() {
    return this._cloneInto();
  }
  destroy() {
    this.destroyed = true;
    this.oHash.destroy();
    this.iHash.destroy();
  }
};
var hmac = (hash2, key, message) => new HMAC(hash2, key).update(message).digest();
hmac.create = (hash2, key) => new HMAC(hash2, key);

// node_modules/ox/node_modules/@noble/curves/esm/abstract/modular.js
var _0n2 = BigInt(0);
var _1n2 = BigInt(1);
var _2n2 = BigInt(2);
var _3n = BigInt(3);
var _4n = BigInt(4);
var _5n = BigInt(5);
var _8n = BigInt(8);
function mod(a3, b5) {
  const result = a3 % b5;
  return result >= _0n2 ? result : b5 + result;
}
function pow2(x6, power, modulo) {
  let res = x6;
  while (power-- > _0n2) {
    res *= res;
    res %= modulo;
  }
  return res;
}
function invert(number, modulo) {
  if (number === _0n2)
    throw new Error("invert: expected non-zero number");
  if (modulo <= _0n2)
    throw new Error("invert: expected positive modulus, got " + modulo);
  let a3 = mod(number, modulo);
  let b5 = modulo;
  let x6 = _0n2, y6 = _1n2, u3 = _1n2, v6 = _0n2;
  while (a3 !== _0n2) {
    const q2 = b5 / a3;
    const r3 = b5 % a3;
    const m4 = x6 - u3 * q2;
    const n5 = y6 - v6 * q2;
    b5 = a3, a3 = r3, x6 = u3, y6 = v6, u3 = m4, v6 = n5;
  }
  const gcd2 = b5;
  if (gcd2 !== _1n2)
    throw new Error("invert: does not exist");
  return mod(x6, modulo);
}
function sqrt3mod4(Fp, n5) {
  const p1div4 = (Fp.ORDER + _1n2) / _4n;
  const root = Fp.pow(n5, p1div4);
  if (!Fp.eql(Fp.sqr(root), n5))
    throw new Error("Cannot find square root");
  return root;
}
function sqrt5mod8(Fp, n5) {
  const p5div8 = (Fp.ORDER - _5n) / _8n;
  const n22 = Fp.mul(n5, _2n2);
  const v6 = Fp.pow(n22, p5div8);
  const nv = Fp.mul(n5, v6);
  const i4 = Fp.mul(Fp.mul(nv, _2n2), v6);
  const root = Fp.mul(nv, Fp.sub(i4, Fp.ONE));
  if (!Fp.eql(Fp.sqr(root), n5))
    throw new Error("Cannot find square root");
  return root;
}
function tonelliShanks(P6) {
  if (P6 < BigInt(3))
    throw new Error("sqrt is not defined for small field");
  let Q5 = P6 - _1n2;
  let S5 = 0;
  while (Q5 % _2n2 === _0n2) {
    Q5 /= _2n2;
    S5++;
  }
  let Z3 = _2n2;
  const _Fp = Field(P6);
  while (FpLegendre(_Fp, Z3) === 1) {
    if (Z3++ > 1e3)
      throw new Error("Cannot find square root: probably non-prime P");
  }
  if (S5 === 1)
    return sqrt3mod4;
  let cc2 = _Fp.pow(Z3, Q5);
  const Q1div2 = (Q5 + _1n2) / _2n2;
  return function tonelliSlow(Fp, n5) {
    if (Fp.is0(n5))
      return n5;
    if (FpLegendre(Fp, n5) !== 1)
      throw new Error("Cannot find square root");
    let M5 = S5;
    let c7 = Fp.mul(Fp.ONE, cc2);
    let t = Fp.pow(n5, Q5);
    let R4 = Fp.pow(n5, Q1div2);
    while (!Fp.eql(t, Fp.ONE)) {
      if (Fp.is0(t))
        return Fp.ZERO;
      let i4 = 1;
      let t_tmp = Fp.sqr(t);
      while (!Fp.eql(t_tmp, Fp.ONE)) {
        i4++;
        t_tmp = Fp.sqr(t_tmp);
        if (i4 === M5)
          throw new Error("Cannot find square root");
      }
      const exponent = _1n2 << BigInt(M5 - i4 - 1);
      const b5 = Fp.pow(c7, exponent);
      M5 = i4;
      c7 = Fp.sqr(b5);
      t = Fp.mul(t, c7);
      R4 = Fp.mul(R4, b5);
    }
    return R4;
  };
}
function FpSqrt(P6) {
  if (P6 % _4n === _3n)
    return sqrt3mod4;
  if (P6 % _8n === _5n)
    return sqrt5mod8;
  return tonelliShanks(P6);
}
var FIELD_FIELDS = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField(field) {
  const initial = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  };
  const opts = FIELD_FIELDS.reduce((map, val) => {
    map[val] = "function";
    return map;
  }, initial);
  return validateObject(field, opts);
}
function FpPow(Fp, num2, power) {
  if (power < _0n2)
    throw new Error("invalid exponent, negatives unsupported");
  if (power === _0n2)
    return Fp.ONE;
  if (power === _1n2)
    return num2;
  let p5 = Fp.ONE;
  let d5 = num2;
  while (power > _0n2) {
    if (power & _1n2)
      p5 = Fp.mul(p5, d5);
    d5 = Fp.sqr(d5);
    power >>= _1n2;
  }
  return p5;
}
function FpInvertBatch(Fp, nums, passZero = false) {
  const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : void 0);
  const multipliedAcc = nums.reduce((acc, num2, i4) => {
    if (Fp.is0(num2))
      return acc;
    inverted[i4] = acc;
    return Fp.mul(acc, num2);
  }, Fp.ONE);
  const invertedAcc = Fp.inv(multipliedAcc);
  nums.reduceRight((acc, num2, i4) => {
    if (Fp.is0(num2))
      return acc;
    inverted[i4] = Fp.mul(acc, inverted[i4]);
    return Fp.mul(acc, num2);
  }, invertedAcc);
  return inverted;
}
function FpLegendre(Fp, n5) {
  const p1mod2 = (Fp.ORDER - _1n2) / _2n2;
  const powered = Fp.pow(n5, p1mod2);
  const yes = Fp.eql(powered, Fp.ONE);
  const zero = Fp.eql(powered, Fp.ZERO);
  const no4 = Fp.eql(powered, Fp.neg(Fp.ONE));
  if (!yes && !zero && !no4)
    throw new Error("invalid Legendre symbol result");
  return yes ? 1 : zero ? 0 : -1;
}
function nLength(n5, nBitLength) {
  if (nBitLength !== void 0)
    anumber2(nBitLength);
  const _nBitLength = nBitLength !== void 0 ? nBitLength : n5.toString(2).length;
  const nByteLength = Math.ceil(_nBitLength / 8);
  return { nBitLength: _nBitLength, nByteLength };
}
function Field(ORDER, bitLen2, isLE2 = false, redef = {}) {
  if (ORDER <= _0n2)
    throw new Error("invalid field: expected ORDER > 0, got " + ORDER);
  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen2);
  if (BYTES > 2048)
    throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let sqrtP;
  const f8 = Object.freeze({
    ORDER,
    isLE: isLE2,
    BITS,
    BYTES,
    MASK: bitMask(BITS),
    ZERO: _0n2,
    ONE: _1n2,
    create: (num2) => mod(num2, ORDER),
    isValid: (num2) => {
      if (typeof num2 !== "bigint")
        throw new Error("invalid field element: expected bigint, got " + typeof num2);
      return _0n2 <= num2 && num2 < ORDER;
    },
    is0: (num2) => num2 === _0n2,
    isOdd: (num2) => (num2 & _1n2) === _1n2,
    neg: (num2) => mod(-num2, ORDER),
    eql: (lhs, rhs) => lhs === rhs,
    sqr: (num2) => mod(num2 * num2, ORDER),
    add: (lhs, rhs) => mod(lhs + rhs, ORDER),
    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
    pow: (num2, power) => FpPow(f8, num2, power),
    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
    // Same as above, but doesn't normalize
    sqrN: (num2) => num2 * num2,
    addN: (lhs, rhs) => lhs + rhs,
    subN: (lhs, rhs) => lhs - rhs,
    mulN: (lhs, rhs) => lhs * rhs,
    inv: (num2) => invert(num2, ORDER),
    sqrt: redef.sqrt || ((n5) => {
      if (!sqrtP)
        sqrtP = FpSqrt(ORDER);
      return sqrtP(f8, n5);
    }),
    toBytes: (num2) => isLE2 ? numberToBytesLE(num2, BYTES) : numberToBytesBE(num2, BYTES),
    fromBytes: (bytes) => {
      if (bytes.length !== BYTES)
        throw new Error("Field.fromBytes: expected " + BYTES + " bytes, got " + bytes.length);
      return isLE2 ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);
    },
    // TODO: we don't need it here, move out to separate fn
    invertBatch: (lst) => FpInvertBatch(f8, lst),
    // We can't move this out because Fp6, Fp12 implement it
    // and it's unclear what to return in there.
    cmov: (a3, b5, c7) => c7 ? b5 : a3
  });
  return Object.freeze(f8);
}
function getFieldBytesLength(fieldOrder) {
  if (typeof fieldOrder !== "bigint")
    throw new Error("field order must be bigint");
  const bitLength = fieldOrder.toString(2).length;
  return Math.ceil(bitLength / 8);
}
function getMinHashLength(fieldOrder) {
  const length2 = getFieldBytesLength(fieldOrder);
  return length2 + Math.ceil(length2 / 2);
}
function mapHashToField(key, fieldOrder, isLE2 = false) {
  const len = key.length;
  const fieldLen = getFieldBytesLength(fieldOrder);
  const minLen = getMinHashLength(fieldOrder);
  if (len < 16 || len < minLen || len > 1024)
    throw new Error("expected " + minLen + "-1024 bytes of input, got " + len);
  const num2 = isLE2 ? bytesToNumberLE(key) : bytesToNumberBE(key);
  const reduced = mod(num2, fieldOrder - _1n2) + _1n2;
  return isLE2 ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
}

// node_modules/ox/node_modules/@noble/curves/esm/abstract/curve.js
var _0n3 = BigInt(0);
var _1n3 = BigInt(1);
function constTimeNegate(condition, item) {
  const neg = item.negate();
  return condition ? neg : item;
}
function validateW(W5, bits) {
  if (!Number.isSafeInteger(W5) || W5 <= 0 || W5 > bits)
    throw new Error("invalid window size, expected [1.." + bits + "], got W=" + W5);
}
function calcWOpts(W5, scalarBits) {
  validateW(W5, scalarBits);
  const windows = Math.ceil(scalarBits / W5) + 1;
  const windowSize = 2 ** (W5 - 1);
  const maxNumber = 2 ** W5;
  const mask = bitMask(W5);
  const shiftBy = BigInt(W5);
  return { windows, windowSize, mask, maxNumber, shiftBy };
}
function calcOffsets(n5, window2, wOpts) {
  const { windowSize, mask, maxNumber, shiftBy } = wOpts;
  let wbits = Number(n5 & mask);
  let nextN = n5 >> shiftBy;
  if (wbits > windowSize) {
    wbits -= maxNumber;
    nextN += _1n3;
  }
  const offsetStart = window2 * windowSize;
  const offset = offsetStart + Math.abs(wbits) - 1;
  const isZero = wbits === 0;
  const isNeg = wbits < 0;
  const isNegF = window2 % 2 !== 0;
  const offsetF = offsetStart;
  return { nextN, offset, isZero, isNeg, isNegF, offsetF };
}
function validateMSMPoints(points, c7) {
  if (!Array.isArray(points))
    throw new Error("array expected");
  points.forEach((p5, i4) => {
    if (!(p5 instanceof c7))
      throw new Error("invalid point at index " + i4);
  });
}
function validateMSMScalars(scalars, field) {
  if (!Array.isArray(scalars))
    throw new Error("array of scalars expected");
  scalars.forEach((s3, i4) => {
    if (!field.isValid(s3))
      throw new Error("invalid scalar at index " + i4);
  });
}
var pointPrecomputes = /* @__PURE__ */ new WeakMap();
var pointWindowSizes = /* @__PURE__ */ new WeakMap();
function getW(P6) {
  return pointWindowSizes.get(P6) || 1;
}
function wNAF(c7, bits) {
  return {
    constTimeNegate,
    hasPrecomputes(elm) {
      return getW(elm) !== 1;
    },
    // non-const time multiplication ladder
    unsafeLadder(elm, n5, p5 = c7.ZERO) {
      let d5 = elm;
      while (n5 > _0n3) {
        if (n5 & _1n3)
          p5 = p5.add(d5);
        d5 = d5.double();
        n5 >>= _1n3;
      }
      return p5;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @param elm Point instance
     * @param W window size
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(elm, W5) {
      const { windows, windowSize } = calcWOpts(W5, bits);
      const points = [];
      let p5 = elm;
      let base3 = p5;
      for (let window2 = 0; window2 < windows; window2++) {
        base3 = p5;
        points.push(base3);
        for (let i4 = 1; i4 < windowSize; i4++) {
          base3 = base3.add(p5);
          points.push(base3);
        }
        p5 = base3.double();
      }
      return points;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(W5, precomputes, n5) {
      let p5 = c7.ZERO;
      let f8 = c7.BASE;
      const wo4 = calcWOpts(W5, bits);
      for (let window2 = 0; window2 < wo4.windows; window2++) {
        const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n5, window2, wo4);
        n5 = nextN;
        if (isZero) {
          f8 = f8.add(constTimeNegate(isNegF, precomputes[offsetF]));
        } else {
          p5 = p5.add(constTimeNegate(isNeg, precomputes[offset]));
        }
      }
      return { p: p5, f: f8 };
    },
    /**
     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @param acc accumulator point to add result of multiplication
     * @returns point
     */
    wNAFUnsafe(W5, precomputes, n5, acc = c7.ZERO) {
      const wo4 = calcWOpts(W5, bits);
      for (let window2 = 0; window2 < wo4.windows; window2++) {
        if (n5 === _0n3)
          break;
        const { nextN, offset, isZero, isNeg } = calcOffsets(n5, window2, wo4);
        n5 = nextN;
        if (isZero) {
          continue;
        } else {
          const item = precomputes[offset];
          acc = acc.add(isNeg ? item.negate() : item);
        }
      }
      return acc;
    },
    getPrecomputes(W5, P6, transform) {
      let comp = pointPrecomputes.get(P6);
      if (!comp) {
        comp = this.precomputeWindow(P6, W5);
        if (W5 !== 1)
          pointPrecomputes.set(P6, transform(comp));
      }
      return comp;
    },
    wNAFCached(P6, n5, transform) {
      const W5 = getW(P6);
      return this.wNAF(W5, this.getPrecomputes(W5, P6, transform), n5);
    },
    wNAFCachedUnsafe(P6, n5, transform, prev) {
      const W5 = getW(P6);
      if (W5 === 1)
        return this.unsafeLadder(P6, n5, prev);
      return this.wNAFUnsafe(W5, this.getPrecomputes(W5, P6, transform), n5, prev);
    },
    // We calculate precomputes for elliptic curve point multiplication
    // using windowed method. This specifies window size and
    // stores precomputed values. Usually only base point would be precomputed.
    setWindowSize(P6, W5) {
      validateW(W5, bits);
      pointWindowSizes.set(P6, W5);
      pointPrecomputes.delete(P6);
    }
  };
}
function pippenger(c7, fieldN, points, scalars) {
  validateMSMPoints(points, c7);
  validateMSMScalars(scalars, fieldN);
  const plength = points.length;
  const slength = scalars.length;
  if (plength !== slength)
    throw new Error("arrays of points and scalars must have equal length");
  const zero = c7.ZERO;
  const wbits = bitLen(BigInt(plength));
  let windowSize = 1;
  if (wbits > 12)
    windowSize = wbits - 3;
  else if (wbits > 4)
    windowSize = wbits - 2;
  else if (wbits > 0)
    windowSize = 2;
  const MASK = bitMask(windowSize);
  const buckets = new Array(Number(MASK) + 1).fill(zero);
  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;
  let sum = zero;
  for (let i4 = lastBits; i4 >= 0; i4 -= windowSize) {
    buckets.fill(zero);
    for (let j5 = 0; j5 < slength; j5++) {
      const scalar = scalars[j5];
      const wbits2 = Number(scalar >> BigInt(i4) & MASK);
      buckets[wbits2] = buckets[wbits2].add(points[j5]);
    }
    let resI = zero;
    for (let j5 = buckets.length - 1, sumI = zero; j5 > 0; j5--) {
      sumI = sumI.add(buckets[j5]);
      resI = resI.add(sumI);
    }
    sum = sum.add(resI);
    if (i4 !== 0)
      for (let j5 = 0; j5 < windowSize; j5++)
        sum = sum.double();
  }
  return sum;
}
function validateBasic(curve) {
  validateField(curve.Fp);
  validateObject(curve, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  });
  return Object.freeze({
    ...nLength(curve.n, curve.nBitLength),
    ...curve,
    ...{ p: curve.Fp.ORDER }
  });
}

// node_modules/ox/node_modules/@noble/curves/esm/abstract/weierstrass.js
function validateSigVerOpts(opts) {
  if (opts.lowS !== void 0)
    abool("lowS", opts.lowS);
  if (opts.prehash !== void 0)
    abool("prehash", opts.prehash);
}
function validatePointOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    a: "field",
    b: "field"
  }, {
    allowInfinityPoint: "boolean",
    allowedPrivateKeyLengths: "array",
    clearCofactor: "function",
    fromBytes: "function",
    isTorsionFree: "function",
    toBytes: "function",
    wrapPrivateKey: "boolean"
  });
  const { endo, Fp, a: a3 } = opts;
  if (endo) {
    if (!Fp.eql(a3, Fp.ZERO)) {
      throw new Error("invalid endo: CURVE.a must be 0");
    }
    if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
      throw new Error('invalid endo: expected "beta": bigint and "splitScalar": function');
    }
  }
  return Object.freeze({ ...opts });
}
var DERErr = class extends Error {
  constructor(m4 = "") {
    super(m4);
  }
};
var DER = {
  // asn.1 DER encoding utils
  Err: DERErr,
  // Basic building block is TLV (Tag-Length-Value)
  _tlv: {
    encode: (tag, data) => {
      const { Err: E6 } = DER;
      if (tag < 0 || tag > 256)
        throw new E6("tlv.encode: wrong tag");
      if (data.length & 1)
        throw new E6("tlv.encode: unpadded data");
      const dataLen = data.length / 2;
      const len = numberToHexUnpadded(dataLen);
      if (len.length / 2 & 128)
        throw new E6("tlv.encode: long form length too big");
      const lenLen = dataLen > 127 ? numberToHexUnpadded(len.length / 2 | 128) : "";
      const t = numberToHexUnpadded(tag);
      return t + lenLen + len + data;
    },
    // v - value, l - left bytes (unparsed)
    decode(tag, data) {
      const { Err: E6 } = DER;
      let pos = 0;
      if (tag < 0 || tag > 256)
        throw new E6("tlv.encode: wrong tag");
      if (data.length < 2 || data[pos++] !== tag)
        throw new E6("tlv.decode: wrong tlv");
      const first = data[pos++];
      const isLong = !!(first & 128);
      let length2 = 0;
      if (!isLong)
        length2 = first;
      else {
        const lenLen = first & 127;
        if (!lenLen)
          throw new E6("tlv.decode(long): indefinite length not supported");
        if (lenLen > 4)
          throw new E6("tlv.decode(long): byte length is too big");
        const lengthBytes = data.subarray(pos, pos + lenLen);
        if (lengthBytes.length !== lenLen)
          throw new E6("tlv.decode: length bytes not complete");
        if (lengthBytes[0] === 0)
          throw new E6("tlv.decode(long): zero leftmost byte");
        for (const b5 of lengthBytes)
          length2 = length2 << 8 | b5;
        pos += lenLen;
        if (length2 < 128)
          throw new E6("tlv.decode(long): not minimal encoding");
      }
      const v6 = data.subarray(pos, pos + length2);
      if (v6.length !== length2)
        throw new E6("tlv.decode: wrong value length");
      return { v: v6, l: data.subarray(pos + length2) };
    }
  },
  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
  // since we always use positive integers here. It must always be empty:
  // - add zero byte if exists
  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
  _int: {
    encode(num2) {
      const { Err: E6 } = DER;
      if (num2 < _0n4)
        throw new E6("integer: negative integers are not allowed");
      let hex2 = numberToHexUnpadded(num2);
      if (Number.parseInt(hex2[0], 16) & 8)
        hex2 = "00" + hex2;
      if (hex2.length & 1)
        throw new E6("unexpected DER parsing assertion: unpadded hex");
      return hex2;
    },
    decode(data) {
      const { Err: E6 } = DER;
      if (data[0] & 128)
        throw new E6("invalid signature integer: negative");
      if (data[0] === 0 && !(data[1] & 128))
        throw new E6("invalid signature integer: unnecessary leading zero");
      return bytesToNumberBE(data);
    }
  },
  toSig(hex2) {
    const { Err: E6, _int: int, _tlv: tlv } = DER;
    const data = ensureBytes("signature", hex2);
    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(48, data);
    if (seqLeftBytes.length)
      throw new E6("invalid signature: left bytes after parsing");
    const { v: rBytes, l: rLeftBytes } = tlv.decode(2, seqBytes);
    const { v: sBytes, l: sLeftBytes } = tlv.decode(2, rLeftBytes);
    if (sLeftBytes.length)
      throw new E6("invalid signature: left bytes after parsing");
    return { r: int.decode(rBytes), s: int.decode(sBytes) };
  },
  hexFromSig(sig) {
    const { _tlv: tlv, _int: int } = DER;
    const rs2 = tlv.encode(2, int.encode(sig.r));
    const ss2 = tlv.encode(2, int.encode(sig.s));
    const seq = rs2 + ss2;
    return tlv.encode(48, seq);
  }
};
function numToSizedHex(num2, size8) {
  return bytesToHex2(numberToBytesBE(num2, size8));
}
var _0n4 = BigInt(0);
var _1n4 = BigInt(1);
var _2n3 = BigInt(2);
var _3n2 = BigInt(3);
var _4n2 = BigInt(4);
function weierstrassPoints(opts) {
  const CURVE = validatePointOpts(opts);
  const { Fp } = CURVE;
  const Fn4 = Field(CURVE.n, CURVE.nBitLength);
  const toBytes5 = CURVE.toBytes || ((_c2, point, _isCompressed) => {
    const a3 = point.toAffine();
    return concatBytes(Uint8Array.from([4]), Fp.toBytes(a3.x), Fp.toBytes(a3.y));
  });
  const fromBytes7 = CURVE.fromBytes || ((bytes) => {
    const tail = bytes.subarray(1);
    const x6 = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
    const y6 = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
    return { x: x6, y: y6 };
  });
  function weierstrassEquation(x6) {
    const { a: a3, b: b5 } = CURVE;
    const x22 = Fp.sqr(x6);
    const x32 = Fp.mul(x22, x6);
    return Fp.add(Fp.add(x32, Fp.mul(x6, a3)), b5);
  }
  function isValidXY(x6, y6) {
    const left = Fp.sqr(y6);
    const right = weierstrassEquation(x6);
    return Fp.eql(left, right);
  }
  if (!isValidXY(CURVE.Gx, CURVE.Gy))
    throw new Error("bad curve params: generator point");
  const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n2), _4n2);
  const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));
  if (Fp.is0(Fp.add(_4a3, _27b2)))
    throw new Error("bad curve params: a or b");
  function isWithinCurveOrder(num2) {
    return inRange(num2, _1n4, CURVE.n);
  }
  function normPrivateKeyToScalar(key) {
    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N13 } = CURVE;
    if (lengths && typeof key !== "bigint") {
      if (isBytes(key))
        key = bytesToHex2(key);
      if (typeof key !== "string" || !lengths.includes(key.length))
        throw new Error("invalid private key");
      key = key.padStart(nByteLength * 2, "0");
    }
    let num2;
    try {
      num2 = typeof key === "bigint" ? key : bytesToNumberBE(ensureBytes("private key", key, nByteLength));
    } catch (error) {
      throw new Error("invalid private key, expected hex or " + nByteLength + " bytes, got " + typeof key);
    }
    if (wrapPrivateKey)
      num2 = mod(num2, N13);
    aInRange("private key", num2, _1n4, N13);
    return num2;
  }
  function aprjpoint(other) {
    if (!(other instanceof Point2))
      throw new Error("ProjectivePoint expected");
  }
  const toAffineMemo = memoized((p5, iz) => {
    const { px: x6, py: y6, pz: z4 } = p5;
    if (Fp.eql(z4, Fp.ONE))
      return { x: x6, y: y6 };
    const is0 = p5.is0();
    if (iz == null)
      iz = is0 ? Fp.ONE : Fp.inv(z4);
    const ax = Fp.mul(x6, iz);
    const ay = Fp.mul(y6, iz);
    const zz = Fp.mul(z4, iz);
    if (is0)
      return { x: Fp.ZERO, y: Fp.ZERO };
    if (!Fp.eql(zz, Fp.ONE))
      throw new Error("invZ was invalid");
    return { x: ax, y: ay };
  });
  const assertValidMemo = memoized((p5) => {
    if (p5.is0()) {
      if (CURVE.allowInfinityPoint && !Fp.is0(p5.py))
        return;
      throw new Error("bad point: ZERO");
    }
    const { x: x6, y: y6 } = p5.toAffine();
    if (!Fp.isValid(x6) || !Fp.isValid(y6))
      throw new Error("bad point: x or y not FE");
    if (!isValidXY(x6, y6))
      throw new Error("bad point: equation left != right");
    if (!p5.isTorsionFree())
      throw new Error("bad point: not in prime-order subgroup");
    return true;
  });
  class Point2 {
    constructor(px, py, pz) {
      if (px == null || !Fp.isValid(px))
        throw new Error("x required");
      if (py == null || !Fp.isValid(py) || Fp.is0(py))
        throw new Error("y required");
      if (pz == null || !Fp.isValid(pz))
        throw new Error("z required");
      this.px = px;
      this.py = py;
      this.pz = pz;
      Object.freeze(this);
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(p5) {
      const { x: x6, y: y6 } = p5 || {};
      if (!p5 || !Fp.isValid(x6) || !Fp.isValid(y6))
        throw new Error("invalid affine point");
      if (p5 instanceof Point2)
        throw new Error("projective point not allowed");
      const is0 = (i4) => Fp.eql(i4, Fp.ZERO);
      if (is0(x6) && is0(y6))
        return Point2.ZERO;
      return new Point2(x6, y6, Fp.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(points) {
      const toInv = FpInvertBatch(Fp, points.map((p5) => p5.pz));
      return points.map((p5, i4) => p5.toAffine(toInv[i4])).map(Point2.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(hex2) {
      const P6 = Point2.fromAffine(fromBytes7(ensureBytes("pointHex", hex2)));
      P6.assertValidity();
      return P6;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(privateKey) {
      return Point2.BASE.multiply(normPrivateKeyToScalar(privateKey));
    }
    // Multiscalar Multiplication
    static msm(points, scalars) {
      return pippenger(Point2, Fn4, points, scalars);
    }
    // "Private method", don't use it directly
    _setWindowSize(windowSize) {
      wnaf.setWindowSize(this, windowSize);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      assertValidMemo(this);
    }
    hasEvenY() {
      const { y: y6 } = this.toAffine();
      if (Fp.isOdd)
        return !Fp.isOdd(y6);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(other) {
      aprjpoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X22, py: Y22, pz: Z22 } = other;
      const U1 = Fp.eql(Fp.mul(X1, Z22), Fp.mul(X22, Z1));
      const U22 = Fp.eql(Fp.mul(Y1, Z22), Fp.mul(Y22, Z1));
      return U1 && U22;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new Point2(this.px, Fp.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: a3, b: b5 } = CURVE;
      const b32 = Fp.mul(b5, _3n2);
      const { px: X1, py: Y1, pz: Z1 } = this;
      let X32 = Fp.ZERO, Y32 = Fp.ZERO, Z3 = Fp.ZERO;
      let t0 = Fp.mul(X1, X1);
      let t1 = Fp.mul(Y1, Y1);
      let t2 = Fp.mul(Z1, Z1);
      let t3 = Fp.mul(X1, Y1);
      t3 = Fp.add(t3, t3);
      Z3 = Fp.mul(X1, Z1);
      Z3 = Fp.add(Z3, Z3);
      X32 = Fp.mul(a3, Z3);
      Y32 = Fp.mul(b32, t2);
      Y32 = Fp.add(X32, Y32);
      X32 = Fp.sub(t1, Y32);
      Y32 = Fp.add(t1, Y32);
      Y32 = Fp.mul(X32, Y32);
      X32 = Fp.mul(t3, X32);
      Z3 = Fp.mul(b32, Z3);
      t2 = Fp.mul(a3, t2);
      t3 = Fp.sub(t0, t2);
      t3 = Fp.mul(a3, t3);
      t3 = Fp.add(t3, Z3);
      Z3 = Fp.add(t0, t0);
      t0 = Fp.add(Z3, t0);
      t0 = Fp.add(t0, t2);
      t0 = Fp.mul(t0, t3);
      Y32 = Fp.add(Y32, t0);
      t2 = Fp.mul(Y1, Z1);
      t2 = Fp.add(t2, t2);
      t0 = Fp.mul(t2, t3);
      X32 = Fp.sub(X32, t0);
      Z3 = Fp.mul(t2, t1);
      Z3 = Fp.add(Z3, Z3);
      Z3 = Fp.add(Z3, Z3);
      return new Point2(X32, Y32, Z3);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(other) {
      aprjpoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X22, py: Y22, pz: Z22 } = other;
      let X32 = Fp.ZERO, Y32 = Fp.ZERO, Z3 = Fp.ZERO;
      const a3 = CURVE.a;
      const b32 = Fp.mul(CURVE.b, _3n2);
      let t0 = Fp.mul(X1, X22);
      let t1 = Fp.mul(Y1, Y22);
      let t2 = Fp.mul(Z1, Z22);
      let t3 = Fp.add(X1, Y1);
      let t4 = Fp.add(X22, Y22);
      t3 = Fp.mul(t3, t4);
      t4 = Fp.add(t0, t1);
      t3 = Fp.sub(t3, t4);
      t4 = Fp.add(X1, Z1);
      let t5 = Fp.add(X22, Z22);
      t4 = Fp.mul(t4, t5);
      t5 = Fp.add(t0, t2);
      t4 = Fp.sub(t4, t5);
      t5 = Fp.add(Y1, Z1);
      X32 = Fp.add(Y22, Z22);
      t5 = Fp.mul(t5, X32);
      X32 = Fp.add(t1, t2);
      t5 = Fp.sub(t5, X32);
      Z3 = Fp.mul(a3, t4);
      X32 = Fp.mul(b32, t2);
      Z3 = Fp.add(X32, Z3);
      X32 = Fp.sub(t1, Z3);
      Z3 = Fp.add(t1, Z3);
      Y32 = Fp.mul(X32, Z3);
      t1 = Fp.add(t0, t0);
      t1 = Fp.add(t1, t0);
      t2 = Fp.mul(a3, t2);
      t4 = Fp.mul(b32, t4);
      t1 = Fp.add(t1, t2);
      t2 = Fp.sub(t0, t2);
      t2 = Fp.mul(a3, t2);
      t4 = Fp.add(t4, t2);
      t0 = Fp.mul(t1, t4);
      Y32 = Fp.add(Y32, t0);
      t0 = Fp.mul(t5, t4);
      X32 = Fp.mul(t3, X32);
      X32 = Fp.sub(X32, t0);
      t0 = Fp.mul(t3, t1);
      Z3 = Fp.mul(t5, Z3);
      Z3 = Fp.add(Z3, t0);
      return new Point2(X32, Y32, Z3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    is0() {
      return this.equals(Point2.ZERO);
    }
    wNAF(n5) {
      return wnaf.wNAFCached(this, n5, Point2.normalizeZ);
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(sc2) {
      const { endo: endo2, n: N13 } = CURVE;
      aInRange("scalar", sc2, _0n4, N13);
      const I5 = Point2.ZERO;
      if (sc2 === _0n4)
        return I5;
      if (this.is0() || sc2 === _1n4)
        return this;
      if (!endo2 || wnaf.hasPrecomputes(this))
        return wnaf.wNAFCachedUnsafe(this, sc2, Point2.normalizeZ);
      let { k1neg, k1, k2neg, k2: k22 } = endo2.splitScalar(sc2);
      let k1p = I5;
      let k2p = I5;
      let d5 = this;
      while (k1 > _0n4 || k22 > _0n4) {
        if (k1 & _1n4)
          k1p = k1p.add(d5);
        if (k22 & _1n4)
          k2p = k2p.add(d5);
        d5 = d5.double();
        k1 >>= _1n4;
        k22 >>= _1n4;
      }
      if (k1neg)
        k1p = k1p.negate();
      if (k2neg)
        k2p = k2p.negate();
      k2p = new Point2(Fp.mul(k2p.px, endo2.beta), k2p.py, k2p.pz);
      return k1p.add(k2p);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(scalar) {
      const { endo: endo2, n: N13 } = CURVE;
      aInRange("scalar", scalar, _1n4, N13);
      let point, fake;
      if (endo2) {
        const { k1neg, k1, k2neg, k2: k22 } = endo2.splitScalar(scalar);
        let { p: k1p, f: f1p } = this.wNAF(k1);
        let { p: k2p, f: f2p } = this.wNAF(k22);
        k1p = wnaf.constTimeNegate(k1neg, k1p);
        k2p = wnaf.constTimeNegate(k2neg, k2p);
        k2p = new Point2(Fp.mul(k2p.px, endo2.beta), k2p.py, k2p.pz);
        point = k1p.add(k2p);
        fake = f1p.add(f2p);
      } else {
        const { p: p5, f: f8 } = this.wNAF(scalar);
        point = p5;
        fake = f8;
      }
      return Point2.normalizeZ([point, fake])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(Q5, a3, b5) {
      const G5 = Point2.BASE;
      const mul = (P6, a4) => a4 === _0n4 || a4 === _1n4 || !P6.equals(G5) ? P6.multiplyUnsafe(a4) : P6.multiply(a4);
      const sum = mul(this, a3).add(mul(Q5, b5));
      return sum.is0() ? void 0 : sum;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(iz) {
      return toAffineMemo(this, iz);
    }
    isTorsionFree() {
      const { h: cofactor, isTorsionFree } = CURVE;
      if (cofactor === _1n4)
        return true;
      if (isTorsionFree)
        return isTorsionFree(Point2, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: cofactor, clearCofactor } = CURVE;
      if (cofactor === _1n4)
        return this;
      if (clearCofactor)
        return clearCofactor(Point2, this);
      return this.multiplyUnsafe(CURVE.h);
    }
    toRawBytes(isCompressed = true) {
      abool("isCompressed", isCompressed);
      this.assertValidity();
      return toBytes5(Point2, this, isCompressed);
    }
    toHex(isCompressed = true) {
      abool("isCompressed", isCompressed);
      return bytesToHex2(this.toRawBytes(isCompressed));
    }
  }
  Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, Fp.ONE);
  Point2.ZERO = new Point2(Fp.ZERO, Fp.ONE, Fp.ZERO);
  const { endo, nBitLength } = CURVE;
  const wnaf = wNAF(Point2, endo ? Math.ceil(nBitLength / 2) : nBitLength);
  return {
    CURVE,
    ProjectivePoint: Point2,
    normPrivateKeyToScalar,
    weierstrassEquation,
    isWithinCurveOrder
  };
}
function validateOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  });
  return Object.freeze({ lowS: true, ...opts });
}
function weierstrass(curveDef) {
  const CURVE = validateOpts(curveDef);
  const { Fp, n: CURVE_ORDER, nByteLength, nBitLength } = CURVE;
  const compressedLen = Fp.BYTES + 1;
  const uncompressedLen = 2 * Fp.BYTES + 1;
  function modN2(a3) {
    return mod(a3, CURVE_ORDER);
  }
  function invN(a3) {
    return invert(a3, CURVE_ORDER);
  }
  const { ProjectivePoint: Point2, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
    ...CURVE,
    toBytes(_c2, point, isCompressed) {
      const a3 = point.toAffine();
      const x6 = Fp.toBytes(a3.x);
      const cat = concatBytes;
      abool("isCompressed", isCompressed);
      if (isCompressed) {
        return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x6);
      } else {
        return cat(Uint8Array.from([4]), x6, Fp.toBytes(a3.y));
      }
    },
    fromBytes(bytes) {
      const len = bytes.length;
      const head = bytes[0];
      const tail = bytes.subarray(1);
      if (len === compressedLen && (head === 2 || head === 3)) {
        const x6 = bytesToNumberBE(tail);
        if (!inRange(x6, _1n4, Fp.ORDER))
          throw new Error("Point is not on curve");
        const y22 = weierstrassEquation(x6);
        let y6;
        try {
          y6 = Fp.sqrt(y22);
        } catch (sqrtError) {
          const suffix = sqrtError instanceof Error ? ": " + sqrtError.message : "";
          throw new Error("Point is not on curve" + suffix);
        }
        const isYOdd = (y6 & _1n4) === _1n4;
        const isHeadOdd = (head & 1) === 1;
        if (isHeadOdd !== isYOdd)
          y6 = Fp.neg(y6);
        return { x: x6, y: y6 };
      } else if (len === uncompressedLen && head === 4) {
        const x6 = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
        const y6 = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
        return { x: x6, y: y6 };
      } else {
        const cl = compressedLen;
        const ul = uncompressedLen;
        throw new Error("invalid Point, expected length of " + cl + ", or uncompressed " + ul + ", got " + len);
      }
    }
  });
  function isBiggerThanHalfOrder(number) {
    const HALF = CURVE_ORDER >> _1n4;
    return number > HALF;
  }
  function normalizeS(s3) {
    return isBiggerThanHalfOrder(s3) ? modN2(-s3) : s3;
  }
  const slcNum = (b5, from21, to4) => bytesToNumberBE(b5.slice(from21, to4));
  class Signature {
    constructor(r3, s3, recovery) {
      aInRange("r", r3, _1n4, CURVE_ORDER);
      aInRange("s", s3, _1n4, CURVE_ORDER);
      this.r = r3;
      this.s = s3;
      if (recovery != null)
        this.recovery = recovery;
      Object.freeze(this);
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(hex2) {
      const l8 = nByteLength;
      hex2 = ensureBytes("compactSignature", hex2, l8 * 2);
      return new Signature(slcNum(hex2, 0, l8), slcNum(hex2, l8, 2 * l8));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(hex2) {
      const { r: r3, s: s3 } = DER.toSig(ensureBytes("DER", hex2));
      return new Signature(r3, s3);
    }
    /**
     * @todo remove
     * @deprecated
     */
    assertValidity() {
    }
    addRecoveryBit(recovery) {
      return new Signature(this.r, this.s, recovery);
    }
    recoverPublicKey(msgHash) {
      const { r: r3, s: s3, recovery: rec } = this;
      const h6 = bits2int_modN(ensureBytes("msgHash", msgHash));
      if (rec == null || ![0, 1, 2, 3].includes(rec))
        throw new Error("recovery id invalid");
      const radj = rec === 2 || rec === 3 ? r3 + CURVE.n : r3;
      if (radj >= Fp.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const prefix = (rec & 1) === 0 ? "02" : "03";
      const R4 = Point2.fromHex(prefix + numToSizedHex(radj, Fp.BYTES));
      const ir4 = invN(radj);
      const u1 = modN2(-h6 * ir4);
      const u22 = modN2(s3 * ir4);
      const Q5 = Point2.BASE.multiplyAndAddUnsafe(R4, u1, u22);
      if (!Q5)
        throw new Error("point at infinify");
      Q5.assertValidity();
      return Q5;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return isBiggerThanHalfOrder(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new Signature(this.r, modN2(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return hexToBytes2(this.toDERHex());
    }
    toDERHex() {
      return DER.hexFromSig(this);
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return hexToBytes2(this.toCompactHex());
    }
    toCompactHex() {
      const l8 = nByteLength;
      return numToSizedHex(this.r, l8) + numToSizedHex(this.s, l8);
    }
  }
  const utils = {
    isValidPrivateKey(privateKey) {
      try {
        normPrivateKeyToScalar(privateKey);
        return true;
      } catch (error) {
        return false;
      }
    },
    normPrivateKeyToScalar,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const length2 = getMinHashLength(CURVE.n);
      return mapHashToField(CURVE.randomBytes(length2), CURVE.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(windowSize = 8, point = Point2.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  function getPublicKey(privateKey, isCompressed = true) {
    return Point2.fromPrivateKey(privateKey).toRawBytes(isCompressed);
  }
  function isProbPub(item) {
    if (typeof item === "bigint")
      return false;
    if (item instanceof Point2)
      return true;
    const arr = ensureBytes("key", item);
    const len = arr.length;
    const fpl = Fp.BYTES;
    const compLen = fpl + 1;
    const uncompLen = 2 * fpl + 1;
    if (CURVE.allowedPrivateKeyLengths || nByteLength === compLen) {
      return void 0;
    } else {
      return len === compLen || len === uncompLen;
    }
  }
  function getSharedSecret(privateA, publicB, isCompressed = true) {
    if (isProbPub(privateA) === true)
      throw new Error("first arg must be private key");
    if (isProbPub(publicB) === false)
      throw new Error("second arg must be public key");
    const b5 = Point2.fromHex(publicB);
    return b5.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
  }
  const bits2int = CURVE.bits2int || function(bytes) {
    if (bytes.length > 8192)
      throw new Error("input is too large");
    const num2 = bytesToNumberBE(bytes);
    const delta = bytes.length * 8 - nBitLength;
    return delta > 0 ? num2 >> BigInt(delta) : num2;
  };
  const bits2int_modN = CURVE.bits2int_modN || function(bytes) {
    return modN2(bits2int(bytes));
  };
  const ORDER_MASK = bitMask(nBitLength);
  function int2octets(num2) {
    aInRange("num < 2^" + nBitLength, num2, _0n4, ORDER_MASK);
    return numberToBytesBE(num2, nByteLength);
  }
  function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
    if (["recovered", "canonical"].some((k6) => k6 in opts))
      throw new Error("sign() legacy options not supported");
    const { hash: hash2, randomBytes: randomBytes2 } = CURVE;
    let { lowS, prehash, extraEntropy: ent } = opts;
    if (lowS == null)
      lowS = true;
    msgHash = ensureBytes("msgHash", msgHash);
    validateSigVerOpts(opts);
    if (prehash)
      msgHash = ensureBytes("prehashed msgHash", hash2(msgHash));
    const h1int = bits2int_modN(msgHash);
    const d5 = normPrivateKeyToScalar(privateKey);
    const seedArgs = [int2octets(d5), int2octets(h1int)];
    if (ent != null && ent !== false) {
      const e2 = ent === true ? randomBytes2(Fp.BYTES) : ent;
      seedArgs.push(ensureBytes("extraEntropy", e2));
    }
    const seed = concatBytes(...seedArgs);
    const m4 = h1int;
    function k2sig(kBytes) {
      const k6 = bits2int(kBytes);
      if (!isWithinCurveOrder(k6))
        return;
      const ik = invN(k6);
      const q2 = Point2.BASE.multiply(k6).toAffine();
      const r3 = modN2(q2.x);
      if (r3 === _0n4)
        return;
      const s3 = modN2(ik * modN2(m4 + r3 * d5));
      if (s3 === _0n4)
        return;
      let recovery = (q2.x === r3 ? 0 : 2) | Number(q2.y & _1n4);
      let normS = s3;
      if (lowS && isBiggerThanHalfOrder(s3)) {
        normS = normalizeS(s3);
        recovery ^= 1;
      }
      return new Signature(r3, normS, recovery);
    }
    return { seed, k2sig };
  }
  const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
  const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
  function sign(msgHash, privKey, opts = defaultSigOpts) {
    const { seed, k2sig } = prepSig(msgHash, privKey, opts);
    const C5 = CURVE;
    const drbg = createHmacDrbg(C5.hash.outputLen, C5.nByteLength, C5.hmac);
    return drbg(seed, k2sig);
  }
  Point2.BASE._setWindowSize(8);
  function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
    var _a2;
    const sg = signature;
    msgHash = ensureBytes("msgHash", msgHash);
    publicKey = ensureBytes("publicKey", publicKey);
    const { lowS, prehash, format } = opts;
    validateSigVerOpts(opts);
    if ("strict" in opts)
      throw new Error("options.strict was renamed to lowS");
    if (format !== void 0 && format !== "compact" && format !== "der")
      throw new Error("format must be compact or der");
    const isHex3 = typeof sg === "string" || isBytes(sg);
    const isObj = !isHex3 && !format && typeof sg === "object" && sg !== null && typeof sg.r === "bigint" && typeof sg.s === "bigint";
    if (!isHex3 && !isObj)
      throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    let _sig = void 0;
    let P6;
    try {
      if (isObj)
        _sig = new Signature(sg.r, sg.s);
      if (isHex3) {
        try {
          if (format !== "compact")
            _sig = Signature.fromDER(sg);
        } catch (derError) {
          if (!(derError instanceof DER.Err))
            throw derError;
        }
        if (!_sig && format !== "der")
          _sig = Signature.fromCompact(sg);
      }
      P6 = Point2.fromHex(publicKey);
    } catch (error) {
      return false;
    }
    if (!_sig)
      return false;
    if (lowS && _sig.hasHighS())
      return false;
    if (prehash)
      msgHash = CURVE.hash(msgHash);
    const { r: r3, s: s3 } = _sig;
    const h6 = bits2int_modN(msgHash);
    const is2 = invN(s3);
    const u1 = modN2(h6 * is2);
    const u22 = modN2(r3 * is2);
    const R4 = (_a2 = Point2.BASE.multiplyAndAddUnsafe(P6, u1, u22)) == null ? void 0 : _a2.toAffine();
    if (!R4)
      return false;
    const v6 = modN2(R4.x);
    return v6 === r3;
  }
  return {
    CURVE,
    getPublicKey,
    getSharedSecret,
    sign,
    verify,
    ProjectivePoint: Point2,
    Signature,
    utils
  };
}
function SWUFpSqrtRatio(Fp, Z3) {
  const q2 = Fp.ORDER;
  let l8 = _0n4;
  for (let o5 = q2 - _1n4; o5 % _2n3 === _0n4; o5 /= _2n3)
    l8 += _1n4;
  const c1 = l8;
  const _2n_pow_c1_1 = _2n3 << c1 - _1n4 - _1n4;
  const _2n_pow_c1 = _2n_pow_c1_1 * _2n3;
  const c22 = (q2 - _1n4) / _2n_pow_c1;
  const c32 = (c22 - _1n4) / _2n3;
  const c42 = _2n_pow_c1 - _1n4;
  const c52 = _2n_pow_c1_1;
  const c62 = Fp.pow(Z3, c22);
  const c7 = Fp.pow(Z3, (c22 + _1n4) / _2n3);
  let sqrtRatio = (u3, v6) => {
    let tv1 = c62;
    let tv2 = Fp.pow(v6, c42);
    let tv3 = Fp.sqr(tv2);
    tv3 = Fp.mul(tv3, v6);
    let tv5 = Fp.mul(u3, tv3);
    tv5 = Fp.pow(tv5, c32);
    tv5 = Fp.mul(tv5, tv2);
    tv2 = Fp.mul(tv5, v6);
    tv3 = Fp.mul(tv5, u3);
    let tv4 = Fp.mul(tv3, tv2);
    tv5 = Fp.pow(tv4, c52);
    let isQR = Fp.eql(tv5, Fp.ONE);
    tv2 = Fp.mul(tv3, c7);
    tv5 = Fp.mul(tv4, tv1);
    tv3 = Fp.cmov(tv2, tv3, isQR);
    tv4 = Fp.cmov(tv5, tv4, isQR);
    for (let i4 = c1; i4 > _1n4; i4--) {
      let tv52 = i4 - _2n3;
      tv52 = _2n3 << tv52 - _1n4;
      let tvv5 = Fp.pow(tv4, tv52);
      const e1 = Fp.eql(tvv5, Fp.ONE);
      tv2 = Fp.mul(tv3, tv1);
      tv1 = Fp.mul(tv1, tv1);
      tvv5 = Fp.mul(tv4, tv1);
      tv3 = Fp.cmov(tv2, tv3, e1);
      tv4 = Fp.cmov(tvv5, tv4, e1);
    }
    return { isValid: isQR, value: tv3 };
  };
  if (Fp.ORDER % _4n2 === _3n2) {
    const c12 = (Fp.ORDER - _3n2) / _4n2;
    const c23 = Fp.sqrt(Fp.neg(Z3));
    sqrtRatio = (u3, v6) => {
      let tv1 = Fp.sqr(v6);
      const tv2 = Fp.mul(u3, v6);
      tv1 = Fp.mul(tv1, tv2);
      let y1 = Fp.pow(tv1, c12);
      y1 = Fp.mul(y1, tv2);
      const y22 = Fp.mul(y1, c23);
      const tv3 = Fp.mul(Fp.sqr(y1), v6);
      const isQR = Fp.eql(tv3, u3);
      let y6 = Fp.cmov(y22, y1, isQR);
      return { isValid: isQR, value: y6 };
    };
  }
  return sqrtRatio;
}
function mapToCurveSimpleSWU(Fp, opts) {
  validateField(Fp);
  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))
    throw new Error("mapToCurveSimpleSWU: invalid opts");
  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
  if (!Fp.isOdd)
    throw new Error("Fp.isOdd is not implemented!");
  return (u3) => {
    let tv1, tv2, tv3, tv4, tv5, tv6, x6, y6;
    tv1 = Fp.sqr(u3);
    tv1 = Fp.mul(tv1, opts.Z);
    tv2 = Fp.sqr(tv1);
    tv2 = Fp.add(tv2, tv1);
    tv3 = Fp.add(tv2, Fp.ONE);
    tv3 = Fp.mul(tv3, opts.B);
    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO));
    tv4 = Fp.mul(tv4, opts.A);
    tv2 = Fp.sqr(tv3);
    tv6 = Fp.sqr(tv4);
    tv5 = Fp.mul(tv6, opts.A);
    tv2 = Fp.add(tv2, tv5);
    tv2 = Fp.mul(tv2, tv3);
    tv6 = Fp.mul(tv6, tv4);
    tv5 = Fp.mul(tv6, opts.B);
    tv2 = Fp.add(tv2, tv5);
    x6 = Fp.mul(tv1, tv3);
    const { isValid, value } = sqrtRatio(tv2, tv6);
    y6 = Fp.mul(tv1, u3);
    y6 = Fp.mul(y6, value);
    x6 = Fp.cmov(x6, tv3, isValid);
    y6 = Fp.cmov(y6, value, isValid);
    const e1 = Fp.isOdd(u3) === Fp.isOdd(y6);
    y6 = Fp.cmov(Fp.neg(y6), y6, e1);
    const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];
    x6 = Fp.mul(x6, tv4_inv);
    return { x: x6, y: y6 };
  };
}

// node_modules/ox/node_modules/@noble/curves/esm/_shortw_utils.js
function getHash(hash2) {
  return {
    hash: hash2,
    hmac: (key, ...msgs) => hmac(hash2, key, concatBytes3(...msgs)),
    randomBytes
  };
}
function createCurve(curveDef, defHash) {
  const create4 = (hash2) => weierstrass({ ...curveDef, ...getHash(hash2) });
  return { ...create4(defHash), create: create4 };
}

// node_modules/ox/node_modules/@noble/curves/esm/abstract/hash-to-curve.js
var os2ip = bytesToNumberBE;
function i2osp(value, length2) {
  anum(value);
  anum(length2);
  if (value < 0 || value >= 1 << 8 * length2)
    throw new Error("invalid I2OSP input: " + value);
  const res = Array.from({ length: length2 }).fill(0);
  for (let i4 = length2 - 1; i4 >= 0; i4--) {
    res[i4] = value & 255;
    value >>>= 8;
  }
  return new Uint8Array(res);
}
function strxor(a3, b5) {
  const arr = new Uint8Array(a3.length);
  for (let i4 = 0; i4 < a3.length; i4++) {
    arr[i4] = a3[i4] ^ b5[i4];
  }
  return arr;
}
function anum(item) {
  if (!Number.isSafeInteger(item))
    throw new Error("number expected");
}
function expand_message_xmd(msg, DST, lenInBytes, H3) {
  abytes(msg);
  abytes(DST);
  anum(lenInBytes);
  if (DST.length > 255)
    DST = H3(concatBytes(utf8ToBytes("H2C-OVERSIZE-DST-"), DST));
  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H3;
  const ell = Math.ceil(lenInBytes / b_in_bytes);
  if (lenInBytes > 65535 || ell > 255)
    throw new Error("expand_message_xmd: invalid lenInBytes");
  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));
  const Z_pad = i2osp(0, r_in_bytes);
  const l_i_b_str = i2osp(lenInBytes, 2);
  const b5 = new Array(ell);
  const b_0 = H3(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
  b5[0] = H3(concatBytes(b_0, i2osp(1, 1), DST_prime));
  for (let i4 = 1; i4 <= ell; i4++) {
    const args = [strxor(b_0, b5[i4 - 1]), i2osp(i4 + 1, 1), DST_prime];
    b5[i4] = H3(concatBytes(...args));
  }
  const pseudo_random_bytes = concatBytes(...b5);
  return pseudo_random_bytes.slice(0, lenInBytes);
}
function expand_message_xof(msg, DST, lenInBytes, k6, H3) {
  abytes(msg);
  abytes(DST);
  anum(lenInBytes);
  if (DST.length > 255) {
    const dkLen = Math.ceil(2 * k6 / 8);
    DST = H3.create({ dkLen }).update(utf8ToBytes("H2C-OVERSIZE-DST-")).update(DST).digest();
  }
  if (lenInBytes > 65535 || DST.length > 255)
    throw new Error("expand_message_xof: invalid lenInBytes");
  return H3.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
}
function hash_to_field(msg, count, options) {
  validateObject(options, {
    DST: "stringOrUint8Array",
    p: "bigint",
    m: "isSafeInteger",
    k: "isSafeInteger",
    hash: "hash"
  });
  const { p: p5, k: k6, m: m4, hash: hash2, expand, DST: _DST } = options;
  abytes(msg);
  anum(count);
  const DST = typeof _DST === "string" ? utf8ToBytes(_DST) : _DST;
  const log2p = p5.toString(2).length;
  const L5 = Math.ceil((log2p + k6) / 8);
  const len_in_bytes = count * m4 * L5;
  let prb;
  if (expand === "xmd") {
    prb = expand_message_xmd(msg, DST, len_in_bytes, hash2);
  } else if (expand === "xof") {
    prb = expand_message_xof(msg, DST, len_in_bytes, k6, hash2);
  } else if (expand === "_internal_pass") {
    prb = msg;
  } else {
    throw new Error('expand must be "xmd" or "xof"');
  }
  const u3 = new Array(count);
  for (let i4 = 0; i4 < count; i4++) {
    const e2 = new Array(m4);
    for (let j5 = 0; j5 < m4; j5++) {
      const elm_offset = L5 * (j5 + i4 * m4);
      const tv = prb.subarray(elm_offset, elm_offset + L5);
      e2[j5] = mod(os2ip(tv), p5);
    }
    u3[i4] = e2;
  }
  return u3;
}
function isogenyMap(field, map) {
  const coeff = map.map((i4) => Array.from(i4).reverse());
  return (x6, y6) => {
    const [xn4, xd, yn4, yd] = coeff.map((val) => val.reduce((acc, i4) => field.add(field.mul(acc, x6), i4)));
    const [xd_inv, yd_inv] = FpInvertBatch(field, [xd, yd], true);
    x6 = field.mul(xn4, xd_inv);
    y6 = field.mul(y6, field.mul(yn4, yd_inv));
    return { x: x6, y: y6 };
  };
}
function createHasher4(Point2, mapToCurve, defaults) {
  if (typeof mapToCurve !== "function")
    throw new Error("mapToCurve() must be defined");
  function map(num2) {
    return Point2.fromAffine(mapToCurve(num2));
  }
  function clear2(initial) {
    const P6 = initial.clearCofactor();
    if (P6.equals(Point2.ZERO))
      return Point2.ZERO;
    P6.assertValidity();
    return P6;
  }
  return {
    defaults,
    // Encodes byte string to elliptic curve.
    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
    hashToCurve(msg, options) {
      const u3 = hash_to_field(msg, 2, { ...defaults, DST: defaults.DST, ...options });
      const u0 = map(u3[0]);
      const u1 = map(u3[1]);
      return clear2(u0.add(u1));
    },
    // Encodes byte string to elliptic curve.
    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
    encodeToCurve(msg, options) {
      const u3 = hash_to_field(msg, 1, { ...defaults, DST: defaults.encodeDST, ...options });
      return clear2(map(u3[0]));
    },
    // Same as encodeToCurve, but without hash
    mapToCurve(scalars) {
      if (!Array.isArray(scalars))
        throw new Error("expected array of bigints");
      for (const i4 of scalars)
        if (typeof i4 !== "bigint")
          throw new Error("expected array of bigints");
      return clear2(map(scalars));
    }
  };
}

// node_modules/ox/node_modules/@noble/curves/esm/secp256k1.js
var secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
var secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
var _0n5 = BigInt(0);
var _1n5 = BigInt(1);
var _2n4 = BigInt(2);
var divNearest = (a3, b5) => (a3 + b5 / _2n4) / b5;
function sqrtMod(y6) {
  const P6 = secp256k1P;
  const _3n3 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
  const b22 = y6 * y6 * y6 % P6;
  const b32 = b22 * b22 * y6 % P6;
  const b6 = pow2(b32, _3n3, P6) * b32 % P6;
  const b9 = pow2(b6, _3n3, P6) * b32 % P6;
  const b11 = pow2(b9, _2n4, P6) * b22 % P6;
  const b222 = pow2(b11, _11n, P6) * b11 % P6;
  const b44 = pow2(b222, _22n, P6) * b222 % P6;
  const b88 = pow2(b44, _44n, P6) * b44 % P6;
  const b176 = pow2(b88, _88n, P6) * b88 % P6;
  const b220 = pow2(b176, _44n, P6) * b44 % P6;
  const b223 = pow2(b220, _3n3, P6) * b32 % P6;
  const t1 = pow2(b223, _23n, P6) * b222 % P6;
  const t2 = pow2(t1, _6n, P6) * b22 % P6;
  const root = pow2(t2, _2n4, P6);
  if (!Fpk1.eql(Fpk1.sqr(root), y6))
    throw new Error("Cannot find square root");
  return root;
}
var Fpk1 = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
var secp256k12 = createCurve({
  a: _0n5,
  b: BigInt(7),
  Fp: Fpk1,
  n: secp256k1N,
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: true,
  // Allow only low-S signatures by default in sign() and verify()
  endo: {
    // Endomorphism, see above
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (k6) => {
      const n5 = secp256k1N;
      const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
      const b1 = -_1n5 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
      const a22 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
      const b22 = a1;
      const POW_2_128 = BigInt("0x100000000000000000000000000000000");
      const c1 = divNearest(b22 * k6, n5);
      const c22 = divNearest(-b1 * k6, n5);
      let k1 = mod(k6 - c1 * a1 - c22 * a22, n5);
      let k22 = mod(-c1 * b1 - c22 * b22, n5);
      const k1neg = k1 > POW_2_128;
      const k2neg = k22 > POW_2_128;
      if (k1neg)
        k1 = n5 - k1;
      if (k2neg)
        k22 = n5 - k22;
      if (k1 > POW_2_128 || k22 > POW_2_128) {
        throw new Error("splitScalar: Endomorphism failed, k=" + k6);
      }
      return { k1neg, k1, k2neg, k2: k22 };
    }
  }
}, sha2568);
var TAGGED_HASH_PREFIXES = {};
function taggedHash(tag, ...messages) {
  let tagP = TAGGED_HASH_PREFIXES[tag];
  if (tagP === void 0) {
    const tagH = sha2568(Uint8Array.from(tag, (c7) => c7.charCodeAt(0)));
    tagP = concatBytes(tagH, tagH);
    TAGGED_HASH_PREFIXES[tag] = tagP;
  }
  return sha2568(concatBytes(tagP, ...messages));
}
var pointToBytes = (point) => point.toRawBytes(true).slice(1);
var numTo32b = (n5) => numberToBytesBE(n5, 32);
var modP = (x6) => mod(x6, secp256k1P);
var modN = (x6) => mod(x6, secp256k1N);
var Point = (() => secp256k12.ProjectivePoint)();
var GmulAdd = (Q5, a3, b5) => Point.BASE.multiplyAndAddUnsafe(Q5, a3, b5);
function schnorrGetExtPubKey(priv) {
  let d_ = secp256k12.utils.normPrivateKeyToScalar(priv);
  let p5 = Point.fromPrivateKey(d_);
  const scalar = p5.hasEvenY() ? d_ : modN(-d_);
  return { scalar, bytes: pointToBytes(p5) };
}
function lift_x(x6) {
  aInRange("x", x6, _1n5, secp256k1P);
  const xx = modP(x6 * x6);
  const c7 = modP(xx * x6 + BigInt(7));
  let y6 = sqrtMod(c7);
  if (y6 % _2n4 !== _0n5)
    y6 = modP(-y6);
  const p5 = new Point(x6, y6, _1n5);
  p5.assertValidity();
  return p5;
}
var num = bytesToNumberBE;
function challenge(...args) {
  return modN(num(taggedHash("BIP0340/challenge", ...args)));
}
function schnorrGetPublicKey(privateKey) {
  return schnorrGetExtPubKey(privateKey).bytes;
}
function schnorrSign(message, privateKey, auxRand = randomBytes(32)) {
  const m4 = ensureBytes("message", message);
  const { bytes: px, scalar: d5 } = schnorrGetExtPubKey(privateKey);
  const a3 = ensureBytes("auxRand", auxRand, 32);
  const t = numTo32b(d5 ^ num(taggedHash("BIP0340/aux", a3)));
  const rand = taggedHash("BIP0340/nonce", t, px, m4);
  const k_ = modN(num(rand));
  if (k_ === _0n5)
    throw new Error("sign failed: k is zero");
  const { bytes: rx, scalar: k6 } = schnorrGetExtPubKey(k_);
  const e2 = challenge(rx, px, m4);
  const sig = new Uint8Array(64);
  sig.set(rx, 0);
  sig.set(numTo32b(modN(k6 + e2 * d5)), 32);
  if (!schnorrVerify(sig, m4, px))
    throw new Error("sign: Invalid signature produced");
  return sig;
}
function schnorrVerify(signature, message, publicKey) {
  const sig = ensureBytes("signature", signature, 64);
  const m4 = ensureBytes("message", message);
  const pub = ensureBytes("publicKey", publicKey, 32);
  try {
    const P6 = lift_x(num(pub));
    const r3 = num(sig.subarray(0, 32));
    if (!inRange(r3, _1n5, secp256k1P))
      return false;
    const s3 = num(sig.subarray(32, 64));
    if (!inRange(s3, _1n5, secp256k1N))
      return false;
    const e2 = challenge(numTo32b(r3), pointToBytes(P6), m4);
    const R4 = GmulAdd(P6, s3, modN(-e2));
    if (!R4 || !R4.hasEvenY() || R4.toAffine().x !== r3)
      return false;
    return true;
  } catch (error) {
    return false;
  }
}
var schnorr = (() => ({
  getPublicKey: schnorrGetPublicKey,
  sign: schnorrSign,
  verify: schnorrVerify,
  utils: {
    randomPrivateKey: secp256k12.utils.randomPrivateKey,
    lift_x,
    pointToBytes,
    numberToBytesBE,
    bytesToNumberBE,
    taggedHash,
    mod
  }
}))();
var isoMap = (() => isogenyMap(Fpk1, [
  // xNum
  [
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
    "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
    "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
  ],
  // xDen
  [
    "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
    "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ],
  // yNum
  [
    "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
    "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
    "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
    "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
  ],
  // yDen
  [
    "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
    "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
    "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ]
].map((i4) => i4.map((j5) => BigInt(j5)))))();
var mapSWU = (() => mapToCurveSimpleSWU(Fpk1, {
  A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
  B: BigInt("1771"),
  Z: Fpk1.create(BigInt("-11"))
}))();
var secp256k1_hasher = (() => createHasher4(secp256k12.ProjectivePoint, (scalars) => {
  const { x: x6, y: y6 } = mapSWU(Fpk1.create(scalars[0]));
  return isoMap(x6, y6);
}, {
  DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
  encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
  p: Fpk1.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha2568
}))();
var hashToCurve = (() => secp256k1_hasher.hashToCurve)();
var encodeToCurve = (() => secp256k1_hasher.encodeToCurve)();

// node_modules/ox/_esm/core/Signature.js
function assert4(signature, options = {}) {
  const { recovered } = options;
  if (typeof signature.r === "undefined")
    throw new MissingPropertiesError({ signature });
  if (typeof signature.s === "undefined")
    throw new MissingPropertiesError({ signature });
  if (recovered && typeof signature.yParity === "undefined")
    throw new MissingPropertiesError({ signature });
  if (signature.r < 0n || signature.r > maxUint2564)
    throw new InvalidRError({ value: signature.r });
  if (signature.s < 0n || signature.s > maxUint2564)
    throw new InvalidSError({ value: signature.s });
  if (typeof signature.yParity === "number" && signature.yParity !== 0 && signature.yParity !== 1)
    throw new InvalidYParityError({ value: signature.yParity });
}
function fromBytes5(signature) {
  return fromHex6(fromBytes2(signature));
}
function fromHex6(signature) {
  if (signature.length !== 130 && signature.length !== 132)
    throw new InvalidSerializedSizeError2({ signature });
  const r3 = BigInt(slice3(signature, 0, 32));
  const s3 = BigInt(slice3(signature, 32, 64));
  const yParity = (() => {
    const yParity2 = Number(`0x${signature.slice(130)}`);
    if (Number.isNaN(yParity2))
      return void 0;
    try {
      return vToYParity(yParity2);
    } catch {
      throw new InvalidYParityError({ value: yParity2 });
    }
  })();
  if (typeof yParity === "undefined")
    return {
      r: r3,
      s: s3
    };
  return {
    r: r3,
    s: s3,
    yParity
  };
}
function extract3(value) {
  if (typeof value.r === "undefined")
    return void 0;
  if (typeof value.s === "undefined")
    return void 0;
  return from14(value);
}
function from14(signature) {
  const signature_ = (() => {
    if (typeof signature === "string")
      return fromHex6(signature);
    if (signature instanceof Uint8Array)
      return fromBytes5(signature);
    if (typeof signature.r === "string")
      return fromRpc(signature);
    if (signature.v)
      return fromLegacy(signature);
    return {
      r: signature.r,
      s: signature.s,
      ...typeof signature.yParity !== "undefined" ? { yParity: signature.yParity } : {}
    };
  })();
  assert4(signature_);
  return signature_;
}
function fromLegacy(signature) {
  return {
    r: signature.r,
    s: signature.s,
    yParity: vToYParity(signature.v)
  };
}
function fromRpc(signature) {
  const yParity = (() => {
    const v6 = signature.v ? Number(signature.v) : void 0;
    let yParity2 = signature.yParity ? Number(signature.yParity) : void 0;
    if (typeof v6 === "number" && typeof yParity2 !== "number")
      yParity2 = vToYParity(v6);
    if (typeof yParity2 !== "number")
      throw new InvalidYParityError({ value: signature.yParity });
    return yParity2;
  })();
  return {
    r: BigInt(signature.r),
    s: BigInt(signature.s),
    yParity
  };
}
function toTuple(signature) {
  const { r: r3, s: s3, yParity } = signature;
  return [
    yParity ? "0x01" : "0x",
    r3 === 0n ? "0x" : trimLeft2(fromNumber2(r3)),
    s3 === 0n ? "0x" : trimLeft2(fromNumber2(s3))
  ];
}
function vToYParity(v6) {
  if (v6 === 0 || v6 === 27)
    return 0;
  if (v6 === 1 || v6 === 28)
    return 1;
  if (v6 >= 35)
    return v6 % 2 === 0 ? 1 : 0;
  throw new InvalidVError({ value: v6 });
}
var InvalidSerializedSizeError2 = class extends BaseError3 {
  constructor({ signature }) {
    super(`Value \`${signature}\` is an invalid signature size.`, {
      metaMessages: [
        "Expected: 64 bytes or 65 bytes.",
        `Received ${size5(from3(signature))} bytes.`
      ]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Signature.InvalidSerializedSizeError"
    });
  }
};
var MissingPropertiesError = class extends BaseError3 {
  constructor({ signature }) {
    super(`Signature \`${stringify2(signature)}\` is missing either an \`r\`, \`s\`, or \`yParity\` property.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Signature.MissingPropertiesError"
    });
  }
};
var InvalidRError = class extends BaseError3 {
  constructor({ value }) {
    super(`Value \`${value}\` is an invalid r value. r must be a positive integer less than 2^256.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Signature.InvalidRError"
    });
  }
};
var InvalidSError = class extends BaseError3 {
  constructor({ value }) {
    super(`Value \`${value}\` is an invalid s value. s must be a positive integer less than 2^256.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Signature.InvalidSError"
    });
  }
};
var InvalidYParityError = class extends BaseError3 {
  constructor({ value }) {
    super(`Value \`${value}\` is an invalid y-parity value. Y-parity must be 0 or 1.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Signature.InvalidYParityError"
    });
  }
};
var InvalidVError = class extends BaseError3 {
  constructor({ value }) {
    super(`Value \`${value}\` is an invalid v value. v must be 27, 28 or >=35.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Signature.InvalidVError"
    });
  }
};

// node_modules/ox/_esm/core/Authorization.js
function from15(authorization, options = {}) {
  if (typeof authorization.chainId === "string")
    return fromRpc2(authorization);
  return { ...authorization, ...options.signature };
}
function fromRpc2(authorization) {
  const { address, chainId, nonce } = authorization;
  const signature = extract3(authorization);
  return {
    address,
    chainId: Number(chainId),
    nonce: BigInt(nonce),
    ...signature
  };
}
function getSignPayload(authorization) {
  return hash(authorization, { presign: true });
}
function hash(authorization, options = {}) {
  const { presign } = options;
  return keccak2564(concat2("0x05", fromHex5(toTuple2(presign ? {
    address: authorization.address,
    chainId: authorization.chainId,
    nonce: authorization.nonce
  } : authorization))));
}
function toTuple2(authorization) {
  const { address, chainId, nonce } = authorization;
  const signature = extract3(authorization);
  return [
    chainId ? fromNumber2(chainId) : "0x",
    address,
    nonce ? fromNumber2(nonce) : "0x",
    ...signature ? toTuple(signature) : []
  ];
}

// node_modules/ox/_esm/core/Secp256k1.js
function recoverAddress3(options) {
  return fromPublicKey(recoverPublicKey3(options));
}
function recoverPublicKey3(options) {
  const { payload, signature } = options;
  const { r: r3, s: s3, yParity } = signature;
  const signature_ = new secp256k12.Signature(BigInt(r3), BigInt(s3)).addRecoveryBit(yParity);
  const point = signature_.recoverPublicKey(from3(payload).substring(2));
  return from10(point);
}

// node_modules/ox/_esm/erc8010/SignatureErc8010.js
var magicBytes = "0x8010801080108010801080108010801080108010801080108010801080108010";
var suffixParameters = from12("(uint256 chainId, address delegation, uint256 nonce, uint8 yParity, uint256 r, uint256 s), address to, bytes data");
function assert5(value) {
  if (typeof value === "string") {
    if (slice3(value, -32) !== magicBytes)
      throw new InvalidWrappedSignatureError(value);
  } else
    assert4(value.authorization);
}
function from16(value) {
  if (typeof value === "string")
    return unwrap(value);
  return value;
}
function unwrap(wrapped) {
  assert5(wrapped);
  const suffixLength = toNumber2(slice3(wrapped, -64, -32));
  const suffix = slice3(wrapped, -suffixLength - 64, -64);
  const signature = slice3(wrapped, 0, -suffixLength - 64);
  const [auth, to4, data] = decode8(suffixParameters, suffix);
  const authorization = from15({
    address: auth.delegation,
    chainId: Number(auth.chainId),
    nonce: auth.nonce,
    yParity: auth.yParity,
    r: auth.r,
    s: auth.s
  });
  return {
    authorization,
    signature,
    ...data && data !== "0x" ? { data, to: to4 } : {}
  };
}
function wrap(value) {
  const { data, signature } = value;
  assert5(value);
  const self2 = recoverAddress3({
    payload: getSignPayload(value.authorization),
    signature: from14(value.authorization)
  });
  const suffix = encode10(suffixParameters, [
    {
      ...value.authorization,
      delegation: value.authorization.address,
      chainId: BigInt(value.authorization.chainId)
    },
    value.to ?? self2,
    data ?? "0x"
  ]);
  const suffixLength = fromNumber2(size5(suffix), { size: 32 });
  return concat2(signature, suffix, suffixLength, magicBytes);
}
function validate6(value) {
  try {
    assert5(value);
    return true;
  } catch {
    return false;
  }
}
var InvalidWrappedSignatureError = class extends BaseError3 {
  constructor(wrapped) {
    super(`Value \`${wrapped}\` is an invalid ERC-8010 wrapped signature.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "SignatureErc8010.InvalidWrappedSignatureError"
    });
  }
};

// node_modules/ox/_esm/erc6492/SignatureErc6492.js
var SignatureErc6492_exports = {};
__export(SignatureErc6492_exports, {
  InvalidWrappedSignatureError: () => InvalidWrappedSignatureError2,
  assert: () => assert6,
  from: () => from20,
  magicBytes: () => magicBytes2,
  universalSignatureValidatorAbi: () => universalSignatureValidatorAbi2,
  universalSignatureValidatorBytecode: () => universalSignatureValidatorBytecode,
  unwrap: () => unwrap2,
  validate: () => validate8,
  wrap: () => wrap2
});
var magicBytes2 = "0x6492649264926492649264926492649264926492649264926492649264926492";
var universalSignatureValidatorBytecode = "0x608060405234801561001057600080fd5b5060405161069438038061069483398101604081905261002f9161051e565b600061003c848484610048565b9050806000526001601ff35b60007f64926492649264926492649264926492649264926492649264926492649264926100748361040c565b036101e7576000606080848060200190518101906100929190610577565b60405192955090935091506000906001600160a01b038516906100b69085906105dd565b6000604051808303816000865af19150503d80600081146100f3576040519150601f19603f3d011682016040523d82523d6000602084013e6100f8565b606091505b50509050876001600160a01b03163b60000361016057806101605760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90610190908b9087906004016105f9565b602060405180830381865afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d19190610633565b6001600160e01b03191614945050505050610405565b6001600160a01b0384163b1561027a57604051630b135d3f60e11b808252906001600160a01b03861690631626ba7e9061022790879087906004016105f9565b602060405180830381865afa158015610244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102689190610633565b6001600160e01b031916149050610405565b81516041146102df5760405162461bcd60e51b815260206004820152603a602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e6774680000000000006064820152608401610157565b6102e7610425565b5060208201516040808401518451859392600091859190811061030c5761030c61065d565b016020015160f81c9050601b811480159061032b57508060ff16601c14155b1561038c5760405162461bcd60e51b815260206004820152603b602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c756500000000006064820152608401610157565b60408051600081526020810180835289905260ff83169181019190915260608101849052608081018390526001600160a01b0389169060019060a0016020604051602081039080840390855afa1580156103ea573d6000803e3d6000fd5b505050602060405103516001600160a01b0316149450505050505b9392505050565b600060208251101561041d57600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461045857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561048c578181015183820152602001610474565b50506000910152565b600082601f8301126104a657600080fd5b81516001600160401b038111156104bf576104bf61045b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156104ed576104ed61045b565b60405281815283820160200185101561050557600080fd5b610516826020830160208701610471565b949350505050565b60008060006060848603121561053357600080fd5b835161053e81610443565b6020850151604086015191945092506001600160401b0381111561056157600080fd5b61056d86828701610495565b9150509250925092565b60008060006060848603121561058c57600080fd5b835161059781610443565b60208501519093506001600160401b038111156105b357600080fd5b6105bf86828701610495565b604086015190935090506001600160401b0381111561056157600080fd5b600082516105ef818460208701610471565b9190910192915050565b828152604060208201526000825180604084015261061e816060850160208701610471565b601f01601f1916919091016060019392505050565b60006020828403121561064557600080fd5b81516001600160e01b03198116811461040557600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572";
var universalSignatureValidatorAbi2 = [
  {
    inputs: [
      {
        name: "_signer",
        type: "address"
      },
      {
        name: "_hash",
        type: "bytes32"
      },
      {
        name: "_signature",
        type: "bytes"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        name: "_signer",
        type: "address"
      },
      {
        name: "_hash",
        type: "bytes32"
      },
      {
        name: "_signature",
        type: "bytes"
      }
    ],
    outputs: [
      {
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function",
    name: "isValidSig"
  }
];
function assert6(wrapped) {
  if (slice3(wrapped, -32) !== magicBytes2)
    throw new InvalidWrappedSignatureError2(wrapped);
}
function from20(wrapped) {
  if (typeof wrapped === "string")
    return unwrap2(wrapped);
  return wrapped;
}
function unwrap2(wrapped) {
  assert6(wrapped);
  const [to4, data, signature] = decode8(from12("address, bytes, bytes"), wrapped);
  return { data, signature, to: to4 };
}
function wrap2(value) {
  const { data, signature, to: to4 } = value;
  return concat2(encode10(from12("address, bytes, bytes"), [
    to4,
    data,
    signature
  ]), magicBytes2);
}
function validate8(wrapped) {
  try {
    assert6(wrapped);
    return true;
  } catch {
    return false;
  }
}
var InvalidWrappedSignatureError2 = class extends BaseError3 {
  constructor(wrapped) {
    super(`Value \`${wrapped}\` is an invalid ERC-6492 wrapped signature.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "SignatureErc6492.InvalidWrappedSignatureError"
    });
  }
};

// node_modules/viem/_esm/actions/wallet/sendTransactionSync.js
var supportsWalletNamespace3 = new LruMap2(128);

// node_modules/viem/_esm/clients/transports/createTransport.js
function createTransport2({ key, methods, name: name2, request, retryCount = 3, retryDelay = 150, timeout, type }, value) {
  const uid3 = uid2();
  return {
    config: {
      key,
      methods,
      name: name2,
      request,
      retryCount,
      retryDelay,
      timeout,
      type
    },
    request: buildRequest2(request, { methods, retryCount, retryDelay, uid: uid3 }),
    value
  };
}

// node_modules/viem/_esm/clients/transports/fallback.js
function fallback2(transports_, config = {}) {
  const { key = "fallback", name: name2 = "Fallback", rank = false, shouldThrow: shouldThrow_ = shouldThrow2, retryCount, retryDelay } = config;
  return ({ chain: chain2, pollingInterval = 4e3, timeout, ...rest }) => {
    let transports = transports_;
    let onResponse = () => {
    };
    const transport = createTransport2({
      key,
      name: name2,
      async request({ method, params }) {
        let includes;
        const fetch2 = async (i4 = 0) => {
          const transport2 = transports[i4]({
            ...rest,
            chain: chain2,
            retryCount: 0,
            timeout
          });
          try {
            const response = await transport2.request({
              method,
              params
            });
            onResponse({
              method,
              params,
              response,
              transport: transport2,
              status: "success"
            });
            return response;
          } catch (err) {
            onResponse({
              error: err,
              method,
              params,
              transport: transport2,
              status: "error"
            });
            if (shouldThrow_(err))
              throw err;
            if (i4 === transports.length - 1)
              throw err;
            includes ?? (includes = transports.slice(i4 + 1).some((transport3) => {
              const { include, exclude } = transport3({ chain: chain2 }).config.methods || {};
              if (include)
                return include.includes(method);
              if (exclude)
                return !exclude.includes(method);
              return true;
            }));
            if (!includes)
              throw err;
            return fetch2(i4 + 1);
          }
        };
        return fetch2();
      },
      retryCount,
      retryDelay,
      type: "fallback"
    }, {
      onResponse: (fn3) => onResponse = fn3,
      transports: transports.map((fn3) => fn3({ chain: chain2, retryCount: 0 }))
    });
    if (rank) {
      const rankOptions = typeof rank === "object" ? rank : {};
      rankTransports({
        chain: chain2,
        interval: rankOptions.interval ?? pollingInterval,
        onTransports: (transports_2) => transports = transports_2,
        ping: rankOptions.ping,
        sampleCount: rankOptions.sampleCount,
        timeout: rankOptions.timeout,
        transports,
        weights: rankOptions.weights
      });
    }
    return transport;
  };
}
function shouldThrow2(error) {
  if ("code" in error && typeof error.code === "number") {
    if (error.code === TransactionRejectedRpcError.code || error.code === UserRejectedRequestError.code || ExecutionRevertedError.nodeMessage.test(error.message) || error.code === 5e3)
      return true;
  }
  return false;
}
function rankTransports({ chain: chain2, interval = 4e3, onTransports, ping, sampleCount = 10, timeout = 1e3, transports, weights = {} }) {
  const { stability: stabilityWeight = 0.7, latency: latencyWeight = 0.3 } = weights;
  const samples = [];
  const rankTransports_ = async () => {
    const sample = await Promise.all(transports.map(async (transport) => {
      const transport_ = transport({ chain: chain2, retryCount: 0, timeout });
      const start = Date.now();
      let end;
      let success;
      try {
        await (ping ? ping({ transport: transport_ }) : transport_.request({ method: "net_listening" }));
        success = 1;
      } catch {
        success = 0;
      } finally {
        end = Date.now();
      }
      const latency = end - start;
      return { latency, success };
    }));
    samples.push(sample);
    if (samples.length > sampleCount)
      samples.shift();
    const maxLatency = Math.max(...samples.map((sample2) => Math.max(...sample2.map(({ latency }) => latency))));
    const scores = transports.map((_3, i4) => {
      const latencies = samples.map((sample2) => sample2[i4].latency);
      const meanLatency = latencies.reduce((acc, latency) => acc + latency, 0) / latencies.length;
      const latencyScore = 1 - meanLatency / maxLatency;
      const successes = samples.map((sample2) => sample2[i4].success);
      const stabilityScore = successes.reduce((acc, success) => acc + success, 0) / successes.length;
      if (stabilityScore === 0)
        return [0, i4];
      return [
        latencyWeight * latencyScore + stabilityWeight * stabilityScore,
        i4
      ];
    }).sort((a3, b5) => b5[0] - a3[0]);
    onTransports(scores.map(([, i4]) => transports[i4]));
    await wait2(interval);
    rankTransports_();
  };
  rankTransports_();
}

// node_modules/viem/_esm/errors/transport.js
var UrlRequiredError2 = class extends BaseError2 {
  constructor() {
    super("No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.", {
      docsPath: "/docs/clients/intro",
      name: "UrlRequiredError"
    });
  }
};

// node_modules/viem/_esm/clients/transports/http.js
function http2(url, config = {}) {
  const { batch, fetchFn, fetchOptions, key = "http", methods, name: name2 = "HTTP JSON-RPC", onFetchRequest, onFetchResponse, retryDelay, raw } = config;
  return ({ chain: chain2, retryCount: retryCount_, timeout: timeout_ }) => {
    const { batchSize = 1e3, wait: wait3 = 0 } = typeof batch === "object" ? batch : {};
    const retryCount = config.retryCount ?? retryCount_;
    const timeout = timeout_ ?? config.timeout ?? 1e4;
    const url_ = url || (chain2 == null ? void 0 : chain2.rpcUrls.default.http[0]);
    if (!url_)
      throw new UrlRequiredError2();
    const rpcClient = getHttpRpcClient2(url_, {
      fetchFn,
      fetchOptions,
      onRequest: onFetchRequest,
      onResponse: onFetchResponse,
      timeout
    });
    return createTransport2({
      key,
      methods,
      name: name2,
      async request({ method, params }) {
        const body = { method, params };
        const { schedule } = createBatchScheduler({
          id: url_,
          wait: wait3,
          shouldSplitBatch(requests) {
            return requests.length > batchSize;
          },
          fn: (body2) => rpcClient.request({
            body: body2
          }),
          sort: (a3, b5) => a3.id - b5.id
        });
        const fn3 = async (body2) => batch ? schedule(body2) : [
          await rpcClient.request({
            body: body2
          })
        ];
        const [{ error, result }] = await fn3(body);
        if (raw)
          return { error, result };
        if (error)
          throw new RpcRequestError({
            body,
            error,
            url: url_
          });
        return result;
      },
      retryCount,
      retryDelay,
      timeout,
      type: "http"
    }, {
      fetchOptions,
      url: url_
    });
  };
}

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ERC7811Util.js
var ERC7811Utils = {
  /**
   * Creates a Balance object from an ERC7811 Asset object
   * @param asset - Asset object to convert
   * @param chainId - Chain ID in CAIP-2 format
   * @returns Balance object
   */
  createBalance(asset, chainId) {
    const metadata = {
      name: asset.metadata["name"] || "",
      symbol: asset.metadata["symbol"] || "",
      decimals: asset.metadata["decimals"] || 0,
      value: asset.metadata["value"] || 0,
      price: asset.metadata["price"] || 0,
      iconUrl: asset.metadata["iconUrl"] || ""
    };
    return {
      name: metadata.name,
      symbol: metadata.symbol,
      chainId,
      address: asset.address === "native" ? void 0 : this.convertAddressToCAIP10Address(asset.address, chainId),
      value: metadata.value,
      price: metadata.price,
      quantity: {
        decimals: metadata.decimals.toString(),
        numeric: this.convertHexToBalance({
          hex: asset.balance,
          decimals: metadata.decimals
        })
      },
      iconUrl: metadata.iconUrl
    };
  },
  /**
   * Converts a hex string to a Balance object
   * @param hex - Hex string to convert
   * @param decimals - Number of decimals to use
   * @returns Balance object
   */
  convertHexToBalance({ hex: hex2, decimals }) {
    return formatUnits(BigInt(hex2), decimals);
  },
  /**
   * Converts an address to a CAIP-10 address
   * @param address - Address to convert
   * @param chainId - Chain ID in CAIP-2 format
   * @returns CAIP-10 address
   */
  convertAddressToCAIP10Address(address, chainId) {
    return `${chainId}:${address}`;
  },
  /**
   *  Creates a CAIP-2 Chain ID from a chain ID and namespace
   * @param chainId  - Chain ID in hex format
   * @param namespace  - Chain namespace
   * @returns
   */
  createCAIP2ChainId(chainId, namespace) {
    return `${namespace}:${parseInt(chainId, 16)}`;
  },
  /**
   * Gets the chain ID in hex format from a CAIP-2 Chain ID
   * @param caip2ChainId - CAIP-2 Chain ID
   * @returns Chain ID in hex format
   */
  getChainIdHexFromCAIP2ChainId(caip2ChainId) {
    const parts = caip2ChainId.split(":");
    if (parts.length < 2 || !parts[1]) {
      return "0x0";
    }
    const chainPart = parts[1];
    const parsed = parseInt(chainPart, 10);
    return isNaN(parsed) ? "0x0" : `0x${parsed.toString(16)}`;
  },
  /**
   * Checks if a response is a valid WalletGetAssetsResponse
   * @param response - The response to check
   * @returns True if the response is a valid WalletGetAssetsResponse, false otherwise
   */
  isWalletGetAssetsResponse(response) {
    if (typeof response !== "object" || response === null) {
      return false;
    }
    return Object.values(response).every((value) => Array.isArray(value) && value.every((asset) => this.isValidAsset(asset)));
  },
  /**
   * Checks if an asset object is valid.
   * @param asset - The asset object to check.
   * @returns True if the asset is valid, false otherwise.
   */
  isValidAsset(asset) {
    return typeof asset === "object" && asset !== null && typeof asset.address === "string" && typeof asset.balance === "string" && (asset.type === "ERC20" || asset.type === "NATIVE") && typeof asset.metadata === "object" && asset.metadata !== null && typeof asset.metadata["name"] === "string" && typeof asset.metadata["symbol"] === "string" && typeof asset.metadata["decimals"] === "number" && typeof asset.metadata["price"] === "number" && typeof asset.metadata["iconUrl"] === "string";
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/BalanceUtil.js
var BalanceUtil = {
  /**
   * Get the balances of the user's tokens. If user connected with Auth provider or and on the EIP155 network,
   * it'll use the `wallet_getAssets` and `wallet_getCapabilities` calls to fetch the balance rather than Blockchain API
   * @param forceUpdate - If true, the balances will be fetched from the server
   * @returns The balances of the user's tokens
   */
  async getMyTokensWithBalance(forceUpdate) {
    const address = AccountController.state.address;
    const caipNetwork = ChainController.state.activeCaipNetwork;
    const isAuthConnector = ConnectorController.getConnectorId("eip155") === ConstantsUtil.CONNECTOR_ID.AUTH;
    if (!address || !caipNetwork) {
      return [];
    }
    const caipAddress = `${caipNetwork.caipNetworkId}:${address}`;
    const cachedBalance = StorageUtil.getBalanceCacheForCaipAddress(caipAddress);
    if (cachedBalance) {
      return cachedBalance.balances;
    }
    if (caipNetwork.chainNamespace === ConstantsUtil.CHAIN.EVM && isAuthConnector) {
      const eip155Balances = await this.getEIP155Balances(address, caipNetwork);
      if (eip155Balances) {
        return this.filterLowQualityTokens(eip155Balances);
      }
    }
    const response = await BlockchainApiController.getBalance(address, caipNetwork.caipNetworkId, forceUpdate);
    return this.filterLowQualityTokens(response.balances);
  },
  /**
   * Get the balances of the user's tokens on the EIP155 network using native `wallet_getAssets` and `wallet_getCapabilities` calls
   * @param address - The address of the user
   * @param caipNetwork - The CAIP network
   * @returns The balances of the user's tokens on the EIP155 network
   */
  async getEIP155Balances(address, caipNetwork) {
    var _a2, _b;
    try {
      const chainIdHex = ERC7811Utils.getChainIdHexFromCAIP2ChainId(caipNetwork.caipNetworkId);
      const walletCapabilities = await ConnectionController.getCapabilities(address);
      if (!((_b = (_a2 = walletCapabilities == null ? void 0 : walletCapabilities[chainIdHex]) == null ? void 0 : _a2["assetDiscovery"]) == null ? void 0 : _b.supported)) {
        return null;
      }
      const walletGetAssetsResponse = await ConnectionController.walletGetAssets({
        account: address,
        chainFilter: [chainIdHex]
      });
      if (!ERC7811Utils.isWalletGetAssetsResponse(walletGetAssetsResponse)) {
        return null;
      }
      const assets = walletGetAssetsResponse[chainIdHex] || [];
      const filteredAssets = assets.map((asset) => ERC7811Utils.createBalance(asset, caipNetwork.caipNetworkId));
      StorageUtil.updateBalanceCache({
        caipAddress: `${caipNetwork.caipNetworkId}:${address}`,
        balance: { balances: filteredAssets },
        timestamp: Date.now()
      });
      return filteredAssets;
    } catch (error) {
      return null;
    }
  },
  /**
   * The 1Inch API includes many low-quality tokens in the balance response,
   * which appear inconsistently. This filter prevents them from being displayed.
   */
  filterLowQualityTokens(balances) {
    return balances.filter((balance) => balance.quantity.decimals !== "0");
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AccountController.js
var state16 = proxy({
  currentTab: 0,
  tokenBalance: [],
  smartAccountDeployed: false,
  addressLabels: /* @__PURE__ */ new Map()
});
var controller10 = {
  state: state16,
  replaceState(newState) {
    if (!newState) {
      return;
    }
    Object.assign(state16, ref(newState));
  },
  subscribe(callback) {
    return ChainController.subscribeChainProp("accountState", (accountState2) => {
      if (accountState2) {
        return callback(accountState2);
      }
      return void 0;
    });
  },
  subscribeKey(property, callback, chain2) {
    let prev = void 0;
    return ChainController.subscribeChainProp("accountState", (accountState2) => {
      if (accountState2) {
        const nextValue = accountState2[property];
        if (prev !== nextValue) {
          prev = nextValue;
          callback(nextValue);
        }
      }
    }, chain2);
  },
  setStatus(status, chain2) {
    ChainController.setAccountProp("status", status, chain2);
  },
  getCaipAddress(chain2) {
    var _a2, _b;
    if (!chain2) {
      return void 0;
    }
    return (_b = (_a2 = ChainController.state.chains.get(chain2)) == null ? void 0 : _a2.accountState) == null ? void 0 : _b.caipAddress;
  },
  setCaipAddress(caipAddress, chain2) {
    const newAddress = caipAddress ? CoreHelperUtil.getPlainAddress(caipAddress) : void 0;
    if (chain2 === ChainController.state.activeChain) {
      ChainController.state.activeCaipAddress = caipAddress;
    }
    ChainController.setAccountProp("caipAddress", caipAddress, chain2);
    ChainController.setAccountProp("address", newAddress, chain2);
  },
  setBalance(balance, balanceSymbol, chain2) {
    ChainController.setAccountProp("balance", balance, chain2);
    ChainController.setAccountProp("balanceSymbol", balanceSymbol, chain2);
  },
  setProfileName(profileName, chain2) {
    ChainController.setAccountProp("profileName", profileName, chain2);
  },
  setProfileImage(profileImage, chain2) {
    ChainController.setAccountProp("profileImage", profileImage, chain2);
  },
  setUser(user, chain2) {
    ChainController.setAccountProp("user", user, chain2);
  },
  setAddressExplorerUrl(explorerUrl, chain2) {
    ChainController.setAccountProp("addressExplorerUrl", explorerUrl, chain2);
  },
  setSmartAccountDeployed(isDeployed, chain2) {
    ChainController.setAccountProp("smartAccountDeployed", isDeployed, chain2);
  },
  setCurrentTab(currentTab) {
    ChainController.setAccountProp("currentTab", currentTab, ChainController.state.activeChain);
  },
  setTokenBalance(tokenBalance, chain2) {
    if (tokenBalance) {
      ChainController.setAccountProp("tokenBalance", tokenBalance, chain2);
    }
  },
  setShouldUpdateToAddress(address, chain2) {
    ChainController.setAccountProp("shouldUpdateToAddress", address, chain2);
  },
  addAddressLabel(address, label, chain2) {
    var _a2, _b;
    if (!chain2) {
      return;
    }
    const map = ((_b = (_a2 = ChainController.state.chains.get(chain2)) == null ? void 0 : _a2.accountState) == null ? void 0 : _b.addressLabels) || /* @__PURE__ */ new Map();
    map.set(address, label);
    ChainController.setAccountProp("addressLabels", map, chain2);
  },
  removeAddressLabel(address, chain2) {
    var _a2, _b;
    if (!chain2) {
      return;
    }
    const map = ((_b = (_a2 = ChainController.state.chains.get(chain2)) == null ? void 0 : _a2.accountState) == null ? void 0 : _b.addressLabels) || /* @__PURE__ */ new Map();
    map.delete(address);
    ChainController.setAccountProp("addressLabels", map, chain2);
  },
  setConnectedWalletInfo(connectedWalletInfo, chain2) {
    ChainController.setAccountProp("connectedWalletInfo", connectedWalletInfo, chain2, false);
  },
  setPreferredAccountType(preferredAccountType, chain2) {
    ChainController.setAccountProp("preferredAccountType", preferredAccountType, chain2);
  },
  setSocialProvider(socialProvider, chain2) {
    if (socialProvider) {
      ChainController.setAccountProp("socialProvider", socialProvider, chain2);
    }
  },
  setSocialWindow(socialWindow, chain2) {
    ChainController.setAccountProp("socialWindow", socialWindow ? ref(socialWindow) : void 0, chain2);
  },
  setFarcasterUrl(farcasterUrl, chain2) {
    ChainController.setAccountProp("farcasterUrl", farcasterUrl, chain2);
  },
  async fetchTokenBalance(onError) {
    var _a2, _b;
    state16.balanceLoading = true;
    const chainId = (_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId;
    const chain2 = (_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.chainNamespace;
    const caipAddress = ChainController.state.activeCaipAddress;
    const address = caipAddress ? CoreHelperUtil.getPlainAddress(caipAddress) : void 0;
    if (state16.lastRetry && !CoreHelperUtil.isAllowedRetry(state16.lastRetry, 30 * ConstantsUtil2.ONE_SEC_MS)) {
      state16.balanceLoading = false;
      return [];
    }
    try {
      if (address && chainId && chain2) {
        const balance = await BalanceUtil.getMyTokensWithBalance();
        AccountController.setTokenBalance(balance, chain2);
        state16.lastRetry = void 0;
        state16.balanceLoading = false;
        return balance;
      }
    } catch (error) {
      state16.lastRetry = Date.now();
      onError == null ? void 0 : onError(error);
      SnackController.showError("Token Balance Unavailable");
    } finally {
      state16.balanceLoading = false;
    }
    return [];
  },
  resetAccount(chain2) {
    ChainController.resetAccount(chain2);
  }
};
var AccountController = withErrorBoundary(controller10);

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/SwapApiUtil.js
var SwapApiUtil = {
  async getTokenList() {
    var _a2;
    const caipNetwork = ChainController.state.activeCaipNetwork;
    const response = await BlockchainApiController.fetchSwapTokens({
      chainId: caipNetwork == null ? void 0 : caipNetwork.caipNetworkId
    });
    const tokens = ((_a2 = response == null ? void 0 : response.tokens) == null ? void 0 : _a2.map((token) => ({
      ...token,
      eip2612: false,
      quantity: {
        decimals: "0",
        numeric: "0"
      },
      price: 0,
      value: 0
    }))) || [];
    return tokens;
  },
  async fetchGasPrice() {
    var _a2, _b;
    const caipNetwork = ChainController.state.activeCaipNetwork;
    if (!caipNetwork) {
      return null;
    }
    try {
      switch (caipNetwork.chainNamespace) {
        case "solana":
          const lamportsPerSignature = (_b = await ((_a2 = ConnectionController) == null ? void 0 : _a2.estimateGas({ chainNamespace: "solana" }))) == null ? void 0 : _b.toString();
          return {
            standard: lamportsPerSignature,
            fast: lamportsPerSignature,
            instant: lamportsPerSignature
          };
        case "eip155":
        default:
          return await BlockchainApiController.fetchGasPrice({
            chainId: caipNetwork.caipNetworkId
          });
      }
    } catch {
      return null;
    }
  },
  async fetchSwapAllowance({ tokenAddress, userAddress, sourceTokenAmount, sourceTokenDecimals }) {
    const response = await BlockchainApiController.fetchSwapAllowance({
      tokenAddress,
      userAddress
    });
    if ((response == null ? void 0 : response.allowance) && sourceTokenAmount && sourceTokenDecimals) {
      const parsedValue = ConnectionController.parseUnits(sourceTokenAmount, sourceTokenDecimals) || 0;
      const hasAllowance = BigInt(response.allowance) >= parsedValue;
      return hasAllowance;
    }
    return false;
  },
  async getMyTokensWithBalance(forceUpdate) {
    const balances = await BalanceUtil.getMyTokensWithBalance(forceUpdate);
    AccountController.setTokenBalance(balances, ChainController.state.activeChain);
    return this.mapBalancesToSwapTokens(balances);
  },
  /**
   * Maps the balances from Blockchain API to SwapTokenWithBalance array
   * @param balances
   * @returns SwapTokenWithBalance[]
   */
  mapBalancesToSwapTokens(balances) {
    return (balances == null ? void 0 : balances.map((token) => ({
      ...token,
      address: (token == null ? void 0 : token.address) ? token.address : getActiveNetworkTokenAddress(),
      decimals: parseInt(token.quantity.decimals, 10),
      logoUri: token.iconUrl,
      eip2612: false
    }))) || [];
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SendController.js
var state17 = proxy({
  tokenBalances: [],
  loading: false
});
var controller11 = {
  state: state17,
  subscribe(callback) {
    return subscribe(state17, () => callback(state17));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state17, key, callback);
  },
  setToken(token) {
    if (token) {
      state17.token = ref(token);
    }
  },
  setTokenAmount(sendTokenAmount) {
    state17.sendTokenAmount = sendTokenAmount;
  },
  setReceiverAddress(receiverAddress) {
    state17.receiverAddress = receiverAddress;
  },
  setReceiverProfileImageUrl(receiverProfileImageUrl) {
    state17.receiverProfileImageUrl = receiverProfileImageUrl;
  },
  setReceiverProfileName(receiverProfileName) {
    state17.receiverProfileName = receiverProfileName;
  },
  setNetworkBalanceInUsd(networkBalanceInUSD) {
    state17.networkBalanceInUSD = networkBalanceInUSD;
  },
  setLoading(loading) {
    state17.loading = loading;
  },
  async sendToken() {
    var _a2;
    try {
      SendController.setLoading(true);
      switch ((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.chainNamespace) {
        case "eip155":
          await SendController.sendEvmToken();
          return;
        case "solana":
          await SendController.sendSolanaToken();
          return;
        default:
          throw new Error("Unsupported chain");
      }
    } finally {
      SendController.setLoading(false);
    }
  },
  async sendEvmToken() {
    var _a2, _b, _c2;
    const activeChainNamespace = ChainController.state.activeChain;
    if (!activeChainNamespace) {
      throw new Error("SendController:sendEvmToken - activeChainNamespace is required");
    }
    const activeAccountType = getPreferredAccountType(activeChainNamespace);
    if (!SendController.state.sendTokenAmount || !SendController.state.receiverAddress) {
      throw new Error("An amount and receiver address are required");
    }
    if (!SendController.state.token) {
      throw new Error("A token is required");
    }
    if ((_a2 = SendController.state.token) == null ? void 0 : _a2.address) {
      EventsController.sendEvent({
        type: "track",
        event: "SEND_INITIATED",
        properties: {
          isSmartAccount: activeAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
          token: SendController.state.token.address,
          amount: SendController.state.sendTokenAmount,
          network: ((_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.caipNetworkId) || ""
        }
      });
      await SendController.sendERC20Token({
        receiverAddress: SendController.state.receiverAddress,
        tokenAddress: SendController.state.token.address,
        sendTokenAmount: SendController.state.sendTokenAmount,
        decimals: SendController.state.token.quantity.decimals
      });
    } else {
      EventsController.sendEvent({
        type: "track",
        event: "SEND_INITIATED",
        properties: {
          isSmartAccount: activeAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
          token: SendController.state.token.symbol || "",
          amount: SendController.state.sendTokenAmount,
          network: ((_c2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _c2.caipNetworkId) || ""
        }
      });
      await SendController.sendNativeToken({
        receiverAddress: SendController.state.receiverAddress,
        sendTokenAmount: SendController.state.sendTokenAmount,
        decimals: SendController.state.token.quantity.decimals
      });
    }
  },
  async fetchTokenBalance(onError) {
    var _a2, _b;
    state17.loading = true;
    const chainId = (_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId;
    const chain2 = (_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.chainNamespace;
    const caipAddress = ChainController.state.activeCaipAddress;
    const address = caipAddress ? CoreHelperUtil.getPlainAddress(caipAddress) : void 0;
    if (state17.lastRetry && !CoreHelperUtil.isAllowedRetry(state17.lastRetry, 30 * ConstantsUtil2.ONE_SEC_MS)) {
      state17.loading = false;
      return [];
    }
    try {
      if (address && chainId && chain2) {
        const balances = await BalanceUtil.getMyTokensWithBalance();
        state17.tokenBalances = balances;
        state17.lastRetry = void 0;
        return balances;
      }
    } catch (error) {
      state17.lastRetry = Date.now();
      onError == null ? void 0 : onError(error);
      SnackController.showError("Token Balance Unavailable");
    } finally {
      state17.loading = false;
    }
    return [];
  },
  fetchNetworkBalance() {
    if (state17.tokenBalances.length === 0) {
      return;
    }
    const networkTokenBalances = SwapApiUtil.mapBalancesToSwapTokens(state17.tokenBalances);
    if (!networkTokenBalances) {
      return;
    }
    const networkToken = networkTokenBalances.find((token) => token.address === getActiveNetworkTokenAddress());
    if (!networkToken) {
      return;
    }
    state17.networkBalanceInUSD = networkToken ? NumberUtil.multiply(networkToken.quantity.numeric, networkToken.price).toString() : "0";
  },
  async sendNativeToken(params) {
    var _a2, _b, _c2;
    RouterController.pushTransactionStack({});
    const to4 = params.receiverAddress;
    const address = AccountController.state.address;
    const value = ConnectionController.parseUnits(params.sendTokenAmount.toString(), Number(params.decimals));
    const data = "0x";
    await ConnectionController.sendTransaction({
      chainNamespace: ConstantsUtil.CHAIN.EVM,
      to: to4,
      address,
      data,
      value: value ?? BigInt(0)
    });
    EventsController.sendEvent({
      type: "track",
      event: "SEND_SUCCESS",
      properties: {
        isSmartAccount: getPreferredAccountType("eip155") === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
        token: ((_a2 = SendController.state.token) == null ? void 0 : _a2.symbol) || "",
        amount: params.sendTokenAmount,
        network: ((_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.caipNetworkId) || ""
      }
    });
    (_c2 = ConnectionController._getClient()) == null ? void 0 : _c2.updateBalance("eip155");
    SendController.resetSend();
  },
  async sendERC20Token(params) {
    RouterController.pushTransactionStack({
      onSuccess() {
        RouterController.replace("Account");
      }
    });
    const amount = ConnectionController.parseUnits(params.sendTokenAmount.toString(), Number(params.decimals));
    if (AccountController.state.address && params.sendTokenAmount && params.receiverAddress && params.tokenAddress) {
      const tokenAddress = CoreHelperUtil.getPlainAddress(params.tokenAddress);
      if (!tokenAddress) {
        throw new Error("SendController:sendERC20Token - tokenAddress is required");
      }
      await ConnectionController.writeContract({
        fromAddress: AccountController.state.address,
        tokenAddress,
        args: [params.receiverAddress, amount ?? BigInt(0)],
        method: "transfer",
        abi: ContractUtil.getERC20Abi(tokenAddress),
        chainNamespace: ConstantsUtil.CHAIN.EVM
      });
      SendController.resetSend();
    }
  },
  async sendSolanaToken() {
    var _a2;
    if (!SendController.state.sendTokenAmount || !SendController.state.receiverAddress) {
      throw new Error("An amount and receiver address are required");
    }
    RouterController.pushTransactionStack({
      onSuccess() {
        RouterController.replace("Account");
      }
    });
    await ConnectionController.sendTransaction({
      chainNamespace: "solana",
      to: SendController.state.receiverAddress,
      value: SendController.state.sendTokenAmount
    });
    (_a2 = ConnectionController._getClient()) == null ? void 0 : _a2.updateBalance("solana");
    SendController.resetSend();
  },
  resetSend() {
    state17.token = void 0;
    state17.sendTokenAmount = void 0;
    state17.receiverAddress = void 0;
    state17.receiverProfileImageUrl = void 0;
    state17.receiverProfileName = void 0;
    state17.loading = false;
    state17.tokenBalances = [];
  }
};
var SendController = withErrorBoundary(controller11);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ChainController.js
var accountState = {
  currentTab: 0,
  tokenBalance: [],
  smartAccountDeployed: false,
  addressLabels: /* @__PURE__ */ new Map(),
  user: void 0,
  preferredAccountType: void 0
};
var networkState = {
  caipNetwork: void 0,
  supportsAllNetworks: true,
  smartAccountEnabledNetworks: []
};
var state18 = proxy({
  chains: proxyMap(),
  activeCaipAddress: void 0,
  activeChain: void 0,
  activeCaipNetwork: void 0,
  noAdapters: false,
  universalAdapter: {
    networkControllerClient: void 0,
    connectionControllerClient: void 0
  },
  isSwitchingNamespace: false
});
var controller12 = {
  state: state18,
  subscribe(callback) {
    return subscribe(state18, () => {
      callback(state18);
    });
  },
  subscribeKey(key, callback) {
    return subscribeKey(state18, key, callback);
  },
  subscribeChainProp(property, callback, chain2) {
    let prev = void 0;
    return subscribe(state18.chains, () => {
      var _a2;
      const activeChain = chain2 || state18.activeChain;
      if (activeChain) {
        const nextValue = (_a2 = state18.chains.get(activeChain)) == null ? void 0 : _a2[property];
        if (prev !== nextValue) {
          prev = nextValue;
          callback(nextValue);
        }
      }
    });
  },
  initialize(adapters, caipNetworks, clients) {
    const { chainId: activeChainId, namespace: activeNamespace } = StorageUtil.getActiveNetworkProps();
    const activeCaipNetwork = caipNetworks == null ? void 0 : caipNetworks.find((network) => network.id.toString() === (activeChainId == null ? void 0 : activeChainId.toString()));
    const defaultAdapter = adapters.find((adapter) => (adapter == null ? void 0 : adapter.namespace) === activeNamespace);
    const adapterToActivate = defaultAdapter || (adapters == null ? void 0 : adapters[0]);
    const namespacesFromAdapters = adapters.map((a3) => a3.namespace).filter((n5) => n5 !== void 0);
    const namespaces = OptionsController.state.enableEmbedded ? /* @__PURE__ */ new Set([...namespacesFromAdapters]) : /* @__PURE__ */ new Set([...(caipNetworks == null ? void 0 : caipNetworks.map((network) => network.chainNamespace)) ?? []]);
    if ((adapters == null ? void 0 : adapters.length) === 0 || !adapterToActivate) {
      state18.noAdapters = true;
    }
    if (!state18.noAdapters) {
      state18.activeChain = adapterToActivate == null ? void 0 : adapterToActivate.namespace;
      state18.activeCaipNetwork = activeCaipNetwork;
      ChainController.setChainNetworkData(adapterToActivate == null ? void 0 : adapterToActivate.namespace, {
        caipNetwork: activeCaipNetwork
      });
      if (state18.activeChain) {
        PublicStateController.set({ activeChain: adapterToActivate == null ? void 0 : adapterToActivate.namespace });
      }
    }
    namespaces.forEach((namespace) => {
      const namespaceNetworks = caipNetworks == null ? void 0 : caipNetworks.filter((network) => network.chainNamespace === namespace);
      const storedAccountTypes = StorageUtil.getPreferredAccountTypes() || {};
      const defaultTypes = { ...OptionsController.state.defaultAccountTypes, ...storedAccountTypes };
      ChainController.state.chains.set(namespace, {
        namespace,
        networkState: proxy({ ...networkState, caipNetwork: namespaceNetworks == null ? void 0 : namespaceNetworks[0] }),
        accountState: proxy({ ...accountState, preferredAccountType: defaultTypes[namespace] }),
        caipNetworks: namespaceNetworks ?? [],
        ...clients
      });
      ChainController.setRequestedCaipNetworks(namespaceNetworks ?? [], namespace);
    });
  },
  removeAdapter(namespace) {
    var _a2, _b;
    if (state18.activeChain === namespace) {
      const nextAdapter = Array.from(state18.chains.entries()).find(([chainNamespace]) => chainNamespace !== namespace);
      if (nextAdapter) {
        const caipNetwork = (_b = (_a2 = nextAdapter[1]) == null ? void 0 : _a2.caipNetworks) == null ? void 0 : _b[0];
        if (caipNetwork) {
          ChainController.setActiveCaipNetwork(caipNetwork);
        }
      }
    }
    state18.chains.delete(namespace);
  },
  addAdapter(adapter, { networkControllerClient, connectionControllerClient }, caipNetworks) {
    if (!adapter.namespace) {
      throw new Error("ChainController:addAdapter - adapter must have a namespace");
    }
    state18.chains.set(adapter.namespace, {
      namespace: adapter.namespace,
      networkState: { ...networkState, caipNetwork: caipNetworks[0] },
      accountState,
      caipNetworks,
      connectionControllerClient,
      networkControllerClient
    });
    ChainController.setRequestedCaipNetworks((caipNetworks == null ? void 0 : caipNetworks.filter((caipNetwork) => caipNetwork.chainNamespace === adapter.namespace)) ?? [], adapter.namespace);
  },
  addNetwork(network) {
    var _a2;
    const chainAdapter = state18.chains.get(network.chainNamespace);
    if (chainAdapter) {
      const newNetworks = [...chainAdapter.caipNetworks || []];
      if (!((_a2 = chainAdapter.caipNetworks) == null ? void 0 : _a2.find((caipNetwork) => caipNetwork.id === network.id))) {
        newNetworks.push(network);
      }
      state18.chains.set(network.chainNamespace, { ...chainAdapter, caipNetworks: newNetworks });
      ChainController.setRequestedCaipNetworks(newNetworks, network.chainNamespace);
      ConnectorController.filterByNamespace(network.chainNamespace, true);
    }
  },
  removeNetwork(namespace, networkId) {
    var _a2, _b, _c2;
    const chainAdapter = state18.chains.get(namespace);
    if (chainAdapter) {
      const isActiveNetwork = ((_a2 = state18.activeCaipNetwork) == null ? void 0 : _a2.id) === networkId;
      const newCaipNetworksOfAdapter = [
        ...((_b = chainAdapter.caipNetworks) == null ? void 0 : _b.filter((network) => network.id !== networkId)) || []
      ];
      if (isActiveNetwork && ((_c2 = chainAdapter == null ? void 0 : chainAdapter.caipNetworks) == null ? void 0 : _c2[0])) {
        ChainController.setActiveCaipNetwork(chainAdapter.caipNetworks[0]);
      }
      state18.chains.set(namespace, { ...chainAdapter, caipNetworks: newCaipNetworksOfAdapter });
      ChainController.setRequestedCaipNetworks(newCaipNetworksOfAdapter || [], namespace);
      if (newCaipNetworksOfAdapter.length === 0) {
        ConnectorController.filterByNamespace(namespace, false);
      }
    }
  },
  setAdapterNetworkState(chain2, props) {
    const chainAdapter = state18.chains.get(chain2);
    if (chainAdapter) {
      chainAdapter.networkState = {
        ...chainAdapter.networkState || networkState,
        ...props
      };
      state18.chains.set(chain2, chainAdapter);
    }
  },
  setChainAccountData(chain2, accountProps, _unknown = true) {
    if (!chain2) {
      throw new Error("Chain is required to update chain account data");
    }
    const chainAdapter = state18.chains.get(chain2);
    if (chainAdapter) {
      const newAccountState = { ...chainAdapter.accountState || accountState, ...accountProps };
      state18.chains.set(chain2, { ...chainAdapter, accountState: newAccountState });
      if (state18.chains.size === 1 || state18.activeChain === chain2) {
        if (accountProps.caipAddress) {
          state18.activeCaipAddress = accountProps.caipAddress;
        }
        AccountController.replaceState(newAccountState);
      }
    }
  },
  setChainNetworkData(chain2, networkProps) {
    if (!chain2) {
      return;
    }
    const chainAdapter = state18.chains.get(chain2);
    if (chainAdapter) {
      const newNetworkState = { ...chainAdapter.networkState || networkState, ...networkProps };
      state18.chains.set(chain2, { ...chainAdapter, networkState: newNetworkState });
    }
  },
  // eslint-disable-next-line max-params
  setAccountProp(prop, value, chain2, replaceState = true) {
    ChainController.setChainAccountData(chain2, { [prop]: value }, replaceState);
  },
  setActiveNamespace(chain2) {
    var _a2, _b;
    state18.activeChain = chain2;
    const newAdapter = chain2 ? state18.chains.get(chain2) : void 0;
    const caipNetwork = (_a2 = newAdapter == null ? void 0 : newAdapter.networkState) == null ? void 0 : _a2.caipNetwork;
    if ((caipNetwork == null ? void 0 : caipNetwork.id) && chain2) {
      state18.activeCaipAddress = (_b = newAdapter == null ? void 0 : newAdapter.accountState) == null ? void 0 : _b.caipAddress;
      state18.activeCaipNetwork = caipNetwork;
      ChainController.setChainNetworkData(chain2, { caipNetwork });
      StorageUtil.setActiveCaipNetworkId(caipNetwork == null ? void 0 : caipNetwork.caipNetworkId);
      PublicStateController.set({
        activeChain: chain2,
        selectedNetworkId: caipNetwork == null ? void 0 : caipNetwork.caipNetworkId
      });
    }
  },
  setActiveCaipNetwork(caipNetwork) {
    var _a2, _b, _c2;
    if (!caipNetwork) {
      return;
    }
    if (state18.activeChain !== caipNetwork.chainNamespace) {
      ChainController.setIsSwitchingNamespace(true);
    }
    const newAdapter = state18.chains.get(caipNetwork.chainNamespace);
    state18.activeChain = caipNetwork.chainNamespace;
    state18.activeCaipNetwork = caipNetwork;
    ChainController.setChainNetworkData(caipNetwork.chainNamespace, { caipNetwork });
    if ((_a2 = newAdapter == null ? void 0 : newAdapter.accountState) == null ? void 0 : _a2.address) {
      state18.activeCaipAddress = `${caipNetwork.chainNamespace}:${caipNetwork.id}:${(_b = newAdapter == null ? void 0 : newAdapter.accountState) == null ? void 0 : _b.address}`;
    } else {
      state18.activeCaipAddress = void 0;
    }
    ChainController.setAccountProp("caipAddress", state18.activeCaipAddress, caipNetwork.chainNamespace);
    if (newAdapter) {
      AccountController.replaceState(newAdapter.accountState);
    }
    SendController.resetSend();
    PublicStateController.set({
      activeChain: state18.activeChain,
      selectedNetworkId: (_c2 = state18.activeCaipNetwork) == null ? void 0 : _c2.caipNetworkId
    });
    StorageUtil.setActiveCaipNetworkId(caipNetwork.caipNetworkId);
    const isSupported = ChainController.checkIfSupportedNetwork(caipNetwork.chainNamespace);
    if (!isSupported && OptionsController.state.enableNetworkSwitch && !OptionsController.state.allowUnsupportedChain && !ConnectionController.state.wcBasic) {
      ChainController.showUnsupportedChainUI();
    }
  },
  addCaipNetwork(caipNetwork) {
    var _a2;
    if (!caipNetwork) {
      return;
    }
    const chain2 = state18.chains.get(caipNetwork.chainNamespace);
    if (chain2) {
      (_a2 = chain2 == null ? void 0 : chain2.caipNetworks) == null ? void 0 : _a2.push(caipNetwork);
    }
  },
  async switchActiveNamespace(namespace) {
    var _a2;
    if (!namespace) {
      return;
    }
    const isDifferentChain = namespace !== ChainController.state.activeChain;
    const caipNetworkOfNamespace = (_a2 = ChainController.getNetworkData(namespace)) == null ? void 0 : _a2.caipNetwork;
    const firstNetworkWithChain = ChainController.getCaipNetworkByNamespace(namespace, caipNetworkOfNamespace == null ? void 0 : caipNetworkOfNamespace.id);
    if (isDifferentChain && firstNetworkWithChain) {
      await ChainController.switchActiveNetwork(firstNetworkWithChain);
    }
  },
  async switchActiveNetwork(network) {
    var _a2;
    const namespace = ChainController.state.activeChain;
    if (!namespace) {
      throw new Error("ChainController:switchActiveNetwork - namespace is required");
    }
    const activeAdapter = ChainController.state.chains.get(namespace);
    const unsupportedNetwork = !((_a2 = activeAdapter == null ? void 0 : activeAdapter.caipNetworks) == null ? void 0 : _a2.some((caipNetwork) => {
      var _a3;
      return caipNetwork.id === ((_a3 = state18.activeCaipNetwork) == null ? void 0 : _a3.id);
    }));
    const networkControllerClient = ChainController.getNetworkControllerClient(network.chainNamespace);
    if (networkControllerClient) {
      try {
        await networkControllerClient.switchCaipNetwork(network);
        if (unsupportedNetwork) {
          ModalController.close();
        }
      } catch (error) {
        RouterController.goBack();
      }
      EventsController.sendEvent({
        type: "track",
        event: "SWITCH_NETWORK",
        properties: { network: network.caipNetworkId }
      });
    }
  },
  getNetworkControllerClient(chainNamespace) {
    const chain2 = chainNamespace || state18.activeChain;
    if (!chain2) {
      throw new Error("ChainController:getNetworkControllerClient - chain is required");
    }
    const chainAdapter = state18.chains.get(chain2);
    if (!chainAdapter) {
      throw new Error("Chain adapter not found");
    }
    if (!chainAdapter.networkControllerClient) {
      throw new Error("NetworkController client not set");
    }
    return chainAdapter.networkControllerClient;
  },
  getConnectionControllerClient(_chain) {
    const chain2 = _chain || state18.activeChain;
    if (!chain2) {
      throw new Error("Chain is required to get connection controller client");
    }
    const chainAdapter = state18.chains.get(chain2);
    if (!(chainAdapter == null ? void 0 : chainAdapter.connectionControllerClient)) {
      throw new Error("ConnectionController client not set");
    }
    return chainAdapter.connectionControllerClient;
  },
  getNetworkProp(key, namespace) {
    var _a2;
    const chainNetworkState = (_a2 = state18.chains.get(namespace)) == null ? void 0 : _a2.networkState;
    if (!chainNetworkState) {
      return void 0;
    }
    return chainNetworkState[key];
  },
  getRequestedCaipNetworks(chainToFilter) {
    const adapter = state18.chains.get(chainToFilter);
    const { approvedCaipNetworkIds = [], requestedCaipNetworks = [] } = (adapter == null ? void 0 : adapter.networkState) || {};
    const sortedNetworks = CoreHelperUtil.sortRequestedNetworks(approvedCaipNetworkIds, requestedCaipNetworks);
    const filteredNetworks = sortedNetworks.filter((network) => network == null ? void 0 : network.id);
    return filteredNetworks;
  },
  getAllRequestedCaipNetworks() {
    const requestedCaipNetworks = [];
    state18.chains.forEach((chainAdapter) => {
      if (!chainAdapter.namespace) {
        throw new Error("ChainController:getAllRequestedCaipNetworks - chainAdapter must have a namespace");
      }
      const caipNetworks = ChainController.getRequestedCaipNetworks(chainAdapter.namespace);
      requestedCaipNetworks.push(...caipNetworks);
    });
    return requestedCaipNetworks;
  },
  setRequestedCaipNetworks(caipNetworks, chain2) {
    ChainController.setAdapterNetworkState(chain2, { requestedCaipNetworks: caipNetworks });
    const allRequestedCaipNetworks = ChainController.getAllRequestedCaipNetworks();
    const namespaces = allRequestedCaipNetworks.map((network) => network.chainNamespace);
    const uniqueNamespaces = Array.from(new Set(namespaces));
    ConnectorController.filterByNamespaces(uniqueNamespaces);
  },
  getAllApprovedCaipNetworkIds() {
    const approvedCaipNetworkIds = [];
    state18.chains.forEach((chainAdapter) => {
      if (!chainAdapter.namespace) {
        throw new Error("ChainController:getAllApprovedCaipNetworkIds - chainAdapter must have a namespace");
      }
      const approvedIds = ChainController.getApprovedCaipNetworkIds(chainAdapter.namespace);
      approvedCaipNetworkIds.push(...approvedIds);
    });
    return approvedCaipNetworkIds;
  },
  getActiveCaipNetwork(chainNamespace) {
    var _a2, _b;
    if (chainNamespace) {
      return (_b = (_a2 = state18.chains.get(chainNamespace)) == null ? void 0 : _a2.networkState) == null ? void 0 : _b.caipNetwork;
    }
    return state18.activeCaipNetwork;
  },
  getActiveCaipAddress() {
    return state18.activeCaipAddress;
  },
  getApprovedCaipNetworkIds(namespace) {
    var _a2;
    const adapter = state18.chains.get(namespace);
    const approvedCaipNetworkIds = ((_a2 = adapter == null ? void 0 : adapter.networkState) == null ? void 0 : _a2.approvedCaipNetworkIds) || [];
    return approvedCaipNetworkIds;
  },
  async setApprovedCaipNetworksData(namespace) {
    const networkControllerClient = ChainController.getNetworkControllerClient();
    const data = await (networkControllerClient == null ? void 0 : networkControllerClient.getApprovedCaipNetworksData());
    ChainController.setAdapterNetworkState(namespace, {
      approvedCaipNetworkIds: data == null ? void 0 : data.approvedCaipNetworkIds,
      supportsAllNetworks: data == null ? void 0 : data.supportsAllNetworks
    });
  },
  checkIfSupportedNetwork(namespace, caipNetworkId) {
    var _a2;
    const activeCaipNetworkId = caipNetworkId || ((_a2 = state18.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    const requestedCaipNetworks = ChainController.getRequestedCaipNetworks(namespace);
    if (!requestedCaipNetworks.length) {
      return true;
    }
    return requestedCaipNetworks == null ? void 0 : requestedCaipNetworks.some((network) => network.caipNetworkId === activeCaipNetworkId);
  },
  checkIfSupportedChainId(chainId) {
    if (!state18.activeChain) {
      return true;
    }
    const requestedCaipNetworks = ChainController.getRequestedCaipNetworks(state18.activeChain);
    return requestedCaipNetworks == null ? void 0 : requestedCaipNetworks.some((network) => network.id === chainId);
  },
  // Smart Account Network Handlers
  setSmartAccountEnabledNetworks(smartAccountEnabledNetworks, chain2) {
    ChainController.setAdapterNetworkState(chain2, { smartAccountEnabledNetworks });
  },
  checkIfSmartAccountEnabled() {
    var _a2;
    const networkId = NetworkUtil.caipNetworkIdToNumber((_a2 = state18.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId);
    const activeChain = state18.activeChain;
    if (!activeChain || !networkId) {
      return false;
    }
    const smartAccountEnabledNetworks = ChainController.getNetworkProp("smartAccountEnabledNetworks", activeChain);
    return Boolean(smartAccountEnabledNetworks == null ? void 0 : smartAccountEnabledNetworks.includes(Number(networkId)));
  },
  showUnsupportedChainUI() {
    ModalController.open({ view: "UnsupportedChain" });
  },
  checkIfNamesSupported() {
    const activeCaipNetwork = state18.activeCaipNetwork;
    return Boolean((activeCaipNetwork == null ? void 0 : activeCaipNetwork.chainNamespace) && ConstantsUtil2.NAMES_SUPPORTED_CHAIN_NAMESPACES.includes(activeCaipNetwork.chainNamespace));
  },
  resetNetwork(namespace) {
    ChainController.setAdapterNetworkState(namespace, {
      approvedCaipNetworkIds: void 0,
      supportsAllNetworks: true
    });
  },
  resetAccount(chain2) {
    var _a2, _b;
    const chainToWrite = chain2;
    if (!chainToWrite) {
      throw new Error("Chain is required to set account prop");
    }
    const currentAccountType = (_b = (_a2 = ChainController.state.chains.get(chainToWrite)) == null ? void 0 : _a2.accountState) == null ? void 0 : _b.preferredAccountType;
    const optionsAccountType = OptionsController.state.defaultAccountTypes[chainToWrite];
    state18.activeCaipAddress = void 0;
    ChainController.setChainAccountData(chainToWrite, {
      smartAccountDeployed: false,
      currentTab: 0,
      caipAddress: void 0,
      address: void 0,
      balance: void 0,
      balanceSymbol: void 0,
      profileName: void 0,
      profileImage: void 0,
      addressExplorerUrl: void 0,
      tokenBalance: [],
      connectedWalletInfo: void 0,
      preferredAccountType: optionsAccountType || currentAccountType,
      socialProvider: void 0,
      socialWindow: void 0,
      farcasterUrl: void 0,
      user: void 0,
      status: "disconnected"
    });
    ConnectorController.removeConnectorId(chainToWrite);
  },
  setIsSwitchingNamespace(isSwitchingNamespace) {
    state18.isSwitchingNamespace = isSwitchingNamespace;
  },
  getFirstCaipNetworkSupportsAuthConnector() {
    var _a2, _b;
    const availableChains = [];
    let firstCaipNetwork = void 0;
    state18.chains.forEach((chain2) => {
      if (ConstantsUtil.AUTH_CONNECTOR_SUPPORTED_CHAINS.find((ns2) => ns2 === chain2.namespace)) {
        if (chain2.namespace) {
          availableChains.push(chain2.namespace);
        }
      }
    });
    if (availableChains.length > 0) {
      const firstAvailableChain = availableChains[0];
      firstCaipNetwork = firstAvailableChain ? (_b = (_a2 = state18.chains.get(firstAvailableChain)) == null ? void 0 : _a2.caipNetworks) == null ? void 0 : _b[0] : void 0;
      return firstCaipNetwork;
    }
    return void 0;
  },
  getAccountData(chainNamespace) {
    var _a2;
    const namespace = chainNamespace || state18.activeChain;
    if (!namespace) {
      return void 0;
    }
    return (_a2 = ChainController.state.chains.get(namespace)) == null ? void 0 : _a2.accountState;
  },
  getNetworkData(chainNamespace) {
    var _a2;
    const namespace = chainNamespace || state18.activeChain;
    if (!namespace) {
      return void 0;
    }
    return (_a2 = ChainController.state.chains.get(namespace)) == null ? void 0 : _a2.networkState;
  },
  getCaipNetworkByNamespace(chainNamespace, chainId) {
    var _a2, _b, _c2;
    if (!chainNamespace) {
      return void 0;
    }
    const chain2 = ChainController.state.chains.get(chainNamespace);
    const byChainId = (_a2 = chain2 == null ? void 0 : chain2.caipNetworks) == null ? void 0 : _a2.find((network) => network.id === chainId);
    if (byChainId) {
      return byChainId;
    }
    return ((_b = chain2 == null ? void 0 : chain2.networkState) == null ? void 0 : _b.caipNetwork) || ((_c2 = chain2 == null ? void 0 : chain2.caipNetworks) == null ? void 0 : _c2[0]);
  },
  /**
   * Get the requested CaipNetwork IDs for a given namespace. If namespace is not provided, all requested CaipNetwork IDs will be returned
   * @param namespace - The namespace to get the requested CaipNetwork IDs for
   * @returns The requested CaipNetwork IDs
   */
  getRequestedCaipNetworkIds() {
    const namespace = ConnectorController.state.filterByNamespace;
    const chains = namespace ? [state18.chains.get(namespace)] : Array.from(state18.chains.values());
    return chains.flatMap((chain2) => (chain2 == null ? void 0 : chain2.caipNetworks) || []).map((caipNetwork) => caipNetwork.caipNetworkId);
  },
  getCaipNetworks(namespace) {
    if (namespace) {
      return ChainController.getRequestedCaipNetworks(namespace);
    }
    return ChainController.getAllRequestedCaipNetworks();
  },
  setLastConnectedSIWECaipNetwork(network) {
    state18.lastConnectedSIWECaipNetwork = network;
  },
  getLastConnectedSIWECaipNetwork() {
    return state18.lastConnectedSIWECaipNetwork;
  }
};
var ChainController = withErrorBoundary(controller12);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ApiController.js
var baseUrl3 = CoreHelperUtil.getApiUrl();
var api3 = new FetchUtil({
  baseUrl: baseUrl3,
  clientId: null
});
var entries = 40;
var recommendedEntries = 4;
var imageCountToFetch = 20;
var state19 = proxy({
  promises: {},
  page: 1,
  count: 0,
  featured: [],
  allFeatured: [],
  recommended: [],
  allRecommended: [],
  wallets: [],
  filteredWallets: [],
  search: [],
  isAnalyticsEnabled: false,
  excludedWallets: [],
  isFetchingRecommendedWallets: false
});
var ApiController = {
  state: state19,
  subscribeKey(key, callback) {
    return subscribeKey(state19, key, callback);
  },
  _getSdkProperties() {
    const { projectId, sdkType, sdkVersion } = OptionsController.state;
    return {
      projectId,
      st: sdkType || "appkit",
      sv: sdkVersion || "html-wagmi-4.2.2"
    };
  },
  _filterOutExtensions(wallets) {
    if (OptionsController.state.isUniversalProvider) {
      return wallets.filter((w5) => Boolean(w5.mobile_link || w5.desktop_link || w5.webapp_link));
    }
    return wallets;
  },
  async _fetchWalletImage(imageId) {
    const imageUrl = `${api3.baseUrl}/getWalletImage/${imageId}`;
    const blob = await api3.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setWalletImage(imageId, URL.createObjectURL(blob));
  },
  async _fetchNetworkImage(imageId) {
    const imageUrl = `${api3.baseUrl}/public/getAssetImage/${imageId}`;
    const blob = await api3.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setNetworkImage(imageId, URL.createObjectURL(blob));
  },
  async _fetchConnectorImage(imageId) {
    const imageUrl = `${api3.baseUrl}/public/getAssetImage/${imageId}`;
    const blob = await api3.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setConnectorImage(imageId, URL.createObjectURL(blob));
  },
  async _fetchCurrencyImage(countryCode) {
    const imageUrl = `${api3.baseUrl}/public/getCurrencyImage/${countryCode}`;
    const blob = await api3.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setCurrencyImage(countryCode, URL.createObjectURL(blob));
  },
  async _fetchTokenImage(symbol) {
    const imageUrl = `${api3.baseUrl}/public/getTokenImage/${symbol}`;
    const blob = await api3.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setTokenImage(symbol, URL.createObjectURL(blob));
  },
  _filterWalletsByPlatform(wallets) {
    const filteredWallets = CoreHelperUtil.isMobile() ? wallets == null ? void 0 : wallets.filter((w5) => {
      if (w5.mobile_link) {
        return true;
      }
      if (w5.id === CUSTOM_DEEPLINK_WALLETS.COINBASE.id) {
        return true;
      }
      const isSolana = ChainController.state.activeChain === "solana";
      return isSolana && (w5.id === CUSTOM_DEEPLINK_WALLETS.SOLFLARE.id || w5.id === CUSTOM_DEEPLINK_WALLETS.PHANTOM.id);
    }) : wallets;
    return filteredWallets;
  },
  async fetchProjectConfig() {
    const response = await api3.get({
      path: "/appkit/v1/config",
      params: ApiController._getSdkProperties()
    });
    return response.features;
  },
  async fetchAllowedOrigins() {
    try {
      const { allowedOrigins } = await api3.get({
        path: "/projects/v1/origins",
        params: ApiController._getSdkProperties()
      });
      return allowedOrigins;
    } catch (error) {
      if (error instanceof Error && error.cause instanceof Response) {
        const status = error.cause.status;
        if (status === ConstantsUtil.HTTP_STATUS_CODES.TOO_MANY_REQUESTS) {
          throw new Error("RATE_LIMITED", { cause: error });
        }
        if (status >= ConstantsUtil.HTTP_STATUS_CODES.SERVER_ERROR && status < 600) {
          throw new Error("SERVER_ERROR", { cause: error });
        }
        return [];
      }
      return [];
    }
  },
  async fetchNetworkImages() {
    const requestedCaipNetworks = ChainController.getAllRequestedCaipNetworks();
    const ids = requestedCaipNetworks == null ? void 0 : requestedCaipNetworks.map(({ assets }) => assets == null ? void 0 : assets.imageId).filter(Boolean).filter((imageId) => !AssetUtil.getNetworkImageById(imageId));
    if (ids) {
      await Promise.allSettled(ids.map((id) => ApiController._fetchNetworkImage(id)));
    }
  },
  async fetchConnectorImages() {
    const { connectors } = ConnectorController.state;
    const ids = connectors.map(({ imageId }) => imageId).filter(Boolean);
    await Promise.allSettled(ids.map((id) => ApiController._fetchConnectorImage(id)));
  },
  async fetchCurrencyImages(currencies = []) {
    await Promise.allSettled(currencies.map((currency) => ApiController._fetchCurrencyImage(currency)));
  },
  async fetchTokenImages(tokens = []) {
    await Promise.allSettled(tokens.map((token) => ApiController._fetchTokenImage(token)));
  },
  async fetchWallets(params) {
    var _a2;
    const exclude = params.exclude ?? [];
    const sdkProperties = ApiController._getSdkProperties();
    if (sdkProperties.sv.startsWith("html-core-")) {
      exclude.push(...Object.values(CUSTOM_DEEPLINK_WALLETS).map((w5) => w5.id));
    }
    const wallets = await api3.get({
      path: "/getWallets",
      params: {
        ...ApiController._getSdkProperties(),
        ...params,
        page: String(params.page),
        entries: String(params.entries),
        include: (_a2 = params.include) == null ? void 0 : _a2.join(","),
        exclude: exclude.join(",")
      }
    });
    const filteredWallets = ApiController._filterWalletsByPlatform(wallets == null ? void 0 : wallets.data);
    return {
      data: filteredWallets || [],
      // Keep original count for display on main page
      count: wallets == null ? void 0 : wallets.count
    };
  },
  async fetchFeaturedWallets() {
    const { featuredWalletIds } = OptionsController.state;
    if (featuredWalletIds == null ? void 0 : featuredWalletIds.length) {
      const params = {
        ...ApiController._getSdkProperties(),
        page: 1,
        entries: (featuredWalletIds == null ? void 0 : featuredWalletIds.length) ?? recommendedEntries,
        include: featuredWalletIds
      };
      const { data } = await ApiController.fetchWallets(params);
      const sortedData = [...data].sort((a3, b5) => featuredWalletIds.indexOf(a3.id) - featuredWalletIds.indexOf(b5.id));
      const images = sortedData.map((d5) => d5.image_id).filter(Boolean);
      await Promise.allSettled(images.map((id) => ApiController._fetchWalletImage(id)));
      state19.featured = sortedData;
      state19.allFeatured = sortedData;
    }
  },
  async fetchRecommendedWallets() {
    try {
      state19.isFetchingRecommendedWallets = true;
      const { includeWalletIds, excludeWalletIds, featuredWalletIds } = OptionsController.state;
      const exclude = [...excludeWalletIds ?? [], ...featuredWalletIds ?? []].filter(Boolean);
      const chains = ChainController.getRequestedCaipNetworkIds().join(",");
      const params = {
        page: 1,
        entries: recommendedEntries,
        include: includeWalletIds,
        exclude,
        chains
      };
      const { data, count } = await ApiController.fetchWallets(params);
      const recent = StorageUtil.getRecentWallets();
      const recommendedImages = data.map((d5) => d5.image_id).filter(Boolean);
      const recentImages = recent.map((r3) => r3.image_id).filter(Boolean);
      await Promise.allSettled([...recommendedImages, ...recentImages].map((id) => ApiController._fetchWalletImage(id)));
      state19.recommended = data;
      state19.allRecommended = data;
      state19.count = count ?? 0;
    } catch {
    } finally {
      state19.isFetchingRecommendedWallets = false;
    }
  },
  async fetchWalletsByPage({ page }) {
    const { includeWalletIds, excludeWalletIds, featuredWalletIds } = OptionsController.state;
    const chains = ChainController.getRequestedCaipNetworkIds().join(",");
    const exclude = [
      ...state19.recommended.map(({ id }) => id),
      ...excludeWalletIds ?? [],
      ...featuredWalletIds ?? []
    ].filter(Boolean);
    const params = {
      page,
      entries,
      include: includeWalletIds,
      exclude,
      chains
    };
    const { data, count } = await ApiController.fetchWallets(params);
    const images = data.slice(0, imageCountToFetch).map((w5) => w5.image_id).filter(Boolean);
    await Promise.allSettled(images.map((id) => ApiController._fetchWalletImage(id)));
    state19.wallets = CoreHelperUtil.uniqueBy([...state19.wallets, ...ApiController._filterOutExtensions(data)], "id").filter((w5) => {
      var _a2;
      return (_a2 = w5.chains) == null ? void 0 : _a2.some((chain2) => chains.includes(chain2));
    });
    state19.count = count > state19.count ? count : state19.count;
    state19.page = page;
  },
  async initializeExcludedWallets({ ids }) {
    const params = {
      page: 1,
      entries: ids.length,
      include: ids
    };
    const { data } = await ApiController.fetchWallets(params);
    if (data) {
      data.forEach((wallet) => {
        state19.excludedWallets.push({ rdns: wallet.rdns, name: wallet.name });
      });
    }
  },
  async searchWallet({ search, badge }) {
    const { includeWalletIds, excludeWalletIds } = OptionsController.state;
    const chains = ChainController.getRequestedCaipNetworkIds().join(",");
    state19.search = [];
    const params = {
      page: 1,
      entries: 100,
      search: search == null ? void 0 : search.trim(),
      badge_type: badge,
      include: includeWalletIds,
      exclude: excludeWalletIds,
      chains
    };
    const { data } = await ApiController.fetchWallets(params);
    EventsController.sendEvent({
      type: "track",
      event: "SEARCH_WALLET",
      properties: { badge: badge ?? "", search: search ?? "" }
    });
    const images = data.map((w5) => w5.image_id).filter(Boolean);
    await Promise.allSettled([
      ...images.map((id) => ApiController._fetchWalletImage(id)),
      CoreHelperUtil.wait(300)
    ]);
    state19.search = ApiController._filterOutExtensions(data);
  },
  initPromise(key, fetchFn) {
    const existingPromise = state19.promises[key];
    if (existingPromise) {
      return existingPromise;
    }
    return state19.promises[key] = fetchFn();
  },
  prefetch({ fetchConnectorImages = true, fetchFeaturedWallets = true, fetchRecommendedWallets = true, fetchNetworkImages = true } = {}) {
    const promises = [
      fetchConnectorImages && ApiController.initPromise("connectorImages", ApiController.fetchConnectorImages),
      fetchFeaturedWallets && ApiController.initPromise("featuredWallets", ApiController.fetchFeaturedWallets),
      fetchRecommendedWallets && ApiController.initPromise("recommendedWallets", ApiController.fetchRecommendedWallets),
      fetchNetworkImages && ApiController.initPromise("networkImages", ApiController.fetchNetworkImages)
    ].filter(Boolean);
    return Promise.allSettled(promises);
  },
  prefetchAnalyticsConfig() {
    var _a2;
    if ((_a2 = OptionsController.state.features) == null ? void 0 : _a2.analytics) {
      ApiController.fetchAnalyticsConfig();
    }
  },
  async fetchAnalyticsConfig() {
    try {
      const { isAnalyticsEnabled } = await api3.get({
        path: "/getAnalyticsConfig",
        params: ApiController._getSdkProperties()
      });
      OptionsController.setFeatures({ analytics: isAnalyticsEnabled });
    } catch (error) {
      OptionsController.setFeatures({ analytics: false });
    }
  },
  filterByNamespaces(namespaces) {
    if (!(namespaces == null ? void 0 : namespaces.length)) {
      state19.featured = state19.allFeatured;
      state19.recommended = state19.allRecommended;
      return;
    }
    const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(",");
    state19.featured = state19.allFeatured.filter((wallet) => {
      var _a2;
      return (_a2 = wallet.chains) == null ? void 0 : _a2.some((chain2) => caipNetworkIds.includes(chain2));
    });
    state19.recommended = state19.allRecommended.filter((wallet) => {
      var _a2;
      return (_a2 = wallet.chains) == null ? void 0 : _a2.some((chain2) => caipNetworkIds.includes(chain2));
    });
    state19.filteredWallets = state19.wallets.filter((wallet) => {
      var _a2;
      return (_a2 = wallet.chains) == null ? void 0 : _a2.some((chain2) => caipNetworkIds.includes(chain2));
    });
  },
  clearFilterByNamespaces() {
    state19.filteredWallets = [];
  },
  setFilterByNamespace(namespace) {
    if (!namespace) {
      state19.featured = state19.allFeatured;
      state19.recommended = state19.allRecommended;
      return;
    }
    const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(",");
    state19.featured = state19.allFeatured.filter((wallet) => {
      var _a2;
      return (_a2 = wallet.chains) == null ? void 0 : _a2.some((chain2) => caipNetworkIds.includes(chain2));
    });
    state19.recommended = state19.allRecommended.filter((wallet) => {
      var _a2;
      return (_a2 = wallet.chains) == null ? void 0 : _a2.some((chain2) => caipNetworkIds.includes(chain2));
    });
    state19.filteredWallets = state19.wallets.filter((wallet) => {
      var _a2;
      return (_a2 = wallet.chains) == null ? void 0 : _a2.some((chain2) => caipNetworkIds.includes(chain2));
    });
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/SIWXUtil.js
var addEmbeddedWalletSessionPromise = null;
var SIWXUtil = {
  getSIWX() {
    return OptionsController.state.siwx;
  },
  async initializeIfEnabled(caipAddress = ChainController.getActiveCaipAddress()) {
    var _a2, _b, _c2;
    const siwx = OptionsController.state.siwx;
    if (!(siwx && caipAddress)) {
      return;
    }
    const [namespace, chainId, address] = caipAddress.split(":");
    if (!ChainController.checkIfSupportedNetwork(namespace, `${namespace}:${chainId}`)) {
      return;
    }
    try {
      if ((_a2 = OptionsController.state.remoteFeatures) == null ? void 0 : _a2.emailCapture) {
        const user = (_b = ChainController.getAccountData(namespace)) == null ? void 0 : _b.user;
        await ModalController.open({
          view: "DataCapture",
          data: {
            email: (user == null ? void 0 : user.email) ?? void 0
          }
        });
        return;
      }
      if (addEmbeddedWalletSessionPromise) {
        await addEmbeddedWalletSessionPromise;
      }
      const sessions = await siwx.getSessions(`${namespace}:${chainId}`, address);
      if (sessions.length) {
        return;
      }
      await ModalController.open({
        view: "SIWXSignMessage"
      });
    } catch (error) {
      console.error("SIWXUtil:initializeIfEnabled", error);
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_ERROR",
        properties: this.getSIWXEventProperties()
      });
      await ((_c2 = ConnectionController._getClient()) == null ? void 0 : _c2.disconnect().catch(console.error));
      RouterController.reset("Connect");
      SnackController.showError("A problem occurred while trying initialize authentication");
    }
  },
  async requestSignMessage() {
    const siwx = OptionsController.state.siwx;
    const address = CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress());
    const network = getActiveCaipNetwork();
    const client = ConnectionController._getClient();
    if (!siwx) {
      throw new Error("SIWX is not enabled");
    }
    if (!address) {
      throw new Error("No ActiveCaipAddress found");
    }
    if (!network) {
      throw new Error("No ActiveCaipNetwork or client found");
    }
    if (!client) {
      throw new Error("No ConnectionController client found");
    }
    try {
      const siwxMessage = await siwx.createMessage({
        chainId: network.caipNetworkId,
        accountAddress: address
      });
      const message = siwxMessage.toString();
      const connectorId = ConnectorController.getConnectorId(network.chainNamespace);
      if (connectorId === ConstantsUtil.CONNECTOR_ID.AUTH) {
        RouterController.pushTransactionStack({});
      }
      const signature = await client.signMessage(message);
      await siwx.addSession({
        data: siwxMessage,
        message,
        signature
      });
      ChainController.setLastConnectedSIWECaipNetwork(network);
      ModalController.close();
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_SUCCESS",
        properties: this.getSIWXEventProperties()
      });
    } catch (error) {
      const properties = this.getSIWXEventProperties();
      if (!ModalController.state.open || RouterController.state.view === "ApproveTransaction") {
        await ModalController.open({
          view: "SIWXSignMessage"
        });
      }
      SnackController.showError("Error signing message");
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_ERROR",
        properties
      });
      console.error("SWIXUtil:requestSignMessage", error);
    }
  },
  async cancelSignMessage() {
    var _a2;
    try {
      const siwx = this.getSIWX();
      const isRequired = (_a2 = siwx == null ? void 0 : siwx.getRequired) == null ? void 0 : _a2.call(siwx);
      if (isRequired) {
        const lastNetwork = ChainController.getLastConnectedSIWECaipNetwork();
        if (lastNetwork) {
          const sessions = await (siwx == null ? void 0 : siwx.getSessions(lastNetwork == null ? void 0 : lastNetwork.caipNetworkId, CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress()) || ""));
          if (sessions && sessions.length > 0) {
            await ChainController.switchActiveNetwork(lastNetwork);
          } else {
            await ConnectionController.disconnect();
          }
        } else {
          await ConnectionController.disconnect();
        }
      } else {
        ModalController.close();
      }
      ModalController.close();
      EventsController.sendEvent({
        event: "CLICK_CANCEL_SIWX",
        type: "track",
        properties: this.getSIWXEventProperties()
      });
    } catch (error) {
      console.error("SIWXUtil:cancelSignMessage", error);
    }
  },
  async getAllSessions() {
    const siwx = this.getSIWX();
    const allRequestedCaipNetworks = ChainController.getAllRequestedCaipNetworks();
    const sessions = [];
    await Promise.all(allRequestedCaipNetworks.map(async (caipNetwork) => {
      const session = await (siwx == null ? void 0 : siwx.getSessions(caipNetwork.caipNetworkId, CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress()) || ""));
      if (session) {
        sessions.push(...session);
      }
    }));
    return sessions;
  },
  async getSessions(args) {
    const siwx = OptionsController.state.siwx;
    let address = args == null ? void 0 : args.address;
    if (!address) {
      const activeCaipAddress = ChainController.getActiveCaipAddress();
      address = CoreHelperUtil.getPlainAddress(activeCaipAddress);
    }
    let network = args == null ? void 0 : args.caipNetworkId;
    if (!network) {
      const activeCaipNetwork = ChainController.getActiveCaipNetwork();
      network = activeCaipNetwork == null ? void 0 : activeCaipNetwork.caipNetworkId;
    }
    if (!(siwx && address && network)) {
      return [];
    }
    return siwx.getSessions(network, address);
  },
  async isSIWXCloseDisabled() {
    var _a2;
    const siwx = this.getSIWX();
    if (siwx) {
      const isApproveSignScreen = RouterController.state.view === "ApproveTransaction";
      const isSiwxSignMessage = RouterController.state.view === "SIWXSignMessage";
      if (isApproveSignScreen || isSiwxSignMessage) {
        return ((_a2 = siwx.getRequired) == null ? void 0 : _a2.call(siwx)) && (await this.getSessions()).length === 0;
      }
    }
    return false;
  },
  async authConnectorAuthenticate({ authConnector, chainId, socialUri, preferredAccountType, chainNamespace }) {
    var _a2;
    const siwx = SIWXUtil.getSIWX();
    if (!siwx || !chainNamespace.includes(ConstantsUtil.CHAIN.EVM) || // Request to input email and sign message when email capture is enabled
    ((_a2 = OptionsController.state.remoteFeatures) == null ? void 0 : _a2.emailCapture)) {
      const result2 = await authConnector.connect({
        chainId,
        socialUri,
        preferredAccountType
      });
      return {
        address: result2.address,
        chainId: result2.chainId,
        accounts: result2.accounts
      };
    }
    const caipNetwork = `${chainNamespace}:${chainId}`;
    const siwxMessage = await siwx.createMessage({
      chainId: caipNetwork,
      accountAddress: "<<AccountAddress>>"
    });
    const siwxMessageData = {
      accountAddress: siwxMessage.accountAddress,
      chainId: siwxMessage.chainId,
      domain: siwxMessage.domain,
      uri: siwxMessage.uri,
      version: siwxMessage.version,
      nonce: siwxMessage.nonce,
      notBefore: siwxMessage.notBefore,
      statement: siwxMessage.statement,
      resources: siwxMessage.resources,
      requestId: siwxMessage.requestId,
      issuedAt: siwxMessage.issuedAt,
      expirationTime: siwxMessage.expirationTime,
      serializedMessage: siwxMessage.toString()
    };
    const result = await authConnector.connect({
      chainId,
      socialUri,
      siwxMessage: siwxMessageData,
      preferredAccountType
    });
    siwxMessageData.accountAddress = result.address;
    siwxMessageData.serializedMessage = result.message || "";
    if (result.signature && result.message) {
      const promise = SIWXUtil.addEmbeddedWalletSession(siwxMessageData, result.message, result.signature);
      await promise;
    }
    return {
      address: result.address,
      chainId: result.chainId,
      accounts: result.accounts
    };
  },
  async addEmbeddedWalletSession(siwxMessageData, message, signature) {
    if (addEmbeddedWalletSessionPromise) {
      return addEmbeddedWalletSessionPromise;
    }
    const siwx = SIWXUtil.getSIWX();
    if (!siwx) {
      return Promise.resolve();
    }
    addEmbeddedWalletSessionPromise = siwx.addSession({
      data: siwxMessageData,
      message,
      signature
    }).finally(() => {
      addEmbeddedWalletSessionPromise = null;
    });
    return addEmbeddedWalletSessionPromise;
  },
  async universalProviderAuthenticate({ universalProvider, chains, methods }) {
    var _a2, _b, _c2;
    const siwx = SIWXUtil.getSIWX();
    const namespaces = new Set(chains.map((chain2) => chain2.split(":")[0]));
    if (!siwx || namespaces.size !== 1 || !namespaces.has("eip155")) {
      return false;
    }
    const siwxMessage = await siwx.createMessage({
      chainId: ((_a2 = getActiveCaipNetwork()) == null ? void 0 : _a2.caipNetworkId) || "",
      accountAddress: ""
    });
    const result = await universalProvider.authenticate({
      nonce: siwxMessage.nonce,
      domain: siwxMessage.domain,
      uri: siwxMessage.uri,
      exp: siwxMessage.expirationTime,
      iat: siwxMessage.issuedAt,
      nbf: siwxMessage.notBefore,
      requestId: siwxMessage.requestId,
      version: siwxMessage.version,
      resources: siwxMessage.resources,
      statement: siwxMessage.statement,
      chainId: siwxMessage.chainId,
      methods,
      // The first chainId is what is used for universal provider to build the message
      chains: [siwxMessage.chainId, ...chains.filter((chain2) => chain2 !== siwxMessage.chainId)]
    });
    SnackController.showLoading("Authenticating...", { autoClose: false });
    AccountController.setConnectedWalletInfo({
      ...result.session.peer.metadata,
      name: result.session.peer.metadata.name,
      icon: (_b = result.session.peer.metadata.icons) == null ? void 0 : _b[0],
      type: "WALLET_CONNECT"
    }, Array.from(namespaces)[0]);
    if ((_c2 = result == null ? void 0 : result.auths) == null ? void 0 : _c2.length) {
      const sessions = result.auths.map((cacao) => {
        const message = universalProvider.client.formatAuthMessage({
          request: cacao.p,
          iss: cacao.p.iss
        });
        return {
          data: {
            ...cacao.p,
            accountAddress: cacao.p.iss.split(":").slice(-1).join(""),
            chainId: cacao.p.iss.split(":").slice(2, 4).join(":"),
            uri: cacao.p.aud,
            version: cacao.p.version || siwxMessage.version,
            expirationTime: cacao.p.exp,
            issuedAt: cacao.p.iat,
            notBefore: cacao.p.nbf
          },
          message,
          signature: cacao.s.s,
          cacao
        };
      });
      try {
        await siwx.setSessions(sessions);
        EventsController.sendEvent({
          type: "track",
          event: "SIWX_AUTH_SUCCESS",
          properties: SIWXUtil.getSIWXEventProperties()
        });
      } catch (error) {
        console.error("SIWX:universalProviderAuth - failed to set sessions", error);
        EventsController.sendEvent({
          type: "track",
          event: "SIWX_AUTH_ERROR",
          properties: SIWXUtil.getSIWXEventProperties()
        });
        await universalProvider.disconnect().catch(console.error);
        throw error;
      } finally {
        SnackController.hide();
      }
    }
    return true;
  },
  getSIWXEventProperties() {
    var _a2;
    const namespace = ChainController.state.activeChain;
    if (!namespace) {
      throw new Error("SIWXUtil:getSIWXEventProperties - namespace is required");
    }
    return {
      network: ((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId) || "",
      isSmartAccount: getPreferredAccountType(namespace) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
    };
  },
  async clearSessions() {
    const siwx = this.getSIWX();
    if (siwx) {
      await siwx.setSessions([]);
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ModalUtil.js
var ModalUtil = {
  isUnsupportedChainView() {
    return RouterController.state.view === "UnsupportedChain" || RouterController.state.view === "SwitchNetwork" && RouterController.state.history.includes("UnsupportedChain");
  },
  async safeClose() {
    if (this.isUnsupportedChainView()) {
      ModalController.shake();
      return;
    }
    const isSIWXCloseDisabled = await SIWXUtil.isSIWXCloseDisabled();
    if (isSIWXCloseDisabled) {
      ModalController.shake();
      return;
    }
    if (RouterController.state.view === "DataCapture" || RouterController.state.view === "DataCaptureOtpConfirm") {
      ConnectionController.disconnect();
    }
    ModalController.close();
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OnRampController.js
var USDC_CURRENCY_DEFAULT = {
  id: "2b92315d-eab7-5bef-84fa-089a131333f5",
  name: "USD Coin",
  symbol: "USDC",
  networks: [
    {
      name: "ethereum-mainnet",
      display_name: "Ethereum",
      chain_id: "1",
      contract_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
    },
    {
      name: "polygon-mainnet",
      display_name: "Polygon",
      chain_id: "137",
      contract_address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
    }
  ]
};
var USD_CURRENCY_DEFAULT = {
  id: "USD",
  payment_method_limits: [
    {
      id: "card",
      min: "10.00",
      max: "7500.00"
    },
    {
      id: "ach_bank_account",
      min: "10.00",
      max: "25000.00"
    }
  ]
};
var defaultState = {
  providers: ONRAMP_PROVIDERS,
  selectedProvider: null,
  error: null,
  purchaseCurrency: USDC_CURRENCY_DEFAULT,
  paymentCurrency: USD_CURRENCY_DEFAULT,
  purchaseCurrencies: [USDC_CURRENCY_DEFAULT],
  paymentCurrencies: [],
  quotesLoading: false
};
var state20 = proxy(defaultState);
var controller13 = {
  state: state20,
  subscribe(callback) {
    return subscribe(state20, () => callback(state20));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state20, key, callback);
  },
  setSelectedProvider(provider) {
    var _a2, _b;
    if (provider && provider.name === "meld") {
      const activeChain = ChainController.state.activeChain;
      const currency = activeChain === ConstantsUtil.CHAIN.SOLANA ? "SOL" : "USDC";
      const address = activeChain ? ((_b = (_a2 = ChainController.state.chains.get(activeChain)) == null ? void 0 : _a2.accountState) == null ? void 0 : _b.address) ?? "" : "";
      const url = new URL(provider.url);
      url.searchParams.append("publicKey", MELD_PUBLIC_KEY);
      url.searchParams.append("destinationCurrencyCode", currency);
      url.searchParams.append("walletAddress", address);
      url.searchParams.append("externalCustomerId", OptionsController.state.projectId);
      state20.selectedProvider = { ...provider, url: url.toString() };
    } else {
      state20.selectedProvider = provider;
    }
  },
  setOnrampProviders(providers) {
    if (Array.isArray(providers) && providers.every((item) => typeof item === "string")) {
      const validOnramp = providers;
      const newProviders = ONRAMP_PROVIDERS.filter((provider) => validOnramp.includes(provider.name));
      state20.providers = newProviders;
    } else {
      state20.providers = [];
    }
  },
  setPurchaseCurrency(currency) {
    state20.purchaseCurrency = currency;
  },
  setPaymentCurrency(currency) {
    state20.paymentCurrency = currency;
  },
  setPurchaseAmount(amount) {
    OnRampController.state.purchaseAmount = amount;
  },
  setPaymentAmount(amount) {
    OnRampController.state.paymentAmount = amount;
  },
  async getAvailableCurrencies() {
    const options = await BlockchainApiController.getOnrampOptions();
    state20.purchaseCurrencies = options.purchaseCurrencies;
    state20.paymentCurrencies = options.paymentCurrencies;
    state20.paymentCurrency = options.paymentCurrencies[0] || USD_CURRENCY_DEFAULT;
    state20.purchaseCurrency = options.purchaseCurrencies[0] || USDC_CURRENCY_DEFAULT;
    await ApiController.fetchCurrencyImages(options.paymentCurrencies.map((currency) => currency.id));
    await ApiController.fetchTokenImages(options.purchaseCurrencies.map((currency) => currency.symbol));
  },
  async getQuote() {
    var _a2, _b;
    state20.quotesLoading = true;
    try {
      const quote = await BlockchainApiController.getOnrampQuote({
        purchaseCurrency: state20.purchaseCurrency,
        paymentCurrency: state20.paymentCurrency,
        amount: ((_a2 = state20.paymentAmount) == null ? void 0 : _a2.toString()) || "0",
        network: (_b = state20.purchaseCurrency) == null ? void 0 : _b.symbol
      });
      state20.quotesLoading = false;
      state20.purchaseAmount = Number(quote == null ? void 0 : quote.purchaseAmount.amount);
      return quote;
    } catch (error) {
      state20.error = error.message;
      state20.quotesLoading = false;
      return null;
    } finally {
      state20.quotesLoading = false;
    }
  },
  resetState() {
    state20.selectedProvider = null;
    state20.error = null;
    state20.purchaseCurrency = USDC_CURRENCY_DEFAULT;
    state20.paymentCurrency = USD_CURRENCY_DEFAULT;
    state20.purchaseCurrencies = [USDC_CURRENCY_DEFAULT];
    state20.paymentCurrencies = [];
    state20.paymentAmount = void 0;
    state20.purchaseAmount = void 0;
    state20.quotesLoading = false;
  }
};
var OnRampController = withErrorBoundary(controller13);

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/SwapCalculationUtil.js
var SwapCalculationUtil = {
  getGasPriceInEther(gas, gasPrice) {
    const totalGasCostInWei = gasPrice * gas;
    const totalGasCostInEther = Number(totalGasCostInWei) / 1e18;
    return totalGasCostInEther;
  },
  getGasPriceInUSD(networkPrice, gas, gasPrice) {
    const totalGasCostInEther = SwapCalculationUtil.getGasPriceInEther(gas, gasPrice);
    const networkPriceInUSD = NumberUtil.bigNumber(networkPrice);
    const gasCostInUSD = networkPriceInUSD.times(totalGasCostInEther);
    return gasCostInUSD.toNumber();
  },
  getPriceImpact({ sourceTokenAmount, sourceTokenPriceInUSD, toTokenPriceInUSD, toTokenAmount }) {
    const inputValue = NumberUtil.bigNumber(sourceTokenAmount).times(sourceTokenPriceInUSD);
    const outputValue = NumberUtil.bigNumber(toTokenAmount).times(toTokenPriceInUSD);
    const priceImpact = inputValue.minus(outputValue).div(inputValue).times(100);
    return priceImpact.toNumber();
  },
  getMaxSlippage(slippage, toTokenAmount) {
    const slippageToleranceDecimal = NumberUtil.bigNumber(slippage).div(100);
    const maxSlippageAmount = NumberUtil.multiply(toTokenAmount, slippageToleranceDecimal);
    return maxSlippageAmount.toNumber();
  },
  getProviderFee(sourceTokenAmount, feePercentage = 85e-4) {
    const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(feePercentage);
    return providerFee.toString();
  },
  isInsufficientNetworkTokenForGas(networkBalanceInUSD, gasPriceInUSD) {
    const gasPrice = gasPriceInUSD || "0";
    if (NumberUtil.bigNumber(networkBalanceInUSD).eq(0)) {
      return true;
    }
    return NumberUtil.bigNumber(NumberUtil.bigNumber(gasPrice)).gt(networkBalanceInUSD);
  },
  isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, balance) {
    var _a2, _b;
    const sourceTokenBalance = (_b = (_a2 = balance == null ? void 0 : balance.find((token) => token.address === sourceTokenAddress)) == null ? void 0 : _a2.quantity) == null ? void 0 : _b.numeric;
    const isInSufficientBalance = NumberUtil.bigNumber(sourceTokenBalance || "0").lt(sourceTokenAmount);
    return isInSufficientBalance;
  },
  getToTokenAmount({ sourceToken, toToken, sourceTokenPrice, toTokenPrice, sourceTokenAmount }) {
    if (sourceTokenAmount === "0") {
      return "0";
    }
    if (!sourceToken || !toToken) {
      return "0";
    }
    const sourceTokenDecimals = sourceToken.decimals;
    const sourceTokenPriceInUSD = sourceTokenPrice;
    const toTokenDecimals = toToken.decimals;
    const toTokenPriceInUSD = toTokenPrice;
    if (toTokenPriceInUSD <= 0) {
      return "0";
    }
    const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(85e-4);
    const adjustedSourceTokenAmount = NumberUtil.bigNumber(sourceTokenAmount).minus(providerFee);
    const sourceAmountInSmallestUnit = adjustedSourceTokenAmount.times(NumberUtil.bigNumber(10).pow(sourceTokenDecimals));
    const priceRatio = NumberUtil.bigNumber(sourceTokenPriceInUSD).div(toTokenPriceInUSD);
    const decimalDifference = sourceTokenDecimals - toTokenDecimals;
    const toTokenAmountInSmallestUnit = sourceAmountInSmallestUnit.times(priceRatio).div(NumberUtil.bigNumber(10).pow(decimalDifference));
    const toTokenAmount = toTokenAmountInSmallestUnit.div(NumberUtil.bigNumber(10).pow(toTokenDecimals));
    const amount = toTokenAmount.toFixed(toTokenDecimals).toString();
    return amount;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SwapController.js
var INITIAL_GAS_LIMIT = 15e4;
var TO_AMOUNT_DECIMALS = 6;
var initialState = {
  // Loading states
  initializing: false,
  initialized: false,
  loadingPrices: false,
  loadingQuote: false,
  loadingApprovalTransaction: false,
  loadingBuildTransaction: false,
  loadingTransaction: false,
  // Error states
  fetchError: false,
  // Approval & Swap transaction states
  approvalTransaction: void 0,
  swapTransaction: void 0,
  transactionError: void 0,
  // Input values
  sourceToken: void 0,
  sourceTokenAmount: "",
  sourceTokenPriceInUSD: 0,
  toToken: void 0,
  toTokenAmount: "",
  toTokenPriceInUSD: 0,
  networkPrice: "0",
  networkBalanceInUSD: "0",
  networkTokenSymbol: "",
  inputError: void 0,
  // Request values
  slippage: ConstantsUtil2.CONVERT_SLIPPAGE_TOLERANCE,
  // Tokens
  tokens: void 0,
  popularTokens: void 0,
  suggestedTokens: void 0,
  foundTokens: void 0,
  myTokensWithBalance: void 0,
  tokensPriceMap: {},
  // Calculations
  gasFee: "0",
  gasPriceInUSD: 0,
  priceImpact: void 0,
  maxSlippage: void 0,
  providerFee: void 0
};
var state21 = proxy(initialState);
var controller14 = {
  state: state21,
  subscribe(callback) {
    return subscribe(state21, () => callback(state21));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state21, key, callback);
  },
  getParams() {
    var _a2, _b, _c2, _d, _e6, _f2, _g, _h;
    const caipAddress = ChainController.state.activeCaipAddress;
    const address = CoreHelperUtil.getPlainAddress(caipAddress);
    const networkAddress = getActiveNetworkTokenAddress();
    const connectorId = ConnectorController.getConnectorId(ChainController.state.activeChain);
    if (!address) {
      throw new Error("No address found to swap the tokens from.");
    }
    const invalidToToken = !((_a2 = state21.toToken) == null ? void 0 : _a2.address) || !((_b = state21.toToken) == null ? void 0 : _b.decimals);
    const invalidSourceToken = !((_c2 = state21.sourceToken) == null ? void 0 : _c2.address) || !((_d = state21.sourceToken) == null ? void 0 : _d.decimals) || !NumberUtil.bigNumber(state21.sourceTokenAmount).gt(0);
    const invalidSourceTokenAmount = !state21.sourceTokenAmount;
    return {
      networkAddress,
      fromAddress: address,
      fromCaipAddress: caipAddress,
      sourceTokenAddress: (_e6 = state21.sourceToken) == null ? void 0 : _e6.address,
      toTokenAddress: (_f2 = state21.toToken) == null ? void 0 : _f2.address,
      toTokenAmount: state21.toTokenAmount,
      toTokenDecimals: (_g = state21.toToken) == null ? void 0 : _g.decimals,
      sourceTokenAmount: state21.sourceTokenAmount,
      sourceTokenDecimals: (_h = state21.sourceToken) == null ? void 0 : _h.decimals,
      invalidToToken,
      invalidSourceToken,
      invalidSourceTokenAmount,
      availableToSwap: caipAddress && !invalidToToken && !invalidSourceToken && !invalidSourceTokenAmount,
      isAuthConnector: connectorId === ConstantsUtil.CONNECTOR_ID.AUTH
    };
  },
  setSourceToken(sourceToken) {
    if (!sourceToken) {
      state21.sourceToken = sourceToken;
      state21.sourceTokenAmount = "";
      state21.sourceTokenPriceInUSD = 0;
      return;
    }
    state21.sourceToken = sourceToken;
    SwapController.setTokenPrice(sourceToken.address, "sourceToken");
  },
  setSourceTokenAmount(amount) {
    state21.sourceTokenAmount = amount;
  },
  setToToken(toToken) {
    if (!toToken) {
      state21.toToken = toToken;
      state21.toTokenAmount = "";
      state21.toTokenPriceInUSD = 0;
      return;
    }
    state21.toToken = toToken;
    SwapController.setTokenPrice(toToken.address, "toToken");
  },
  setToTokenAmount(amount) {
    state21.toTokenAmount = amount ? NumberUtil.formatNumberToLocalString(amount, TO_AMOUNT_DECIMALS) : "";
  },
  async setTokenPrice(address, target) {
    let price = state21.tokensPriceMap[address] || 0;
    if (!price) {
      state21.loadingPrices = true;
      price = await SwapController.getAddressPrice(address);
    }
    if (target === "sourceToken") {
      state21.sourceTokenPriceInUSD = price;
    } else if (target === "toToken") {
      state21.toTokenPriceInUSD = price;
    }
    if (state21.loadingPrices) {
      state21.loadingPrices = false;
    }
    if (SwapController.getParams().availableToSwap) {
      SwapController.swapTokens();
    }
  },
  switchTokens() {
    if (state21.initializing || !state21.initialized) {
      return;
    }
    const newSourceToken = state21.toToken ? { ...state21.toToken } : void 0;
    const newToToken = state21.sourceToken ? { ...state21.sourceToken } : void 0;
    const newSourceTokenAmount = newSourceToken && state21.toTokenAmount === "" ? "1" : state21.toTokenAmount;
    SwapController.setSourceToken(newSourceToken);
    SwapController.setToToken(newToToken);
    SwapController.setSourceTokenAmount(newSourceTokenAmount);
    SwapController.setToTokenAmount("");
    SwapController.swapTokens();
  },
  resetState() {
    state21.myTokensWithBalance = initialState.myTokensWithBalance;
    state21.tokensPriceMap = initialState.tokensPriceMap;
    state21.initialized = initialState.initialized;
    state21.sourceToken = initialState.sourceToken;
    state21.sourceTokenAmount = initialState.sourceTokenAmount;
    state21.sourceTokenPriceInUSD = initialState.sourceTokenPriceInUSD;
    state21.toToken = initialState.toToken;
    state21.toTokenAmount = initialState.toTokenAmount;
    state21.toTokenPriceInUSD = initialState.toTokenPriceInUSD;
    state21.networkPrice = initialState.networkPrice;
    state21.networkTokenSymbol = initialState.networkTokenSymbol;
    state21.networkBalanceInUSD = initialState.networkBalanceInUSD;
    state21.inputError = initialState.inputError;
    state21.myTokensWithBalance = initialState.myTokensWithBalance;
  },
  resetValues() {
    var _a2;
    const { networkAddress } = SwapController.getParams();
    const networkToken = (_a2 = state21.tokens) == null ? void 0 : _a2.find((token) => token.address === networkAddress);
    SwapController.setSourceToken(networkToken);
    SwapController.setToToken(void 0);
  },
  getApprovalLoadingState() {
    return state21.loadingApprovalTransaction;
  },
  clearError() {
    state21.transactionError = void 0;
  },
  async initializeState() {
    if (state21.initializing) {
      return;
    }
    state21.initializing = true;
    if (!state21.initialized) {
      try {
        await SwapController.fetchTokens();
        state21.initialized = true;
      } catch (error) {
        state21.initialized = false;
        SnackController.showError("Failed to initialize swap");
        RouterController.goBack();
      }
    }
    state21.initializing = false;
  },
  async fetchTokens() {
    var _a2;
    const { networkAddress } = SwapController.getParams();
    await SwapController.getTokenList();
    await SwapController.getNetworkTokenPrice();
    await SwapController.getMyTokensWithBalance();
    const networkToken = (_a2 = state21.tokens) == null ? void 0 : _a2.find((token) => token.address === networkAddress);
    if (networkToken) {
      state21.networkTokenSymbol = networkToken.symbol;
      SwapController.setSourceToken(networkToken);
      SwapController.setSourceTokenAmount("0");
    }
  },
  async getTokenList() {
    const tokens = await SwapApiUtil.getTokenList();
    state21.tokens = tokens;
    state21.popularTokens = tokens.sort((aTokenInfo, bTokenInfo) => {
      if (aTokenInfo.symbol < bTokenInfo.symbol) {
        return -1;
      }
      if (aTokenInfo.symbol > bTokenInfo.symbol) {
        return 1;
      }
      return 0;
    });
    state21.suggestedTokens = tokens.filter((token) => {
      if (ConstantsUtil2.SWAP_SUGGESTED_TOKENS.includes(token.symbol)) {
        return true;
      }
      return false;
    }, {});
  },
  async getAddressPrice(address) {
    var _a2, _b;
    const existPrice = state21.tokensPriceMap[address];
    if (existPrice) {
      return existPrice;
    }
    const response = await BlockchainApiController.fetchTokenPrice({
      addresses: [address]
    });
    const fungibles = (response == null ? void 0 : response.fungibles) || [];
    const allTokens = [...state21.tokens || [], ...state21.myTokensWithBalance || []];
    const symbol = (_a2 = allTokens == null ? void 0 : allTokens.find((token) => token.address === address)) == null ? void 0 : _a2.symbol;
    const price = ((_b = fungibles.find((p5) => p5.symbol.toLowerCase() === (symbol == null ? void 0 : symbol.toLowerCase()))) == null ? void 0 : _b.price) || 0;
    const priceAsFloat = parseFloat(price.toString());
    state21.tokensPriceMap[address] = priceAsFloat;
    return priceAsFloat;
  },
  async getNetworkTokenPrice() {
    var _a2;
    const { networkAddress } = SwapController.getParams();
    const response = await BlockchainApiController.fetchTokenPrice({
      addresses: [networkAddress]
    }).catch(() => {
      SnackController.showError("Failed to fetch network token price");
      return { fungibles: [] };
    });
    const token = (_a2 = response.fungibles) == null ? void 0 : _a2[0];
    const price = (token == null ? void 0 : token.price.toString()) || "0";
    state21.tokensPriceMap[networkAddress] = parseFloat(price);
    state21.networkTokenSymbol = (token == null ? void 0 : token.symbol) || "";
    state21.networkPrice = price;
  },
  async getMyTokensWithBalance(forceUpdate) {
    const balances = await BalanceUtil.getMyTokensWithBalance(forceUpdate);
    const swapBalances = SwapApiUtil.mapBalancesToSwapTokens(balances);
    if (!swapBalances) {
      return;
    }
    await SwapController.getInitialGasPrice();
    SwapController.setBalances(swapBalances);
  },
  setBalances(balances) {
    const { networkAddress } = SwapController.getParams();
    const caipNetwork = ChainController.state.activeCaipNetwork;
    if (!caipNetwork) {
      return;
    }
    const networkToken = balances.find((token) => token.address === networkAddress);
    balances.forEach((token) => {
      state21.tokensPriceMap[token.address] = token.price || 0;
    });
    state21.myTokensWithBalance = balances.filter((token) => token.address.startsWith(caipNetwork.caipNetworkId));
    state21.networkBalanceInUSD = networkToken ? NumberUtil.multiply(networkToken.quantity.numeric, networkToken.price).toString() : "0";
  },
  async getInitialGasPrice() {
    var _a2, _b;
    const res = await SwapApiUtil.fetchGasPrice();
    if (!res) {
      return { gasPrice: null, gasPriceInUSD: null };
    }
    switch ((_b = (_a2 = ChainController.state) == null ? void 0 : _a2.activeCaipNetwork) == null ? void 0 : _b.chainNamespace) {
      case ConstantsUtil.CHAIN.SOLANA:
        state21.gasFee = res.standard ?? "0";
        state21.gasPriceInUSD = NumberUtil.multiply(res.standard, state21.networkPrice).div(1e9).toNumber();
        return {
          gasPrice: BigInt(state21.gasFee),
          gasPriceInUSD: Number(state21.gasPriceInUSD)
        };
      case ConstantsUtil.CHAIN.EVM:
      default:
        const value = res.standard ?? "0";
        const gasFee = BigInt(value);
        const gasLimit = BigInt(INITIAL_GAS_LIMIT);
        const gasPrice = SwapCalculationUtil.getGasPriceInUSD(state21.networkPrice, gasLimit, gasFee);
        state21.gasFee = value;
        state21.gasPriceInUSD = gasPrice;
        return { gasPrice: gasFee, gasPriceInUSD: gasPrice };
    }
  },
  // -- Swap -------------------------------------- //
  async swapTokens() {
    var _a2, _b;
    const address = AccountController.state.address;
    const sourceToken = state21.sourceToken;
    const toToken = state21.toToken;
    const haveSourceTokenAmount = NumberUtil.bigNumber(state21.sourceTokenAmount).gt(0);
    if (!haveSourceTokenAmount) {
      SwapController.setToTokenAmount("");
    }
    if (!toToken || !sourceToken || state21.loadingPrices || !haveSourceTokenAmount) {
      return;
    }
    state21.loadingQuote = true;
    const amountDecimal = NumberUtil.bigNumber(state21.sourceTokenAmount).times(10 ** sourceToken.decimals).round(0);
    try {
      const quoteResponse = await BlockchainApiController.fetchSwapQuote({
        userAddress: address,
        from: sourceToken.address,
        to: toToken.address,
        gasPrice: state21.gasFee,
        amount: amountDecimal.toString()
      });
      state21.loadingQuote = false;
      const quoteToAmount = (_b = (_a2 = quoteResponse == null ? void 0 : quoteResponse.quotes) == null ? void 0 : _a2[0]) == null ? void 0 : _b.toAmount;
      if (!quoteToAmount) {
        AlertController.open({
          displayMessage: "Incorrect amount",
          debugMessage: "Please enter a valid amount"
        }, "error");
        return;
      }
      const toTokenAmount = NumberUtil.bigNumber(quoteToAmount).div(10 ** toToken.decimals).toString();
      SwapController.setToTokenAmount(toTokenAmount);
      const isInsufficientToken = SwapController.hasInsufficientToken(state21.sourceTokenAmount, sourceToken.address);
      if (isInsufficientToken) {
        state21.inputError = "Insufficient balance";
      } else {
        state21.inputError = void 0;
        SwapController.setTransactionDetails();
      }
    } catch (error) {
      state21.loadingQuote = false;
      state21.inputError = "Insufficient balance";
    }
  },
  // -- Create Transactions -------------------------------------- //
  async getTransaction() {
    const { fromCaipAddress, availableToSwap } = SwapController.getParams();
    const sourceToken = state21.sourceToken;
    const toToken = state21.toToken;
    if (!fromCaipAddress || !availableToSwap || !sourceToken || !toToken || state21.loadingQuote) {
      return void 0;
    }
    try {
      state21.loadingBuildTransaction = true;
      const hasAllowance = await SwapApiUtil.fetchSwapAllowance({
        userAddress: fromCaipAddress,
        tokenAddress: sourceToken.address,
        sourceTokenAmount: state21.sourceTokenAmount,
        sourceTokenDecimals: sourceToken.decimals
      });
      let transaction = void 0;
      if (hasAllowance) {
        transaction = await SwapController.createSwapTransaction();
      } else {
        transaction = await SwapController.createAllowanceTransaction();
      }
      state21.loadingBuildTransaction = false;
      state21.fetchError = false;
      return transaction;
    } catch (error) {
      RouterController.goBack();
      SnackController.showError("Failed to check allowance");
      state21.loadingBuildTransaction = false;
      state21.approvalTransaction = void 0;
      state21.swapTransaction = void 0;
      state21.fetchError = true;
      return void 0;
    }
  },
  async createAllowanceTransaction() {
    const { fromCaipAddress, sourceTokenAddress, toTokenAddress } = SwapController.getParams();
    if (!fromCaipAddress || !toTokenAddress) {
      return void 0;
    }
    if (!sourceTokenAddress) {
      throw new Error("createAllowanceTransaction - No source token address found.");
    }
    try {
      const response = await BlockchainApiController.generateApproveCalldata({
        from: sourceTokenAddress,
        to: toTokenAddress,
        userAddress: fromCaipAddress
      });
      const address = CoreHelperUtil.getPlainAddress(response.tx.from);
      if (!address) {
        throw new Error("SwapController:createAllowanceTransaction - address is required");
      }
      const transaction = {
        data: response.tx.data,
        to: address,
        gasPrice: BigInt(response.tx.eip155.gasPrice),
        value: BigInt(response.tx.value),
        toAmount: state21.toTokenAmount
      };
      state21.swapTransaction = void 0;
      state21.approvalTransaction = {
        data: transaction.data,
        to: transaction.to,
        gasPrice: transaction.gasPrice,
        value: transaction.value,
        toAmount: transaction.toAmount
      };
      return {
        data: transaction.data,
        to: transaction.to,
        gasPrice: transaction.gasPrice,
        value: transaction.value,
        toAmount: transaction.toAmount
      };
    } catch (error) {
      RouterController.goBack();
      SnackController.showError("Failed to create approval transaction");
      state21.approvalTransaction = void 0;
      state21.swapTransaction = void 0;
      state21.fetchError = true;
      return void 0;
    }
  },
  async createSwapTransaction() {
    var _a2;
    const { networkAddress, fromCaipAddress, sourceTokenAmount } = SwapController.getParams();
    const sourceToken = state21.sourceToken;
    const toToken = state21.toToken;
    if (!fromCaipAddress || !sourceTokenAmount || !sourceToken || !toToken) {
      return void 0;
    }
    const amount = (_a2 = ConnectionController.parseUnits(sourceTokenAmount, sourceToken.decimals)) == null ? void 0 : _a2.toString();
    try {
      const response = await BlockchainApiController.generateSwapCalldata({
        userAddress: fromCaipAddress,
        from: sourceToken.address,
        to: toToken.address,
        amount,
        disableEstimate: true
      });
      const isSourceTokenIsNetworkToken = sourceToken.address === networkAddress;
      const gas = BigInt(response.tx.eip155.gas);
      const gasPrice = BigInt(response.tx.eip155.gasPrice);
      const address = CoreHelperUtil.getPlainAddress(response.tx.to);
      if (!address) {
        throw new Error("SwapController:createSwapTransaction - address is required");
      }
      const transaction = {
        data: response.tx.data,
        to: address,
        gas,
        gasPrice,
        value: isSourceTokenIsNetworkToken ? BigInt(amount ?? "0") : BigInt("0"),
        toAmount: state21.toTokenAmount
      };
      state21.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state21.networkPrice, gas, gasPrice);
      state21.approvalTransaction = void 0;
      state21.swapTransaction = transaction;
      return transaction;
    } catch (error) {
      RouterController.goBack();
      SnackController.showError("Failed to create transaction");
      state21.approvalTransaction = void 0;
      state21.swapTransaction = void 0;
      state21.fetchError = true;
      return void 0;
    }
  },
  onEmbeddedWalletApprovalSuccess() {
    SnackController.showLoading("Approve limit increase in your wallet");
    RouterController.replace("SwapPreview");
  },
  // -- Send Transactions --------------------------------- //
  async sendTransactionForApproval(data) {
    var _a2, _b, _c2;
    const { fromAddress, isAuthConnector } = SwapController.getParams();
    state21.loadingApprovalTransaction = true;
    const approveLimitMessage = `Approve limit increase in your wallet`;
    if (isAuthConnector) {
      RouterController.pushTransactionStack({
        onSuccess: SwapController.onEmbeddedWalletApprovalSuccess
      });
    } else {
      SnackController.showLoading(approveLimitMessage);
    }
    try {
      await ConnectionController.sendTransaction({
        address: fromAddress,
        to: data.to,
        data: data.data,
        value: data.value,
        chainNamespace: ConstantsUtil.CHAIN.EVM
      });
      await SwapController.swapTokens();
      await SwapController.getTransaction();
      state21.approvalTransaction = void 0;
      state21.loadingApprovalTransaction = false;
    } catch (err) {
      const error = err;
      state21.transactionError = error == null ? void 0 : error.displayMessage;
      state21.loadingApprovalTransaction = false;
      SnackController.showError((error == null ? void 0 : error.displayMessage) || "Transaction error");
      EventsController.sendEvent({
        type: "track",
        event: "SWAP_APPROVAL_ERROR",
        properties: {
          message: (error == null ? void 0 : error.displayMessage) || (error == null ? void 0 : error.message) || "Unknown",
          network: ((_a2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _a2.caipNetworkId) || "",
          swapFromToken: ((_b = SwapController.state.sourceToken) == null ? void 0 : _b.symbol) || "",
          swapToToken: ((_c2 = SwapController.state.toToken) == null ? void 0 : _c2.symbol) || "",
          swapFromAmount: SwapController.state.sourceTokenAmount || "",
          swapToAmount: SwapController.state.toTokenAmount || "",
          isSmartAccount: getPreferredAccountType(ConstantsUtil.CHAIN.EVM) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
    }
  },
  async sendTransactionForSwap(data) {
    var _a2, _b, _c2, _d, _e6, _f2, _g, _h, _i3, _j, _k, _l;
    if (!data) {
      return void 0;
    }
    const { fromAddress, toTokenAmount, isAuthConnector } = SwapController.getParams();
    state21.loadingTransaction = true;
    const snackbarPendingMessage = `Swapping ${(_a2 = state21.sourceToken) == null ? void 0 : _a2.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${(_b = state21.toToken) == null ? void 0 : _b.symbol}`;
    const snackbarSuccessMessage = `Swapped ${(_c2 = state21.sourceToken) == null ? void 0 : _c2.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${(_d = state21.toToken) == null ? void 0 : _d.symbol}`;
    if (isAuthConnector) {
      RouterController.pushTransactionStack({
        onSuccess() {
          RouterController.replace("Account");
          SnackController.showLoading(snackbarPendingMessage);
          controller14.resetState();
        }
      });
    } else {
      SnackController.showLoading("Confirm transaction in your wallet");
    }
    try {
      const forceUpdateAddresses = [(_e6 = state21.sourceToken) == null ? void 0 : _e6.address, (_f2 = state21.toToken) == null ? void 0 : _f2.address].join(",");
      const transactionHash = await ConnectionController.sendTransaction({
        address: fromAddress,
        to: data.to,
        data: data.data,
        value: data.value,
        chainNamespace: ConstantsUtil.CHAIN.EVM
      });
      state21.loadingTransaction = false;
      SnackController.showSuccess(snackbarSuccessMessage);
      EventsController.sendEvent({
        type: "track",
        event: "SWAP_SUCCESS",
        properties: {
          network: ((_g = ChainController.state.activeCaipNetwork) == null ? void 0 : _g.caipNetworkId) || "",
          swapFromToken: ((_h = SwapController.state.sourceToken) == null ? void 0 : _h.symbol) || "",
          swapToToken: ((_i3 = SwapController.state.toToken) == null ? void 0 : _i3.symbol) || "",
          swapFromAmount: SwapController.state.sourceTokenAmount || "",
          swapToAmount: SwapController.state.toTokenAmount || "",
          isSmartAccount: getPreferredAccountType(ConstantsUtil.CHAIN.EVM) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
      controller14.resetState();
      if (!isAuthConnector) {
        RouterController.replace("Account");
      }
      controller14.getMyTokensWithBalance(forceUpdateAddresses);
      return transactionHash;
    } catch (err) {
      const error = err;
      state21.transactionError = error == null ? void 0 : error.displayMessage;
      state21.loadingTransaction = false;
      SnackController.showError((error == null ? void 0 : error.displayMessage) || "Transaction error");
      EventsController.sendEvent({
        type: "track",
        event: "SWAP_ERROR",
        properties: {
          message: (error == null ? void 0 : error.displayMessage) || (error == null ? void 0 : error.message) || "Unknown",
          network: ((_j = ChainController.state.activeCaipNetwork) == null ? void 0 : _j.caipNetworkId) || "",
          swapFromToken: ((_k = SwapController.state.sourceToken) == null ? void 0 : _k.symbol) || "",
          swapToToken: ((_l = SwapController.state.toToken) == null ? void 0 : _l.symbol) || "",
          swapFromAmount: SwapController.state.sourceTokenAmount || "",
          swapToAmount: SwapController.state.toTokenAmount || "",
          isSmartAccount: getPreferredAccountType(ConstantsUtil.CHAIN.EVM) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
      return void 0;
    }
  },
  // -- Checks -------------------------------------------- //
  hasInsufficientToken(sourceTokenAmount, sourceTokenAddress) {
    const isInsufficientSourceTokenForSwap = SwapCalculationUtil.isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, state21.myTokensWithBalance);
    return isInsufficientSourceTokenForSwap;
  },
  // -- Calculations -------------------------------------- //
  setTransactionDetails() {
    const { toTokenAddress, toTokenDecimals } = SwapController.getParams();
    if (!toTokenAddress || !toTokenDecimals) {
      return;
    }
    state21.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state21.networkPrice, BigInt(state21.gasFee), BigInt(INITIAL_GAS_LIMIT));
    state21.priceImpact = SwapCalculationUtil.getPriceImpact({
      sourceTokenAmount: state21.sourceTokenAmount,
      sourceTokenPriceInUSD: state21.sourceTokenPriceInUSD,
      toTokenPriceInUSD: state21.toTokenPriceInUSD,
      toTokenAmount: state21.toTokenAmount
    });
    state21.maxSlippage = SwapCalculationUtil.getMaxSlippage(state21.slippage, state21.toTokenAmount);
    state21.providerFee = SwapCalculationUtil.getProviderFee(state21.sourceTokenAmount);
  }
};
var SwapController = withErrorBoundary(controller14);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/TooltipController.js
var state22 = proxy({
  message: "",
  open: false,
  triggerRect: {
    width: 0,
    height: 0,
    top: 0,
    left: 0
  },
  variant: "shade"
});
var controller15 = {
  state: state22,
  subscribe(callback) {
    return subscribe(state22, () => callback(state22));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state22, key, callback);
  },
  showTooltip({ message, triggerRect, variant }) {
    state22.open = true;
    state22.message = message;
    state22.triggerRect = triggerRect;
    state22.variant = variant;
  },
  hide() {
    state22.open = false;
    state22.message = "";
    state22.triggerRect = {
      width: 0,
      height: 0,
      top: 0,
      left: 0
    };
  }
};
var TooltipController = withErrorBoundary(controller15);

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/EnsUtil.js
var SLIP44_MSB = 2147483648;
var EnsUtil = {
  convertEVMChainIdToCoinType(chainId) {
    if (chainId >= SLIP44_MSB) {
      throw new Error("Invalid chainId");
    }
    return (SLIP44_MSB | chainId) >>> 0;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EnsController.js
var state23 = proxy({
  suggestions: [],
  loading: false
});
var controller16 = {
  state: state23,
  subscribe(callback) {
    return subscribe(state23, () => callback(state23));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state23, key, callback);
  },
  async resolveName(name2) {
    var _a2, _b;
    try {
      return await BlockchainApiController.lookupEnsName(name2);
    } catch (e2) {
      const error = e2;
      throw new Error(((_b = (_a2 = error == null ? void 0 : error.reasons) == null ? void 0 : _a2[0]) == null ? void 0 : _b.description) || "Error resolving name");
    }
  },
  async isNameRegistered(name2) {
    try {
      await BlockchainApiController.lookupEnsName(name2);
      return true;
    } catch {
      return false;
    }
  },
  async getSuggestions(value) {
    try {
      state23.loading = true;
      state23.suggestions = [];
      const response = await BlockchainApiController.getEnsNameSuggestions(value);
      state23.suggestions = response.suggestions.map((suggestion) => ({
        ...suggestion,
        name: suggestion.name
      })) || [];
      return state23.suggestions;
    } catch (e2) {
      const errorMessage = EnsController.parseEnsApiError(e2, "Error fetching name suggestions");
      throw new Error(errorMessage);
    } finally {
      state23.loading = false;
    }
  },
  async getNamesForAddress(address) {
    try {
      const network = ChainController.state.activeCaipNetwork;
      if (!network) {
        return [];
      }
      const cachedEns = StorageUtil.getEnsFromCacheForAddress(address);
      if (cachedEns) {
        return cachedEns;
      }
      const response = await BlockchainApiController.reverseLookupEnsName({ address });
      StorageUtil.updateEnsCache({
        address,
        ens: response,
        timestamp: Date.now()
      });
      return response;
    } catch (e2) {
      const errorMessage = EnsController.parseEnsApiError(e2, "Error fetching names for address");
      throw new Error(errorMessage);
    }
  },
  async registerName(name2) {
    const network = ChainController.state.activeCaipNetwork;
    const address = AccountController.state.address;
    const emailConnector = ConnectorController.getAuthConnector();
    if (!network) {
      throw new Error("Network not found");
    }
    if (!address || !emailConnector) {
      throw new Error("Address or auth connector not found");
    }
    state23.loading = true;
    try {
      const message = JSON.stringify({
        name: name2,
        attributes: {},
        // Unix timestamp
        timestamp: Math.floor(Date.now() / 1e3)
      });
      RouterController.pushTransactionStack({
        onCancel() {
          RouterController.replace("RegisterAccountName");
        }
      });
      const signature = await ConnectionController.signMessage(message);
      state23.loading = false;
      const networkId = network.id;
      if (!networkId) {
        throw new Error("Network not found");
      }
      const coinType = EnsUtil.convertEVMChainIdToCoinType(Number(networkId));
      await BlockchainApiController.registerEnsName({
        coinType,
        address,
        signature,
        message
      });
      AccountController.setProfileName(name2, network.chainNamespace);
      RouterController.replace("RegisterAccountNameSuccess");
    } catch (e2) {
      const errorMessage = EnsController.parseEnsApiError(e2, `Error registering name ${name2}`);
      RouterController.replace("RegisterAccountName");
      throw new Error(errorMessage);
    } finally {
      state23.loading = false;
    }
  },
  validateName(name2) {
    return /^[a-zA-Z0-9-]{4,}$/u.test(name2);
  },
  parseEnsApiError(error, defaultError) {
    var _a2, _b;
    const ensError = error;
    return ((_b = (_a2 = ensError == null ? void 0 : ensError.reasons) == null ? void 0 : _a2[0]) == null ? void 0 : _b.description) || defaultError;
  }
};
var EnsController = withErrorBoundary(controller16);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsStateController.js
var state24 = proxy({
  isLegalCheckboxChecked: false
});

// node_modules/@reown/appkit-ui/dist/esm/src/utils/ThemeUtil.js
var themeTag = void 0;
var darkModeTag = void 0;
var lightModeTag = void 0;
function initializeTheming(themeVariables, themeMode) {
  themeTag = document.createElement("style");
  darkModeTag = document.createElement("style");
  lightModeTag = document.createElement("style");
  themeTag.textContent = createRootStyles(themeVariables).core.cssText;
  darkModeTag.textContent = createRootStyles(themeVariables).dark.cssText;
  lightModeTag.textContent = createRootStyles(themeVariables).light.cssText;
  document.head.appendChild(themeTag);
  document.head.appendChild(darkModeTag);
  document.head.appendChild(lightModeTag);
  setColorTheme(themeMode);
}
function setColorTheme(themeMode) {
  if (darkModeTag && lightModeTag) {
    if (themeMode === "light") {
      darkModeTag.removeAttribute("media");
      lightModeTag.media = "enabled";
    } else {
      lightModeTag.removeAttribute("media");
      darkModeTag.media = "enabled";
    }
  }
}
function setThemeVariables(themeVariables) {
  if (themeTag && darkModeTag && lightModeTag) {
    themeTag.textContent = createRootStyles(themeVariables).core.cssText;
    darkModeTag.textContent = createRootStyles(themeVariables).dark.cssText;
    lightModeTag.textContent = createRootStyles(themeVariables).light.cssText;
  }
}
function createRootStyles(themeVariables) {
  return {
    core: css`
      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
      @keyframes w3m-shake {
        0% {
          transform: scale(1) rotate(0deg);
        }
        20% {
          transform: scale(1) rotate(-1deg);
        }
        40% {
          transform: scale(1) rotate(1.5deg);
        }
        60% {
          transform: scale(1) rotate(-1.5deg);
        }
        80% {
          transform: scale(1) rotate(1deg);
        }
        100% {
          transform: scale(1) rotate(0deg);
        }
      }
      @keyframes w3m-iframe-fade-out {
        0% {
          opacity: 1;
        }
        100% {
          opacity: 0;
        }
      }
      @keyframes w3m-iframe-zoom-in {
        0% {
          transform: translateY(50px);
          opacity: 0;
        }
        100% {
          transform: translateY(0px);
          opacity: 1;
        }
      }
      @keyframes w3m-iframe-zoom-in-mobile {
        0% {
          transform: scale(0.95);
          opacity: 0;
        }
        100% {
          transform: scale(1);
          opacity: 1;
        }
      }
      :root {
        --w3m-modal-width: 360px;
        --w3m-color-mix-strength: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-color-mix-strength"]) ? `${themeVariables["--w3m-color-mix-strength"]}%` : "0%")};
        --w3m-font-family: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-font-family"]) || "Inter, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;")};
        --w3m-font-size-master: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-font-size-master"]) || "10px")};
        --w3m-border-radius-master: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-border-radius-master"]) || "4px")};
        --w3m-z-index: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-z-index"]) || 999)};

        --wui-font-family: var(--w3m-font-family);

        --wui-font-size-mini: calc(var(--w3m-font-size-master) * 0.8);
        --wui-font-size-micro: var(--w3m-font-size-master);
        --wui-font-size-tiny: calc(var(--w3m-font-size-master) * 1.2);
        --wui-font-size-small: calc(var(--w3m-font-size-master) * 1.4);
        --wui-font-size-paragraph: calc(var(--w3m-font-size-master) * 1.6);
        --wui-font-size-medium: calc(var(--w3m-font-size-master) * 1.8);
        --wui-font-size-large: calc(var(--w3m-font-size-master) * 2);
        --wui-font-size-title-6: calc(var(--w3m-font-size-master) * 2.2);
        --wui-font-size-medium-title: calc(var(--w3m-font-size-master) * 2.4);
        --wui-font-size-2xl: calc(var(--w3m-font-size-master) * 4);

        --wui-border-radius-5xs: var(--w3m-border-radius-master);
        --wui-border-radius-4xs: calc(var(--w3m-border-radius-master) * 1.5);
        --wui-border-radius-3xs: calc(var(--w3m-border-radius-master) * 2);
        --wui-border-radius-xxs: calc(var(--w3m-border-radius-master) * 3);
        --wui-border-radius-xs: calc(var(--w3m-border-radius-master) * 4);
        --wui-border-radius-s: calc(var(--w3m-border-radius-master) * 5);
        --wui-border-radius-m: calc(var(--w3m-border-radius-master) * 7);
        --wui-border-radius-l: calc(var(--w3m-border-radius-master) * 9);
        --wui-border-radius-3xl: calc(var(--w3m-border-radius-master) * 20);

        --wui-font-weight-light: 400;
        --wui-font-weight-regular: 500;
        --wui-font-weight-medium: 600;
        --wui-font-weight-bold: 700;

        --wui-letter-spacing-2xl: -1.6px;
        --wui-letter-spacing-medium-title: -0.96px;
        --wui-letter-spacing-title-6: -0.88px;
        --wui-letter-spacing-large: -0.8px;
        --wui-letter-spacing-medium: -0.72px;
        --wui-letter-spacing-paragraph: -0.64px;
        --wui-letter-spacing-small: -0.56px;
        --wui-letter-spacing-tiny: -0.48px;
        --wui-letter-spacing-micro: -0.2px;
        --wui-letter-spacing-mini: -0.16px;

        --wui-spacing-0: 0px;
        --wui-spacing-4xs: 2px;
        --wui-spacing-3xs: 4px;
        --wui-spacing-xxs: 6px;
        --wui-spacing-2xs: 7px;
        --wui-spacing-xs: 8px;
        --wui-spacing-1xs: 10px;
        --wui-spacing-s: 12px;
        --wui-spacing-m: 14px;
        --wui-spacing-l: 16px;
        --wui-spacing-2l: 18px;
        --wui-spacing-xl: 20px;
        --wui-spacing-xxl: 24px;
        --wui-spacing-2xl: 32px;
        --wui-spacing-3xl: 40px;
        --wui-spacing-4xl: 90px;
        --wui-spacing-5xl: 95px;

        --wui-icon-box-size-xxs: 14px;
        --wui-icon-box-size-xs: 20px;
        --wui-icon-box-size-sm: 24px;
        --wui-icon-box-size-md: 32px;
        --wui-icon-box-size-mdl: 36px;
        --wui-icon-box-size-lg: 40px;
        --wui-icon-box-size-2lg: 48px;
        --wui-icon-box-size-xl: 64px;

        --wui-icon-size-inherit: inherit;
        --wui-icon-size-xxs: 10px;
        --wui-icon-size-xs: 12px;
        --wui-icon-size-sm: 14px;
        --wui-icon-size-md: 16px;
        --wui-icon-size-mdl: 18px;
        --wui-icon-size-lg: 20px;
        --wui-icon-size-xl: 24px;
        --wui-icon-size-xxl: 28px;

        --wui-wallet-image-size-inherit: inherit;
        --wui-wallet-image-size-sm: 40px;
        --wui-wallet-image-size-md: 56px;
        --wui-wallet-image-size-lg: 80px;

        --wui-visual-size-size-inherit: inherit;
        --wui-visual-size-sm: 40px;
        --wui-visual-size-md: 55px;
        --wui-visual-size-lg: 80px;

        --wui-box-size-md: 100px;
        --wui-box-size-lg: 120px;

        --wui-ease-out-power-2: cubic-bezier(0, 0, 0.22, 1);
        --wui-ease-out-power-1: cubic-bezier(0, 0, 0.55, 1);

        --wui-ease-in-power-3: cubic-bezier(0.66, 0, 1, 1);
        --wui-ease-in-power-2: cubic-bezier(0.45, 0, 1, 1);
        --wui-ease-in-power-1: cubic-bezier(0.3, 0, 1, 1);

        --wui-ease-inout-power-1: cubic-bezier(0.45, 0, 0.55, 1);

        --wui-duration-lg: 200ms;
        --wui-duration-md: 125ms;
        --wui-duration-sm: 75ms;

        --wui-path-network-sm: path(
          'M15.4 2.1a5.21 5.21 0 0 1 5.2 0l11.61 6.7a5.21 5.21 0 0 1 2.61 4.52v13.4c0 1.87-1 3.59-2.6 4.52l-11.61 6.7c-1.62.93-3.6.93-5.22 0l-11.6-6.7a5.21 5.21 0 0 1-2.61-4.51v-13.4c0-1.87 1-3.6 2.6-4.52L15.4 2.1Z'
        );

        --wui-path-network-md: path(
          'M43.4605 10.7248L28.0485 1.61089C25.5438 0.129705 22.4562 0.129705 19.9515 1.61088L4.53951 10.7248C2.03626 12.2051 0.5 14.9365 0.5 17.886V36.1139C0.5 39.0635 2.03626 41.7949 4.53951 43.2752L19.9515 52.3891C22.4562 53.8703 25.5438 53.8703 28.0485 52.3891L43.4605 43.2752C45.9637 41.7949 47.5 39.0635 47.5 36.114V17.8861C47.5 14.9365 45.9637 12.2051 43.4605 10.7248Z'
        );

        --wui-path-network-lg: path(
          'M78.3244 18.926L50.1808 2.45078C45.7376 -0.150261 40.2624 -0.150262 35.8192 2.45078L7.6756 18.926C3.23322 21.5266 0.5 26.3301 0.5 31.5248V64.4752C0.5 69.6699 3.23322 74.4734 7.6756 77.074L35.8192 93.5492C40.2624 96.1503 45.7376 96.1503 50.1808 93.5492L78.3244 77.074C82.7668 74.4734 85.5 69.6699 85.5 64.4752V31.5248C85.5 26.3301 82.7668 21.5266 78.3244 18.926Z'
        );

        --wui-width-network-sm: 36px;
        --wui-width-network-md: 48px;
        --wui-width-network-lg: 86px;

        --wui-height-network-sm: 40px;
        --wui-height-network-md: 54px;
        --wui-height-network-lg: 96px;

        --wui-icon-size-network-xs: 12px;
        --wui-icon-size-network-sm: 16px;
        --wui-icon-size-network-md: 24px;
        --wui-icon-size-network-lg: 42px;

        --wui-color-inherit: inherit;

        --wui-color-inverse-100: #fff;
        --wui-color-inverse-000: #000;

        --wui-cover: rgba(20, 20, 20, 0.8);

        --wui-color-modal-bg: var(--wui-color-modal-bg-base);

        --wui-color-accent-100: var(--wui-color-accent-base-100);
        --wui-color-accent-090: var(--wui-color-accent-base-090);
        --wui-color-accent-080: var(--wui-color-accent-base-080);

        --wui-color-success-100: var(--wui-color-success-base-100);
        --wui-color-success-125: var(--wui-color-success-base-125);

        --wui-color-warning-100: var(--wui-color-warning-base-100);

        --wui-color-error-100: var(--wui-color-error-base-100);
        --wui-color-error-125: var(--wui-color-error-base-125);

        --wui-color-blue-100: var(--wui-color-blue-base-100);
        --wui-color-blue-90: var(--wui-color-blue-base-90);

        --wui-icon-box-bg-error-100: var(--wui-icon-box-bg-error-base-100);
        --wui-icon-box-bg-blue-100: var(--wui-icon-box-bg-blue-base-100);
        --wui-icon-box-bg-success-100: var(--wui-icon-box-bg-success-base-100);
        --wui-icon-box-bg-inverse-100: var(--wui-icon-box-bg-inverse-base-100);

        --wui-all-wallets-bg-100: var(--wui-all-wallets-bg-100);

        --wui-avatar-border: var(--wui-avatar-border-base);

        --wui-thumbnail-border: var(--wui-thumbnail-border-base);

        --wui-wallet-button-bg: var(--wui-wallet-button-bg-base);

        --wui-box-shadow-blue: var(--wui-color-accent-glass-020);
      }

      @supports (background: color-mix(in srgb, white 50%, black)) {
        :root {
          --wui-color-modal-bg: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-modal-bg-base)
          );

          --wui-box-shadow-blue: color-mix(in srgb, var(--wui-color-accent-100) 20%, transparent);

          --wui-color-accent-100: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 100%,
            transparent
          );
          --wui-color-accent-090: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 90%,
            transparent
          );
          --wui-color-accent-080: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 80%,
            transparent
          );
          --wui-color-accent-glass-090: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 90%,
            transparent
          );
          --wui-color-accent-glass-080: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 80%,
            transparent
          );
          --wui-color-accent-glass-020: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 20%,
            transparent
          );
          --wui-color-accent-glass-015: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 15%,
            transparent
          );
          --wui-color-accent-glass-010: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 10%,
            transparent
          );
          --wui-color-accent-glass-005: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 5%,
            transparent
          );
          --wui-color-accent-002: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 2%,
            transparent
          );

          --wui-color-fg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-100)
          );
          --wui-color-fg-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-125)
          );
          --wui-color-fg-150: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-150)
          );
          --wui-color-fg-175: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-175)
          );
          --wui-color-fg-200: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-200)
          );
          --wui-color-fg-225: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-225)
          );
          --wui-color-fg-250: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-250)
          );
          --wui-color-fg-275: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-275)
          );
          --wui-color-fg-300: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-300)
          );
          --wui-color-fg-325: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-325)
          );
          --wui-color-fg-350: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-350)
          );

          --wui-color-bg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-100)
          );
          --wui-color-bg-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-125)
          );
          --wui-color-bg-150: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-150)
          );
          --wui-color-bg-175: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-175)
          );
          --wui-color-bg-200: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-200)
          );
          --wui-color-bg-225: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-225)
          );
          --wui-color-bg-250: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-250)
          );
          --wui-color-bg-275: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-275)
          );
          --wui-color-bg-300: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-300)
          );
          --wui-color-bg-325: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-325)
          );
          --wui-color-bg-350: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-350)
          );

          --wui-color-success-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-success-base-100)
          );
          --wui-color-success-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-success-base-125)
          );

          --wui-color-warning-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-warning-base-100)
          );

          --wui-color-error-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-error-base-100)
          );
          --wui-color-blue-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-blue-base-100)
          );
          --wui-color-blue-90: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-blue-base-90)
          );
          --wui-color-error-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-error-base-125)
          );

          --wui-icon-box-bg-error-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-error-base-100)
          );
          --wui-icon-box-bg-accent-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-blue-base-100)
          );
          --wui-icon-box-bg-success-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-success-base-100)
          );
          --wui-icon-box-bg-inverse-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-inverse-base-100)
          );

          --wui-all-wallets-bg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-all-wallets-bg-100)
          );

          --wui-avatar-border: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-avatar-border-base)
          );

          --wui-thumbnail-border: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-thumbnail-border-base)
          );

          --wui-wallet-button-bg: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-wallet-button-bg-base)
          );
        }
      }
    `,
    light: css`
      :root {
        --w3m-color-mix: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-color-mix"]) || "#fff")};
        --w3m-accent: ${unsafeCSS(getW3mThemeVariables(themeVariables, "dark")["--w3m-accent"])};
        --w3m-default: #fff;

        --wui-color-modal-bg-base: ${unsafeCSS(getW3mThemeVariables(themeVariables, "dark")["--w3m-background"])};
        --wui-color-accent-base-100: var(--w3m-accent);

        --wui-color-blueberry-100: hsla(230, 100%, 67%, 1);
        --wui-color-blueberry-090: hsla(231, 76%, 61%, 1);
        --wui-color-blueberry-080: hsla(230, 59%, 55%, 1);
        --wui-color-blueberry-050: hsla(231, 100%, 70%, 0.1);

        --wui-color-fg-100: #e4e7e7;
        --wui-color-fg-125: #d0d5d5;
        --wui-color-fg-150: #a8b1b1;
        --wui-color-fg-175: #a8b0b0;
        --wui-color-fg-200: #949e9e;
        --wui-color-fg-225: #868f8f;
        --wui-color-fg-250: #788080;
        --wui-color-fg-275: #788181;
        --wui-color-fg-300: #6e7777;
        --wui-color-fg-325: #9a9a9a;
        --wui-color-fg-350: #363636;

        --wui-color-bg-100: #141414;
        --wui-color-bg-125: #191a1a;
        --wui-color-bg-150: #1e1f1f;
        --wui-color-bg-175: #222525;
        --wui-color-bg-200: #272a2a;
        --wui-color-bg-225: #2c3030;
        --wui-color-bg-250: #313535;
        --wui-color-bg-275: #363b3b;
        --wui-color-bg-300: #3b4040;
        --wui-color-bg-325: #252525;
        --wui-color-bg-350: #ffffff;

        --wui-color-success-base-100: #26d962;
        --wui-color-success-base-125: #30a46b;

        --wui-color-warning-base-100: #f3a13f;

        --wui-color-error-base-100: #f25a67;
        --wui-color-error-base-125: #df4a34;

        --wui-color-blue-base-100: rgba(102, 125, 255, 1);
        --wui-color-blue-base-90: rgba(102, 125, 255, 0.9);

        --wui-color-success-glass-001: rgba(38, 217, 98, 0.01);
        --wui-color-success-glass-002: rgba(38, 217, 98, 0.02);
        --wui-color-success-glass-005: rgba(38, 217, 98, 0.05);
        --wui-color-success-glass-010: rgba(38, 217, 98, 0.1);
        --wui-color-success-glass-015: rgba(38, 217, 98, 0.15);
        --wui-color-success-glass-020: rgba(38, 217, 98, 0.2);
        --wui-color-success-glass-025: rgba(38, 217, 98, 0.25);
        --wui-color-success-glass-030: rgba(38, 217, 98, 0.3);
        --wui-color-success-glass-060: rgba(38, 217, 98, 0.6);
        --wui-color-success-glass-080: rgba(38, 217, 98, 0.8);

        --wui-color-success-glass-reown-020: rgba(48, 164, 107, 0.2);

        --wui-color-warning-glass-reown-020: rgba(243, 161, 63, 0.2);

        --wui-color-error-glass-001: rgba(242, 90, 103, 0.01);
        --wui-color-error-glass-002: rgba(242, 90, 103, 0.02);
        --wui-color-error-glass-005: rgba(242, 90, 103, 0.05);
        --wui-color-error-glass-010: rgba(242, 90, 103, 0.1);
        --wui-color-error-glass-015: rgba(242, 90, 103, 0.15);
        --wui-color-error-glass-020: rgba(242, 90, 103, 0.2);
        --wui-color-error-glass-025: rgba(242, 90, 103, 0.25);
        --wui-color-error-glass-030: rgba(242, 90, 103, 0.3);
        --wui-color-error-glass-060: rgba(242, 90, 103, 0.6);
        --wui-color-error-glass-080: rgba(242, 90, 103, 0.8);

        --wui-color-error-glass-reown-020: rgba(223, 74, 52, 0.2);

        --wui-color-gray-glass-001: rgba(255, 255, 255, 0.01);
        --wui-color-gray-glass-002: rgba(255, 255, 255, 0.02);
        --wui-color-gray-glass-005: rgba(255, 255, 255, 0.05);
        --wui-color-gray-glass-010: rgba(255, 255, 255, 0.1);
        --wui-color-gray-glass-015: rgba(255, 255, 255, 0.15);
        --wui-color-gray-glass-020: rgba(255, 255, 255, 0.2);
        --wui-color-gray-glass-025: rgba(255, 255, 255, 0.25);
        --wui-color-gray-glass-030: rgba(255, 255, 255, 0.3);
        --wui-color-gray-glass-060: rgba(255, 255, 255, 0.6);
        --wui-color-gray-glass-080: rgba(255, 255, 255, 0.8);
        --wui-color-gray-glass-090: rgba(255, 255, 255, 0.9);

        --wui-color-dark-glass-100: rgba(42, 42, 42, 1);

        --wui-icon-box-bg-error-base-100: #3c2426;
        --wui-icon-box-bg-blue-base-100: #20303f;
        --wui-icon-box-bg-success-base-100: #1f3a28;
        --wui-icon-box-bg-inverse-base-100: #243240;

        --wui-all-wallets-bg-100: #222b35;

        --wui-avatar-border-base: #252525;

        --wui-thumbnail-border-base: #252525;

        --wui-wallet-button-bg-base: var(--wui-color-bg-125);

        --w3m-card-embedded-shadow-color: rgb(17 17 18 / 25%);
      }
    `,
    dark: css`
      :root {
        --w3m-color-mix: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-color-mix"]) || "#000")};
        --w3m-accent: ${unsafeCSS(getW3mThemeVariables(themeVariables, "light")["--w3m-accent"])};
        --w3m-default: #000;

        --wui-color-modal-bg-base: ${unsafeCSS(getW3mThemeVariables(themeVariables, "light")["--w3m-background"])};
        --wui-color-accent-base-100: var(--w3m-accent);

        --wui-color-blueberry-100: hsla(231, 100%, 70%, 1);
        --wui-color-blueberry-090: hsla(231, 97%, 72%, 1);
        --wui-color-blueberry-080: hsla(231, 92%, 74%, 1);

        --wui-color-fg-100: #141414;
        --wui-color-fg-125: #2d3131;
        --wui-color-fg-150: #474d4d;
        --wui-color-fg-175: #636d6d;
        --wui-color-fg-200: #798686;
        --wui-color-fg-225: #828f8f;
        --wui-color-fg-250: #8b9797;
        --wui-color-fg-275: #95a0a0;
        --wui-color-fg-300: #9ea9a9;
        --wui-color-fg-325: #9a9a9a;
        --wui-color-fg-350: #d0d0d0;

        --wui-color-bg-100: #ffffff;
        --wui-color-bg-125: #f5fafa;
        --wui-color-bg-150: #f3f8f8;
        --wui-color-bg-175: #eef4f4;
        --wui-color-bg-200: #eaf1f1;
        --wui-color-bg-225: #e5eded;
        --wui-color-bg-250: #e1e9e9;
        --wui-color-bg-275: #dce7e7;
        --wui-color-bg-300: #d8e3e3;
        --wui-color-bg-325: #f3f3f3;
        --wui-color-bg-350: #202020;

        --wui-color-success-base-100: #26b562;
        --wui-color-success-base-125: #30a46b;

        --wui-color-warning-base-100: #f3a13f;

        --wui-color-error-base-100: #f05142;
        --wui-color-error-base-125: #df4a34;

        --wui-color-blue-base-100: rgba(102, 125, 255, 1);
        --wui-color-blue-base-90: rgba(102, 125, 255, 0.9);

        --wui-color-success-glass-001: rgba(38, 181, 98, 0.01);
        --wui-color-success-glass-002: rgba(38, 181, 98, 0.02);
        --wui-color-success-glass-005: rgba(38, 181, 98, 0.05);
        --wui-color-success-glass-010: rgba(38, 181, 98, 0.1);
        --wui-color-success-glass-015: rgba(38, 181, 98, 0.15);
        --wui-color-success-glass-020: rgba(38, 181, 98, 0.2);
        --wui-color-success-glass-025: rgba(38, 181, 98, 0.25);
        --wui-color-success-glass-030: rgba(38, 181, 98, 0.3);
        --wui-color-success-glass-060: rgba(38, 181, 98, 0.6);
        --wui-color-success-glass-080: rgba(38, 181, 98, 0.8);

        --wui-color-success-glass-reown-020: rgba(48, 164, 107, 0.2);

        --wui-color-warning-glass-reown-020: rgba(243, 161, 63, 0.2);

        --wui-color-error-glass-001: rgba(240, 81, 66, 0.01);
        --wui-color-error-glass-002: rgba(240, 81, 66, 0.02);
        --wui-color-error-glass-005: rgba(240, 81, 66, 0.05);
        --wui-color-error-glass-010: rgba(240, 81, 66, 0.1);
        --wui-color-error-glass-015: rgba(240, 81, 66, 0.15);
        --wui-color-error-glass-020: rgba(240, 81, 66, 0.2);
        --wui-color-error-glass-025: rgba(240, 81, 66, 0.25);
        --wui-color-error-glass-030: rgba(240, 81, 66, 0.3);
        --wui-color-error-glass-060: rgba(240, 81, 66, 0.6);
        --wui-color-error-glass-080: rgba(240, 81, 66, 0.8);

        --wui-color-error-glass-reown-020: rgba(223, 74, 52, 0.2);

        --wui-icon-box-bg-error-base-100: #f4dfdd;
        --wui-icon-box-bg-blue-base-100: #d9ecfb;
        --wui-icon-box-bg-success-base-100: #daf0e4;
        --wui-icon-box-bg-inverse-base-100: #dcecfc;

        --wui-all-wallets-bg-100: #e8f1fa;

        --wui-avatar-border-base: #f3f4f4;

        --wui-thumbnail-border-base: #eaefef;

        --wui-wallet-button-bg-base: var(--wui-color-bg-125);

        --wui-color-gray-glass-001: rgba(0, 0, 0, 0.01);
        --wui-color-gray-glass-002: rgba(0, 0, 0, 0.02);
        --wui-color-gray-glass-005: rgba(0, 0, 0, 0.05);
        --wui-color-gray-glass-010: rgba(0, 0, 0, 0.1);
        --wui-color-gray-glass-015: rgba(0, 0, 0, 0.15);
        --wui-color-gray-glass-020: rgba(0, 0, 0, 0.2);
        --wui-color-gray-glass-025: rgba(0, 0, 0, 0.25);
        --wui-color-gray-glass-030: rgba(0, 0, 0, 0.3);
        --wui-color-gray-glass-060: rgba(0, 0, 0, 0.6);
        --wui-color-gray-glass-080: rgba(0, 0, 0, 0.8);
        --wui-color-gray-glass-090: rgba(0, 0, 0, 0.9);

        --wui-color-dark-glass-100: rgba(233, 233, 233, 1);

        --w3m-card-embedded-shadow-color: rgb(224 225 233 / 25%);
      }
    `
  };
}
var resetStyles = css`
  *,
  *::after,
  *::before,
  :host {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-style: normal;
    text-rendering: optimizeSpeed;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    -webkit-tap-highlight-color: transparent;
    font-family: var(--wui-font-family);
    backface-visibility: hidden;
  }
`;
var elementStyles = css`
  button,
  a {
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    transition:
      color var(--wui-duration-lg) var(--wui-ease-out-power-1),
      background-color var(--wui-duration-lg) var(--wui-ease-out-power-1),
      border var(--wui-duration-lg) var(--wui-ease-out-power-1),
      border-radius var(--wui-duration-lg) var(--wui-ease-out-power-1),
      box-shadow var(--wui-duration-lg) var(--wui-ease-out-power-1);
    will-change: background-color, color, border, box-shadow, border-radius;
    outline: none;
    border: none;
    column-gap: var(--wui-spacing-3xs);
    background-color: transparent;
    text-decoration: none;
  }

  wui-flex {
    transition: border-radius var(--wui-duration-lg) var(--wui-ease-out-power-1);
    will-change: border-radius;
  }

  button:disabled > wui-wallet-image,
  button:disabled > wui-all-wallets-image,
  button:disabled > wui-network-image,
  button:disabled > wui-image,
  button:disabled > wui-transaction-visual,
  button:disabled > wui-logo {
    filter: grayscale(1);
  }

  @media (hover: hover) and (pointer: fine) {
    button:hover:enabled {
      background-color: var(--wui-color-gray-glass-005);
    }

    button:active:enabled {
      background-color: var(--wui-color-gray-glass-010);
    }
  }

  button:disabled > wui-icon-box {
    opacity: 0.5;
  }

  input {
    border: none;
    outline: none;
    appearance: none;
  }
`;
var colorStyles = css`
  .wui-color-inherit {
    color: var(--wui-color-inherit);
  }

  .wui-color-accent-100 {
    color: var(--wui-color-accent-100);
  }

  .wui-color-error-100 {
    color: var(--wui-color-error-100);
  }

  .wui-color-blue-100 {
    color: var(--wui-color-blue-100);
  }

  .wui-color-blue-90 {
    color: var(--wui-color-blue-90);
  }

  .wui-color-error-125 {
    color: var(--wui-color-error-125);
  }

  .wui-color-success-100 {
    color: var(--wui-color-success-100);
  }

  .wui-color-success-125 {
    color: var(--wui-color-success-125);
  }

  .wui-color-inverse-100 {
    color: var(--wui-color-inverse-100);
  }

  .wui-color-inverse-000 {
    color: var(--wui-color-inverse-000);
  }

  .wui-color-fg-100 {
    color: var(--wui-color-fg-100);
  }

  .wui-color-fg-200 {
    color: var(--wui-color-fg-200);
  }

  .wui-color-fg-300 {
    color: var(--wui-color-fg-300);
  }

  .wui-color-fg-325 {
    color: var(--wui-color-fg-325);
  }

  .wui-color-fg-350 {
    color: var(--wui-color-fg-350);
  }

  .wui-bg-color-inherit {
    background-color: var(--wui-color-inherit);
  }

  .wui-bg-color-blue-100 {
    background-color: var(--wui-color-accent-100);
  }

  .wui-bg-color-error-100 {
    background-color: var(--wui-color-error-100);
  }

  .wui-bg-color-error-125 {
    background-color: var(--wui-color-error-125);
  }

  .wui-bg-color-success-100 {
    background-color: var(--wui-color-success-100);
  }

  .wui-bg-color-success-125 {
    background-color: var(--wui-color-success-100);
  }

  .wui-bg-color-inverse-100 {
    background-color: var(--wui-color-inverse-100);
  }

  .wui-bg-color-inverse-000 {
    background-color: var(--wui-color-inverse-000);
  }

  .wui-bg-color-fg-100 {
    background-color: var(--wui-color-fg-100);
  }

  .wui-bg-color-fg-200 {
    background-color: var(--wui-color-fg-200);
  }

  .wui-bg-color-fg-300 {
    background-color: var(--wui-color-fg-300);
  }

  .wui-color-fg-325 {
    background-color: var(--wui-color-fg-325);
  }

  .wui-color-fg-350 {
    background-color: var(--wui-color-fg-350);
  }
`;

// node_modules/@reown/appkit-ui/dist/esm/src/utils/UiHelperUtil.js
var UiHelperUtil = {
  getSpacingStyles(spacing, index2) {
    if (Array.isArray(spacing)) {
      return spacing[index2] ? `var(--wui-spacing-${spacing[index2]})` : void 0;
    } else if (typeof spacing === "string") {
      return `var(--wui-spacing-${spacing})`;
    }
    return void 0;
  },
  getFormattedDate(date) {
    return new Intl.DateTimeFormat("en-US", { month: "short", day: "numeric" }).format(date);
  },
  getHostName(url) {
    try {
      const newUrl = new URL(url);
      return newUrl.hostname;
    } catch (error) {
      return "";
    }
  },
  getTruncateString({ string: string2, charsStart, charsEnd, truncate }) {
    if (string2.length <= charsStart + charsEnd) {
      return string2;
    }
    if (truncate === "end") {
      return `${string2.substring(0, charsStart)}...`;
    } else if (truncate === "start") {
      return `...${string2.substring(string2.length - charsEnd)}`;
    }
    return `${string2.substring(0, Math.floor(charsStart))}...${string2.substring(string2.length - Math.floor(charsEnd))}`;
  },
  generateAvatarColors(address) {
    const hash2 = address.toLowerCase().replace(/^0x/iu, "").replace(/[^a-f0-9]/gu, "");
    const baseColor = hash2.substring(0, 6).padEnd(6, "0");
    const rgbColor = this.hexToRgb(baseColor);
    const masterBorderRadius = getComputedStyle(document.documentElement).getPropertyValue("--w3m-border-radius-master");
    const radius = Number(masterBorderRadius == null ? void 0 : masterBorderRadius.replace("px", ""));
    const edge = 100 - 3 * radius;
    const gradientCircle = `${edge}% ${edge}% at 65% 40%`;
    const colors = [];
    for (let i4 = 0; i4 < 5; i4 += 1) {
      const tintedColor = this.tintColor(rgbColor, 0.15 * i4);
      colors.push(`rgb(${tintedColor[0]}, ${tintedColor[1]}, ${tintedColor[2]})`);
    }
    return `
    --local-color-1: ${colors[0]};
    --local-color-2: ${colors[1]};
    --local-color-3: ${colors[2]};
    --local-color-4: ${colors[3]};
    --local-color-5: ${colors[4]};
    --local-radial-circle: ${gradientCircle}
   `;
  },
  hexToRgb(hex2) {
    const bigint = parseInt(hex2, 16);
    const r3 = bigint >> 16 & 255;
    const g4 = bigint >> 8 & 255;
    const b5 = bigint & 255;
    return [r3, g4, b5];
  },
  tintColor(rgb, tint) {
    const [r3, g4, b5] = rgb;
    const tintedR = Math.round(r3 + (255 - r3) * tint);
    const tintedG = Math.round(g4 + (255 - g4) * tint);
    const tintedB = Math.round(b5 + (255 - b5) * tint);
    return [tintedR, tintedG, tintedB];
  },
  isNumber(character) {
    const regex = {
      number: /^[0-9]+$/u
    };
    return regex.number.test(character);
  },
  getColorTheme(theme) {
    var _a2;
    if (theme) {
      return theme;
    } else if (typeof window !== "undefined" && window.matchMedia && typeof window.matchMedia === "function") {
      if ((_a2 = window.matchMedia("(prefers-color-scheme: dark)")) == null ? void 0 : _a2.matches) {
        return "dark";
      }
      return "light";
    }
    return "dark";
  },
  splitBalance(input) {
    const parts = input.split(".");
    if (parts.length === 2) {
      return [parts[0], parts[1]];
    }
    return ["0", "00"];
  },
  roundNumber(number, threshold, fixed) {
    const roundedNumber = number.toString().length >= threshold ? Number(number).toFixed(fixed) : number;
    return roundedNumber;
  },
  formatNumberToLocalString(value, decimals = 2) {
    if (value === void 0) {
      return "0.00";
    }
    if (typeof value === "number") {
      return value.toLocaleString("en-US", {
        maximumFractionDigits: decimals,
        minimumFractionDigits: decimals
      });
    }
    return parseFloat(value).toLocaleString("en-US", {
      maximumFractionDigits: decimals,
      minimumFractionDigits: decimals
    });
  }
};

// node_modules/@reown/appkit-ui/dist/esm/src/utils/WebComponentsUtil.js
function standardCustomElement(tagName, descriptor) {
  const { kind, elements } = descriptor;
  return {
    kind,
    elements,
    finisher(clazz) {
      if (!customElements.get(tagName)) {
        customElements.define(tagName, clazz);
      }
    }
  };
}
function legacyCustomElement(tagName, clazz) {
  if (!customElements.get(tagName)) {
    customElements.define(tagName, clazz);
  }
  return clazz;
}
function customElement(tagName) {
  return function create4(classOrDescriptor) {
    return typeof classOrDescriptor === "function" ? legacyCustomElement(tagName, classOrDescriptor) : standardCustomElement(tagName, classOrDescriptor);
  };
}

// node_modules/@reown/appkit-scaffold-ui/dist/esm/src/utils/ConstantsUtil.js
var ConstantsUtil3 = {
  ACCOUNT_TABS: [{ label: "Tokens" }, { label: "NFTs" }, { label: "Activity" }],
  SECURE_SITE_ORIGIN: (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_ORIGIN"] : void 0) || "https://secure.walletconnect.org",
  VIEW_DIRECTION: {
    Next: "next",
    Prev: "prev"
  },
  DEFAULT_CONNECT_METHOD_ORDER: ["email", "social", "wallet"],
  ANIMATION_DURATIONS: {
    HeaderText: 120,
    ModalHeight: 150,
    ViewTransition: 150
  }
};

export {
  base64,
  k2 as k,
  A,
  esm_default2 as esm_default,
  G4 as G,
  vi3 as vi,
  ConstantsUtil,
  NetworkUtil,
  ParseUtil,
  isSafe,
  proxy,
  subscribe,
  ref,
  subscribeKey,
  ConstantsUtil2,
  StorageUtil,
  CoreHelperUtil,
  OptionsController,
  AssetController,
  AssetUtil,
  AlertController,
  EventsController,
  ApiController,
  RouterController,
  ThemeController,
  ConnectorController,
  getPreferredAccountType,
  ConnectionControllerUtil,
  SnackController,
  ConnectionController,
  PublicStateController,
  SendController,
  ChainController,
  BlockchainApiController,
  toRlp2 as toRlp,
  formatTransaction2 as formatTransaction,
  defineTransaction2 as defineTransaction,
  defineBlock2 as defineBlock,
  sha2567 as sha256,
  formatLog2 as formatLog,
  AccountNotFoundError2 as AccountNotFoundError,
  defineTransactionReceipt2 as defineTransactionReceipt,
  serializeAccessList2 as serializeAccessList,
  serializeTransaction2 as serializeTransaction,
  toYParitySignatureArray2 as toYParitySignatureArray,
  defineChain2 as defineChain,
  fallback2 as fallback,
  http2 as http,
  AccountController,
  ModalController,
  OnRampController,
  TooltipController,
  EnsController,
  SIWXUtil,
  ModalUtil,
  ConstantsUtil3,
  initializeTheming,
  setColorTheme,
  setThemeVariables,
  resetStyles,
  elementStyles,
  colorStyles,
  UiHelperUtil,
  customElement
};
/*! Bundled license information:

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

@scure/base/lib/esm/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@walletconnect/relay-auth/dist/index.es.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@walletconnect/utils/dist/index.es.js:
  (*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) *)

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/modular.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/curve.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/weierstrass.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/_shortw_utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=chunk-OBLB66M2.js.map
