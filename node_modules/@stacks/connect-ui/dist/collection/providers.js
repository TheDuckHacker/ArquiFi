// AUTO REGISTERED PROVIDERS
import { getSelectedProviderId } from "./session";
export const getRegisteredProviders = () => {
    if (typeof window === 'undefined')
        return [];
    const legacyProviders = window.webbtc_stx_providers || [];
    const wbipProviders = window.wbip_providers || [];
    return [...legacyProviders, ...wbipProviders];
};
export const getInstalledProviders = (defaultProviders = []) => {
    if (typeof window === 'undefined')
        return [];
    const registeredProviders = getRegisteredProviders();
    const additionalInstalledProviders = registeredProviders.filter(rp => {
        // already in default providers, don't add again
        if (defaultProviders.find(dp => dp.id === rp.id))
            return false;
        // check if default provider is installed (even if not registered)
        const provider = getProviderFromId(rp.id);
        return !!provider;
    });
    return defaultProviders.concat(additionalInstalledProviders);
};
/**
 * Check if a wallet provider was previously selected via Connect.
 * @returns `true` if a provider was selected, `false` otherwise.
 */
export const isProviderSelected = () => {
    return !!getSelectedProviderId();
};
/**
 * Get the currently selected wallet provider.
 * Note that this will not return the default `window.StacksProvider` object.
 * @returns The wallet provider object, or null if no provider is selected.
 */
export const getProvider = () => {
    const providerId = getSelectedProviderId();
    return getProviderFromId(providerId);
};
export const getProviderFromId = (id) => {
    return id === null || id === void 0 ? void 0 : id.split('.').reduce((acc, part) => acc === null || acc === void 0 ? void 0 : acc[part], window);
};
//# sourceMappingURL=providers.js.map
